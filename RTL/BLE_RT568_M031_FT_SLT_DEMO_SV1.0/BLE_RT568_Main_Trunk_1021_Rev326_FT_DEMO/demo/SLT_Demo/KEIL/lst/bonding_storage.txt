; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\bonding_storage.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\bonding_storage.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\SLT_Demo -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\bonding_storage.crf ..\..\..\source\bonding_storage.c]
                          THUMB

                          AREA ||i.cmd_FlashBond||, CODE, READONLY, ALIGN=2

                  cmd_FlashBond PROC
;;;108    
;;;109    uint8_t* cmd_FlashBond(uint8_t opcode, uint8_t * para_data)
000000  b5fe              PUSH     {r1-r7,lr}
;;;110    {
000002  460c              MOV      r4,r1
000004  4601              MOV      r1,r0
;;;111        Uint8 j;
;;;112        Uint16 x,i,k;
;;;113        Uint32 u32Pattern;
;;;114        Uint16 offsetaddr;
;;;115        Uint16 addr;
;;;116    
;;;117        switch(opcode)
;;;118        {
;;;119        case CMD_FB_INIT_INFO_FLASHBOND:
;;;120            for(j=0; j < NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK; j++)   // j = 0,1
;;;121            {
;;;122                ersINFO_FLASHBOND(j);
;;;123                mark_PID_INFO_FLASHBOND(j);
;;;124            }
;;;125            *para_data = FLH_BND_ERR_CODE_NO_ERR;
;;;126            break;
;;;127    
;;;128        case CMD_FB_INIT_DATA_FLASHBOND:
;;;129            for(j=0; j < NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK; j++)   // j = 0,1
;;;130            {
;;;131                ersDATA_FLASHBOND(j);
;;;132                mark_PID_DATA_FLASHBOND(j);
;;;133            }
;;;134            *para_data = FLH_BND_ERR_CODE_NO_ERR;
;;;135            break;
;;;136    
;;;137        case CMD_FB_CHK_IF_FLASH_INITED:
;;;138            *para_data = FLH_BND_ERR_CODE_FLASH_NOT_INI;
;;;139            for(j=0; j < NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK; j++)   // j = 0,1
;;;140            {
;;;141                for(x=0; x < SIZE_OF_FLASH_PAGE; x=(x+SIZE_OF_INFO_BLK))   // x = 0,64,128,192,256,320,384,448
;;;142                {
;;;143                    k = j;
;;;144                    if(INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PID+x] == (0x00+(k<<3)+(x>>6)))
000006  48fe              LDR      r0,|L1.1024|
000008  2501              MOVS     r5,#1                 ;110
;;;145                    {
;;;146                        if(INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PID+x+1] == INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PID+x])
;;;147                        {
;;;148                            if(INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PID+x] != 0xFF)
;;;149                            {
;;;150                                for(i=(TAB_INFO_FLASHBOND_PBID+x); i<(SIZE_OF_INFO_BLK+x); i++)
;;;151                                {
;;;152                                    if(INFO_FLASHBOND[j][i] != 0xFF)
;;;153                                    {
;;;154                                        break;
;;;155                                    }
;;;156                                }
;;;157                            }
;;;158                            else
;;;159                            {
;;;160                                return para_data; //FLH_BND_ERR_CODE_FLASH_NOT_INI
;;;161                            }
;;;162                        }
;;;163                        else
;;;164                        {
;;;165                            return para_data; //FLH_BND_ERR_CODE_FLASH_NOT_INI
;;;166                        }
;;;167                    }
;;;168                    else
;;;169                    {
;;;170                        return para_data; //FLH_BND_ERR_CODE_FLASH_NOT_INI
;;;171                    }
;;;172                    k = i;
;;;173                    while(k < SIZE_OF_INFO_BLK+x)
;;;174                    {
;;;175                        for(i=(2+2+SMP_PARA_BOND_SIZE+x); i<(SIZE_OF_INFO_BLK+x); i++)
;;;176                        {
;;;177                            if(INFO_FLASHBOND[j][i] != 0xFF)
;;;178                            {
;;;179                                break;
;;;180                            }
;;;181                        }
;;;182                        if(i != SIZE_OF_INFO_BLK+x)
;;;183                        {
;;;184                            return para_data; //FLH_BND_ERR_CODE_FLASH_NOT_INI
;;;185                        }
;;;186                        k=(k+SIZE_OF_INFO_BLK+x);
;;;187                    }
;;;188                    if(i != SIZE_OF_INFO_BLK+x)
;;;189                    {
;;;190                        return para_data; //FLH_BND_ERR_CODE_FLASH_NOT_INI
;;;191                    }
;;;192                }
;;;193            }
;;;194            if(j == NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK)
;;;195            {
;;;196                *para_data = FLH_BND_ERR_CODE_NO_ERR;
;;;197            }
;;;198            break;
;;;199    
;;;200        case CMD_FB_GET_EXST_PBID:
;;;201            *para_data = FLH_BND_ERR_CODE_NO_ERR;
;;;202            k = 0;
;;;203            for(j=0; j < NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK; j++)   // j = 0,1
;;;204            {
;;;205                for(x=0; x < NUM_OF_INFO_BLK_ONE_PAGE; x++)   // x = 0,1,2,3,4,5,6,7
;;;206                {
;;;207                    if((INFO_FLASHBOND[(NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j][(TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_INFO_BLK*(NUM_OF_INFO_BLK_ONE_PAGE-1-x)))] != 0xFF))
;;;208                    {
;;;209                        k = INFO_FLASHBOND[((NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j)][(TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_INFO_BLK*(NUM_OF_INFO_BLK_ONE_PAGE-1-x)))];
;;;210                        i = INFO_FLASHBOND[((NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j)][(TAB_INFO_FLASHBOND_PID+(TAB_FLASH_BONDING_INFO_BLK*(NUM_OF_INFO_BLK_ONE_PAGE-1-x)))];
;;;211                        break;  //FLH_BND_ERR_CODE_NO_ERR
;;;212                    }
;;;213                }
;;;214                if(x != NUM_OF_INFO_BLK_ONE_PAGE)
;;;215                {
;;;216                    if((k&0x0F) == 0)    //slove the issue: cant not erase at connect mode
;;;217                    {
;;;218                        if((INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PBID]) != 0xFF)
;;;219                        {
;;;220                            if((INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PBID]) == (k+1))
;;;221                            {
;;;222                                k = INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PBID];
;;;223                                i = INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PID];
;;;224                            }
;;;225                        }
;;;226                    }
;;;227                    break;//FLH_BND_ERR_CODE_NO_ERR
;;;228                }
;;;229            }
;;;230            if(k == 0)
;;;231            {
;;;232                *para_data = FLH_BND_ERR_CODE_NO_EXST_PBID;
;;;233            }
;;;234            else
;;;235            {
;;;236                *(para_data+TAB_PARA_DATA_PID) = i;
;;;237                *(para_data+TAB_PARA_DATA_PBID) = k;
;;;238            }
;;;239            break;
;;;240    
;;;241        case CMD_FB_GET_NXT_PBID:
;;;242            *para_data = FLH_BND_ERR_CODE_NO_ERR;
;;;243            k = 0;
;;;244            for(j=0; j < NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK; j++)   //j = 0,1
;;;245            {
;;;246                for(x=0; x < NUM_OF_INFO_BLK_ONE_PAGE; x++)   // x = 0,1,2,3,4,5,6,7
;;;247                {
;;;248                    if(INFO_FLASHBOND[(NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j][(TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_INFO_BLK*(7-x)))] != 0xFF)
;;;249                    {
;;;250                        *(para_data+TAB_PARA_DATA_PBID) = INFO_FLASHBOND[((NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j)][(TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_INFO_BLK*(7-x)))]+1;
;;;251                        *(para_data+TAB_PARA_DATA_PID) = INFO_FLASHBOND[((NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j)][(TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_INFO_BLK*(7-x)))]+1;
;;;252                        if(x==0)
;;;253                        {
;;;254                            k = TAB_INFO_FLASHBOND_PBID;
;;;255                        }
;;;256                        else
;;;257                        {
;;;258                            k = TAB_INFO_FLASHBOND_PBID + (TAB_FLASH_BONDING_INFO_BLK*(NUM_OF_INFO_BLK_ONE_PAGE-x));
;;;259                            j = (NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j;
;;;260                        }
;;;261                        break;
;;;262                    }
;;;263                }
;;;264                if(k!=0)
;;;265                {
;;;266                    //erase page
;;;267                    break;
;;;268                }
;;;269            }
;;;270            if(k == 0)
;;;271            {
;;;272                *(para_data+TAB_PARA_DATA_PBID) = 0x01;
;;;273                k = TAB_INFO_FLASHBOND_PBID;
;;;274                j = 0;
;;;275            }
;;;276            if(*(para_data+TAB_PARA_DATA_PBID) == 0)
;;;277            {
;;;278                *(para_data+TAB_PARA_DATA_PBID) = 0x01;
;;;279            }
;;;280            if(INFO_FLASHBOND[j][k] != 0xFF)
;;;281            {
;;;282                *para_data = FLH_BND_ERR_CODE_NO_FREE_PBID;
;;;283            }
;;;284            else
;;;285            {
;;;286                u32Pattern = 0;
;;;287                u32Pattern |= *(para_data+TAB_PARA_DATA_PBID);
;;;288                u32Pattern = (u32Pattern << 8) | *(para_data+TAB_PARA_DATA_PBID);
;;;289                u32Pattern = (u32Pattern << 8) | INFO_FLASHBOND[j][k-TAB_INFO_FLASHBOND_PBID];
;;;290                u32Pattern = (u32Pattern << 8) | INFO_FLASHBOND[j][k-TAB_INFO_FLASHBOND_PBID];
;;;291                flash_program_internal_use(((uint32_t)&INFO_FLASHBOND+((uint16_t)j<<9)+(k-TAB_INFO_FLASHBOND_PBID)), u32Pattern);
;;;292            }
;;;293            break;
;;;294    
;;;295        case CMD_FB_GET_INFO_FLASHBOND_PARA_BOND:
;;;296            *para_data = FLH_BND_ERR_CODE_NO_ERR;
;;;297            for(i=0; i<SIZE_OF_FLASH_PAGE; i=i+SIZE_OF_INFO_BLK)    // i = 0,64,128,192,256,320,384,448
;;;298            {
;;;299                if(INFO_FLASHBOND[(*(para_data+TAB_PARA_DATA_PID)>>3)][(TAB_INFO_FLASHBOND_PBID+i)] == *(para_data+TAB_PARA_DATA_PBID))
;;;300                {
;;;301                    for(j=0; j<SMP_PARA_BOND_SIZE; j++)
;;;302                    {
;;;303                        *(para_data+TAB_PARA_DATA_INI_ADDR+j) = INFO_FLASHBOND[(*(para_data+TAB_PARA_DATA_PID)>>3)][(TAB_INFO_FLASHBOND_INI_ADDR+i+j)];
;;;304                    }
;;;305                    break;
;;;306                }
;;;307            }
;;;308            if(i == SIZE_OF_FLASH_PAGE)
;;;309            {
;;;310                *para_data = FLH_BND_ERR_CODE_PID_DNT_MATCH;
;;;311            }
;;;312            break;
;;;313    
;;;314        case CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START:
;;;315            *para_data = FLH_BND_ERR_CODE_NO_ERR;
;;;316            for(i=0; i<NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK; i++)      // i = 0,1
;;;317            {
;;;318                for(x=0; x < NUM_OF_DAT_GRP_BLK_ONE_PAGE; x++)   // x = 0,1,2,3
;;;319                {
;;;320                    if(DATA_FLASHBOND[(NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK-1)-i][TAB_DATA_FLASHBOND_PBID+(TAB_FLASH_BONDING_DATA_GRP_BLK*((NUM_OF_DAT_GRP_BLK_ONE_PAGE-1)-x))] == *(para_data+TAB_PARA_DATA_PBID))
00000a  4ffe              LDR      r7,|L1.1028|
00000c  000b              MOVS     r3,r1                 ;117
00000e  f7fffffe          BL       __ARM_common_switch8
000012  0b60              DCB      0x0b,0x60
000014  96071320          DCB      0x96,0x07,0x13,0x20
000018  61f1efee          DCB      0x61,0xf1,0xef,0xee
00001c  edec6000          DCB      0xed,0xec,0x60,0x00
000020  2500              MOVS     r5,#0                 ;120
                  |L1.34|
000022  4628              MOV      r0,r5                 ;122
000024  f7fffffe          BL       ersINFO_FLASHBOND
000028  4628              MOV      r0,r5                 ;123
00002a  f7fffffe          BL       mark_PID_INFO_FLASHBOND
00002e  1c6d              ADDS     r5,r5,#1              ;123
000030  b2ed              UXTB     r5,r5                 ;120
000032  2d02              CMP      r5,#2                 ;120
000034  d3f5              BCC      |L1.34|
000036  e00a              B        |L1.78|
000038  2500              MOVS     r5,#0                 ;129
                  |L1.58|
00003a  4628              MOV      r0,r5                 ;131
00003c  f7fffffe          BL       ersDATA_FLASHBOND
000040  4628              MOV      r0,r5                 ;132
000042  f7fffffe          BL       mark_PID_DATA_FLASHBOND
000046  1c6d              ADDS     r5,r5,#1              ;132
000048  b2ed              UXTB     r5,r5                 ;129
00004a  2d02              CMP      r5,#2                 ;129
00004c  d3f5              BCC      |L1.58|
                  |L1.78|
00004e  2000              MOVS     r0,#0                 ;134
000050  e182              B        |L1.856|
000052  7025              STRB     r5,[r4,#0]            ;138
000054  2600              MOVS     r6,#0                 ;139
                  |L1.86|
000056  00f1              LSLS     r1,r6,#3              ;144
000058  9101              STR      r1,[sp,#4]            ;144
00005a  49e9              LDR      r1,|L1.1024|
00005c  2000              MOVS     r0,#0                 ;141
00005e  0272              LSLS     r2,r6,#9              ;144
000060  1853              ADDS     r3,r2,r1              ;144
                  |L1.98|
000062  9901              LDR      r1,[sp,#4]            ;144
000064  0982              LSRS     r2,r0,#6              ;144
000066  188a              ADDS     r2,r1,r2              ;144
000068  5c19              LDRB     r1,[r3,r0]            ;144
00006a  428a              CMP      r2,r1                 ;144
                  |L1.108|
00006c  d131              BNE      |L1.210|
00006e  181a              ADDS     r2,r3,r0              ;146
000070  7852              LDRB     r2,[r2,#1]            ;146
000072  428a              CMP      r2,r1                 ;146
000074  d1fa              BNE      |L1.108|
000076  29ff              CMP      r1,#0xff              ;148
000078  d02b              BEQ      |L1.210|
00007a  1c81              ADDS     r1,r0,#2              ;150
00007c  b28a              UXTH     r2,r1                 ;150
00007e  313e              ADDS     r1,r1,#0x3e           ;150
000080  e004              B        |L1.140|
                  |L1.130|
000082  5c9d              LDRB     r5,[r3,r2]            ;152
000084  2dff              CMP      r5,#0xff              ;152
000086  d103              BNE      |L1.144|
000088  1c52              ADDS     r2,r2,#1              ;152
00008a  b292              UXTH     r2,r2                 ;150
                  |L1.140|
00008c  428a              CMP      r2,r1                 ;150
00008e  d3f8              BCC      |L1.130|
                  |L1.144|
000090  4607              MOV      r7,r0                 ;175
000092  3729              ADDS     r7,r7,#0x29           ;175
000094  4615              MOV      r5,r2                 ;172
000096  46bc              MOV      r12,r7                ;175
000098  e00d              B        |L1.182|
                  |L1.154|
00009a  4662              MOV      r2,r12                ;173
00009c  e003              B        |L1.166|
                  |L1.158|
00009e  5c9f              LDRB     r7,[r3,r2]            ;177
0000a0  2fff              CMP      r7,#0xff              ;177
0000a2  d103              BNE      |L1.172|
0000a4  1c52              ADDS     r2,r2,#1              ;177
                  |L1.166|
0000a6  b292              UXTH     r2,r2                 ;175
0000a8  428a              CMP      r2,r1                 ;175
0000aa  d3f8              BCC      |L1.158|
                  |L1.172|
0000ac  428a              CMP      r2,r1                 ;182
0000ae  d1dd              BNE      |L1.108|
0000b0  182d              ADDS     r5,r5,r0              ;186
0000b2  3540              ADDS     r5,r5,#0x40           ;186
0000b4  b2ad              UXTH     r5,r5                 ;186
                  |L1.182|
0000b6  428d              CMP      r5,r1                 ;173
0000b8  d3ef              BCC      |L1.154|
0000ba  428a              CMP      r2,r1                 ;188
0000bc  d1d6              BNE      |L1.108|
0000be  b288              UXTH     r0,r1                 ;141
0000c0  2101              MOVS     r1,#1                 ;141
0000c2  0249              LSLS     r1,r1,#9              ;141
0000c4  4288              CMP      r0,r1                 ;141
0000c6  d3cc              BCC      |L1.98|
0000c8  1c76              ADDS     r6,r6,#1              ;141
0000ca  b2f6              UXTB     r6,r6                 ;139
0000cc  2e02              CMP      r6,#2                 ;139
0000ce  d3c2              BCC      |L1.86|
0000d0  d0bd              BEQ      |L1.78|
                  |L1.210|
0000d2  e1d5              B        |L1.1152|
0000d4  2100              MOVS     r1,#0                 ;201
0000d6  7021              STRB     r1,[r4,#0]            ;201
0000d8  460b              MOV      r3,r1                 ;202
                  |L1.218|
0000da  2201              MOVS     r2,#1                 ;110
0000dc  1a52              SUBS     r2,r2,r1              ;207
0000de  0257              LSLS     r7,r2,#9              ;207
0000e0  4ac7              LDR      r2,|L1.1024|
0000e2  2000              MOVS     r0,#0                 ;205
0000e4  2507              MOVS     r5,#7                 ;110
0000e6  18ba              ADDS     r2,r7,r2              ;207
                  |L1.232|
0000e8  1a2f              SUBS     r7,r5,r0              ;207
0000ea  01bf              LSLS     r7,r7,#6              ;207
0000ec  19d7              ADDS     r7,r2,r7              ;207
0000ee  78bf              LDRB     r7,[r7,#2]            ;207
0000f0  2fff              CMP      r7,#0xff              ;207
0000f2  d005              BEQ      |L1.256|
0000f4  1a2b              SUBS     r3,r5,r0              ;209
0000f6  019d              LSLS     r5,r3,#6              ;209
0000f8  1953              ADDS     r3,r2,r5              ;209
0000fa  789b              LDRB     r3,[r3,#2]            ;209
0000fc  5d56              LDRB     r6,[r2,r5]            ;210
0000fe  e003              B        |L1.264|
                  |L1.256|
000100  1c40              ADDS     r0,r0,#1              ;211
000102  b280              UXTH     r0,r0                 ;205
000104  2808              CMP      r0,#8                 ;205
000106  d3ef              BCC      |L1.232|
                  |L1.264|
000108  2808              CMP      r0,#8                 ;214
00010a  d00d              BEQ      |L1.296|
00010c  0718              LSLS     r0,r3,#28             ;216
00010e  d10f              BNE      |L1.304|
000110  4abb              LDR      r2,|L1.1024|
000112  0249              LSLS     r1,r1,#9              ;218
000114  1888              ADDS     r0,r1,r2              ;218
000116  7880              LDRB     r0,[r0,#2]            ;218
000118  28ff              CMP      r0,#0xff              ;218
00011a  d009              BEQ      |L1.304|
00011c  1c5d              ADDS     r5,r3,#1              ;220
00011e  42a8              CMP      r0,r5                 ;220
000120  d106              BNE      |L1.304|
000122  4603              MOV      r3,r0                 ;222
000124  5c56              LDRB     r6,[r2,r1]            ;223
000126  e003              B        |L1.304|
                  |L1.296|
000128  1c49              ADDS     r1,r1,#1              ;223
00012a  b2c9              UXTB     r1,r1                 ;203
00012c  2902              CMP      r1,#2                 ;203
00012e  d3d4              BCC      |L1.218|
                  |L1.304|
000130  2b00              CMP      r3,#0                 ;230
000132  d002              BEQ      |L1.314|
000134  7066              STRB     r6,[r4,#1]            ;236
000136  70a3              STRB     r3,[r4,#2]            ;237
000138  e1a2              B        |L1.1152|
                  |L1.314|
00013a  2004              MOVS     r0,#4                 ;232
00013c  e10c              B        |L1.856|
00013e  2100              MOVS     r1,#0                 ;242
000140  7021              STRB     r1,[r4,#0]            ;242
000142  460a              MOV      r2,r1                 ;243
                  |L1.324|
000144  2601              MOVS     r6,#1                 ;110
000146  4bae              LDR      r3,|L1.1024|
000148  1a77              SUBS     r7,r6,r1              ;207
00014a  2000              MOVS     r0,#0                 ;246
00014c  2507              MOVS     r5,#7                 ;110
00014e  027e              LSLS     r6,r7,#9              ;207
000150  18f3              ADDS     r3,r6,r3              ;207
                  |L1.338|
000152  1a2e              SUBS     r6,r5,r0              ;248
000154  01b6              LSLS     r6,r6,#6              ;248
000156  199e              ADDS     r6,r3,r6              ;248
000158  78b6              LDRB     r6,[r6,#2]            ;248
00015a  2eff              CMP      r6,#0xff              ;248
00015c  d013              BEQ      |L1.390|
00015e  1a2a              SUBS     r2,r5,r0              ;250
000160  0192              LSLS     r2,r2,#6              ;250
000162  189a              ADDS     r2,r3,r2              ;250
000164  7893              LDRB     r3,[r2,#2]            ;250
000166  1c5b              ADDS     r3,r3,#1              ;250
000168  70a3              STRB     r3,[r4,#2]            ;250
00016a  7892              LDRB     r2,[r2,#2]            ;251
00016c  1c52              ADDS     r2,r2,#1              ;251
00016e  7062              STRB     r2,[r4,#1]            ;251
000170  2800              CMP      r0,#0                 ;252
000172  d006              BEQ      |L1.386|
000174  2108              MOVS     r1,#8                 ;258
000176  1a08              SUBS     r0,r1,r0              ;258
000178  0180              LSLS     r0,r0,#6              ;258
00017a  1c80              ADDS     r0,r0,#2              ;258
00017c  b282              UXTH     r2,r0                 ;258
00017e  b2f9              UXTB     r1,r7                 ;259
000180  e005              B        |L1.398|
                  |L1.386|
000182  2202              MOVS     r2,#2                 ;254
000184  e005              B        |L1.402|
                  |L1.390|
000186  1c40              ADDS     r0,r0,#1              ;254
000188  b280              UXTH     r0,r0                 ;246
00018a  2808              CMP      r0,#8                 ;246
00018c  d3e1              BCC      |L1.338|
                  |L1.398|
00018e  2a00              CMP      r2,#0                 ;264
000190  d003              BEQ      |L1.410|
                  |L1.402|
000192  78a0              LDRB     r0,[r4,#2]            ;276
000194  2800              CMP      r0,#0                 ;276
000196  d009              BEQ      |L1.428|
000198  e00a              B        |L1.432|
                  |L1.410|
00019a  1c49              ADDS     r1,r1,#1              ;276
00019c  b2c9              UXTB     r1,r1                 ;244
00019e  2902              CMP      r1,#2                 ;244
0001a0  d3d0              BCC      |L1.324|
0001a2  2001              MOVS     r0,#1                 ;272
0001a4  2202              MOVS     r2,#2                 ;273
0001a6  70a0              STRB     r0,[r4,#2]            ;272
0001a8  2100              MOVS     r1,#0                 ;274
0001aa  e001              B        |L1.432|
                  |L1.428|
0001ac  2001              MOVS     r0,#1                 ;278
0001ae  70a0              STRB     r0,[r4,#2]            ;278
                  |L1.432|
0001b0  4893              LDR      r0,|L1.1024|
0001b2  0249              LSLS     r1,r1,#9              ;280
0001b4  1809              ADDS     r1,r1,r0              ;280
0001b6  5c88              LDRB     r0,[r1,r2]            ;280
0001b8  28ff              CMP      r0,#0xff              ;280
0001ba  d001              BEQ      |L1.448|
0001bc  2003              MOVS     r0,#3                 ;282
0001be  e0cb              B        |L1.856|
                  |L1.448|
0001c0  2000              MOVS     r0,#0                 ;286
0001c2  9000              STR      r0,[sp,#0]            ;287
0001c4  78a0              LDRB     r0,[r4,#2]            ;287
0001c6  9000              STR      r0,[sp,#0]            ;288
0001c8  78a3              LDRB     r3,[r4,#2]            ;288
0001ca  0200              LSLS     r0,r0,#8              ;288
0001cc  4318              ORRS     r0,r0,r3              ;288
0001ce  0203              LSLS     r3,r0,#8              ;289
0001d0  188a              ADDS     r2,r1,r2              ;289
0001d2  4610              MOV      r0,r2                 ;289
0001d4  3820              SUBS     r0,r0,#0x20           ;289
0001d6  7f81              LDRB     r1,[r0,#0x1e]         ;289
0001d8  7f80              LDRB     r0,[r0,#0x1e]         ;290
0001da  430b              ORRS     r3,r3,r1              ;289
0001dc  0219              LSLS     r1,r3,#8              ;290
0001de  4301              ORRS     r1,r1,r0              ;290
0001e0  1e90              SUBS     r0,r2,#2              ;290
0001e2  9100              STR      r1,[sp,#0]            ;291
0001e4  f7fffffe          BL       flash_program_internal_use
                  |L1.488|
0001e8  e14a              B        |L1.1152|
0001ea  e0f4              B        |L1.982|
0001ec  e0ad              B        |L1.842|
0001ee  e06a              B        |L1.710|
0001f0  e024              B        |L1.572|
0001f2  e7ff              B        |L1.500|
                  |L1.500|
0001f4  2100              MOVS     r1,#0                 ;296
0001f6  7021              STRB     r1,[r4,#0]            ;296
0001f8  7862              LDRB     r2,[r4,#1]            ;110
0001fa  2301              MOVS     r3,#1                 ;141
0001fc  08d2              LSRS     r2,r2,#3              ;299
0001fe  0252              LSLS     r2,r2,#9              ;299
000200  1812              ADDS     r2,r2,r0              ;299
000202  78a5              LDRB     r5,[r4,#2]            ;110
000204  025b              LSLS     r3,r3,#9              ;141
                  |L1.518|
000206  1856              ADDS     r6,r2,r1              ;299
000208  78b6              LDRB     r6,[r6,#2]            ;299
00020a  42ae              CMP      r6,r5                 ;299
00020c  d10e              BNE      |L1.556|
00020e  2200              MOVS     r2,#0                 ;301
                  |L1.528|
000210  7865              LDRB     r5,[r4,#1]            ;303
000212  188e              ADDS     r6,r1,r2              ;303
000214  08ed              LSRS     r5,r5,#3              ;303
000216  026d              LSLS     r5,r5,#9              ;303
000218  182d              ADDS     r5,r5,r0              ;303
00021a  19ad              ADDS     r5,r5,r6              ;303
00021c  18a6              ADDS     r6,r4,r2              ;303
00021e  1c52              ADDS     r2,r2,#1              ;303
000220  792d              LDRB     r5,[r5,#4]            ;303
000222  b2d2              UXTB     r2,r2                 ;301
000224  70f5              STRB     r5,[r6,#3]            ;303
000226  2a25              CMP      r2,#0x25              ;301
000228  d3f2              BCC      |L1.528|
00022a  e003              B        |L1.564|
                  |L1.556|
00022c  3140              ADDS     r1,r1,#0x40           ;301
00022e  b289              UXTH     r1,r1                 ;297
000230  4299              CMP      r1,r3                 ;297
000232  d3e8              BCC      |L1.518|
                  |L1.564|
000234  4299              CMP      r1,r3                 ;308
000236  d1d7              BNE      |L1.488|
000238  2005              MOVS     r0,#5                 ;310
00023a  e08d              B        |L1.856|
                  |L1.572|
00023c  2000              MOVS     r0,#0                 ;315
00023e  7020              STRB     r0,[r4,#0]            ;315
000240  78a6              LDRB     r6,[r4,#2]            ;110
000242  4601              MOV      r1,r0                 ;316
000244  2203              MOVS     r2,#3                 ;110
                  |L1.582|
000246  2301              MOVS     r3,#1                 ;110
000248  1a5b              SUBS     r3,r3,r1
00024a  2000              MOVS     r0,#0                 ;318
00024c  025b              LSLS     r3,r3,#9
00024e  19db              ADDS     r3,r3,r7
                  |L1.592|
000250  1a15              SUBS     r5,r2,r0
000252  01ed              LSLS     r5,r5,#7
000254  195d              ADDS     r5,r3,r5
000256  78ad              LDRB     r5,[r5,#2]
000258  42b5              CMP      r5,r6
00025a  d003              BEQ      |L1.612|
00025c  1c40              ADDS     r0,r0,#1
00025e  b280              UXTH     r0,r0                 ;318
000260  2804              CMP      r0,#4                 ;318
000262  d3f5              BCC      |L1.592|
                  |L1.612|
;;;321                    {
;;;322                        break;
;;;323                    }
;;;324                }
;;;325                if(x != NUM_OF_DAT_GRP_BLK_ONE_PAGE)
000264  2804              CMP      r0,#4
000266  d103              BNE      |L1.624|
000268  1c49              ADDS     r1,r1,#1
00026a  b289              UXTH     r1,r1                 ;316
00026c  2902              CMP      r1,#2                 ;316
00026e  d3ea              BCC      |L1.582|
                  |L1.624|
;;;326                {
;;;327                    break;
;;;328                }
;;;329            }
;;;330            if(i == NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK)
000270  2902              CMP      r1,#2
000272  d100              BNE      |L1.630|
000274  e761              B        |L1.314|
                  |L1.630|
;;;331            {
;;;332                *para_data = FLH_BND_ERR_CODE_NO_EXST_PBID;
;;;333            }
;;;334            else
;;;335            {
;;;336                i = (NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK-1)-i;
000276  2301              MOVS     r3,#1
000278  1a59              SUBS     r1,r3,r1
00027a  b289              UXTH     r1,r1
;;;337                *(para_data+TAB_PARA_DATA_PID) = (i*NUM_OF_DAT_GRP_BLK_ONE_PAGE)+(NUM_OF_DAT_GRP_BLK_ONE_PAGE-1-x);
00027c  008b              LSLS     r3,r1,#2
00027e  1a12              SUBS     r2,r2,r0
000280  1898              ADDS     r0,r3,r2
000282  7060              STRB     r0,[r4,#1]
;;;338                j = TAB_DATA_FLASHBOND_DAT_START+1;
000284  2005              MOVS     r0,#5
000286  01d2              LSLS     r2,r2,#7              ;320
;;;339                while(j < SIZE_OF_DAT_GRP_BLK)
;;;340                {
;;;341                    if(DATA_FLASHBOND[i][j+(TAB_FLASH_BONDING_DATA_GRP_BLK*((NUM_OF_DAT_GRP_BLK_ONE_PAGE-1)-x))] != 0xFF)
;;;342                    {
;;;343                        k = DATA_FLASHBOND[i][j+(TAB_FLASH_BONDING_DATA_GRP_BLK*((NUM_OF_DAT_GRP_BLK_ONE_PAGE-1)-x))];
;;;344                        j = j+k+2;
;;;345                        if(((k+2)&0x03)!=0)
000288  07c3              LSLS     r3,r0,#31
00028a  2504              MOVS     r5,#4                 ;110
00028c  0249              LSLS     r1,r1,#9              ;341
00028e  19ce              ADDS     r6,r1,r7              ;341
                  |L1.656|
000290  1811              ADDS     r1,r2,r0              ;341
000292  5c71              LDRB     r1,[r6,r1]            ;341
000294  29ff              CMP      r1,#0xff              ;341
000296  d013              BEQ      |L1.704|
000298  1840              ADDS     r0,r0,r1              ;344
00029a  1c80              ADDS     r0,r0,#2              ;344
00029c  078f              LSLS     r7,r1,#30
00029e  b2c0              UXTB     r0,r0                 ;344
0002a0  42df              CMN      r7,r3
0002a2  d005              BEQ      |L1.688|
0002a4  1c89              ADDS     r1,r1,#2
;;;346                        {
;;;347                            j = j + (4-((k+2)&0x03));
0002a6  0789              LSLS     r1,r1,#30
0002a8  0f89              LSRS     r1,r1,#30
0002aa  1a69              SUBS     r1,r5,r1
0002ac  1808              ADDS     r0,r1,r0
0002ae  b2c0              UXTB     r0,r0
                  |L1.688|
0002b0  2880              CMP      r0,#0x80              ;339
0002b2  d3ed              BCC      |L1.656|
                  |L1.692|
;;;348                        }
;;;349                    }
;;;350                    else
;;;351                    {
;;;352                        j--;
;;;353                        break;
;;;354                    }
;;;355                }
;;;356                if(j >= (SIZE_OF_DAT_GRP_BLK-4))
0002b4  287c              CMP      r0,#0x7c
0002b6  d301              BCC      |L1.700|
;;;357                {
;;;358                    *para_data = ERR_CODE_FLH_BND_NO_ENOUGH_REST_SPACE;
0002b8  2106              MOVS     r1,#6
0002ba  7021              STRB     r1,[r4,#0]
                  |L1.700|
;;;359                }
;;;360                *(para_data+TAB_PARA_DATA_DAT_START) = j;
0002bc  70e0              STRB     r0,[r4,#3]
0002be  e0df              B        |L1.1152|
                  |L1.704|
0002c0  1e40              SUBS     r0,r0,#1
0002c2  b2c0              UXTB     r0,r0                 ;352
0002c4  e7f6              B        |L1.692|
                  |L1.710|
;;;361            }
;;;362            break;
;;;363    
;;;364        case CMD_FB_GET_DATA_FLASHBOND_NXT_PBID_DBLK_START:
;;;365            *para_data = FLH_BND_ERR_CODE_NO_ERR;
0002c6  2000              MOVS     r0,#0
0002c8  7020              STRB     r0,[r4,#0]
;;;366            for(i=0; i<NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK; i++)      // i = 0,1
0002ca  4601              MOV      r1,r0
0002cc  2203              MOVS     r2,#3                 ;110
                  |L1.718|
0002ce  1a6b              SUBS     r3,r5,r1              ;320
;;;367            {
;;;368                for(x=0; x < NUM_OF_DAT_GRP_BLK_ONE_PAGE; x++)   // x = 0,1,2,3
0002d0  2000              MOVS     r0,#0
0002d2  025b              LSLS     r3,r3,#9              ;320
0002d4  19db              ADDS     r3,r3,r7              ;320
                  |L1.726|
;;;369                {
;;;370                    if(DATA_FLASHBOND[(NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK-1)-i][TAB_DATA_FLASHBOND_PBID + (TAB_FLASH_BONDING_DATA_GRP_BLK*((NUM_OF_DAT_GRP_BLK_ONE_PAGE-1)-x))] != 0xFF)
0002d6  1a16              SUBS     r6,r2,r0
0002d8  01f6              LSLS     r6,r6,#7
0002da  199e              ADDS     r6,r3,r6
0002dc  78b6              LDRB     r6,[r6,#2]
0002de  2eff              CMP      r6,#0xff
0002e0  d103              BNE      |L1.746|
0002e2  1c40              ADDS     r0,r0,#1
0002e4  b280              UXTH     r0,r0                 ;368
0002e6  2804              CMP      r0,#4                 ;368
0002e8  d3f5              BCC      |L1.726|
                  |L1.746|
;;;371                    {
;;;372                        break;
;;;373                    }
;;;374                }
;;;375                if(x != NUM_OF_DAT_GRP_BLK_ONE_PAGE)
0002ea  2804              CMP      r0,#4
0002ec  d103              BNE      |L1.758|
0002ee  1c49              ADDS     r1,r1,#1
0002f0  b289              UXTH     r1,r1                 ;366
0002f2  2902              CMP      r1,#2                 ;366
0002f4  d3eb              BCC      |L1.718|
                  |L1.758|
;;;376                {
;;;377                    break;
;;;378                }
;;;379            }
;;;380            if(i == NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK)
0002f6  2902              CMP      r1,#2
0002f8  d020              BEQ      |L1.828|
;;;381            {
;;;382                i = 0;
;;;383                x = 0;
;;;384            }
;;;385            else
;;;386            {
;;;387                if(x == 0)
0002fa  2800              CMP      r0,#0
0002fc  d021              BEQ      |L1.834|
;;;388                {
;;;389                    i++;
;;;390                    i = i >> 1;
;;;391                }
;;;392                else
;;;393                {
;;;394                    i = (NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK-1)-i;
0002fe  1a69              SUBS     r1,r5,r1
;;;395                    x = (NUM_OF_DAT_GRP_BLK_ONE_PAGE-x);
000300  2204              MOVS     r2,#4
000302  1a10              SUBS     r0,r2,r0
000304  b289              UXTH     r1,r1                 ;394
000306  b280              UXTH     r0,r0
                  |L1.776|
;;;396                }
;;;397            }
;;;398            *(para_data+TAB_PARA_DATA_PID) = (i*NUM_OF_DAT_GRP_BLK_ONE_PAGE) + x;
000308  008a              LSLS     r2,r1,#2
00030a  1812              ADDS     r2,r2,r0
00030c  7062              STRB     r2,[r4,#1]
;;;399    
;;;400            u32Pattern = 0;
00030e  2200              MOVS     r2,#0
;;;401            u32Pattern |= *(para_data+TAB_PARA_DATA_PBID);
000310  9200              STR      r2,[sp,#0]
000312  78a2              LDRB     r2,[r4,#2]
;;;402            u32Pattern = (u32Pattern << 8) | *(para_data+TAB_PARA_DATA_PBID);
000314  9200              STR      r2,[sp,#0]
000316  78a3              LDRB     r3,[r4,#2]
000318  0212              LSLS     r2,r2,#8
;;;403            u32Pattern = (u32Pattern << 8) | DATA_FLASHBOND[i][TAB_FLASH_BONDING_DATA_GRP_BLK*x];
00031a  0249              LSLS     r1,r1,#9
00031c  431a              ORRS     r2,r2,r3              ;402
00031e  19c9              ADDS     r1,r1,r7
000320  01c0              LSLS     r0,r0,#7
000322  5c0b              LDRB     r3,[r1,r0]
000324  0212              LSLS     r2,r2,#8
000326  4313              ORRS     r3,r3,r2
;;;404            u32Pattern = (u32Pattern << 8) | DATA_FLASHBOND[i][TAB_FLASH_BONDING_DATA_GRP_BLK*x];
000328  5c0a              LDRB     r2,[r1,r0]
00032a  021b              LSLS     r3,r3,#8
00032c  431a              ORRS     r2,r2,r3
;;;405            flash_program_internal_use(((uint32_t)&DATA_FLASHBOND+((uint16_t)i<<9)+TAB_FLASH_BONDING_DATA_GRP_BLK*x), u32Pattern);
00032e  1808              ADDS     r0,r1,r0
000330  4611              MOV      r1,r2
000332  9200              STR      r2,[sp,#0]
000334  f7fffffe          BL       flash_program_internal_use
;;;406            *(para_data+TAB_PARA_DATA_DAT_START) = TAB_DATA_FLASHBOND_DAT_START;
000338  2004              MOVS     r0,#4
;;;407            break;
00033a  e7bf              B        |L1.700|
                  |L1.828|
00033c  2100              MOVS     r1,#0                 ;382
00033e  4608              MOV      r0,r1                 ;383
000340  e7e2              B        |L1.776|
                  |L1.834|
000342  1c49              ADDS     r1,r1,#1              ;383
000344  0409              LSLS     r1,r1,#16             ;389
000346  0c49              LSRS     r1,r1,#17             ;390
000348  e7de              B        |L1.776|
                  |L1.842|
;;;408    
;;;409        case CMD_FB_PSH_DATA_FLASHBOND_EXST_PBID_DBLK:
;;;410            *para_data = FLH_BND_ERR_CODE_NO_ERR;
00034a  2000              MOVS     r0,#0
00034c  7020              STRB     r0,[r4,#0]
;;;411            if(*(para_data+TAB_PARA_DATA_DAT_START) >= (SIZE_OF_DAT_GRP_BLK-4))
00034e  78e0              LDRB     r0,[r4,#3]
000350  4684              MOV      r12,r0
000352  287c              CMP      r0,#0x7c
000354  d302              BCC      |L1.860|
;;;412            {
;;;413                *para_data = ERR_CODE_FLH_BND_NO_ENOUGH_REST_SPACE;
000356  2006              MOVS     r0,#6
                  |L1.856|
000358  7020              STRB     r0,[r4,#0]
00035a  e091              B        |L1.1152|
                  |L1.860|
00035c  7862              LDRB     r2,[r4,#1]            ;110
;;;414            }
;;;415            else
;;;416            {
;;;417                for(x=0; x < NUM_OF_DAT_GRP_BLK_ONE_PAGE; x++)   // x = 0,1,2,3
00035e  2000              MOVS     r0,#0
;;;418                {
;;;419                    if(DATA_FLASHBOND[(*(para_data+TAB_PARA_DATA_PID) >> 2)][TAB_DATA_FLASHBOND_PBID+(TAB_FLASH_BONDING_DATA_GRP_BLK*((NUM_OF_DAT_GRP_BLK_ONE_PAGE-1)-x))] != 0xFF)
000360  0892              LSRS     r2,r2,#2
000362  2103              MOVS     r1,#3                 ;110
000364  0255              LSLS     r5,r2,#9
000366  463b              MOV      r3,r7                 ;320
000368  18ed              ADDS     r5,r5,r3
                  |L1.874|
00036a  1a0e              SUBS     r6,r1,r0
00036c  01f6              LSLS     r6,r6,#7
00036e  19ae              ADDS     r6,r5,r6
000370  78b6              LDRB     r6,[r6,#2]
000372  2eff              CMP      r6,#0xff
000374  d103              BNE      |L1.894|
000376  1c40              ADDS     r0,r0,#1
000378  b280              UXTH     r0,r0                 ;417
00037a  2804              CMP      r0,#4                 ;417
00037c  d3f5              BCC      |L1.874|
                  |L1.894|
;;;420                    {
;;;421                        break;
;;;422                    }
;;;423                }
;;;424                x = NUM_OF_DAT_GRP_BLK_ONE_PAGE-1-x;
00037e  1a08              SUBS     r0,r1,r0
;;;425                addr = (*(para_data+TAB_PARA_DATA_PID) >> 2);
;;;426                offsetaddr = *(para_data+TAB_PARA_DATA_DAT_START)+(TAB_FLASH_BONDING_DATA_GRP_BLK*x);
000380  01c0              LSLS     r0,r0,#7
000382  4460              ADD      r0,r0,r12
000384  b285              UXTH     r5,r0
;;;427    
;;;428                if(((*(para_data+TAB_PARA_DATA_DAT_SIZE)+2)&0x03) != 0)
000386  7960              LDRB     r0,[r4,#5]
000388  2101              MOVS     r1,#1
00038a  0786              LSLS     r6,r0,#30
00038c  07c9              LSLS     r1,r1,#31
00038e  42ce              CMN      r6,r1
000390  d003              BEQ      |L1.922|
000392  1c80              ADDS     r0,r0,#2
;;;429                {
;;;430                    x = (((*(para_data+TAB_PARA_DATA_DAT_SIZE))+2) >> 2) + 1;
000394  0880              LSRS     r0,r0,#2
000396  1c40              ADDS     r0,r0,#1
000398  e001              B        |L1.926|
                  |L1.922|
00039a  1c80              ADDS     r0,r0,#2
;;;431                }
;;;432                else
;;;433                {
;;;434                    x = (*(para_data+TAB_PARA_DATA_DAT_SIZE)+2) >> 2;
00039c  0880              LSRS     r0,r0,#2
                  |L1.926|
;;;435                }
;;;436                i = 0;
00039e  2700              MOVS     r7,#0
;;;437                for(j=0; j<x; j++)
;;;438                {
;;;439                    Knl_MemCpy((Uint8*)(&u32Pattern),(para_data+(TAB_PARA_DATA_DAT_PTR+i)),4);
;;;440                    flash_program_internal_use(((uint32_t)&DATA_FLASHBOND+((uint16_t)addr<<9)+offsetaddr), u32Pattern);
0003a0  9001              STR      r0,[sp,#4]
0003a2  0250              LSLS     r0,r2,#9
0003a4  18c0              ADDS     r0,r0,r3
0003a6  463e              MOV      r6,r7                 ;437
0003a8  9002              STR      r0,[sp,#8]
0003aa  e010              B        |L1.974|
                  |L1.940|
0003ac  19e1              ADDS     r1,r4,r7              ;439
0003ae  2204              MOVS     r2,#4                 ;439
0003b0  4668              MOV      r0,sp                 ;439
0003b2  1d09              ADDS     r1,r1,#4              ;439
0003b4  f7fffffe          BL       Knl_MemCpy
0003b8  9802              LDR      r0,[sp,#8]
0003ba  9900              LDR      r1,[sp,#0]
0003bc  1940              ADDS     r0,r0,r5
0003be  f7fffffe          BL       flash_program_internal_use
0003c2  1d3f              ADDS     r7,r7,#4
;;;441                    i = i+4;
0003c4  1d2d              ADDS     r5,r5,#4
;;;442                    offsetaddr = offsetaddr + 4;
0003c6  1c76              ADDS     r6,r6,#1
0003c8  b2bf              UXTH     r7,r7                 ;441
0003ca  b2ad              UXTH     r5,r5
0003cc  b2f6              UXTB     r6,r6                 ;437
                  |L1.974|
0003ce  9801              LDR      r0,[sp,#4]            ;437
0003d0  4286              CMP      r6,r0                 ;437
0003d2  d3eb              BCC      |L1.940|
0003d4  e054              B        |L1.1152|
                  |L1.982|
;;;443                }
;;;444            }
;;;445            break;
;;;446    
;;;447        case CMD_FB_CHK_IF_FLASHBOND_NEED_TO_ERASE_PAGE:
;;;448            for(j=0; j <NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK; j++)
0003d6  2200              MOVS     r2,#0
                  |L1.984|
;;;449            {
;;;450                for(x=0; x < NUM_OF_INFO_BLK_ONE_PAGE; x++)
0003d8  2100              MOVS     r1,#0
0003da  0253              LSLS     r3,r2,#9              ;144
0003dc  181b              ADDS     r3,r3,r0              ;144
                  |L1.990|
;;;451                {
;;;452                    if(INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_INFO_BLK*x)] == 0xFF)
0003de  018e              LSLS     r6,r1,#6
0003e0  199e              ADDS     r6,r3,r6
0003e2  78b6              LDRB     r6,[r6,#2]
0003e4  2eff              CMP      r6,#0xff
0003e6  d003              BEQ      |L1.1008|
0003e8  1c49              ADDS     r1,r1,#1
0003ea  b289              UXTH     r1,r1                 ;450
0003ec  2908              CMP      r1,#8                 ;450
0003ee  d3f6              BCC      |L1.990|
                  |L1.1008|
;;;453                    {
;;;454                        break;
;;;455                    }
;;;456                }
;;;457                if(x != NUM_OF_INFO_BLK_ONE_PAGE)
0003f0  2908              CMP      r1,#8
0003f2  d010              BEQ      |L1.1046|
;;;458                {
;;;459                    for(x=0; x <NUM_OF_INFO_BLK_ONE_PAGE; x++)
0003f4  2100              MOVS     r1,#0
                  |L1.1014|
;;;460                    {
;;;461                        if(INFO_FLASHBOND[j][TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_INFO_BLK*x)] != 0xFF)
0003f6  018e              LSLS     r6,r1,#6
0003f8  199e              ADDS     r6,r3,r6
0003fa  78b6              LDRB     r6,[r6,#2]
0003fc  2eff              CMP      r6,#0xff
0003fe  e003              B        |L1.1032|
                  |L1.1024|
                          DCD      INFO_FLASHBOND
                  |L1.1028|
                          DCD      DATA_FLASHBOND
                  |L1.1032|
000408  d103              BNE      |L1.1042|
00040a  1c49              ADDS     r1,r1,#1
00040c  b289              UXTH     r1,r1                 ;459
00040e  2908              CMP      r1,#8                 ;459
000410  d3f1              BCC      |L1.1014|
                  |L1.1042|
;;;462                        {
;;;463                            break;
;;;464                        }
;;;465                    }
;;;466                    if(x != NUM_OF_INFO_BLK_ONE_PAGE)
000412  2908              CMP      r1,#8
000414  d103              BNE      |L1.1054|
                  |L1.1046|
000416  1c52              ADDS     r2,r2,#1
000418  b2d2              UXTB     r2,r2                 ;448
00041a  2a02              CMP      r2,#2                 ;448
00041c  d3dc              BCC      |L1.984|
                  |L1.1054|
;;;467                    {
;;;468                        break;
;;;469                    }
;;;470                }
;;;471            }
;;;472            if(j != NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK)
00041e  2a02              CMP      r2,#2
000420  d006              BEQ      |L1.1072|
;;;473            {
;;;474                ersINFO_FLASHBOND((NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j);
000422  1aae              SUBS     r6,r5,r2
000424  b2f0              UXTB     r0,r6
000426  f7fffffe          BL       ersINFO_FLASHBOND
;;;475                mark_PID_INFO_FLASHBOND((NUM_OF_FLASH_PAGE_FOR_BONDING_INFO_BLK-1)-j);
00042a  b2f0              UXTB     r0,r6
00042c  f7fffffe          BL       mark_PID_INFO_FLASHBOND
                  |L1.1072|
;;;476            }
;;;477            for(j=0; j < NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK; j++)   // j = 0,1
000430  2100              MOVS     r1,#0
                  |L1.1074|
;;;478            {
;;;479                for(x=0; x < NUM_OF_DAT_GRP_BLK_ONE_PAGE; x++)   // x = 0,1,2,3
000432  2000              MOVS     r0,#0
000434  024a              LSLS     r2,r1,#9              ;144
;;;480                {
;;;481                    if((DATA_FLASHBOND[j][(TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_DATA_GRP_BLK*x))] == 0xFF))
000436  19d2              ADDS     r2,r2,r7
                  |L1.1080|
000438  01c3              LSLS     r3,r0,#7
00043a  18d3              ADDS     r3,r2,r3
00043c  789b              LDRB     r3,[r3,#2]
00043e  2bff              CMP      r3,#0xff
000440  d003              BEQ      |L1.1098|
000442  1c40              ADDS     r0,r0,#1
000444  b280              UXTH     r0,r0                 ;479
000446  2804              CMP      r0,#4                 ;479
000448  d3f6              BCC      |L1.1080|
                  |L1.1098|
;;;482                    {
;;;483                        break;
;;;484                    }
;;;485                }
;;;486                if(x != NUM_OF_DAT_GRP_BLK_ONE_PAGE)
00044a  2804              CMP      r0,#4
00044c  d00b              BEQ      |L1.1126|
;;;487                {
;;;488                    for(x=0; x < NUM_OF_DAT_GRP_BLK_ONE_PAGE; x++)
00044e  2000              MOVS     r0,#0
                  |L1.1104|
;;;489                    {
;;;490                        if((DATA_FLASHBOND[j][(TAB_INFO_FLASHBOND_PBID+(TAB_FLASH_BONDING_DATA_GRP_BLK*x))] != 0xFF))
000450  01c3              LSLS     r3,r0,#7
000452  18d3              ADDS     r3,r2,r3
000454  789b              LDRB     r3,[r3,#2]
000456  2bff              CMP      r3,#0xff
000458  d103              BNE      |L1.1122|
00045a  1c40              ADDS     r0,r0,#1
00045c  b280              UXTH     r0,r0                 ;488
00045e  2804              CMP      r0,#4                 ;488
000460  d3f6              BCC      |L1.1104|
                  |L1.1122|
;;;491                        {
;;;492                            break;
;;;493                        }
;;;494                    }
;;;495                    if(x != NUM_OF_DAT_GRP_BLK_ONE_PAGE)
000462  2804              CMP      r0,#4
000464  d103              BNE      |L1.1134|
                  |L1.1126|
000466  1c49              ADDS     r1,r1,#1
000468  b2c9              UXTB     r1,r1                 ;477
00046a  2902              CMP      r1,#2                 ;477
00046c  d3e1              BCC      |L1.1074|
                  |L1.1134|
;;;496                    {
;;;497                        break;
;;;498                    }
;;;499                }
;;;500            }
;;;501            if(j != NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK)
00046e  2902              CMP      r1,#2
000470  d006              BEQ      |L1.1152|
;;;502            {
;;;503                ersDATA_FLASHBOND((NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK-1)-j);
000472  1a6d              SUBS     r5,r5,r1
000474  b2e8              UXTB     r0,r5
000476  f7fffffe          BL       ersDATA_FLASHBOND
;;;504                mark_PID_DATA_FLASHBOND((NUM_OF_FLASH_PAGE_FOR_BONDING_DAT_GRP_BLK-1)-j);
00047a  b2e8              UXTB     r0,r5
00047c  f7fffffe          BL       mark_PID_DATA_FLASHBOND
                  |L1.1152|
;;;505            }
;;;506            break;
;;;507    
;;;508        default:
;;;509            break;
;;;510        }
;;;511        return para_data;
000480  4620              MOV      r0,r4
;;;512    }
000482  bdfe              POP      {r1-r7,pc}
;;;513    
                          ENDP


                          AREA ||i.ersDATA_FLASHBOND||, CODE, READONLY, ALIGN=2

                  ersDATA_FLASHBOND PROC
;;;61     /* Function : Erase BLE Bound data space */
;;;62     void ersDATA_FLASHBOND(Uint8 offset)
000000  4903              LDR      r1,|L2.16|
;;;63     {
000002  b510              PUSH     {r4,lr}
;;;64         flash_erase_internal_use((uint32_t)&DATA_FLASHBOND + ((uint16_t)offset << 9));
000004  0240              LSLS     r0,r0,#9
000006  1840              ADDS     r0,r0,r1
000008  f7fffffe          BL       flash_erase_internal_use
;;;65     }
00000c  bd10              POP      {r4,pc}
;;;66     
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      DATA_FLASHBOND

                          AREA ||i.ersINFO_FLASHBOND||, CODE, READONLY, ALIGN=2

                  ersINFO_FLASHBOND PROC
;;;67     /* Function : Erase BLE Bound information space */
;;;68     void ersINFO_FLASHBOND(Uint8 offset)
000000  4903              LDR      r1,|L3.16|
;;;69     {
000002  b510              PUSH     {r4,lr}
;;;70         flash_erase_internal_use((uint32_t)&INFO_FLASHBOND + ((uint16_t)offset << 9));
000004  0240              LSLS     r0,r0,#9
000006  1840              ADDS     r0,r0,r1
000008  f7fffffe          BL       flash_erase_internal_use
;;;71     }
00000c  bd10              POP      {r4,pc}
;;;72     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      INFO_FLASHBOND

                          AREA ||i.fil_DATA_FLASHBONDwEXST_PBID||, CODE, READONLY, ALIGN=2

                  fil_DATA_FLASHBONDwEXST_PBID PROC
;;;576    *********************************************************************/
;;;577    void fil_DATA_FLASHBONDwEXST_PBID(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;578    {
;;;579        uint8_t i, j, k, *tmp;
;;;580        Uint16 x;
;;;581    
;;;582        tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
000002  4925              LDR      r1,|L4.152|
000004  2005              MOVS     r0,#5
000006  f7fffffe          BL       cmd_FlashBond
;;;583        if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
00000a  7800              LDRB     r0,[r0,#0]
00000c  2800              CMP      r0,#0
00000e  d142              BNE      |L4.150|
;;;584        {
;;;585            tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
000010  4921              LDR      r1,|L4.152|
000012  2007              MOVS     r0,#7
000014  f7fffffe          BL       cmd_FlashBond
;;;586            if(*tmp != FLH_BND_ERR_CODE_NO_EXST_PBID)
000018  7801              LDRB     r1,[r0,#0]
00001a  2904              CMP      r1,#4
00001c  d03b              BEQ      |L4.150|
;;;587            {
;;;588                j = TAB_DATA_FLASHBOND_DAT_START+1;
;;;589                x = (((*(tmp+TAB_PARA_DATA_PID))&0x03)<<7);
00001e  7841              LDRB     r1,[r0,#1]
000020  2205              MOVS     r2,#5                 ;588
000022  0789              LSLS     r1,r1,#30
000024  0dc9              LSRS     r1,r1,#23
000026  468c              MOV      r12,r1
;;;590                while(j < *(tmp+TAB_PARA_DATA_DAT_START))
;;;591                {
;;;592                    if(DATA_FLASHBOND[(*(tmp+TAB_PARA_DATA_PID))>>2][j+x] != 0xFF)
000028  4d1c              LDR      r5,|L4.156|
00002a  e031              B        |L4.144|
                  |L4.44|
00002c  7841              LDRB     r1,[r0,#1]
00002e  4663              MOV      r3,r12
000030  0889              LSRS     r1,r1,#2
000032  0249              LSLS     r1,r1,#9
000034  1949              ADDS     r1,r1,r5
000036  18d3              ADDS     r3,r2,r3
000038  5cc9              LDRB     r1,[r1,r3]
00003a  29ff              CMP      r1,#0xff
00003c  d028              BEQ      |L4.144|
;;;593                    {
;;;594                        for(i=0; i<(DATA_FLASHBOND[(*(tmp+TAB_PARA_DATA_PID))>>2][j+x]); i++)
00003e  2100              MOVS     r1,#0
;;;595                        {
;;;596                            *((uint8_t*)*(ATTRIBUTE_SERVER_BOND_PARAM+DATA_FLASHBOND[(*(tmp+TAB_PARA_DATA_PID))>>2][j+x-1])+i) = DATA_FLASHBOND[(*(tmp+TAB_PARA_DATA_PID))>>2][j+x+i+1];
000040  4f17              LDR      r7,|L4.160|
000042  e00a              B        |L4.90|
                  |L4.68|
000044  185e              ADDS     r6,r3,r1
000046  19a6              ADDS     r6,r4,r6
000048  18e4              ADDS     r4,r4,r3
00004a  3c20              SUBS     r4,r4,#0x20
00004c  7fe4              LDRB     r4,[r4,#0x1f]
00004e  7876              LDRB     r6,[r6,#1]
000050  00a4              LSLS     r4,r4,#2
000052  593c              LDR      r4,[r7,r4]
000054  5466              STRB     r6,[r4,r1]
000056  1c49              ADDS     r1,r1,#1
000058  b2c9              UXTB     r1,r1                 ;594
                  |L4.90|
00005a  7844              LDRB     r4,[r0,#1]            ;594
00005c  08a4              LSRS     r4,r4,#2              ;594
00005e  0264              LSLS     r4,r4,#9              ;594
000060  1964              ADDS     r4,r4,r5              ;594
000062  5ce6              LDRB     r6,[r4,r3]            ;594
000064  428e              CMP      r6,r1                 ;594
000066  d8ed              BHI      |L4.68|
;;;597                        }
;;;598                        k = DATA_FLASHBOND[(*(tmp+TAB_PARA_DATA_PID))>>2][j+x];
000068  7841              LDRB     r1,[r0,#1]
;;;599                        j = j+k+2;
;;;600                        if(((k+2)&0x03) != 0)
00006a  2401              MOVS     r4,#1
00006c  0889              LSRS     r1,r1,#2              ;598
00006e  0249              LSLS     r1,r1,#9              ;598
000070  1949              ADDS     r1,r1,r5              ;598
000072  5cc9              LDRB     r1,[r1,r3]            ;598
000074  07e4              LSLS     r4,r4,#31
000076  1852              ADDS     r2,r2,r1              ;599
000078  1c92              ADDS     r2,r2,#2              ;599
00007a  078b              LSLS     r3,r1,#30
00007c  b2d2              UXTB     r2,r2                 ;599
00007e  42e3              CMN      r3,r4
000080  d006              BEQ      |L4.144|
000082  1c89              ADDS     r1,r1,#2
;;;601                        {
;;;602                            j = j + (4 - ((k+2)&0x03));
000084  0789              LSLS     r1,r1,#30
000086  0f89              LSRS     r1,r1,#30
000088  2304              MOVS     r3,#4
00008a  1a59              SUBS     r1,r3,r1
00008c  1889              ADDS     r1,r1,r2
00008e  b2ca              UXTB     r2,r1
                  |L4.144|
000090  78c1              LDRB     r1,[r0,#3]            ;590
000092  4291              CMP      r1,r2                 ;590
000094  d8ca              BHI      |L4.44|
                  |L4.150|
;;;603                        }
;;;604                    }
;;;605                }
;;;606            }
;;;607        }
;;;608    }
000096  bdf8              POP      {r3-r7,pc}
;;;609    #endif
                          ENDP

                  |L4.152|
                          DCD      smp_Para_Bond_tmp
                  |L4.156|
                          DCD      DATA_FLASHBOND
                  |L4.160|
                          DCD      ATTRIBUTE_SERVER_BOND_PARAM

                          AREA ||i.fil_INFO_FLASHBONDwEXST_PBID||, CODE, READONLY, ALIGN=2

                  fil_INFO_FLASHBONDwEXST_PBID PROC
;;;516    *********************************************************************/
;;;517    void fil_INFO_FLASHBONDwEXST_PBID(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;518    {
000002  b085              SUB      sp,sp,#0x14
;;;519        Uint8 i, program_cnt;
;;;520        Uint8 *tmp;
;;;521        Uint16 j, offsetaddr, addr;
;;;522        Uint32 u32Pattern, u32FF;
;;;523    
;;;524        tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
000004  4928              LDR      r1,|L5.168|
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       cmd_FlashBond
;;;525        if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
00000c  7800              LDRB     r0,[r0,#0]
00000e  2800              CMP      r0,#0
000010  d147              BNE      |L5.162|
;;;526        {
;;;527            tmp = cmd_FlashBond(CMD_FB_GET_INFO_FLASHBOND_PARA_BOND, (uint8_t*)smp_Para_Bond_tmp);
000012  4925              LDR      r1,|L5.168|
000014  2006              MOVS     r0,#6
000016  f7fffffe          BL       cmd_FlashBond
00001a  4604              MOV      r4,r0
;;;528            if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
00001c  7800              LDRB     r0,[r0,#0]
00001e  2800              CMP      r0,#0
000020  d13f              BNE      |L5.162|
;;;529            {
;;;530                if(Knl_MemComp((Uint8*)&smp_Para_Bond,(tmp+TAB_PARA_DATA_INI_ADDR),SMP_PARA_BOND_SIZE))
000022  2225              MOVS     r2,#0x25
000024  1ce1              ADDS     r1,r4,#3
000026  4821              LDR      r0,|L5.172|
000028  f7fffffe          BL       Knl_MemComp
00002c  2800              CMP      r0,#0
00002e  d038              BEQ      |L5.162|
;;;531                {
;;;532                    for(i=0; i<NUM_OF_INFO_BLK_ONE_PAGE; i++)
;;;533                    {
;;;534                        if(INFO_FLASHBOND[(*(tmp+TAB_PARA_DATA_PID))>>3][TAB_INFO_FLASHBOND_PBID + (TAB_FLASH_BONDING_INFO_BLK*i)] == *(tmp+TAB_PARA_DATA_PBID))
000030  7860              LDRB     r0,[r4,#1]
000032  491f              LDR      r1,|L5.176|
000034  08c0              LSRS     r0,r0,#3
000036  2200              MOVS     r2,#0                 ;532
000038  0243              LSLS     r3,r0,#9
00003a  78a4              LDRB     r4,[r4,#2]
00003c  185b              ADDS     r3,r3,r1
                  |L5.62|
00003e  0196              LSLS     r6,r2,#6
000040  199e              ADDS     r6,r3,r6
000042  78b6              LDRB     r6,[r6,#2]
000044  42a6              CMP      r6,r4
000046  d102              BNE      |L5.78|
;;;535                        {
;;;536                            j = TAB_INFO_FLASHBOND_INI_ADDR + (TAB_FLASH_BONDING_INFO_BLK*i);
000048  0195              LSLS     r5,r2,#6
00004a  1d2d              ADDS     r5,r5,#4
;;;537                            break;
00004c  e003              B        |L5.86|
                  |L5.78|
00004e  1c52              ADDS     r2,r2,#1
000050  b2d2              UXTB     r2,r2                 ;532
000052  2a08              CMP      r2,#8                 ;532
000054  d3f3              BCC      |L5.62|
                  |L5.86|
;;;538                        }
;;;539                    }
;;;540    
;;;541                    if((SMP_PARA_BOND_SIZE&0x03) != 0)      // divider 4; flash program = 4bytes
;;;542                    {
;;;543                        program_cnt = (SMP_PARA_BOND_SIZE >> 2) + 1;
000056  270a              MOVS     r7,#0xa
;;;544                    }
;;;545                    else
;;;546                    {
;;;547                        program_cnt = (SMP_PARA_BOND_SIZE >> 2);
;;;548                    }
;;;549    
;;;550                    addr = (*(tmp+TAB_PARA_DATA_PID))>>3;
;;;551                    offsetaddr = j;
;;;552    
;;;553                    i = 0;
000058  2600              MOVS     r6,#0
;;;554                    for(j=0; j<program_cnt; j++)
;;;555                    {
;;;556                        Knl_MemCpy((Uint8*)(&u32Pattern),(Uint8*)&smp_Para_Bond[i],4);
;;;557                        if(j==(program_cnt-1))
00005a  1e7a              SUBS     r2,r7,#1
;;;558                        {
;;;559                            if((SMP_PARA_BOND_SIZE&0x03) != 0)
;;;560                            {
;;;561                                u32FF = 0xFFFFFFFF;  //flash erase value
;;;562                                Knl_MemCpyInv((Uint8*)(&u32Pattern)+(SMP_PARA_BOND_SIZE&0x03),(Uint8*)&u32FF,(4-(SMP_PARA_BOND_SIZE&0x03)));
;;;563                            }
;;;564                        }
;;;565                        flash_program_internal_use(((uint32_t)&INFO_FLASHBOND+((uint16_t)addr<<9)+offsetaddr), u32Pattern);
00005c  0240              LSLS     r0,r0,#9
00005e  1840              ADDS     r0,r0,r1
000060  4634              MOV      r4,r6                 ;554
000062  9203              STR      r2,[sp,#0xc]
000064  9002              STR      r0,[sp,#8]
                  |L5.102|
000066  4811              LDR      r0,|L5.172|
000068  2204              MOVS     r2,#4                 ;556
00006a  1981              ADDS     r1,r0,r6              ;556
00006c  4668              MOV      r0,sp                 ;556
00006e  f7fffffe          BL       Knl_MemCpy
000072  9803              LDR      r0,[sp,#0xc]          ;557
000074  4284              CMP      r4,r0                 ;557
000076  d107              BNE      |L5.136|
000078  2000              MOVS     r0,#0                 ;561
00007a  43c0              MVNS     r0,r0                 ;561
00007c  a901              ADD      r1,sp,#4              ;562
00007e  9001              STR      r0,[sp,#4]            ;562
000080  2203              MOVS     r2,#3                 ;562
000082  1ec8              SUBS     r0,r1,#3              ;562
000084  f7fffffe          BL       Knl_MemCpyInv
                  |L5.136|
000088  9802              LDR      r0,[sp,#8]
00008a  9900              LDR      r1,[sp,#0]
00008c  1940              ADDS     r0,r0,r5
00008e  f7fffffe          BL       flash_program_internal_use
000092  1d36              ADDS     r6,r6,#4
;;;566                        i = i + 4;
000094  1d2d              ADDS     r5,r5,#4
;;;567                        offsetaddr = offsetaddr + 4;
000096  1c64              ADDS     r4,r4,#1
000098  b2a4              UXTH     r4,r4                 ;554
00009a  b2f6              UXTB     r6,r6                 ;566
00009c  b2ad              UXTH     r5,r5
00009e  42bc              CMP      r4,r7                 ;554
0000a0  d3e1              BCC      |L5.102|
                  |L5.162|
;;;568                    }
;;;569                }
;;;570            }
;;;571        }
;;;572    }
0000a2  b005              ADD      sp,sp,#0x14
0000a4  bdf0              POP      {r4-r7,pc}
;;;573    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L5.168|
                          DCD      smp_Para_Bond_tmp
                  |L5.172|
                          DCD      smp_Para_Bond
                  |L5.176|
                          DCD      INFO_FLASHBOND

                          AREA ||i.mark_PID_DATA_FLASHBOND||, CODE, READONLY, ALIGN=2

                  mark_PID_DATA_FLASHBOND PROC
;;;91     /* Function : Mark PID to BLE Bound data space */
;;;92     void mark_PID_DATA_FLASHBOND(Uint8 offset)
000000  b5f8              PUSH     {r3-r7,lr}
;;;93     {
;;;94         uint16_t i, j;
;;;95         uint32_t u32Pattern;
;;;96     
;;;97         j = offset*NUM_OF_DAT_GRP_BLK_ONE_PAGE;
000002  0084              LSLS     r4,r0,#2
;;;98     
;;;99         for(i=0; i<SIZE_OF_FLASH_PAGE; i=i+SIZE_OF_DAT_GRP_BLK)
;;;100        {
;;;101            u32Pattern = 0xFFFF0000;
;;;102            u32Pattern |= (j);
;;;103            u32Pattern |= (j<<8);
;;;104            flash_program_internal_use(((uint32_t)&DATA_FLASHBOND + ((uint16_t)offset << 9)+ i), u32Pattern);
000004  490b              LDR      r1,|L6.52|
000006  2500              MOVS     r5,#0                 ;99
000008  4f09              LDR      r7,|L6.48|
00000a  0240              LSLS     r0,r0,#9
00000c  1846              ADDS     r6,r0,r1
                  |L6.14|
00000e  4638              MOV      r0,r7                 ;101
000010  4320              ORRS     r0,r0,r4              ;102
000012  0221              LSLS     r1,r4,#8              ;103
000014  4301              ORRS     r1,r1,r0              ;103
000016  1970              ADDS     r0,r6,r5
000018  f7fffffe          BL       flash_program_internal_use
00001c  1c64              ADDS     r4,r4,#1
;;;105            j++;
00001e  3580              ADDS     r5,r5,#0x80
000020  2001              MOVS     r0,#1                 ;99
000022  b2ad              UXTH     r5,r5                 ;99
000024  0240              LSLS     r0,r0,#9              ;99
000026  b2a4              UXTH     r4,r4
000028  4285              CMP      r5,r0                 ;99
00002a  d3f0              BCC      |L6.14|
;;;106        }
;;;107    }
00002c  bdf8              POP      {r3-r7,pc}
;;;108    
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      0xffff0000
                  |L6.52|
                          DCD      DATA_FLASHBOND

                          AREA ||i.mark_PID_INFO_FLASHBOND||, CODE, READONLY, ALIGN=2

                  mark_PID_INFO_FLASHBOND PROC
;;;73     /* Function : Mark PID to BLE Bound information space */
;;;74     void mark_PID_INFO_FLASHBOND(Uint8 offset)
000000  b5f8              PUSH     {r3-r7,lr}
;;;75     {
;;;76         uint16_t i, j;
;;;77         uint32_t u32Pattern;
;;;78     
;;;79         j = offset*NUM_OF_INFO_BLK_ONE_PAGE;
000002  00c4              LSLS     r4,r0,#3
;;;80     
;;;81         for(i=0; i<SIZE_OF_FLASH_PAGE; i=i+SIZE_OF_INFO_BLK)
;;;82         {
;;;83             u32Pattern = 0xFFFF0000;
;;;84             u32Pattern |= (j);
;;;85             u32Pattern |= (j<<8);
;;;86             flash_program_internal_use(((uint32_t)&INFO_FLASHBOND + ((uint16_t)offset << 9) + i),u32Pattern);
000004  490b              LDR      r1,|L7.52|
000006  2500              MOVS     r5,#0                 ;81
000008  4f09              LDR      r7,|L7.48|
00000a  0240              LSLS     r0,r0,#9
00000c  1846              ADDS     r6,r0,r1
                  |L7.14|
00000e  4638              MOV      r0,r7                 ;83
000010  4320              ORRS     r0,r0,r4              ;84
000012  0221              LSLS     r1,r4,#8              ;85
000014  4301              ORRS     r1,r1,r0              ;85
000016  1970              ADDS     r0,r6,r5
000018  f7fffffe          BL       flash_program_internal_use
00001c  1c64              ADDS     r4,r4,#1
;;;87             j++;
00001e  3540              ADDS     r5,r5,#0x40
000020  2001              MOVS     r0,#1                 ;81
000022  b2ad              UXTH     r5,r5                 ;81
000024  0240              LSLS     r0,r0,#9              ;81
000026  b2a4              UXTH     r4,r4
000028  4285              CMP      r5,r0                 ;81
00002a  d3f0              BCC      |L7.14|
;;;88         }
;;;89     }
00002c  bdf8              POP      {r3-r7,pc}
;;;90     
                          ENDP

00002e  0000              DCW      0x0000
                  |L7.48|
                          DCD      0xffff0000
                  |L7.52|
                          DCD      INFO_FLASHBOND

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L47.16|
00000e  461d              MOV      r5,r3
                  |L47.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\bonding_storage.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_bonding_storage_c_df2621b7____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_bonding_storage_c_df2621b7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_bonding_storage_c_df2621b7____REVSH|
#line 402
|__asm___17_bonding_storage_c_df2621b7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

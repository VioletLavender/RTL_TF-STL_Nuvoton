; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\user.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\SLT_Demo -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\user.crf ..\user.c]
                          THUMB

                          AREA ||i.App_SetBleAdvAddress||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  App_SetBleAdvAddress PROC
;;;367    
;;;368    static void App_SetBleAdvAddress(uint8_t arg)
000000  b530              PUSH     {r4,r5,lr}
;;;369    {
000002  b087              SUB      sp,sp,#0x1c
;;;370        Uint8 selectedAddrIndex;
;;;371        Uint8 bleAddrSetCmd[TEST_COMMAND_BLEADDR_LEN];
;;;372        BLE_Addr_Param addrParam;
;;;373    
;;;374        // 2. Set BLE Address, transmit BLE address to Golden dongle via UART
;;;375        selectedAddrIndex = (arg & 0x0F);
000004  0704              LSLS     r4,r0,#28
;;;376        addrParam.addrType = PUBLIC_ADDR;
000006  2000              MOVS     r0,#0
000008  4669              MOV      r1,sp
00000a  7408              STRB     r0,[r1,#0x10]
00000c  0f24              LSRS     r4,r4,#28             ;375
;;;377        memcpy(addrParam.addr,bleDefaultAddrTable[selectedAddrIndex],SIZE_BLE_ADDR);
00000e  2006              MOVS     r0,#6
000010  4911              LDR      r1,|L1.88|
000012  4360              MULS     r0,r4,r0
000014  1841              ADDS     r1,r0,r1
000016  ad04              ADD      r5,sp,#0x10
000018  2206              MOVS     r2,#6
00001a  1c68              ADDS     r0,r5,#1
00001c  f7fffffe          BL       __aeabi_memcpy
;;;378        setBLE_BleDeviceAddr(&addrParam);
000020  a804              ADD      r0,sp,#0x10
000022  f7fffffe          BL       setBLE_BleDeviceAddr
;;;379        D_msg("selectedAddrIndex = %d \n",selectedAddrIndex);
000026  4621              MOV      r1,r4
000028  a00c              ADR      r0,|L1.92|
00002a  f7fffffe          BL       __2printf
;;;380    
;;;381        // Send slected peer BLE address to golden
;;;382        // CMD = "BTADDRXXXXXXXXXXXX"
;;;383        memcpy(bleAddrSetCmd,(Uint8 *)TEST_COMMAND_BLEADDR,strlen((char *)TEST_COMMAND_BLEADDR));
00002e  2206              MOVS     r2,#6
000030  a111              ADR      r1,|L1.120|
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       __aeabi_memcpy4
;;;384        memcpy(bleAddrSetCmd+strlen((char *)TEST_COMMAND_BLEADDR),addrParam.addr,SIZE_BLE_ADDR);
000038  a801              ADD      r0,sp,#4
00003a  2206              MOVS     r2,#6
00003c  1c69              ADDS     r1,r5,#1
00003e  3002              ADDS     r0,#2
000040  f7fffffe          BL       __aeabi_memcpy
;;;385        bleAddrSetCmd[TEST_COMMAND_BLEADDR_LEN - 1] = '\n';
000044  200a              MOVS     r0,#0xa
000046  4669              MOV      r1,sp
000048  7308              STRB     r0,[r1,#0xc]
;;;386        UART1_SendData(bleAddrSetCmd,TEST_COMMAND_BLEADDR_LEN);
00004a  210d              MOVS     r1,#0xd
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       UART1_SendData
;;;387    }
000052  b007              ADD      sp,sp,#0x1c
000054  bd30              POP      {r4,r5,pc}
;;;388    
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      ||.constdata||
                  |L1.92|
00005c  73656c65          DCB      "selectedAddrIndex = %d \n",0
000060  63746564
000064  41646472
000068  496e6465
00006c  78203d20
000070  2564200a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L1.120|
000078  42544144          DCB      "BTADDR",0
00007c  445200  
00007f  00                DCB      0

                          AREA ||i.BLEDemo_InitMessage||, CODE, READONLY, ALIGN=2

                  BLEDemo_InitMessage PROC
;;;130    *******************************************************************************/
;;;131    void BLEDemo_InitMessage(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133        D_msg("+====================================================================+\n");
000002  4805              LDR      r0,|L2.24|
000004  f7fffffe          BL       __2printf
;;;134        D_msg("Press 1 to start SLT test.\n");
000008  a004              ADR      r0,|L2.28|
00000a  f7fffffe          BL       __2printf
;;;135        D_msg("+====================================================================+\n");
00000e  4802              LDR      r0,|L2.24|
000010  f7fffffe          BL       __2printf
;;;136    }
000014  bd10              POP      {r4,pc}
;;;137    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      ||.conststring||
                  |L2.28|
00001c  50726573          DCB      "Press 1 to start SLT test.\n",0
000020  73203120
000024  746f2073
000028  74617274
00002c  20534c54
000030  20746573
000034  742e0a00

                          AREA ||i.BLEDemo_UartRxDataHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  BLEDemo_UartRxDataHandler PROC
;;;515    
;;;516    int BLEDemo_UartRxDataHandler(uint8_t *data, uint8_t dataLen)
000000  b508              PUSH     {r3,lr}
;;;517    {
;;;518    
;;;519        if(data[dataLen] == '\r' || data[dataLen] == '\n')
000002  5c41              LDRB     r1,[r0,r1]
000004  290d              CMP      r1,#0xd
000006  d004              BEQ      |L3.18|
000008  290a              CMP      r1,#0xa
00000a  d002              BEQ      |L3.18|
;;;520        {
;;;521            int cmd = 0;
;;;522    
;;;523            sscanf((char *)data,"%d",&cmd);
;;;524    
;;;525            if((cmd == 1) && (sltTestCase == SLT_IDLE))
;;;526            {
;;;527                /* ========================
;;;528                 * Start SLT test
;;;529                 * ======================== */
;;;530                appSystemRequest |= APPREQUEST_SLT_STARTTEST;
;;;531            }
;;;532            return 0;
;;;533        }
;;;534    
;;;535        return -1;
00000c  2000              MOVS     r0,#0
00000e  43c0              MVNS     r0,r0
;;;536    }
000010  bd08              POP      {r3,pc}
                  |L3.18|
000012  2100              MOVS     r1,#0                 ;521
000014  9100              STR      r1,[sp,#0]            ;523
000016  466a              MOV      r2,sp                 ;523
000018  a107              ADR      r1,|L3.56|
00001a  f7fffffe          BL       __0sscanf
00001e  9800              LDR      r0,[sp,#0]            ;525
000020  2801              CMP      r0,#1                 ;525
000022  d107              BNE      |L3.52|
000024  4805              LDR      r0,|L3.60|
000026  7841              LDRB     r1,[r0,#1]            ;525  ; sltTestCase
000028  2901              CMP      r1,#1                 ;525
00002a  d103              BNE      |L3.52|
00002c  7801              LDRB     r1,[r0,#0]            ;530  ; appSystemRequest
00002e  2202              MOVS     r2,#2                 ;530
000030  4311              ORRS     r1,r1,r2              ;530
000032  7001              STRB     r1,[r0,#0]            ;530
                  |L3.52|
000034  2000              MOVS     r0,#0                 ;532
000036  bd08              POP      {r3,pc}
;;;537    
                          ENDP

                  |L3.56|
000038  256400            DCB      "%d",0
00003b  00                DCB      0
                  |L3.60|
                          DCD      ||.data||

                          AREA ||i.BleApp_Init||, CODE, READONLY, ALIGN=2

                  BleApp_Init PROC
;;;166    
;;;167    void BleApp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169        BLEDemo_InitMessage();
000002  f7fffffe          BL       BLEDemo_InitMessage
;;;170    
;;;171        // register command event callback function
;;;172        setBLE_RegisterBleEvent(BleEvent_Callback);
000006  4802              LDR      r0,|L4.16|
000008  f7fffffe          BL       setBLE_RegisterBleEvent
;;;173    
;;;174        // wait for UART command or enable the following code to start SLT test when power-on.
;;;175    //  /* ========================
;;;176    //   * Start SLT test
;;;177    //   * ======================== */
;;;178    //  appSystemRequest |= APPREQUEST_SLT_STARTTEST;
;;;179    }
00000c  bd10              POP      {r4,pc}
;;;180    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      BleEvent_Callback

                          AREA ||i.BleApp_Main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  BleApp_Main PROC
;;;181    
;;;182    void BleApp_Main(void)
000000  b510              PUSH     {r4,lr}
;;;183    {
;;;184        RT568SLT_TestStatus status;
;;;185    
;;;186        status = RT568_SystemTest();
000002  f7fffffe          BL       RT568_SystemTest
000006  4601              MOV      r1,r0
;;;187    
;;;188        if(status == RT568_TEST_WAITING)
000008  2810              CMP      r0,#0x10
00000a  d00a              BEQ      |L5.34|
;;;189        {
;;;190            // do nothing
;;;191        }
;;;192        else
;;;193        {
;;;194            appSystemRequest  = APPREQUEST_IDLE;
00000c  2001              MOVS     r0,#1
00000e  4a07              LDR      r2,|L5.44|
;;;195            sltTestCase = SLT_IDLE;
;;;196    
;;;197            if(status == RT568_TEST_OK)
000010  2900              CMP      r1,#0
000012  7010              STRB     r0,[r2,#0]            ;194
000014  7050              STRB     r0,[r2,#1]            ;195
000016  d005              BEQ      |L5.36|
;;;198            {
;;;199                D_msg("Result:PASS\n");
;;;200            }
;;;201            else
;;;202            {
;;;203                D_msg("Result:FAIL  Error Code: 0x%02x\n",status);
000018  a005              ADR      r0,|L5.48|
00001a  f7fffffe          BL       __2printf
                  |L5.30|
;;;204            }
;;;205    
;;;206            BLEDemo_InitMessage();
00001e  f7fffffe          BL       BLEDemo_InitMessage
                  |L5.34|
;;;207        }
;;;208    }
000022  bd10              POP      {r4,pc}
                  |L5.36|
000024  a00b              ADR      r0,|L5.84|
000026  f7fffffe          BL       __2printf
00002a  e7f8              B        |L5.30|
;;;209    
                          ENDP

                  |L5.44|
                          DCD      ||.data||
                  |L5.48|
000030  52657375          DCB      "Result:FAIL  Error Code: 0x%02x\n",0
000034  6c743a46
000038  41494c20
00003c  20457272
000040  6f722043
000044  6f64653a
000048  20307825
00004c  3032780a
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0
                  |L5.84|
000054  52657375          DCB      "Result:PASS\n",0
000058  6c743a50
00005c  4153530a
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.BleDataExcahngeService_Callback||, CODE, READONLY, ALIGN=2

                  BleDataExcahngeService_Callback PROC
;;;426    
;;;427    void BleDataExcahngeService_Callback(Uint8 length, Uint8 *data)
000000  b5f8              PUSH     {r3-r7,lr}
;;;428    {
000002  4605              MOV      r5,r0
;;;429        uint8_t txpowerStrLen = strlen((char *)TEST_BLETXPOWERSTR);
;;;430    
;;;431        if(memcmp((Uint8 *)TEST_BLERXSTR,data,length) == 0) // 1st data recieved from dongle
000004  4602              MOV      r2,r0
000006  460e              MOV      r6,r1                 ;428
000008  270c              MOVS     r7,#0xc               ;429
00000a  a00d              ADR      r0,|L6.64|
00000c  f7fffffe          BL       memcmp
;;;432        {
;;;433            appSystemRequest |= APPREQUEST_SLT_TX_DATA;
000010  4c0e              LDR      r4,|L6.76|
000012  2800              CMP      r0,#0                 ;431
000014  d103              BNE      |L6.30|
000016  7820              LDRB     r0,[r4,#0]  ; appSystemRequest
000018  2120              MOVS     r1,#0x20
00001a  4308              ORRS     r0,r0,r1
00001c  7020              STRB     r0,[r4,#0]
                  |L6.30|
;;;434        }
;;;435    
;;;436        if((length == (txpowerStrLen+1)) && ((memcmp((Uint8 *)TEST_BLETXPOWERSTR,data,txpowerStrLen)) == 0)) // "SLT-TXP-TEST" + 1 Byte (positive RSSI Value)
00001e  2d0d              CMP      r5,#0xd
000020  d10c              BNE      |L6.60|
000022  463a              MOV      r2,r7
000024  4631              MOV      r1,r6
000026  a00a              ADR      r0,|L6.80|
000028  f7fffffe          BL       memcmp
00002c  2800              CMP      r0,#0
00002e  d105              BNE      |L6.60|
;;;437        {
;;;438            appSystemRequest |= APPREQUEST_SLT_RX_DATA;
000030  7820              LDRB     r0,[r4,#0]  ; appSystemRequest
000032  2110              MOVS     r1,#0x10
000034  4308              ORRS     r0,r0,r1
000036  7020              STRB     r0,[r4,#0]
;;;439            dongleRssiValue = ((Sint8)data[txpowerStrLen]);
000038  7b30              LDRB     r0,[r6,#0xc]
00003a  70e0              STRB     r0,[r4,#3]
                  |L6.60|
;;;440        }
;;;441    }
00003c  bdf8              POP      {r3-r7,pc}
;;;442    
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
000040  534c542d          DCB      "SLT-TX-TEST",0
000044  54582d54
000048  45535400
                  |L6.76|
                          DCD      ||.data||
                  |L6.80|
000050  534c542d          DCB      "SLT-TXP-TEST",0
000054  5458502d
000058  54455354
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.BleEvent_Callback||, CODE, READONLY, ALIGN=2

                  BleEvent_Callback PROC
;;;443    /* GAP Callback Function */
;;;444    static void BleEvent_Callback(BleCmdEvent event, void* param)
000000  b510              PUSH     {r4,lr}
;;;445    {
;;;446        //struct MHC_Disconn_Complete_Para *disParam = param;
;;;447        switch(event)
000002  2801              CMP      r0,#1
000004  d00c              BEQ      |L7.32|
;;;448        {
;;;449        case BLECMD_EVENT_ADV_COMPLETE:
;;;450        {
;;;451        }
;;;452        break;
;;;453    
;;;454        case BLECMD_EVENT_CONN_COMPLETE:
;;;455        {
;;;456            BLE_Event_ConnParam *connparam = (BLE_Event_ConnParam *)param;
;;;457            connId = connparam->connId;
000006  4b0e              LDR      r3,|L7.64|
000008  2803              CMP      r0,#3                 ;447
;;;458            appSystemRequest |= APPREQUEST_SLT_CONNECTED;
00000a  781a              LDRB     r2,[r3,#0]
00000c  d009              BEQ      |L7.34|
00000e  2807              CMP      r0,#7                 ;447
000010  d00e              BEQ      |L7.48|
000012  280a              CMP      r0,#0xa               ;447
000014  d104              BNE      |L7.32|
;;;459    
;;;460            D_msg("Connected\n");
;;;461        }
;;;462        break;
;;;463        case BLECMD_EVENT_DISCONN_COMPLETE:
;;;464        {
;;;465            appSystemRequest |= APPREQUEST_SLT_DISCONNECTED;
;;;466    
;;;467            D_msg("Disconnected\n");
;;;468        }
;;;469        break;
;;;470    
;;;471    
;;;472        case BLECMD_EVENT_READ_RSSI_COMPLETE:
;;;473        {
;;;474            BLE_Event_Rssi_Param *rssiParam = (BLE_Event_Rssi_Param *)param;
;;;475            dutRssiValue = rssiParam->rssi;
000016  7848              LDRB     r0,[r1,#1]
000018  7118              STRB     r0,[r3,#4]
;;;476            appSystemRequest |= APPREQUEST_SLT_RSSI_READ;
00001a  2040              MOVS     r0,#0x40
00001c  4302              ORRS     r2,r2,r0
00001e  701a              STRB     r2,[r3,#0]
                  |L7.32|
;;;477        }
;;;478        break;
;;;479    
;;;480    
;;;481        default:
;;;482            break;
;;;483        }
;;;484    }
000020  bd10              POP      {r4,pc}
                  |L7.34|
000022  7848              LDRB     r0,[r1,#1]            ;457
000024  7098              STRB     r0,[r3,#2]            ;457
000026  2008              MOVS     r0,#8                 ;458
000028  4302              ORRS     r2,r2,r0              ;458
00002a  701a              STRB     r2,[r3,#0]            ;458
00002c  a005              ADR      r0,|L7.68|
00002e  e003              B        |L7.56|
                  |L7.48|
000030  2080              MOVS     r0,#0x80              ;465
000032  4302              ORRS     r2,r2,r0              ;465
000034  701a              STRB     r2,[r3,#0]            ;465
000036  a006              ADR      r0,|L7.80|
                  |L7.56|
000038  f7fffffe          BL       __2printf
00003c  bd10              POP      {r4,pc}
;;;485    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      ||.data||
                  |L7.68|
000044  436f6e6e          DCB      "Connected\n",0
000048  65637465
00004c  640a00  
00004f  00                DCB      0
                  |L7.80|
000050  44697363          DCB      "Disconnected\n",0
000054  6f6e6e65
000058  63746564
00005c  0a00    
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.Ble_Slave_AdvInit||, CODE, READONLY, ALIGN=2

                  Ble_Slave_AdvInit PROC
;;;137    
;;;138    void Ble_Slave_AdvInit(void)
000000  b500              PUSH     {lr}
;;;139    {
;;;140        BLE_Adv_Param advParam;
;;;141    
;;;142        uint8_t SET_ADV_DATA[] =
000002  a00c              ADR      r0,|L8.52|
000004  c80f              LDM      r0,{r0-r3}
000006  b089              SUB      sp,sp,#0x24           ;139
;;;143        {
;;;144            12, //Uint8 HCI_Adv_Data_Length;
;;;145            GAP_AD_TYPE_LENGTH_2, GAP_AD_TYPE_FLAGS, BLE_GAP_FLAGS_GENERAL_DISCOVERABLE_MODE,      //LE General Discoverable Mode, Bluetooth Spec. Ver4.0 [Vol 3] page 401 of 656
;;;146            GAP_AD_TYPE_LENGTH_8, GAP_AD_TYPE_LOCAL_NAME_COMPLETE,
;;;147            'S', 'L', 'T', 'D', 'E', 'M', 'O'
;;;148        };
;;;149    
;;;150        advParam.Adv_Type = ADV_TYPE_ADV_IND;
000008  9307              STR      r3,[sp,#0x1c]
00000a  ab04              ADD      r3,sp,#0x10
00000c  c307              STM      r3!,{r0-r2}
00000e  2000              MOVS     r0,#0
000010  466a              MOV      r2,sp
000012  7010              STRB     r0,[r2,#0]
;;;151        advParam.Adv_Interval_Min = APP_ADV_INTERVAL_MIN;
000014  2120              MOVS     r1,#0x20
000016  8051              STRH     r1,[r2,#2]
;;;152        advParam.Adv_Interval_Max = APP_ADV_INTERVAL_MAX;
000018  8091              STRH     r1,[r2,#4]
;;;153        advParam.Adv_Channel_Map = ADV_CHANNEL_ALL;
00001a  2107              MOVS     r1,#7
00001c  7351              STRB     r1,[r2,#0xd]
;;;154        advParam.Adv_Filter_Policy = ADV_FILTER_POLICY_ACCEPT_ALL;
00001e  7390              STRB     r0,[r2,#0xe]
;;;155    
;;;156        setBLE_AdvParam(advParam);
000020  4668              MOV      r0,sp
000022  c80f              LDM      r0,{r0-r3}
000024  f7fffffe          BL       setBLE_AdvParam
;;;157        setBLE_AdvData((uint8_t *)SET_ADV_DATA, sizeof(SET_ADV_DATA));
000028  210d              MOVS     r1,#0xd
00002a  a804              ADD      r0,sp,#0x10
00002c  f7fffffe          BL       setBLE_AdvData
;;;158    }
000030  b009              ADD      sp,sp,#0x24
000032  bd00              POP      {pc}
;;;159    
                          ENDP

                  |L8.52|
000034  0c020106          DCB      "\f",2,1,6,"\b\tSLTDEMO",0
000038  0809534c
00003c  5444454d
000040  4f00    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.Ble_Slave_StartADV||, CODE, READONLY, ALIGN=1

                  Ble_Slave_StartADV PROC
;;;160    
;;;161    void Ble_Slave_StartADV(void)
000000  b510              PUSH     {r4,lr}
;;;162    {
;;;163        Ble_Slave_AdvInit();
000002  f7fffffe          BL       Ble_Slave_AdvInit
;;;164        setBLE_AdvEnable();
000006  f7fffffe          BL       setBLE_AdvEnable
;;;165    }
00000a  bd10              POP      {r4,pc}
;;;166    
                          ENDP


                          AREA ||i.RT568_SystemTest||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RT568_SystemTest PROC
;;;238    
;;;239    static RT568SLT_TestStatus RT568_SystemTest(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;240    {
;;;241        // 1. Test init: set BLE Address
;;;242        if((appSystemRequest & APPREQUEST_SLT_STARTTEST ) != 0)
000002  4d57              LDR      r5,|L10.352|
000004  4e57              LDR      r6,|L10.356|
000006  7828              LDRB     r0,[r5,#0]  ; appSystemRequest
000008  03b7              LSLS     r7,r6,#14
00000a  0781              LSLS     r1,r0,#30
;;;243        {
;;;244            appSystemRequest &= ~APPREQUEST_SLT_STARTTEST;
;;;245    
;;;246            RT568_SystemTestInit();
;;;247            appSystemRequest |= APPREQUEST_SLT_ADV; // start advertising
00000c  2404              MOVS     r4,#4
00000e  2900              CMP      r1,#0                 ;242
000010  da1c              BGE      |L10.76|
000012  21fd              MOVS     r1,#0xfd              ;244
000014  4008              ANDS     r0,r0,r1              ;244
000016  7028              STRB     r0,[r5,#0]            ;244
000018  a053              ADR      r0,|L10.360|
00001a  f7fffffe          BL       __2printf
00001e  6830              LDR      r0,[r6,#0]            ;244
000020  4338              ORRS     r0,r0,r7              ;244
000022  6030              STR      r0,[r6,#0]            ;244
000024  2001              MOVS     r0,#1                 ;244
000026  7028              STRB     r0,[r5,#0]            ;244
000028  7068              STRB     r0,[r5,#1]            ;244
00002a  4854              LDR      r0,|L10.380|
00002c  f7fffffe          BL       Tiny_Delay
000030  2106              MOVS     r1,#6                 ;244
000032  a053              ADR      r0,|L10.384|
000034  f7fffffe          BL       UART1_SendData
000038  2001              MOVS     r0,#1                 ;244
00003a  f7fffffe          BL       App_SetBleAdvAddress
00003e  210b              MOVS     r1,#0xb               ;244
000040  a051              ADR      r0,|L10.392|
000042  f7fffffe          BL       UART1_SendData
000046  7828              LDRB     r0,[r5,#0]  ; appSystemRequest
000048  4320              ORRS     r0,r0,r4
00004a  7028              STRB     r0,[r5,#0]
                  |L10.76|
;;;248        }
;;;249    
;;;250        // 2. Advertising Test
;;;251        if((appSystemRequest & APPREQUEST_SLT_ADV ) != 0)
00004c  b2c0              UXTB     r0,r0
00004e  0741              LSLS     r1,r0,#29
000050  d506              BPL      |L10.96|
;;;252        {
;;;253            appSystemRequest &= ~APPREQUEST_SLT_ADV;
000052  21fb              MOVS     r1,#0xfb
000054  4008              ANDS     r0,r0,r1
000056  7028              STRB     r0,[r5,#0]
;;;254    
;;;255            Ble_Slave_StartADV(); // start advertising
000058  f7fffffe          BL       Ble_Slave_StartADV
;;;256    
;;;257            sltTestCase = SLT_CONN;
00005c  2003              MOVS     r0,#3
00005e  7068              STRB     r0,[r5,#1]
                  |L10.96|
;;;258            //================================================================================================
;;;259            // wait for connected with dongle       (BleEvent_Callback)
;;;260            //================================================================================================
;;;261        }
;;;262    
;;;263        // 3. Connection Test
;;;264        if((appSystemRequest & APPREQUEST_SLT_CONNECTED ) != 0)
000060  7828              LDRB     r0,[r5,#0]  ; appSystemRequest
000062  0701              LSLS     r1,r0,#28
000064  d504              BPL      |L10.112|
;;;265        {
;;;266            appSystemRequest &= ~APPREQUEST_SLT_CONNECTED;
000066  21f7              MOVS     r1,#0xf7
000068  4008              ANDS     r0,r0,r1
00006a  7028              STRB     r0,[r5,#0]
;;;267    
;;;268            sltTestCase = SLT_RX;
00006c  2005              MOVS     r0,#5
00006e  7068              STRB     r0,[r5,#1]
                  |L10.112|
;;;269            //================================================================================================
;;;270            // wait for RX data from dongle dongle  (BleDataExcahngeService_Callback)
;;;271            //================================================================================================
;;;272        }
;;;273    
;;;274        // 4. DUT RX/TX Test
;;;275        if((appSystemRequest & APPREQUEST_SLT_TX_DATA ) != 0)
000070  7828              LDRB     r0,[r5,#0]  ; appSystemRequest
000072  0681              LSLS     r1,r0,#26
000074  d51c              BPL      |L10.176|
;;;276        {
;;;277            appSystemRequest &= ~APPREQUEST_SLT_TX_DATA;
000076  21df              MOVS     r1,#0xdf
000078  4008              ANDS     r0,r0,r1
00007a  7028              STRB     r0,[r5,#0]
;;;278    
;;;279            sltTestCase = SLT_TX;
00007c  706c              STRB     r4,[r5,#1]
;;;280            if(BleDataExcahngeService_SendData(strlen((char *)TEST_BLETXSTR),(Uint8 *)TEST_BLETXSTR) != BLESTACK_STATUS_SUCCESS)
00007e  240b              MOVS     r4,#0xb
000080  a144              ADR      r1,|L10.404|
000082  4622              MOV      r2,r4
000084  4846              LDR      r0,|L10.416|
000086  f7fffffe          BL       __aeabi_memcpy
00008a  4846              LDR      r0,|L10.420|
00008c  4b44              LDR      r3,|L10.416|
00008e  7800              LDRB     r0,[r0,#0]  ; att_HDL_DATAEXCHANGES_READINIT_MEASUREMENT_CLIENT_CHARACTERISTIC_CONFIGURATION
000090  9400              STR      r4,[sp,#0]
000092  2802              CMP      r0,#2
000094  4a43              LDR      r2,|L10.420|
000096  4944              LDR      r1,|L10.424|
000098  78a8              LDRB     r0,[r5,#2]  ; connId
00009a  d004              BEQ      |L10.166|
00009c  f7fffffe          BL       ATT_HDL_Notify
                  |L10.160|
0000a0  2800              CMP      r0,#0
0000a2  d151              BNE      |L10.328|
0000a4  e002              B        |L10.172|
                  |L10.166|
0000a6  f7fffffe          BL       ATT_HDL_Indicate
0000aa  e7f9              B        |L10.160|
                  |L10.172|
;;;281            {
;;;282                return RT568_TEST_ERROR_TX;
;;;283            }
;;;284    
;;;285            sltTestCase = SLT_DONGLE_RSSI;
0000ac  2006              MOVS     r0,#6
0000ae  7068              STRB     r0,[r5,#1]
                  |L10.176|
;;;286        }
;;;287    
;;;288        // 5. Dongle RSSI Test
;;;289        if((appSystemRequest & APPREQUEST_SLT_RX_DATA ) != 0)
0000b0  7828              LDRB     r0,[r5,#0]  ; appSystemRequest
0000b2  06c1              LSLS     r1,r0,#27
0000b4  d50e              BPL      |L10.212|
;;;290        {
;;;291            appSystemRequest &= ~APPREQUEST_SLT_RX_DATA;
0000b6  21ef              MOVS     r1,#0xef
0000b8  4008              ANDS     r0,r0,r1
0000ba  7028              STRB     r0,[r5,#0]
;;;292            D_msg("dongleRssiValue=%d\n",dongleRssiValue);
0000bc  2103              MOVS     r1,#3
0000be  5669              LDRSB    r1,[r5,r1]  ; dongleRssiValue
0000c0  a03a              ADR      r0,|L10.428|
0000c2  f7fffffe          BL       __2printf
;;;293    
;;;294            sltTestCase = SLT_DUT_RSSI;
0000c6  2007              MOVS     r0,#7
0000c8  7068              STRB     r0,[r5,#1]
;;;295    
;;;296            // get RSSI
;;;297            if(getBLE_RssiValue(connId) != BLESTACK_STATUS_SUCCESS)
0000ca  78a8              LDRB     r0,[r5,#2]  ; connId
0000cc  f7fffffe          BL       getBLE_RssiValue
0000d0  2800              CMP      r0,#0
0000d2  d13d              BNE      |L10.336|
                  |L10.212|
;;;298            {
;;;299                return RT568_TEST_ERROR_RSSI;
;;;300            }
;;;301        }
;;;302    
;;;303        // 6. DUT RSSI Test
;;;304        if((appSystemRequest & APPREQUEST_SLT_RSSI_READ ) != 0)
0000d4  7828              LDRB     r0,[r5,#0]  ; appSystemRequest
0000d6  0641              LSLS     r1,r0,#25
0000d8  d51e              BPL      |L10.280|
;;;305        {
;;;306            appSystemRequest &= ~APPREQUEST_SLT_RSSI_READ;
0000da  21bf              MOVS     r1,#0xbf
0000dc  4008              ANDS     r0,r0,r1
0000de  7028              STRB     r0,[r5,#0]
;;;307            D_msg("dutRssiValue=%d\n",dutRssiValue);
0000e0  2104              MOVS     r1,#4
0000e2  5669              LDRSB    r1,[r5,r1]  ; dutRssiValue
0000e4  a036              ADR      r0,|L10.448|
0000e6  f7fffffe          BL       __2printf
;;;308    
;;;309            // check RSSI values
;;;310            if(RT568_RssiTest(dutRssiValue,dongleRssiValue) == 0)
0000ea  2004              MOVS     r0,#4
0000ec  5628              LDRSB    r0,[r5,r0]  ; dutRssiValue
0000ee  2103              MOVS     r1,#3
0000f0  220b              MOVS     r2,#0xb
0000f2  5669              LDRSB    r1,[r5,r1]  ; dongleRssiValue
0000f4  43d2              MVNS     r2,r2
0000f6  4290              CMP      r0,r2
0000f8  da2a              BGE      |L10.336|
0000fa  2333              MOVS     r3,#0x33
0000fc  43db              MVNS     r3,r3
0000fe  4298              CMP      r0,r3
000100  dd26              BLE      |L10.336|
000102  4291              CMP      r1,r2
000104  da24              BGE      |L10.336|
000106  4299              CMP      r1,r3
000108  dd22              BLE      |L10.336|
;;;311            {
;;;312                return RT568_TEST_ERROR_RSSI;
;;;313            }
;;;314    
;;;315            sltTestCase = SLT_DISCONN;
00010a  2008              MOVS     r0,#8
00010c  7068              STRB     r0,[r5,#1]
;;;316            // disconnect the link
;;;317            if(setBLE_Disconnect(connId) != BLESTACK_STATUS_SUCCESS)
00010e  78a8              LDRB     r0,[r5,#2]  ; connId
000110  f7fffffe          BL       setBLE_Disconnect
000114  2800              CMP      r0,#0
000116  d11d              BNE      |L10.340|
                  |L10.280|
;;;318            {
;;;319                return RT568_TEST_ERROR_DISCONN;
;;;320            }
;;;321        }
;;;322    
;;;323        // 7. Disconnect Test (Final test)
;;;324        if((appSystemRequest & APPREQUEST_SLT_DISCONNECTED ) != 0)
000118  7828              LDRB     r0,[r5,#0]  ; appSystemRequest
00011a  0601              LSLS     r1,r0,#24
00011c  d51e              BPL      |L10.348|
;;;325        {
;;;326            appSystemRequest &= ~APPREQUEST_SLT_DISCONNECTED;
00011e  0640              LSLS     r0,r0,#25
000120  0e40              LSRS     r0,r0,#25
000122  7028              STRB     r0,[r5,#0]
000124  6830              LDR      r0,[r6,#0]
000126  43b8              BICS     r0,r0,r7
000128  6030              STR      r0,[r6,#0]
;;;327    
;;;328            // stop TIMER0 counter
;;;329            TIMER_Stop(TIMER0);
;;;330    
;;;331            if(sltTestCase == SLT_DISCONN)
00012a  7868              LDRB     r0,[r5,#1]  ; sltTestCase
00012c  2808              CMP      r0,#8
00012e  d007              BEQ      |L10.320|
000130  1ec0              SUBS     r0,r0,#3
000132  0003              MOVS     r3,r0
000134  f7fffffe          BL       __ARM_common_switch8
000138  0606080a          DCB      0x06,0x06,0x08,0x0a
00013c  0c0c0e10          DCB      0x0c,0x0c,0x0e,0x10
                  |L10.320|
;;;332            {
;;;333                return RT568_TEST_OK;
000140  2000              MOVS     r0,#0
;;;334            }
;;;335            else
;;;336            {
;;;337                // due to timeout
;;;338                return RT568_SystemTestErrorCode(sltTestCase);
;;;339            }
;;;340        }
;;;341    
;;;342        return RT568_TEST_WAITING;
;;;343    }
000142  bdf8              POP      {r3-r7,pc}
000144  2001              MOVS     r0,#1
000146  bdf8              POP      {r3-r7,pc}
                  |L10.328|
000148  2002              MOVS     r0,#2
00014a  bdf8              POP      {r3-r7,pc}
00014c  2003              MOVS     r0,#3
00014e  bdf8              POP      {r3-r7,pc}
                  |L10.336|
000150  2004              MOVS     r0,#4
000152  bdf8              POP      {r3-r7,pc}
                  |L10.340|
000154  2005              MOVS     r0,#5
000156  bdf8              POP      {r3-r7,pc}
000158  2006              MOVS     r0,#6
00015a  bdf8              POP      {r3-r7,pc}
                  |L10.348|
00015c  2010              MOVS     r0,#0x10              ;342
00015e  bdf8              POP      {r3-r7,pc}
;;;344    
                          ENDP

                  |L10.352|
                          DCD      ||.data||
                  |L10.356|
                          DCD      0x40050000
                  |L10.360|
000168  5b525435          DCB      "[RT568_SLT Test]\n",0
00016c  36385f53
000170  4c542054
000174  6573745d
000178  0a00    
00017a  00                DCB      0
00017b  00                DCB      0
                  |L10.380|
                          DCD      0x00002710
                  |L10.384|
000180  44554d4d          DCB      "DUMMY\n",0
000184  590a00  
000187  00                DCB      0
                  |L10.392|
000188  5343414e          DCB      "SCANENABLE\n",0
00018c  454e4142
000190  4c450a00
                  |L10.404|
000194  534c542d          DCB      "SLT-RX-TEST",0
000198  52582d54
00019c  45535400
                  |L10.416|
                          DCD      att_HDL_DATAEXCHANGES_READINIT
                  |L10.420|
                          DCD      att_HDL_DATAEXCHANGES_READINIT_MEASUREMENT_CLIENT_CHARACTERISTIC_CONFIGURATION
                  |L10.424|
                          DCD      ATT_HDL_DATAEXCHANGES_READINIT
                  |L10.428|
0001ac  646f6e67          DCB      "dongleRssiValue=%d\n",0
0001b0  6c655273
0001b4  73695661
0001b8  6c75653d
0001bc  25640a00
                  |L10.448|
0001c0  64757452          DCB      "dutRssiValue=%d\n",0
0001c4  73736956
0001c8  616c7565
0001cc  3d25640a
0001d0  00      
0001d1  00                DCB      0
0001d2  00                DCB      0
0001d3  00                DCB      0

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;489    *******************************************************************************/
;;;490    void TMR0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4909              LDR      r1,|L11.40|
000004  6888              LDR      r0,[r1,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;491    {
00000a  d00c              BEQ      |L11.38|
00000c  2001              MOVS     r0,#1
00000e  6088              STR      r0,[r1,#8]
;;;492        static int waitCount = 0;
;;;493    
;;;494        if(TIMER_GetIntFlag(TIMER0) == 1)
;;;495        {
;;;496            /* Clear Timer0 time-out interrupt flag */
;;;497            TIMER_ClearIntFlag(TIMER0);
;;;498    
;;;499            waitCount++;
000010  4906              LDR      r1,|L11.44|
000012  6888              LDR      r0,[r1,#8]  ; waitCount
000014  1c40              ADDS     r0,r0,#1
;;;500            if(waitCount > SLT_TEST_TIMEOUT_S)
000016  6088              STR      r0,[r1,#8]  ; waitCount
000018  2802              CMP      r0,#2
00001a  dd04              BLE      |L11.38|
;;;501            {
;;;502                // timeout
;;;503                waitCount = 0;
00001c  2000              MOVS     r0,#0
;;;504    
;;;505                setBLE_Disconnect(connId);
00001e  6088              STR      r0,[r1,#8]  ; waitCount
000020  7888              LDRB     r0,[r1,#2]  ; connId
000022  f7fffffe          BL       setBLE_Disconnect
                  |L11.38|
;;;506            }
;;;507        }
;;;508    }
000026  bd10              POP      {r4,pc}
;;;509    
                          ENDP

                  |L11.40|
                          DCD      0x40050000
                  |L11.44|
                          DCD      ||.data||

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;539    
;;;540    void UART02_IRQHandler(void) __irq
000000  b5f8              PUSH     {r3-r7,lr}
;;;541    {
;;;542        static uint8_t uartBuffer[218];
;;;543        static uint8_t index = 0u;
;;;544    
;;;545        uint8_t volatile uartReceiveByte;
;;;546    
;;;547        if (UART_GET_INT_FLAG(UART0,UART_INTSTS_RDAINT_Msk))
000002  4d0e              LDR      r5,|L12.60|
000004  69e8              LDR      r0,[r5,#0x1c]
;;;548        {
;;;549            /* Get all the input characters */
;;;550            while(UART_IS_RX_READY(UART0))
;;;551            {
;;;552                /* Get the character from UART Buffer */
;;;553                uartReceiveByte = UART_READ(UART0);
;;;554                uartBuffer[index] = uartReceiveByte;
000006  4c0e              LDR      r4,|L12.64|
000008  05c0              LSLS     r0,r0,#23             ;547
00000a  d515              BPL      |L12.56|
00000c  4e0d              LDR      r6,|L12.68|
00000e  2700              MOVS     r7,#0
                  |L12.16|
000010  69e8              LDR      r0,[r5,#0x1c]         ;550
000012  07c0              LSLS     r0,r0,#31             ;550
000014  d010              BEQ      |L12.56|
000016  6828              LDR      r0,[r5,#0]            ;553
000018  4669              MOV      r1,sp                 ;553
00001a  7008              STRB     r0,[r1,#0]            ;553
00001c  7808              LDRB     r0,[r1,#0]
00001e  7961              LDRB     r1,[r4,#5]  ; index
000020  5470              STRB     r0,[r6,r1]
;;;555    
;;;556                if(BLEDemo_UartRxDataHandler(uartBuffer,index) == 0)
000022  4808              LDR      r0,|L12.68|
000024  f7fffffe          BL       BLEDemo_UartRxDataHandler
000028  2800              CMP      r0,#0
00002a  d003              BEQ      |L12.52|
;;;557                {
;;;558                    index = 0;
;;;559                }
;;;560                else
;;;561                {
;;;562                    index++;
00002c  7960              LDRB     r0,[r4,#5]  ; index
00002e  1c40              ADDS     r0,r0,#1
000030  7160              STRB     r0,[r4,#5]
000032  e7ed              B        |L12.16|
                  |L12.52|
000034  7167              STRB     r7,[r4,#5]            ;558
000036  e7eb              B        |L12.16|
                  |L12.56|
;;;563                }
;;;564            }
;;;565        }
;;;566    }
000038  bdf8              POP      {r3-r7,pc}
                          ENDP

00003a  0000              DCW      0x0000
                  |L12.60|
                          DCD      0x40070000
                  |L12.64|
                          DCD      ||.data||
                  |L12.68|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uartBuffer
                          %        218

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  bleDefaultAddrTable
000000  11554433          DCB      0x11,0x55,0x44,0x33
000004  22012255          DCB      0x22,0x01,0x22,0x55
000008  44332202          DCB      0x44,0x33,0x22,0x02
00000c  33554433          DCB      0x33,0x55,0x44,0x33
000010  22034455          DCB      0x22,0x03,0x44,0x55
000014  44332204          DCB      0x44,0x33,0x22,0x04
000018  55554433          DCB      0x55,0x55,0x44,0x33
00001c  22056655          DCB      0x22,0x05,0x66,0x55
000020  44332206          DCB      0x44,0x33,0x22,0x06
000024  77554433          DCB      0x77,0x55,0x44,0x33
000028  22078855          DCB      0x22,0x07,0x88,0x55
00002c  44332208          DCB      0x44,0x33,0x22,0x08
000030  99554433          DCB      0x99,0x55,0x44,0x33
000034  2209aa55          DCB      0x22,0x09,0xaa,0x55
000038  4433220a          DCB      0x44,0x33,0x22,0x0a
00003c  bb554433          DCB      0xbb,0x55,0x44,0x33
000040  220bcc55          DCB      0x22,0x0b,0xcc,0x55
000044  4433220c          DCB      0x44,0x33,0x22,0x0c
000048  dd554433          DCB      0xdd,0x55,0x44,0x33
00004c  220dee55          DCB      0x22,0x0d,0xee,0x55
000050  4433220e          DCB      0x44,0x33,0x22,0x0e
000054  ff554433          DCB      0xff,0x55,0x44,0x33
000058  220f0155          DCB      0x22,0x0f,0x01,0x55
00005c  44332210          DCB      0x44,0x33,0x22,0x10

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2b3d3d3d          DCB      "+======================================================"
000004  3d3d3d3d
000008  3d3d3d3d
00000c  3d3d3d3d
000010  3d3d3d3d
000014  3d3d3d3d
000018  3d3d3d3d
00001c  3d3d3d3d
000020  3d3d3d3d
000024  3d3d3d3d
000028  3d3d3d3d
00002c  3d3d3d3d
000030  3d3d3d3d
000034  3d3d3d  
000037  3d3d3d3d          DCB      "==============+\n",0
00003b  3d3d3d3d
00003f  3d3d3d3d
000043  3d3d2b0a
000047  00      

                          AREA ||.data||, DATA, ALIGN=2

                  appSystemRequest
000000  01                DCB      0x01
                  sltTestCase
000001  01                DCB      0x01
                  connId
000002  00                DCB      0x00
                  dongleRssiValue
000003  00                DCB      0x00
                  dutRssiValue
000004  00                DCB      0x00
                  index
000005  000000            DCB      0x00,0x00,0x00
                  waitCount
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L80.16|
00000e  461d              MOV      r5,r3
                  |L80.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\user.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_user_c_d9d124b4____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_user_c_d9d124b4____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_user_c_d9d124b4____REVSH|
#line 402
|__asm___6_user_c_d9d124b4____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

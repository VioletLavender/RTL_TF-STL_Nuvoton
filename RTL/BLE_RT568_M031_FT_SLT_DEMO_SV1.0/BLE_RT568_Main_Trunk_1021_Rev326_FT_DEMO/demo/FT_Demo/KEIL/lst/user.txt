; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\user.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\user.crf ..\user.c]
                          THUMB

                          AREA ||i.BLEDemo_InitMessage||, CODE, READONLY, ALIGN=2

                  BLEDemo_InitMessage PROC
;;;52     
;;;53     void BLEDemo_InitMessage(void)
000000  b510              PUSH     {r4,lr}
;;;54     {
;;;55         D_msg("+====================================================================+\n");
000002  4812              LDR      r0,|L1.76|
000004  f7fffffe          BL       __2printf
;;;56         D_msg("Press the number to start related testing.\n");
000008  a011              ADR      r0,|L1.80|
00000a  f7fffffe          BL       __2printf
;;;57         D_msg("+====================================================================+\n");
00000e  480f              LDR      r0,|L1.76|
000010  f7fffffe          BL       __2printf
;;;58         D_msg("1. TX @2402MHz(LDO) Test\n");
000014  a019              ADR      r0,|L1.124|
000016  f7fffffe          BL       __2printf
;;;59         D_msg("2. TX @2402MHz(DCDC) Test\n");
00001a  a01f              ADR      r0,|L1.152|
00001c  f7fffffe          BL       __2printf
;;;60         D_msg("3. RX(LDO) Test\n");
000020  a024              ADR      r0,|L1.180|
000022  f7fffffe          BL       __2printf
;;;61         D_msg("4. RX(DCDC) Test\n");
000026  a028              ADR      r0,|L1.200|
000028  f7fffffe          BL       __2printf
;;;62         D_msg("5. Sleep Test\n");
00002c  a02b              ADR      r0,|L1.220|
00002e  f7fffffe          BL       __2printf
;;;63         D_msg("6. Deep Sleep Test\n");
000032  a02e              ADR      r0,|L1.236|
000034  f7fffffe          BL       __2printf
;;;64         D_msg("7. RSSI Test (DUT RX) with Signal Generator\n");
000038  a031              ADR      r0,|L1.256|
00003a  f7fffffe          BL       __2printf
;;;65         D_msg("8. 16MHz CLK Test\n");
00003e  a03c              ADR      r0,|L1.304|
000040  f7fffffe          BL       __2printf
;;;66         D_msg("+====================================================================+\n");
000044  4801              LDR      r0,|L1.76|
000046  f7fffffe          BL       __2printf
;;;67     }
00004a  bd10              POP      {r4,pc}
;;;68     
                          ENDP

                  |L1.76|
                          DCD      ||.conststring||
                  |L1.80|
000050  50726573          DCB      "Press the number to start related testing.\n",0
000054  73207468
000058  65206e75
00005c  6d626572
000060  20746f20
000064  73746172
000068  74207265
00006c  6c617465
000070  64207465
000074  7374696e
000078  672e0a00
                  |L1.124|
00007c  312e2054          DCB      "1. TX @2402MHz(LDO) Test\n",0
000080  58204032
000084  3430324d
000088  487a284c
00008c  444f2920
000090  54657374
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L1.152|
000098  322e2054          DCB      "2. TX @2402MHz(DCDC) Test\n",0
00009c  58204032
0000a0  3430324d
0000a4  487a2844
0000a8  43444329
0000ac  20546573
0000b0  740a00  
0000b3  00                DCB      0
                  |L1.180|
0000b4  332e2052          DCB      "3. RX(LDO) Test\n",0
0000b8  58284c44
0000bc  4f292054
0000c0  6573740a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L1.200|
0000c8  342e2052          DCB      "4. RX(DCDC) Test\n",0
0000cc  58284443
0000d0  44432920
0000d4  54657374
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L1.220|
0000dc  352e2053          DCB      "5. Sleep Test\n",0
0000e0  6c656570
0000e4  20546573
0000e8  740a00  
0000eb  00                DCB      0
                  |L1.236|
0000ec  362e2044          DCB      "6. Deep Sleep Test\n",0
0000f0  65657020
0000f4  536c6565
0000f8  70205465
0000fc  73740a00
                  |L1.256|
000100  372e2052          DCB      "7. RSSI Test (DUT RX) with Signal Generator\n",0
000104  53534920
000108  54657374
00010c  20284455
000110  54205258
000114  29207769
000118  74682053
00011c  69676e61
000120  6c204765
000124  6e657261
000128  746f720a
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L1.304|
000130  382e2031          DCB      "8. 16MHz CLK Test\n",0
000134  364d487a
000138  20434c4b
00013c  20546573
000140  740a00  
000143  00                DCB      0

                          AREA ||i.BLEDemo_UartRxDataHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  BLEDemo_UartRxDataHandler PROC
;;;241    
;;;242    int BLEDemo_UartRxDataHandler(uint8_t *data, uint8_t dataLen)
000000  b508              PUSH     {r3,lr}
;;;243    {
;;;244    
;;;245        if(data[dataLen] == '\r' || data[dataLen] == '\n')
000002  5c41              LDRB     r1,[r0,r1]
000004  290d              CMP      r1,#0xd
000006  d004              BEQ      |L2.18|
000008  290a              CMP      r1,#0xa
00000a  d002              BEQ      |L2.18|
;;;246        {
;;;247            int testCase = 0;
;;;248    
;;;249            sscanf((char *)data,"%d",&testCase);
;;;250            bleFtTestCase = (BleFT_TestCase)testCase;
;;;251    
;;;252            appSystemRequest |= APPREQUEST_FT_TEST;
;;;253    
;;;254            return 0;
;;;255        }
;;;256    
;;;257        return -1;
00000c  2000              MOVS     r0,#0
00000e  43c0              MVNS     r0,r0
;;;258    }
000010  bd08              POP      {r3,pc}
                  |L2.18|
000012  2100              MOVS     r1,#0                 ;247
000014  9100              STR      r1,[sp,#0]            ;249
000016  466a              MOV      r2,sp                 ;249
000018  a105              ADR      r1,|L2.48|
00001a  f7fffffe          BL       __0sscanf
00001e  4805              LDR      r0,|L2.52|
000020  9900              LDR      r1,[sp,#0]            ;250
000022  7081              STRB     r1,[r0,#2]            ;250
000024  7801              LDRB     r1,[r0,#0]            ;252  ; appSystemRequest
000026  2202              MOVS     r2,#2                 ;252
000028  4311              ORRS     r1,r1,r2              ;252
00002a  7001              STRB     r1,[r0,#0]            ;252
00002c  2000              MOVS     r0,#0                 ;254
00002e  bd08              POP      {r3,pc}
;;;259    
                          ENDP

                  |L2.48|
000030  256400            DCB      "%d",0
000033  00                DCB      0
                  |L2.52|
                          DCD      ||.data||

                          AREA ||i.BleApp_Init||, CODE, READONLY, ALIGN=1

                  BleApp_Init PROC
;;;124    
;;;125    void BleApp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;126    {
;;;127        BLEDemo_InitMessage();
000002  f7fffffe          BL       BLEDemo_InitMessage
;;;128    }
000006  bd10              POP      {r4,pc}
;;;129    
                          ENDP


                          AREA ||i.BleApp_Main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  BleApp_Main PROC
;;;130    
;;;131    void BleApp_Main(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133        if((appSystemRequest & APPREQUEST_FT_TEST ) != 0 )
000002  490b              LDR      r1,|L4.48|
000004  7808              LDRB     r0,[r1,#0]  ; appSystemRequest
000006  0782              LSLS     r2,r0,#30
000008  d50c              BPL      |L4.36|
;;;134        {
;;;135            RT568FT_TestStatus status;
;;;136    
;;;137            appSystemRequest &= ~APPREQUEST_FT_TEST;
00000a  22fd              MOVS     r2,#0xfd
00000c  4010              ANDS     r0,r0,r2
00000e  7008              STRB     r0,[r1,#0]
;;;138    
;;;139            status = RT568_FTTestSelection(bleFtTestCase);
000010  7888              LDRB     r0,[r1,#2]  ; bleFtTestCase
000012  f7fffffe          BL       RT568_FTTestSelection
000016  0001              MOVS     r1,r0
;;;140    
;;;141            if(status == RT568_TEST_OK)
000018  d005              BEQ      |L4.38|
;;;142            {
;;;143                D_msg("Result:PASS\n");
;;;144            }
;;;145            else
;;;146            {
;;;147                D_msg("Result:FAIL Error Code: 0x%02x\n",status);
00001a  a006              ADR      r0,|L4.52|
00001c  f7fffffe          BL       __2printf
                  |L4.32|
;;;148            }
;;;149    
;;;150            // show test cases init message
;;;151            BLEDemo_InitMessage();
000020  f7fffffe          BL       BLEDemo_InitMessage
                  |L4.36|
;;;152        }
;;;153    }
000024  bd10              POP      {r4,pc}
                  |L4.38|
000026  a00b              ADR      r0,|L4.84|
000028  f7fffffe          BL       __2printf
00002c  e7f8              B        |L4.32|
;;;154    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      ||.data||
                  |L4.52|
000034  52657375          DCB      "Result:FAIL Error Code: 0x%02x\n",0
000038  6c743a46
00003c  41494c20
000040  4572726f
000044  7220436f
000048  64653a20
00004c  30782530
000050  32780a00
                  |L4.84|
000054  52657375          DCB      "Result:PASS\n",0
000058  6c743a50
00005c  4153530a
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;503      */
;;;504    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4906              LDR      r1,|L5.28|
;;;505    {
;;;506        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L5.32|
000008  6148              STR      r0,[r1,#0x14]
;;;507        SysTick->VAL  = (0x00);
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
;;;508        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L5.18|
;;;509    
;;;510        /* Waiting for down-count to zero */
;;;511        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L5.18|
;;;512    
;;;513        /* Disable SysTick counter */
;;;514        SysTick->CTRL = 0;
000018  610a              STR      r2,[r1,#0x10]
;;;515    }
00001a  4770              BX       lr
;;;516    
                          ENDP

                  |L5.28|
                          DCD      CyclesPerUs
                  |L5.32|
                          DCD      0xe000e000

                          AREA ||i.RT568_FTTestSelection||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RT568_FTTestSelection PROC
;;;157    
;;;158    RT568FT_TestStatus RT568_FTTestSelection(BleFT_TestCase testCase)
000000  b538              PUSH     {r3-r5,lr}
;;;159    {
000002  4605              MOV      r5,r0
;;;160        RT568FT_TestStatus status;
;;;161        uint8_t chipId;
;;;162    
;;;163        /* ======================================================== */
;;;164        /* Reset RT568 and re-init RF to do continuous FT Test in this demo code
;;;165         * If FT test would power-off and power-on before each test case then these commands can be removed.
;;;166        */
;;;167        MCU_GpioResetInit(); // reset pin will be set to input when in sleep and deep sleep mode.
000004  f7fffffe          BL       MCU_GpioResetInit
;;;168        RT568_Reset();
000008  f7fffffe          BL       RT568_Reset
;;;169        RF_Init();
00000c  f7fffffe          BL       RF_Init
;;;170      
;;;171        chipId = ChipId_Get();
000010  f7fffffe          BL       ChipId_Get
000014  4604              MOV      r4,r0
;;;172        D_msg("Chip_ID=0x%x\n",chipId);
000016  4601              MOV      r1,r0
000018  a025              ADR      r0,|L6.176|
00001a  f7fffffe          BL       __2printf
;;;173        
;;;174        if((chipId != MP_A1) && (chipId != MP_A2))
00001e  2c66              CMP      r4,#0x66
000020  d003              BEQ      |L6.42|
000022  2c67              CMP      r4,#0x67
000024  d001              BEQ      |L6.42|
;;;175        {
;;;176          return RT568_TEST_ERROR_ID;
000026  2001              MOVS     r0,#1
;;;177        }  
;;;178        /* ======================================================== */
;;;179    
;;;180        // Start test
;;;181        switch(testCase)
;;;182        {
;;;183        case TX_2402_LDO_TEST:
;;;184            status = RT568_TxTest(LDO_MODE);
;;;185            D_msg("[RT568_FT TX @2402MHz LDO Test]\n");
;;;186            break;
;;;187    
;;;188        case TX_2402_DCDC_TEST:
;;;189            status = RT568_TxTest(DCDC_MODE);
;;;190            D_msg("[RT568_FT TX @2402MHz DCDC Test]\n");
;;;191            break;
;;;192    
;;;193        case RX_LDO_TEST:
;;;194            status = RT568_RxTest(LDO_MODE);
;;;195            D_msg("[RT568_FT RX LDO Test]\n");
;;;196            break;
;;;197    
;;;198        case RX_DCDC_TEST:
;;;199            status = RT568_RxTest(DCDC_MODE);
;;;200            D_msg("[RT568_FT RX DCDC Test]\n");
;;;201            break;
;;;202    
;;;203        case SLEEP_TEST:
;;;204            status = RT568_SleepTest();
;;;205            D_msg("[RT568_FT Sleep Test]\n");
;;;206            break;
;;;207    
;;;208        case DEEPSLEEP_TEST:
;;;209            status = RT568_DeepSleepTest();
;;;210            D_msg("[RT568_FT Deep Sleep Test]\n");
;;;211            break;
;;;212    
;;;213        case RSSI_DUTRX_TEST_WITH_SG:
;;;214        {
;;;215            signed char rssiResult;
;;;216            status = RT568_RssiDUT_RxTest(FT_RSSITEST_BASE_VALUE,FT_RSSITEST_RANGE, &rssiResult);
;;;217            D_msg("[RT568_FT RSSI DUT RX Test] RSSI: %d\n",rssiResult);  
;;;218        }
;;;219          break;
;;;220    
;;;221        case CLK_16M_TEST:
;;;222            status = RT568_16MCLK_Test();
;;;223            D_msg("[RT568_FT 16MHz CLK Test]\n");
;;;224            break;
;;;225    
;;;226        default:
;;;227            return RT568_TEST_ERROR_CMD;
;;;228        }
;;;229    
;;;230        if(status != RT568_TEST_OK)
;;;231        {
;;;232            return status;
;;;233        }
;;;234    
;;;235        return RT568_TEST_OK;
;;;236    }
000028  bd38              POP      {r3-r5,pc}
                  |L6.42|
00002a  002b              MOVS     r3,r5                 ;181
00002c  f7fffffe          BL       __ARM_common_switch8
000030  093e060c          DCB      0x09,0x3e,0x06,0x0c
000034  141a2025          DCB      0x14,0x1a,0x20,0x25
000038  2a393e00          DCB      0x2a,0x39,0x3e,0x00
00003c  2000              MOVS     r0,#0                 ;184
00003e  f7fffffe          BL       RT568_TxTest
000042  4604              MOV      r4,r0                 ;184
000044  a01e              ADR      r0,|L6.192|
000046  e004              B        |L6.82|
000048  2001              MOVS     r0,#1                 ;189
00004a  f7fffffe          BL       RT568_TxTest
00004e  4604              MOV      r4,r0                 ;189
000050  a024              ADR      r0,|L6.228|
                  |L6.82|
000052  f7fffffe          BL       __2printf
000056  e022              B        |L6.158|
000058  2000              MOVS     r0,#0                 ;194
00005a  f7fffffe          BL       RT568_RxTest
00005e  4604              MOV      r4,r0                 ;194
000060  a029              ADR      r0,|L6.264|
000062  e7f6              B        |L6.82|
000064  2001              MOVS     r0,#1                 ;199
000066  f7fffffe          BL       RT568_RxTest
00006a  4604              MOV      r4,r0                 ;199
00006c  a02c              ADR      r0,|L6.288|
00006e  e7f0              B        |L6.82|
000070  f7fffffe          BL       RT568_SleepTest
000074  4604              MOV      r4,r0                 ;204
000076  a031              ADR      r0,|L6.316|
000078  e7eb              B        |L6.82|
00007a  f7fffffe          BL       RT568_DeepSleepTest
00007e  4604              MOV      r4,r0                 ;209
000080  a034              ADR      r0,|L6.340|
000082  e7e6              B        |L6.82|
000084  201f              MOVS     r0,#0x1f              ;216
000086  466a              MOV      r2,sp                 ;216
000088  2114              MOVS     r1,#0x14              ;216
00008a  43c0              MVNS     r0,r0                 ;216
00008c  f7fffffe          BL       RT568_RssiDUT_RxTest
000090  4604              MOV      r4,r0                 ;216
000092  4668              MOV      r0,sp                 ;217
000094  2100              MOVS     r1,#0                 ;217
000096  5641              LDRSB    r1,[r0,r1]            ;217
000098  a035              ADR      r0,|L6.368|
00009a  f7fffffe          BL       __2printf
                  |L6.158|
00009e  4620              MOV      r0,r4                 ;232
0000a0  bd38              POP      {r3-r5,pc}
0000a2  f7fffffe          BL       RT568_16MCLK_Test
0000a6  4604              MOV      r4,r0                 ;222
0000a8  a03b              ADR      r0,|L6.408|
0000aa  e7d2              B        |L6.82|
0000ac  2002              MOVS     r0,#2                 ;227
0000ae  bd38              POP      {r3-r5,pc}
;;;237    
                          ENDP

                  |L6.176|
0000b0  43686970          DCB      "Chip_ID=0x%x\n",0
0000b4  5f49443d
0000b8  30782578
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L6.192|
0000c0  5b525435          DCB      "[RT568_FT TX @2402MHz LDO Test]\n",0
0000c4  36385f46
0000c8  54205458
0000cc  20403234
0000d0  30324d48
0000d4  7a204c44
0000d8  4f205465
0000dc  73745d0a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L6.228|
0000e4  5b525435          DCB      "[RT568_FT TX @2402MHz DCDC Test]\n",0
0000e8  36385f46
0000ec  54205458
0000f0  20403234
0000f4  30324d48
0000f8  7a204443
0000fc  44432054
000100  6573745d
000104  0a00    
000106  00                DCB      0
000107  00                DCB      0
                  |L6.264|
000108  5b525435          DCB      "[RT568_FT RX LDO Test]\n",0
00010c  36385f46
000110  54205258
000114  204c444f
000118  20546573
00011c  745d0a00
                  |L6.288|
000120  5b525435          DCB      "[RT568_FT RX DCDC Test]\n",0
000124  36385f46
000128  54205258
00012c  20444344
000130  43205465
000134  73745d0a
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L6.316|
00013c  5b525435          DCB      "[RT568_FT Sleep Test]\n",0
000140  36385f46
000144  5420536c
000148  65657020
00014c  54657374
000150  5d0a00  
000153  00                DCB      0
                  |L6.340|
000154  5b525435          DCB      "[RT568_FT Deep Sleep Test]\n",0
000158  36385f46
00015c  54204465
000160  65702053
000164  6c656570
000168  20546573
00016c  745d0a00
                  |L6.368|
000170  5b525435          DCB      "[RT568_FT RSSI DUT RX Test] RSSI: %d\n",0
000174  36385f46
000178  54205253
00017c  53492044
000180  55542052
000184  58205465
000188  73745d20
00018c  52535349
000190  3a202564
000194  0a00    
000196  00                DCB      0
000197  00                DCB      0
                  |L6.408|
000198  5b525435          DCB      "[RT568_FT 16MHz CLK Test]\n",0
00019c  36385f46
0001a0  54203136
0001a4  4d487a20
0001a8  434c4b20
0001ac  54657374
0001b0  5d0a00  
0001b3  00                DCB      0

                          AREA ||i.RT568_Reset||, CODE, READONLY, ALIGN=2

                  RT568_Reset PROC
;;;69     
;;;70     void RT568_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;71     {
;;;72         // Disable MCU GPIO interrupt
;;;73         MCU_GpioIntDisable();
000002  f7fffffe          BL       MCU_GpioIntDisable
;;;74     
;;;75         // Disable PDMA and SPI module
;;;76         PDMA_Close(PDMA);
000006  480e              LDR      r0,|L7.64|
000008  f7fffffe          BL       PDMA_Close
;;;77         SPI_Close(SPI0);
00000c  480d              LDR      r0,|L7.68|
00000e  f7fffffe          BL       SPI_Close
;;;78     
;;;79         //Reset pins to GPIO
;;;80         // MCU SPI pin initialization
;;;81     #if ((_BOARD_SELECTION_ == _BOARD_NUVOTON_M031SE_) || (_BOARD_SELECTION_ == _BOARD_NUVOTON_M032SE3AE_) || (_BOARD_SELECTION_ == _BOARD_NUVOTON_M487JIDAE_B3_) || (_BOARD_SELECTION_ == _BOARD_NUVOTON_M031TD2AE_QFN33_))
;;;82         // Setup SPI0 multi-function pins //
;;;83         // PA.3 is SPI0_SS,   PA.2 is SPI0_CLK,
;;;84         // PA.1 is SPI0_MISO, PA.0 is SPI0_MOSI
;;;85         SYS->GPA_MFPL = (SYS->GPA_MFPL & ~(SYS_GPA_MFPL_PA3MFP_Msk |
000012  2001              MOVS     r0,#1
000014  0780              LSLS     r0,r0,#30
000016  6b01              LDR      r1,[r0,#0x30]
000018  0c09              LSRS     r1,r1,#16
00001a  0409              LSLS     r1,r1,#16
00001c  6301              STR      r1,[r0,#0x30]
;;;86                                            SYS_GPA_MFPL_PA2MFP_Msk |
;;;87                                            SYS_GPA_MFPL_PA1MFP_Msk |
;;;88                                            SYS_GPA_MFPL_PA0MFP_Msk)) |
;;;89                         (SYS_GPA_MFPL_PA3MFP_GPIO |
;;;90                          SYS_GPA_MFPL_PA2MFP_GPIO |
;;;91                          SYS_GPA_MFPL_PA1MFP_GPIO |
;;;92                          SYS_GPA_MFPL_PA0MFP_GPIO);
;;;93     #elif (_BOARD_SELECTION_ == _BOARD_NUVOTON_M031_SIP_)    //SIP
;;;94     
;;;95         SYS->GPD_MFPL = (SYS->GPD_MFPL & ~(SYS_GPD_MFPL_PD3MFP_Msk |
;;;96                                            SYS_GPD_MFPL_PD2MFP_Msk |
;;;97                                            SYS_GPD_MFPL_PD1MFP_Msk |
;;;98                                            SYS_GPD_MFPL_PD0MFP_Msk)) |
;;;99                         (SYS_GPD_MFPL_PD3MFP_GPIO   |
;;;100                         SYS_GPD_MFPL_PD2MFP_GPIO  |
;;;101                         SYS_GPD_MFPL_PD1MFP_GPIO |
;;;102                         SYS_GPD_MFPL_PD0MFP_GPIO);
;;;103    
;;;104    #endif  //_BOARD_SELECTION_      
;;;105        CLK_SysTickDelay(10000);
00001e  480a              LDR      r0,|L7.72|
000020  f7fffffe          BL       CLK_SysTickDelay
;;;106    
;;;107        // Initialize Gpio reset pin
;;;108        MCU_GpioResetInit();
000024  f7fffffe          BL       MCU_GpioResetInit
;;;109    
;;;110        // Do Gpio Reset
;;;111        MCU_GpioReset();
000028  f7fffffe          BL       MCU_GpioReset
;;;112        CLK_SysTickDelay(50000);     //HW 32K clk count 15ms, but need to consider 32K deviation & MCU HIRC deviation
00002c  4807              LDR      r0,|L7.76|
00002e  f7fffffe          BL       CLK_SysTickDelay
;;;113    
;;;114        // SPI IO remapping
;;;115        RF_SpiIoMapping();
000032  f7fffffe          BL       RF_SpiIoMapping
;;;116    
;;;117        // Enable MCU GPIO interrupt
;;;118        MCU_GpioIntEnable();
000036  f7fffffe          BL       MCU_GpioIntEnable
;;;119    
;;;120        // initial SPI PDMA
;;;121        SPI_PDMA_Init();
00003a  f7fffffe          BL       SPI_PDMA_Init
;;;122    }
00003e  bd10              POP      {r4,pc}
;;;123    
                          ENDP

                  |L7.64|
                          DCD      0x40008000
                  |L7.68|
                          DCD      0x40061000
                  |L7.72|
                          DCD      0x00002710
                  |L7.76|
                          DCD      0x0000c350

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;261    
;;;262    void UART02_IRQHandler(void) __irq
000000  b5f8              PUSH     {r3-r7,lr}
;;;263    {
;;;264        static uint8_t uartBuffer[218];
;;;265        static uint8_t index = 0u;
;;;266    
;;;267        uint8_t volatile uartReceiveByte;
;;;268    
;;;269        if (UART_GET_INT_FLAG(UART0,UART_INTSTS_RDAINT_Msk))
000002  4d0e              LDR      r5,|L8.60|
000004  69e8              LDR      r0,[r5,#0x1c]
;;;270        {
;;;271            /* Get all the input characters */
;;;272            while(UART_IS_RX_READY(UART0))
;;;273            {
;;;274                /* Get the character from UART Buffer */
;;;275                uartReceiveByte = UART_READ(UART0);
;;;276                uartBuffer[index] = uartReceiveByte;
000006  4c0e              LDR      r4,|L8.64|
000008  05c0              LSLS     r0,r0,#23             ;269
00000a  d515              BPL      |L8.56|
00000c  4e0d              LDR      r6,|L8.68|
00000e  2700              MOVS     r7,#0
                  |L8.16|
000010  69e8              LDR      r0,[r5,#0x1c]         ;272
000012  07c0              LSLS     r0,r0,#31             ;272
000014  d010              BEQ      |L8.56|
000016  6828              LDR      r0,[r5,#0]            ;275
000018  4669              MOV      r1,sp                 ;275
00001a  7008              STRB     r0,[r1,#0]            ;275
00001c  7808              LDRB     r0,[r1,#0]
00001e  7861              LDRB     r1,[r4,#1]  ; index
000020  5470              STRB     r0,[r6,r1]
;;;277    
;;;278                if(BLEDemo_UartRxDataHandler(uartBuffer,index) == 0)
000022  4808              LDR      r0,|L8.68|
000024  f7fffffe          BL       BLEDemo_UartRxDataHandler
000028  2800              CMP      r0,#0
00002a  d003              BEQ      |L8.52|
;;;279                {
;;;280                    index = 0;
;;;281                }
;;;282                else
;;;283                {
;;;284                    index++;
00002c  7860              LDRB     r0,[r4,#1]  ; index
00002e  1c40              ADDS     r0,r0,#1
000030  7060              STRB     r0,[r4,#1]
000032  e7ed              B        |L8.16|
                  |L8.52|
000034  7067              STRB     r7,[r4,#1]            ;280
000036  e7eb              B        |L8.16|
                  |L8.56|
;;;285                }
;;;286            }
;;;287        }
;;;288    }
000038  bdf8              POP      {r3-r7,pc}
;;;289    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      0x40070000
                  |L8.64|
                          DCD      ||.data||
                  |L8.68|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uartBuffer
                          %        218

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2b3d3d3d          DCB      "+======================================================"
000004  3d3d3d3d
000008  3d3d3d3d
00000c  3d3d3d3d
000010  3d3d3d3d
000014  3d3d3d3d
000018  3d3d3d3d
00001c  3d3d3d3d
000020  3d3d3d3d
000024  3d3d3d3d
000028  3d3d3d3d
00002c  3d3d3d3d
000030  3d3d3d3d
000034  3d3d3d  
000037  3d3d3d3d          DCB      "==============+\n",0
00003b  3d3d3d3d
00003f  3d3d3d3d
000043  3d3d2b0a
000047  00      

                          AREA ||.data||, DATA, ALIGN=0

                  appSystemRequest
000000  01                DCB      0x01
                  index
000001  00                DCB      0x00
                  bleFtTestCase
000002  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L59.16|
00000e  461d              MOV      r5,r3
                  |L59.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\user.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_user_c_363cd79c____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_user_c_363cd79c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_user_c_363cd79c____REVSH|
#line 402
|__asm___6_user_c_363cd79c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

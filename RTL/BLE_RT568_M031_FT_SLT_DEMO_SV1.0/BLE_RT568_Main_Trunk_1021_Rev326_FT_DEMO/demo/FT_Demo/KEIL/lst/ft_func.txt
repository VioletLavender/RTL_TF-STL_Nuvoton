; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ft_func.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ft_func.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\ft_func.crf ..\FT_Func\ft_func.c]
                          THUMB

                          AREA ||i.RT568_16MCLK_Test||, CODE, READONLY, ALIGN=2

                  RT568_16MCLK_Test PROC
;;;427    */
;;;428    RT568FT_TestStatus RT568_16MCLK_Test(void)
000000  b510              PUSH     {r4,lr}
;;;429    {
;;;430        // disable MCU interrupts
;;;431        MCU_GpioIntDisable();
000002  f7fffffe          BL       MCU_GpioIntDisable
;;;432    
;;;433        RT568_SetCmd((uint32_t)Test_LDO_16MCLK_Reg);
000006  4804              LDR      r0,|L1.24|
000008  f7fffffe          BL       RT568_SetCmd
;;;434    
;;;435    
;;;436        Tiny_Delay(10);
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       Tiny_Delay
;;;437        return RT568_TEST_OK;
000012  2000              MOVS     r0,#0
;;;438    }
000014  bd10              POP      {r4,pc}
;;;439    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      ||.constdata||+0x300

                          AREA ||i.RT568_DeepSleepTest||, CODE, READONLY, ALIGN=1

                  RT568_DeepSleepTest PROC
;;;341    /* TestCase: Deep Sleep */
;;;342    RT568FT_TestStatus RT568_DeepSleepTest(void)
000000  b510              PUSH     {r4,lr}
;;;343    {
;;;344        BleStackStatus status;
;;;345        extern void RF_IntReset(void);
;;;346        extern void RF_External_Wakeup(void);
;;;347    
;;;348        // set reset pin to input pin to avoid leakage current in sleep mode
;;;349        MCU_SetGpioResetIdle();
000002  f7fffffe          BL       MCU_SetGpioResetIdle
;;;350      
;;;351        // diable sleep mode
;;;352        RF_External_Wakeup();
000006  f7fffffe          BL       RF_External_Wakeup
;;;353    
;;;354        // disable all RT568 interrupts
;;;355        RF_IntReset();
00000a  f7fffffe          BL       RF_IntReset
;;;356    
;;;357        // disable MCU interrupts
;;;358        MCU_GpioIntDisable();
00000e  f7fffffe          BL       MCU_GpioIntDisable
;;;359    
;;;360        // enter deep sleep
;;;361        status = setRF_EnterDeepSleep();
000012  f7fffffe          BL       setRF_EnterDeepSleep
;;;362    
;;;363        if(status != BLESTACK_STATUS_SUCCESS)
000016  2800              CMP      r0,#0
000018  d001              BEQ      |L2.30|
;;;364        {
;;;365            return RT568_TEST_ERROR_DEEPSLEEP;
00001a  2006              MOVS     r0,#6
;;;366        }
;;;367    
;;;368        Tiny_Delay(10);
;;;369        return RT568_TEST_OK;
;;;370    }
00001c  bd10              POP      {r4,pc}
                  |L2.30|
00001e  200a              MOVS     r0,#0xa               ;368
000020  f7fffffe          BL       Tiny_Delay
000024  2000              MOVS     r0,#0                 ;369
000026  bd10              POP      {r4,pc}
;;;371    
                          ENDP


                          AREA ||i.RT568_RssiDUT_RxTest||, CODE, READONLY, ALIGN=2

                  RT568_RssiDUT_RxTest PROC
;;;402    /* TestCase: RSSI wiht SG, DUT /rX */
;;;403    RT568FT_TestStatus RT568_RssiDUT_RxTest(int8_t rssiBase, uint8_t rssiRange, signed char* rssi)
000000  b5f8              PUSH     {r3-r7,lr}
;;;404    {
000002  4616              MOV      r6,r2
000004  460d              MOV      r5,r1
000006  4604              MOV      r4,r0
;;;405        // disable MCU interrupts
;;;406        MCU_GpioIntDisable();
000008  f7fffffe          BL       MCU_GpioIntDisable
00000c  481a              LDR      r0,|L3.120|
00000e  f7fffffe          BL       RT568_SetCmd
000012  481a              LDR      r0,|L3.124|
000014  f7fffffe          BL       Tiny_Delay
000018  2140              MOVS     r1,#0x40
00001a  2079              MOVS     r0,#0x79
00001c  f7fffffe          BL       SPI_1BYT_SetTx
000020  2111              MOVS     r1,#0x11
000022  2060              MOVS     r0,#0x60
000024  f7fffffe          BL       SPI_1BYT_SetTx
000028  2180              MOVS     r1,#0x80
00002a  2077              MOVS     r0,#0x77
00002c  f7fffffe          BL       SPI_1BYT_SetTx
000030  277d              MOVS     r7,#0x7d
000032  00ff              LSLS     r7,r7,#3
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       Tiny_Delay
00003a  2035              MOVS     r0,#0x35
00003c  f7fffffe          BL       SPI_1BYT_SetRx
000040  21bf              MOVS     r1,#0xbf
000042  4001              ANDS     r1,r1,r0
000044  2035              MOVS     r0,#0x35
000046  f7fffffe          BL       SPI_1BYT_SetTx
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       Tiny_Delay
;;;407    
;;;408        /*=================================================================
;;;409         *  RX: start to get RSSI value
;;;410          =================================================================*/
;;;411        RT568_SetRssiTestRx();
;;;412    
;;;413        // check rssi
;;;414        Tiny_Delay(500);
000050  1078              ASRS     r0,r7,#1
000052  f7fffffe          BL       Tiny_Delay
000056  206c              MOVS     r0,#0x6c
000058  f7fffffe          BL       SPI_1BYT_SetRx
00005c  30e8              ADDS     r0,r0,#0xe8
00005e  b240              SXTB     r0,r0
000060  b269              SXTB     r1,r5
000062  1862              ADDS     r2,r4,r1
;;;415        *rssi = RT568_GetRssiValue();
000064  7030              STRB     r0,[r6,#0]
000066  4282              CMP      r2,r0
;;;416    
;;;417        if(RT568_CheckRssiValue(*rssi,rssiBase,rssiRange) == 0)
000068  db02              BLT      |L3.112|
00006a  1a61              SUBS     r1,r4,r1
00006c  4281              CMP      r1,r0
00006e  dd01              BLE      |L3.116|
                  |L3.112|
;;;418        {
;;;419            return RT568_TEST_ERROR_RSSI;
000070  2003              MOVS     r0,#3
;;;420        }
;;;421    
;;;422        return RT568_TEST_OK;
;;;423    }
000072  bdf8              POP      {r3-r7,pc}
                  |L3.116|
000074  2000              MOVS     r0,#0                 ;422
000076  bdf8              POP      {r3-r7,pc}
;;;424    
                          ENDP

                  |L3.120|
                          DCD      ||.constdata||+0x200
                  |L3.124|
                          DCD      0x00001388

                          AREA ||i.RT568_RxTest||, CODE, READONLY, ALIGN=2

                  RT568_RxTest PROC
;;;308    */
;;;309    RT568FT_TestStatus RT568_RxTest(RT568VoltageMode mode)
000000  b510              PUSH     {r4,lr}
;;;310    {
000002  4604              MOV      r4,r0
;;;311        uint8_t regData;
;;;312    
;;;313        // disable MCU interrupts
;;;314        MCU_GpioIntDisable();
000004  f7fffffe          BL       MCU_GpioIntDisable
;;;315    
;;;316        RT568_SetCmd((uint32_t)Test_LDODCDC_RxSysCurr_Reg);
000008  4809              LDR      r0,|L4.48|
00000a  f7fffffe          BL       RT568_SetCmd
;;;317    
;;;318        switch(mode)
00000e  2c00              CMP      r4,#0
000010  d003              BEQ      |L4.26|
000012  2c01              CMP      r4,#1
000014  d003              BEQ      |L4.30|
;;;319        {
;;;320        case LDO_MODE:
;;;321            // disable DCDC
;;;322            regData = (Test_LDODCDC_RxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xEF);      //R40[4]=0(buck off)
;;;323            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;324            break;
;;;325    
;;;326        case DCDC_MODE:
;;;327            // disable LDO
;;;328            regData = (Test_LDODCDC_RxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xBF);       //R40[6]=0(ldo off)
;;;329            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;330            break;
;;;331    
;;;332        default:
;;;333            return RT568_TEST_ERROR_CMD;
000016  2002              MOVS     r0,#2
;;;334        }
;;;335    
;;;336        Tiny_Delay(10);
;;;337        return RT568_TEST_OK;
;;;338    }
000018  bd10              POP      {r4,pc}
                  |L4.26|
00001a  21c0              MOVS     r1,#0xc0              ;322
00001c  e000              B        |L4.32|
                  |L4.30|
00001e  2190              MOVS     r1,#0x90              ;328
                  |L4.32|
000020  2028              MOVS     r0,#0x28              ;323
000022  f7fffffe          BL       SPI_1BYT_SetTx
000026  200a              MOVS     r0,#0xa               ;336
000028  f7fffffe          BL       Tiny_Delay
00002c  2000              MOVS     r0,#0                 ;337
00002e  bd10              POP      {r4,pc}
;;;339    
                          ENDP

                  |L4.48|
                          DCD      ||.constdata||+0x100

                          AREA ||i.RT568_SetCmd||, CODE, READONLY, ALIGN=1

                  RT568_SetCmd PROC
;;;497    
;;;498    static void RT568_SetCmd(uint32_t u32SrcAddr)
000000  4601              MOV      r1,r0
;;;499    {
000002  b510              PUSH     {r4,lr}
;;;500        // start from register REG_START
;;;501        SPI_PDMA_SetTx(REG_START,u32SrcAddr+REG_START,TEST_WRITE_REG_LEN);
000004  22f0              MOVS     r2,#0xf0
000006  3108              ADDS     r1,r1,#8
000008  2008              MOVS     r0,#8
00000a  f7fffffe          BL       SPI_PDMA_SetTx
;;;502        SPI_PDMA_waitFinish();
00000e  f7fffffe          BL       SPI_PDMA_waitFinish
;;;503    }
000012  bd10              POP      {r4,pc}
;;;504    
                          ENDP


                          AREA ||i.RT568_SleepTest||, CODE, READONLY, ALIGN=2

                  RT568_SleepTest PROC
;;;373    /* TestCase: Sleep */
;;;374    RT568FT_TestStatus RT568_SleepTest(void)
000000  b510              PUSH     {r4,lr}
;;;375    {
;;;376        extern void RF_IntReset(void);
;;;377        extern void RF_External_Wakeup(void);
;;;378        extern void RF_Tmr_Periodic_initial(uint32_t period_tick, uint8_t sleep_mode);
;;;379    
;;;380        // set reset pin to input pin to avoid leakage current in sleep mode
;;;381        MCU_SetGpioResetIdle();
000002  f7fffffe          BL       MCU_SetGpioResetIdle
;;;382      
;;;383        // diable sleep mode
;;;384        RF_External_Wakeup();
000006  f7fffffe          BL       RF_External_Wakeup
;;;385    
;;;386        // disable all RT568 interrupts
;;;387        RF_IntReset();
00000a  f7fffffe          BL       RF_IntReset
;;;388    
;;;389        // disable MCU interrupts
;;;390        MCU_GpioIntDisable();
00000e  f7fffffe          BL       MCU_GpioIntDisable
;;;391    
;;;392        // enter sleep mode
;;;393        //RF_Tmr_Periodic_initial(12000,1); // 1.5s
;;;394        RF_Tmr_Periodic_initial(80000,1); // 10s
000012  2101              MOVS     r1,#1
000014  4803              LDR      r0,|L6.36|
000016  f7fffffe          BL       RF_Tmr_Periodic_initial
;;;395    
;;;396        Tiny_Delay(10);
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       Tiny_Delay
;;;397        return RT568_TEST_OK;
000020  2000              MOVS     r0,#0
;;;398    }
000022  bd10              POP      {r4,pc}
;;;399    
                          ENDP

                  |L6.36|
                          DCD      0x00013880

                          AREA ||i.RT568_SleepWakeupTest||, CODE, READONLY, ALIGN=2

                  RT568_SleepWakeupTest PROC
;;;446    */
;;;447    static RT568FT_TestStatus RT568_SleepWakeupTest(uint8_t sleep_ms)
000000  b5f8              PUSH     {r3-r7,lr}
;;;448    {
000002  4604              MOV      r4,r0
;;;449        static int sleepCount = 0;
;;;450    		static uint8_t timeoutCount = 0; 
;;;451        extern uint8_t FT_WakeupFlag;
;;;452        extern void RF_IntReset(void);
;;;453        extern void RF_External_Wakeup(void);
;;;454        extern void RF_Tmr_Periodic_initial(uint32_t period_tick, uint8_t sleep_mode);
;;;455    
;;;456        // diable sleep mode
;;;457        RF_External_Wakeup();
000004  f7fffffe          BL       RF_External_Wakeup
;;;458    
;;;459        // disable all RT568 interrupts
;;;460        RF_IntReset();
000008  f7fffffe          BL       RF_IntReset
;;;461    
;;;462        // disable MCU interrupts
;;;463        MCU_GpioIntDisable();
00000c  f7fffffe          BL       MCU_GpioIntDisable
;;;464    
;;;465        // enter sleep mode
;;;466        FT_WakeupFlag = 0;
000010  4e14              LDR      r6,|L7.100|
000012  2500              MOVS     r5,#0
000014  7035              STRB     r5,[r6,#0]
;;;467        RF_Tmr_Periodic_initial((sleep_ms*8),1); // the unit of sleep time = 125us
000016  00e0              LSLS     r0,r4,#3
000018  2101              MOVS     r1,#1
00001a  f7fffffe          BL       RF_Tmr_Periodic_initial
;;;468    
;;;469        MCU_GpioIntEnable();
00001e  f7fffffe          BL       MCU_GpioIntEnable
;;;470    
;;;471        // sleep test
;;;472        while(sleepCount < 5)
;;;473        {
;;;474            
;;;475            timeoutCount++;
;;;476    
;;;477            if(timeoutCount > 100) // 100ms
;;;478            {
;;;479    					 timeoutCount = 0;
;;;480                sleepCount = 0;
;;;481                return RT568_TEST_ERROR_TIMEOUT;
;;;482            }
;;;483    
;;;484            if(FT_WakeupFlag == 1)
;;;485            {
;;;486                FT_WakeupFlag = 0;
;;;487                sleepCount++;
;;;488            }
;;;489            Tiny_Delay(1000);
000022  277d              MOVS     r7,#0x7d
000024  4c10              LDR      r4,|L7.104|
000026  00ff              LSLS     r7,r7,#3
000028  e012              B        |L7.80|
                  |L7.42|
00002a  7820              LDRB     r0,[r4,#0]            ;475  ; timeoutCount
00002c  1c40              ADDS     r0,r0,#1              ;475
00002e  b2c0              UXTB     r0,r0                 ;475
000030  7020              STRB     r0,[r4,#0]            ;475
000032  2864              CMP      r0,#0x64              ;477
000034  d903              BLS      |L7.62|
000036  7025              STRB     r5,[r4,#0]            ;479
000038  2004              MOVS     r0,#4                 ;481
00003a  6065              STR      r5,[r4,#4]            ;481  ; sleepCount
;;;490        }
;;;491        timeoutCount = 0;
;;;492        sleepCount = 0;
;;;493        Tiny_Delay(10);
;;;494        return RT568_TEST_OK;
;;;495    }
00003c  bdf8              POP      {r3-r7,pc}
                  |L7.62|
00003e  7830              LDRB     r0,[r6,#0]            ;484  ; FT_WakeupFlag
000040  2801              CMP      r0,#1                 ;484
000042  d102              BNE      |L7.74|
000044  7035              STRB     r5,[r6,#0]            ;486
000046  1c49              ADDS     r1,r1,#1              ;486
000048  6061              STR      r1,[r4,#4]            ;487  ; sleepCount
                  |L7.74|
00004a  4638              MOV      r0,r7                 ;489
00004c  f7fffffe          BL       Tiny_Delay
                  |L7.80|
000050  6861              LDR      r1,[r4,#4]            ;472  ; sleepCount
000052  2905              CMP      r1,#5                 ;472
000054  dbe9              BLT      |L7.42|
000056  7025              STRB     r5,[r4,#0]            ;491
000058  200a              MOVS     r0,#0xa               ;493
00005a  6065              STR      r5,[r4,#4]            ;493  ; sleepCount
00005c  f7fffffe          BL       Tiny_Delay
000060  2000              MOVS     r0,#0                 ;494
000062  bdf8              POP      {r3-r7,pc}
;;;496    
                          ENDP

                  |L7.100|
                          DCD      FT_WakeupFlag
                  |L7.104|
                          DCD      ||.data||

                          AREA ||i.RT568_TxTest||, CODE, READONLY, ALIGN=2

                  RT568_TxTest PROC
;;;258    */
;;;259    RT568FT_TestStatus RT568_TxTest(RT568VoltageMode mode)
000000  b510              PUSH     {r4,lr}
;;;260    {
000002  4604              MOV      r4,r0
;;;261        uint8_t regData;
;;;262    
;;;263    #if (ADDED_SLEEPTEST_IN_TXTEST == 1 )
;;;264        if(RT568_SleepWakeupTest(5) != RT568_TEST_OK) // 5ms
000004  2005              MOVS     r0,#5
000006  f7fffffe          BL       RT568_SleepWakeupTest
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L8.18|
;;;265        {
;;;266            return RT568_TEST_ERROR_SLEEP;
00000e  2005              MOVS     r0,#5
;;;267        }
;;;268    #else
;;;269    
;;;270        // diable sleep mode
;;;271        RF_External_Wakeup();
;;;272    
;;;273        // disable all RT568 interrupts
;;;274        RF_IntReset();
;;;275    
;;;276    #endif
;;;277    
;;;278        // disable MCU interrupts
;;;279        MCU_GpioIntDisable();
;;;280    
;;;281        //R40[4]=1(buck on);R40[6]=1(ldo on)
;;;282        RT568_SetCmd((uint32_t)Test_LDODCDC_TxSysCurr_Reg);
;;;283    
;;;284        switch(mode)
;;;285        {
;;;286        case LDO_MODE:
;;;287            // disable DCDC
;;;288            regData = (Test_LDODCDC_TxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xEF);      //R40[4]=0(buck off)
;;;289            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;290            break;
;;;291    
;;;292        case DCDC_MODE:
;;;293            // disable LDO
;;;294            regData = (Test_LDODCDC_TxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xBF);       //R40[6]=0(ldo off)
;;;295            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;296            break;
;;;297    
;;;298        default:
;;;299            return RT568_TEST_ERROR_CMD;
;;;300        }
;;;301    
;;;302        Tiny_Delay(10);
;;;303        return RT568_TEST_OK;
;;;304    }
000010  bd10              POP      {r4,pc}
                  |L8.18|
000012  f7fffffe          BL       MCU_GpioIntDisable
000016  480a              LDR      r0,|L8.64|
000018  f7fffffe          BL       RT568_SetCmd
00001c  2c00              CMP      r4,#0                 ;284
00001e  d003              BEQ      |L8.40|
000020  2c01              CMP      r4,#1                 ;284
000022  d003              BEQ      |L8.44|
000024  2002              MOVS     r0,#2                 ;299
000026  bd10              POP      {r4,pc}
                  |L8.40|
000028  21c0              MOVS     r1,#0xc0              ;288
00002a  e000              B        |L8.46|
                  |L8.44|
00002c  2190              MOVS     r1,#0x90              ;294
                  |L8.46|
00002e  2028              MOVS     r0,#0x28              ;289
000030  f7fffffe          BL       SPI_1BYT_SetTx
000034  200a              MOVS     r0,#0xa               ;302
000036  f7fffffe          BL       Tiny_Delay
00003a  2000              MOVS     r0,#0                 ;303
00003c  bd10              POP      {r4,pc}
;;;305    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Test_LDODCDC_TxSysCurr_Reg
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000001          DCB      0x00,0x00,0x00,0x01
000008  1c80de24          DCB      0x1c,0x80,0xde,0x24
00000c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000010  2107f020          DCB      0x21,0x07,0xf0,0x20
000014  3880eeda          DCB      0x38,0x80,0xee,0xda
000018  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00001c  ffffff27          DCB      0xff,0xff,0xff,0x27
000020  a30000d2          DCB      0xa3,0x00,0x00,0xd2
000024  88ec929a          DCB      0x88,0xec,0x92,0x9a
000028  d00a6043          DCB      0xd0,0x0a,0x60,0x43
00002c  01206a00          DCB      0x01,0x20,0x6a,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00c0f000          DCB      0x00,0xc0,0xf0,0x00
000038  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00003c  003cff79          DCB      0x00,0x3c,0xff,0x79
000040  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000044  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000048  a01f55a1          DCB      0xa0,0x1f,0x55,0xa1
00004c  00440052          DCB      0x00,0x44,0x00,0x52
000050  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000054  00068e24          DCB      0x00,0x06,0x8e,0x24
000058  01440050          DCB      0x01,0x44,0x00,0x50
00005c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000060  f8600000          DCB      0xf8,0x60,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00000000          DCB      0x00,0x00,0x00,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
000070  555555ff          DCB      0x55,0x55,0x55,0xff
000074  ff4f0000          DCB      0xff,0x4f,0x00,0x00
000078  04802941          DCB      0x04,0x80,0x29,0x41
00007c  76710000          DCB      0x76,0x71,0x00,0x00
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  05000040          DCB      0x05,0x00,0x00,0x40
0000b0  00040240          DCB      0x00,0x04,0x02,0x40
0000b4  00500000          DCB      0x00,0x50,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000080          DCB      0x00,0x00,0x00,0x80
                  Test_LDODCDC_RxSysCurr_Reg
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  1c80de24          DCB      0x1c,0x80,0xde,0x24
00010c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000110  2107f020          DCB      0x21,0x07,0xf0,0x20
000114  3880eeda          DCB      0x38,0x80,0xee,0xda
000118  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00011c  ffffff27          DCB      0xff,0xff,0xff,0x27
000120  62007086          DCB      0x62,0x00,0x70,0x86
000124  88ec929a          DCB      0x88,0xec,0x92,0x9a
000128  d00a6043          DCB      0xd0,0x0a,0x60,0x43
00012c  01206a01          DCB      0x01,0x20,0x6a,0x01
000130  00000000          DCB      0x00,0x00,0x00,0x00
000134  00c0f800          DCB      0x00,0xc0,0xf8,0x00
000138  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00013c  003cff79          DCB      0x00,0x3c,0xff,0x79
000140  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000144  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000148  a01ff8a1          DCB      0xa0,0x1f,0xf8,0xa1
00014c  00440052          DCB      0x00,0x44,0x00,0x52
000150  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000154  00068e24          DCB      0x00,0x06,0x8e,0x24
000158  01440050          DCB      0x01,0x44,0x00,0x50
00015c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000160  f8600000          DCB      0xf8,0x60,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00000000          DCB      0x00,0x00,0x00,0x00
000170  55555500          DCB      0x55,0x55,0x55,0x00
000174  00000000          DCB      0x00,0x00,0x00,0x00
000178  00802941          DCB      0x00,0x80,0x29,0x41
00017c  76710000          DCB      0x76,0x71,0x00,0x00
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  7fffffff          DCB      0x7f,0xff,0xff,0xff
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  05000040          DCB      0x05,0x00,0x00,0x40
0001b0  00040240          DCB      0x00,0x04,0x02,0x40
0001b4  00500000          DCB      0x00,0x50,0x00,0x00
0001b8  00000000          DCB      0x00,0x00,0x00,0x00
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  00000000          DCB      0x00,0x00,0x00,0x00
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  00000080          DCB      0x00,0x00,0x00,0x80
                  Test_LDO_RssiRx1SysCurr_Reg
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000001          DCB      0x00,0x00,0x00,0x01
000208  1c80de24          DCB      0x1c,0x80,0xde,0x24
00020c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000210  2107f020          DCB      0x21,0x07,0xf0,0x20
000214  3880eeda          DCB      0x38,0x80,0xee,0xda
000218  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00021c  ffffff27          DCB      0xff,0xff,0xff,0x27
000220  62007086          DCB      0x62,0x00,0x70,0x86
000224  88ec7277          DCB      0x88,0xec,0x72,0x77
000228  c00a6043          DCB      0xc0,0x0a,0x60,0x43
00022c  01206a01          DCB      0x01,0x20,0x6a,0x01
000230  00000000          DCB      0x00,0x00,0x00,0x00
000234  00c0f800          DCB      0x00,0xc0,0xf8,0x00
000238  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00023c  0000ff79          DCB      0x00,0x00,0xff,0x79
000240  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000244  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000248  a01ff8a1          DCB      0xa0,0x1f,0xf8,0xa1
00024c  00440052          DCB      0x00,0x44,0x00,0x52
000250  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000254  00068e24          DCB      0x00,0x06,0x8e,0x24
000258  01440050          DCB      0x01,0x44,0x00,0x50
00025c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000260  11600000          DCB      0x11,0x60,0x00,0x00
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  55555500          DCB      0x55,0x55,0x55,0x00
000274  00000080          DCB      0x00,0x00,0x00,0x80
000278  00402941          DCB      0x00,0x40,0x29,0x41
00027c  76710000          DCB      0x76,0x71,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000000          DCB      0x00,0x00,0x00,0x00
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  7fffffff          DCB      0x7f,0xff,0xff,0xff
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000000          DCB      0x00,0x00,0x00,0x00
0002ac  05000040          DCB      0x05,0x00,0x00,0x40
0002b0  00040240          DCB      0x00,0x04,0x02,0x40
0002b4  00500000          DCB      0x00,0x50,0x00,0x00
0002b8  00000000          DCB      0x00,0x00,0x00,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  00000000          DCB      0x00,0x00,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  00000000          DCB      0x00,0x00,0x00,0x00
0002d0  00000000          DCB      0x00,0x00,0x00,0x00
0002d4  00000000          DCB      0x00,0x00,0x00,0x00
0002d8  00000000          DCB      0x00,0x00,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  00000000          DCB      0x00,0x00,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
                  Test_LDO_16MCLK_Reg
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  00000001          DCB      0x00,0x00,0x00,0x01
000308  1c80de24          DCB      0x1c,0x80,0xde,0x24
00030c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000310  2107f020          DCB      0x21,0x07,0xf0,0x20
000314  3880eeda          DCB      0x38,0x80,0xee,0xda
000318  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00031c  ffffff27          DCB      0xff,0xff,0xff,0x27
000320  6200708a          DCB      0x62,0x00,0x70,0x8a
000324  88ec929a          DCB      0x88,0xec,0x92,0x9a
000328  c00a6043          DCB      0xc0,0x0a,0x60,0x43
00032c  01206a00          DCB      0x01,0x20,0x6a,0x00
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  0080f000          DCB      0x00,0x80,0xf0,0x00
000338  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00033c  003cff79          DCB      0x00,0x3c,0xff,0x79
000340  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000344  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000348  a01f55a1          DCB      0xa0,0x1f,0x55,0xa1
00034c  00440052          DCB      0x00,0x44,0x00,0x52
000350  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000354  00068e24          DCB      0x00,0x06,0x8e,0x24
000358  01440050          DCB      0x01,0x44,0x00,0x50
00035c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000360  f8600000          DCB      0xf8,0x60,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  555555ff          DCB      0x55,0x55,0x55,0xff
000374  ff4f0000          DCB      0xff,0x4f,0x00,0x00
000378  04802941          DCB      0x04,0x80,0x29,0x41
00037c  76710000          DCB      0x76,0x71,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  00000000          DCB      0x00,0x00,0x00,0x00
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  05000040          DCB      0x05,0x00,0x00,0x40
0003b0  00040240          DCB      0x00,0x04,0x02,0x40
0003b4  00500000          DCB      0x00,0x50,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000080          DCB      0x00,0x00,0x00,0x80

                          AREA ||area_number.12||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.constdata||
                  Test_LDO_RssiTxSysCurr_Reg
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000001          DCB      0x00,0x00,0x00,0x01
000008  1c80de24          DCB      0x1c,0x80,0xde,0x24
00000c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000010  2107f020          DCB      0x21,0x07,0xf0,0x20
000014  3880eeda          DCB      0x38,0x80,0xee,0xda
000018  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00001c  ffffff27          DCB      0xff,0xff,0xff,0x27
000020  620020d2          DCB      0x62,0x00,0x20,0xd2
000024  88ec929a          DCB      0x88,0xec,0x92,0x9a
000028  c00a6043          DCB      0xc0,0x0a,0x60,0x43
00002c  01206a01          DCB      0x01,0x20,0x6a,0x01
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00c0f000          DCB      0x00,0xc0,0xf0,0x00
000038  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00003c  0000ff79          DCB      0x00,0x00,0xff,0x79
000040  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000044  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000048  a01f55a1          DCB      0xa0,0x1f,0x55,0xa1
00004c  00440052          DCB      0x00,0x44,0x00,0x52
000050  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000054  00068e24          DCB      0x00,0x06,0x8e,0x24
000058  01440050          DCB      0x01,0x44,0x00,0x50
00005c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000060  f8600000          DCB      0xf8,0x60,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00000000          DCB      0x00,0x00,0x00,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
000070  555555ff          DCB      0x55,0x55,0x55,0xff
000074  ff4f0000          DCB      0xff,0x4f,0x00,0x00
000078  04802941          DCB      0x04,0x80,0x29,0x41
00007c  76710000          DCB      0x76,0x71,0x00,0x00
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  05000040          DCB      0x05,0x00,0x00,0x40
0000b0  00040240          DCB      0x00,0x04,0x02,0x40
0000b4  00500000          DCB      0x00,0x50,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000080          DCB      0x00,0x00,0x00,0x80

                          AREA ||.data||, DATA, ALIGN=2

                  timeoutCount
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  sleepCount
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\FT_Func\\ft_func.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ft_func_c_83b45dc3____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ft_func_c_83b45dc3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ft_func_c_83b45dc3____REVSH|
#line 402
|__asm___9_ft_func_c_83b45dc3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\hci.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\hci.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\..\..\Library\CMSIS\Include -I..\..\..\..\..\..\Library\StdDriver\inc -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\hci.crf ..\..\..\source\hci.c]
                          THUMB

                          AREA ||i.BleMHC_PostEvent||, CODE, READONLY, ALIGN=2

                  BleMHC_PostEvent PROC
;;;574    //static void BleMHC_PostEvent(BleCmdEvent event, void *parms)
;;;575    void BleMHC_PostEvent(BleCmdEvent event, void *parms)
000000  4a01              LDR      r2,|L1.8|
;;;576    {
;;;577        mhcCallBack(event, parms);
000002  6852              LDR      r2,[r2,#4]  ; mhcCallBack
000004  4710              BX       r2
;;;578    }
;;;579    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      ||.data||

                          AREA ||i.HCI_Root||, CODE, READONLY, ALIGN=2

                  HCI_Root PROC
;;;1502   
;;;1503   void HCI_Root(Uint8 QueueId)
000000  b510              PUSH     {r4,lr}
;;;1504   {
;;;1505       Uint8 event;
;;;1506       MBLK *pmblk;
;;;1507   
;;;1508   #ifdef _HCI_HW_
;;;1509   #ifdef _HCI_VIRTUAL_
;;;1510       if(HCIDataPending)
;;;1511       {
;;;1512           return;
;;;1513       }
;;;1514   #else
;;;1515       if(UARTBufValidT)
;;;1516       {
;;;1517           return;
;;;1518       }
;;;1519   #endif
;;;1520   #endif
;;;1521       pmblk = RcvMsgBlk(QueueId);
000002  f7fffffe          BL       RcvMsgBlk
000006  4604              MOV      r4,r0
;;;1522       event = pmblk->Primitive - HCI_E0;
000008  7900              LDRB     r0,[r0,#4]
00000a  3860              SUBS     r0,r0,#0x60
00000c  0601              LSLS     r1,r0,#24
;;;1523       (*(HCI_fsm[event]))(pmblk);
00000e  0d88              LSRS     r0,r1,#22
000010  4903              LDR      r1,|L2.32|
000012  5809              LDR      r1,[r1,r0]
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
;;;1524       FreeMsgBlk(pmblk);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       FreeMsgBlk
;;;1525   }
00001e  bd10              POP      {r4,pc}
;;;1526   
                          ENDP

                  |L2.32|
                          DCD      ||.constdata||+0x8

                          AREA ||i.MHC_Event_Authen_Payload_Timeout_Expired||, CODE, READONLY, ALIGN=1

                  MHC_Event_Authen_Payload_Timeout_Expired PROC
;;;1301   
;;;1302   void MHC_Event_Authen_Payload_Timeout_Expired(MBLK *pMBlk)      //HCI__030
000000  4770              BX       lr
;;;1303   {
;;;1304       if((Event_Mask2[0] & HCI_EVTMSK2_2_AUTHEN_PYLD_TIMEOUT_EXPRD) != 0)
;;;1305       {
;;;1306       }
;;;1307   }
;;;1308   
                          ENDP


                          AREA ||i.MHC_Event_Cmd_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Cmd_Complete PROC
;;;593    
;;;594    void MHC_Event_Cmd_Complete(MBLK *pMBlk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;595    {
000002  4604              MOV      r4,r0
;;;596        extern void MCU_WDTmr_En(void);
;;;597    #ifdef _SMP_ON_
;;;598        extern Uint8 smp_Local_Addr_advTemp[2+LEN_BD_ADDR];
;;;599    #endif
;;;600    
;;;601    #ifdef _HCI_HW_
;;;602        Uint8 Length_Actual;
;;;603        Uint8 i, j;
;;;604    
;;;605        i = pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Ocf;
;;;606        j = pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Ogf;
;;;607        pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;608        pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Event_Code = HCI_EVENT_COMMAND_COMPLETE;
;;;609        pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length + 3);
;;;610        Length_Actual = pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length;
;;;611        if(pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length > (1+(MAX_MBLK_SIZE-6-1)+3))
;;;612        {
;;;613            Length_Actual = (1+(MAX_MBLK_SIZE-6-1)+3);
;;;614        }
;;;615        pMBlk->Para.MHC_Cmd_Complete_Para.HCI_Num_Cmd_Pckts = 0x01;
;;;616    #ifdef _HCI_VIRTUAL_
;;;617        LL2HCI_Return_Data(pMBlk->Para.Data, (3 + Length_Actual));
;;;618    #else
;;;619        setUART_Tx(pMBlk->Para.Data, (3 + Length_Actual));
;;;620    #endif
;;;621    #endif
;;;622    #ifdef _HCI_HW_
;;;623        if((i==HCI_CMD_OGF_RESET)&&(j==(OGF_HCI_CMD_CONTROLLER_BASEBAND<<2)))
;;;624        {
;;;625    #ifdef _HW_PRG_RESET_
;;;626            //while(UARTBufValidT);     //???
;;;627            //rafael_reset_phy_fsm();
;;;628            //MCU_WDTmr_En();
;;;629            //while(1);
;;;630    #endif  //(#ifdef _HW_PRG_RESET_)
;;;631        }
;;;632    #else   //(#ifdef _HCI_HW_)
;;;633        extern void initBLEsmp_Re(void);
;;;634        if(pMBlk->Para.MHC_Cmd_Complete_Para.By_Primitive == HCLL_RESET)
000004  7a80              LDRB     r0,[r0,#0xa]
000006  28b4              CMP      r0,#0xb4
000008  d102              BNE      |L4.16|
;;;635        {
;;;636    #ifdef _HW_PRG_RESET_
;;;637            ErrorEntry(13);
00000a  200d              MOVS     r0,#0xd
00000c  f7fffffe          BL       ErrorEntry
                  |L4.16|
;;;638            //MCU_WDTmr_En();
;;;639            //while(1);
;;;640    #endif  //(#ifdef _HW_PRG_RESET_)
;;;641        }
;;;642    #endif  //(#ifdef _HCI_HW_)
;;;643    
;;;644    #ifndef _HCI_HW_
;;;645        // Parsing Completed Event
;;;646        switch(pMBlk->Para.MHC_Cmd_Complete_Para.By_Primitive)
000010  7aa2              LDRB     r2,[r4,#0xa]
;;;647        {
;;;648        // TODO: No scan timeout event
;;;649        case HCLL_LE_SET_ADVERTISE_ENABLE:
;;;650            BleMHC_PostEvent(BLECMD_EVENT_ADV_COMPLETE,(void *)&pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0]);
000012  4621              MOV      r1,r4
000014  310b              ADDS     r1,r1,#0xb
000016  4d22              LDR      r5,|L4.160|
000018  2acf              CMP      r2,#0xcf              ;646
00001a  d03c              BEQ      |L4.150|
00001c  dc0a              BGT      |L4.52|
00001e  2ac3              CMP      r2,#0xc3              ;646
000020  d027              BEQ      |L4.114|
000022  2acc              CMP      r2,#0xcc              ;646
000024  d013              BEQ      |L4.78|
000026  2ace              CMP      r2,#0xce              ;646
000028  d103              BNE      |L4.50|
;;;651    #ifdef _SMP_ON_
;;;652            smp_Local_Addr_advTemp[0] = ble_device_param.ble_deviceAddr_param.addrType;
;;;653            Knl_MemCpy(&smp_Local_Addr_advTemp[2], ble_device_param.ble_deviceAddr_param.addr, LEN_BD_ADDR);
;;;654    #endif
;;;655            break;
;;;656    
;;;657        case HCLL_LE_SET_SCAN_ENABLE:
;;;658            BleMHC_PostEvent(BLECMD_EVENT_SCAN_COMPLETE,NULL);
00002a  200e              MOVS     r0,#0xe
00002c  686a              LDR      r2,[r5,#4]  ; mhcCallBack
00002e  2100              MOVS     r1,#0
000030  4790              BLX      r2
                  |L4.50|
;;;659            break;
;;;660    
;;;661        case HCLL_LE_CREATE_CONN_CANCEL:
;;;662            BleMHC_PostEvent(BLECMD_EVENT_CONN_CANCEL_COMPLETE,NULL);
;;;663    #ifdef _DEBUG_MSG_USER_
;;;664            printf("Connection Canceled\n");
;;;665    #endif
;;;666            break;
;;;667    
;;;668        case HCLL_LE_READ_PHY:
;;;669        {
;;;670    //        BLE_Event_Phy_Param phyParam;
;;;671    
;;;672    //        phyParam.connId = pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1];
;;;673    //        phyParam.rx_Phy = pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[4];
;;;674    //        phyParam.tx_Phy = pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3]; //(TX)
;;;675            BleMHC_PostEvent(BLECMD_EVENT_PHY_READ_COMPLETE,(void *)&(pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1]));
;;;676    #ifdef _DEBUG_MSG_USER_
;;;677            //printf("TX/ RX PHY:%d\n",phyParam.rx_Phy);
;;;678    #endif
;;;679        }
;;;680        break;
;;;681    
;;;682        case HCLL_READ_RSSI:
;;;683        {
;;;684            BLE_Event_Rssi_Param rssiParam;
;;;685            rssiParam.connID = (Uint8)(pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2]);
;;;686            rssiParam.rssi = (int8_t)(pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3]);
;;;687    
;;;688            BleMHC_PostEvent(BLECMD_EVENT_READ_RSSI_COMPLETE,(void *)&(rssiParam));
;;;689    #ifdef _DEBUG_MSG_USER_
;;;690            printf("RSSI:%d\n",rssiParam.rssi);
;;;691    #endif
;;;692        }
;;;693        break;
;;;694    
;;;695        case HCLL_LE_LONG_TERM_KEY_REQ_NEG_REPLY:
;;;696    #ifdef _SMP_ON_
;;;697            initBLEsmp_Re();
;;;698            pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = AUTH_ERR_PIN_OR_KEY_MISSING;
;;;699            BleMHC_PostEvent(BLECMD_EVENT_AUTH_STATUS,(void *)&pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1]);
;;;700    #endif
;;;701            break;
;;;702    
;;;703        case HCLL_LE_CREATE_CONN:
;;;704            BleMHC_PostEvent(BLECMD_EVENT_CREATE_CONNECTION, (void *)&pMBlk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0]);
;;;705            break;
;;;706    
;;;707        default:
;;;708            break;
;;;709        }
;;;710    #endif  //(#ifndef _HCI_HW_)
;;;711    }
000032  bdf8              POP      {r3-r7,pc}
                  |L4.52|
000034  2ad0              CMP      r2,#0xd0              ;646
000036  d017              BEQ      |L4.104|
000038  4626              MOV      r6,r4                 ;675
00003a  360c              ADDS     r6,r6,#0xc            ;675
00003c  2add              CMP      r2,#0xdd              ;646
00003e  d021              BEQ      |L4.132|
000040  2aeb              CMP      r2,#0xeb              ;646
000042  d1f6              BNE      |L4.50|
000044  686a              LDR      r2,[r5,#4]            ;646  ; mhcCallBack
000046  2009              MOVS     r0,#9                 ;675
000048  4631              MOV      r1,r6                 ;675
00004a  4790              BLX      r2                    ;675
00004c  bdf8              POP      {r3-r7,pc}
                  |L4.78|
00004e  686a              LDR      r2,[r5,#4]  ; mhcCallBack
000050  2001              MOVS     r0,#1                 ;650
000052  4790              BLX      r2                    ;650
000054  4913              LDR      r1,|L4.164|
000056  4814              LDR      r0,|L4.168|
000058  784a              LDRB     r2,[r1,#1]            ;652  ; ble_device_param
00005a  7002              STRB     r2,[r0,#0]            ;652
00005c  2206              MOVS     r2,#6                 ;653
00005e  1c80              ADDS     r0,r0,#2              ;653
000060  1c89              ADDS     r1,r1,#2              ;653
000062  f7fffffe          BL       Knl_MemCpy
000066  bdf8              POP      {r3-r7,pc}
                  |L4.104|
000068  2004              MOVS     r0,#4                 ;662
00006a  686a              LDR      r2,[r5,#4]            ;662  ; mhcCallBack
00006c  2100              MOVS     r1,#0                 ;662
00006e  4790              BLX      r2                    ;662
000070  bdf8              POP      {r3-r7,pc}
                  |L4.114|
000072  7b60              LDRB     r0,[r4,#0xd]          ;685
000074  4669              MOV      r1,sp                 ;685
000076  7008              STRB     r0,[r1,#0]            ;685
000078  7ba0              LDRB     r0,[r4,#0xe]          ;686
00007a  7048              STRB     r0,[r1,#1]            ;686
00007c  686a              LDR      r2,[r5,#4]            ;686  ; mhcCallBack
00007e  200a              MOVS     r0,#0xa               ;688
000080  4790              BLX      r2                    ;688
000082  bdf8              POP      {r3-r7,pc}
                  |L4.132|
000084  f7fffffe          BL       initBLEsmp_Re
000088  2010              MOVS     r0,#0x10              ;698
00008a  7360              STRB     r0,[r4,#0xd]          ;698
00008c  686a              LDR      r2,[r5,#4]            ;698  ; mhcCallBack
00008e  200d              MOVS     r0,#0xd               ;699
000090  4631              MOV      r1,r6                 ;699
000092  4790              BLX      r2                    ;699
000094  bdf8              POP      {r3-r7,pc}
                  |L4.150|
000096  686a              LDR      r2,[r5,#4]  ; mhcCallBack
000098  200f              MOVS     r0,#0xf               ;704
00009a  4790              BLX      r2                    ;704
00009c  bdf8              POP      {r3-r7,pc}
;;;712    
                          ENDP

00009e  0000              DCW      0x0000
                  |L4.160|
                          DCD      ||.data||
                  |L4.164|
                          DCD      ble_device_param
                  |L4.168|
                          DCD      smp_Local_Addr_advTemp

                          AREA ||i.MHC_Event_Cmd_Status||, CODE, READONLY, ALIGN=2

                  MHC_Event_Cmd_Status PROC
;;;713    
;;;714    void MHC_Event_Cmd_Status(MBLK *pMBlk)
000000  7ac1              LDRB     r1,[r0,#0xb]
;;;715    {
;;;716    #ifdef _HCI_HW_
;;;717        pMBlk->Para.MHC_Cmd_Status_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;718        pMBlk->Para.MHC_Cmd_Status_Para.HCI_Event_Code = HCI_EVENT_COMMAND_STATUS;
;;;719        pMBlk->Para.MHC_Cmd_Status_Para.HCI_Para_Length = 4;
;;;720        pMBlk->Para.MHC_Cmd_Status_Para.HCI_Num_Cmd_Pckts = 0x01;
;;;721    #ifdef _HCI_VIRTUAL_
;;;722        LL2HCI_Return_Data(pMBlk->Para.Data, (3 + 4));
;;;723    #else
;;;724        setUART_Tx(pMBlk->Para.Data, (3 + 4));
;;;725    #endif
;;;726    #else
;;;727        switch(pMBlk->Para.MHC_Cmd_Status_Para.By_Primitive)
000002  29cf              CMP      r1,#0xcf
000004  d106              BNE      |L5.20|
;;;728        {
;;;729        case HCLL_LE_CREATE_CONN:
;;;730            BleMHC_PostEvent(BLECMD_EVENT_CREATE_CONNECTION, (void *)&pMBlk->Para.MHC_Cmd_Status_Para.HCI_Status);
000006  220f              MOVS     r2,#0xf
000008  4601              MOV      r1,r0
00000a  4610              MOV      r0,r2
00000c  4a02              LDR      r2,|L5.24|
00000e  3109              ADDS     r1,r1,#9
000010  6852              LDR      r2,[r2,#4]  ; mhcCallBack
000012  4710              BX       r2
                  |L5.20|
;;;731            break;
;;;732    
;;;733        default:
;;;734            break;
;;;735        }
;;;736    #endif
;;;737    }
000014  4770              BX       lr
;;;738    
                          ENDP

000016  0000              DCW      0x0000
                  |L5.24|
                          DCD      ||.data||

                          AREA ||i.MHC_Event_Data_Buffer_Overflow||, CODE, READONLY, ALIGN=1

                  MHC_Event_Data_Buffer_Overflow PROC
;;;957    
;;;958    void MHC_Event_Data_Buffer_Overflow(MBLK *pMBlk)
000000  4770              BX       lr
;;;959    {
;;;960        if((Event_Mask[2] & HCI_EVTMSK_3_DATA_BUF_OVERFLOW) != 0)
;;;961        {
;;;962        }
;;;963        else
;;;964        {
;;;965        }
;;;966    }
;;;967    
                          ENDP


                          AREA ||i.MHC_Event_Disconn_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Disconn_Complete PROC
;;;739    
;;;740    void MHC_Event_Disconn_Complete(MBLK *pMBlk)
000000  b510              PUSH     {r4,lr}
;;;741    {
000002  4604              MOV      r4,r0
;;;742    #ifdef _DEBUG_MSG_USER_
;;;743        extern uint8_t gateTimeline;
;;;744    #endif  //(#ifdef _DEBUG_MSG_USER_)
;;;745    
;;;746    #ifdef _HCI_HW_
;;;747        if((Event_Mask[0] & HCI_EVTMSK_0_DISCONN_CMPLT) != 0)
;;;748        {
;;;749            pMBlk->Para.MHC_Disconn_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;750            pMBlk->Para.MHC_Disconn_Complete_Para.HCI_Event_Code = HCI_EVENT_DISCONNECTION_COMPLETE;
;;;751            pMBlk->Para.MHC_Disconn_Complete_Para.HCI_Para_Length = 4;
;;;752            pMBlk->Para.MHC_Disconn_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
;;;753            pMBlk->Para.MHC_Disconn_Complete_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;754    #ifdef _HCI_VIRTUAL_
;;;755            LL2HCI_Return_Data(pMBlk->Para.Data, (3 + 4));
;;;756    #else
;;;757            setUART_Tx(pMBlk->Para.Data, (3+4));
;;;758    #endif
;;;759        }
;;;760    #else   //(#ifdef _HCI_HW_)
;;;761    
;;;762    #ifdef _SMP_ON_
;;;763        extern void initBLEsmp_Re(void);
;;;764    #ifdef _BOND_ON_
;;;765        extern uint8_t* cmd_FlashBond(uint8_t opcode, uint8_t * para_data);
;;;766    #endif
;;;767        initBLEsmp_Re();
000004  f7fffffe          BL       initBLEsmp_Re
;;;768    #endif
;;;769    
;;;770        if((Event_Mask[0] & HCI_EVTMSK_0_DISCONN_CMPLT) != 0)
000008  4807              LDR      r0,|L7.40|
00000a  7800              LDRB     r0,[r0,#0]  ; Event_Mask
00000c  06c0              LSLS     r0,r0,#27
00000e  d500              BPL      |L7.18|
;;;771        {
;;;772            __NOP();
000010  bf00              NOP      
                  |L7.18|
;;;773        }
;;;774    #ifdef _DEBUG_MSG_USER_
;;;775        gateTimeline = 0;
;;;776        printf("Disconnected, ID:%d, Reason:0x%X\n",pMBlk->Para.MHC_Disconn_Complete_Para.HCI_Conn_Hdl_L, pMBlk->Para.MHC_Disconn_Complete_Para.HCI_Reason);
;;;777    #endif  //(#ifdef _DEBUG_MSG_USER_)
;;;778        BleMHC_PostEvent(BLECMD_EVENT_DISCONN_COMPLETE,(void *)&(pMBlk->Para.MHC_Disconn_Complete_Para));
000012  2007              MOVS     r0,#7
000014  4a05              LDR      r2,|L7.44|
000016  4621              MOV      r1,r4
000018  6852              LDR      r2,[r2,#4]  ; mhcCallBack
00001a  3108              ADDS     r1,r1,#8
00001c  4790              BLX      r2
;;;779    #ifdef _SMP_ON_
;;;780    #ifdef _BOND_ON_
;;;781        cmd_FlashBond(CMD_FB_CHK_IF_FLASHBOND_NEED_TO_ERASE_PAGE, (uint8_t*)smp_Para_Bond_tmp);
00001e  4904              LDR      r1,|L7.48|
000020  200a              MOVS     r0,#0xa
000022  f7fffffe          BL       cmd_FlashBond
;;;782    #endif  //#ifdef _BOND_ON_
;;;783    #endif  //#ifdef _SMP_ON_
;;;784    #endif  //(#ifdef _HCI_HW_)
;;;785    }
000026  bd10              POP      {r4,pc}
;;;786    
                          ENDP

                  |L7.40|
                          DCD      ||.data||+0x8
                  |L7.44|
                          DCD      ||.data||
                  |L7.48|
                          DCD      smp_Para_Bond_tmp

                          AREA ||i.MHC_Event_Encrypt_Change||, CODE, READONLY, ALIGN=2

                  MHC_Event_Encrypt_Change PROC
;;;831    
;;;832    void MHC_Event_Encrypt_Change(MBLK *pMBlk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;833    {
;;;834    #ifdef _HCI_HW_
;;;835        if((Event_Mask[0] & HCI_EVTMSK_0_ENC_CHANGE) != 0)
;;;836        {
;;;837            pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;838            pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Event_Code = HCI_EVENT_ENCRYPTION_CHANGE;
;;;839            pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Para_Length = 4;
;;;840            pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;841    #ifdef _HCI_VIRTUAL_
;;;842            LL2HCI_Return_Data(pMBlk->Para.Data, (3+4));
;;;843    #else
;;;844            setUART_Tx(pMBlk->Para.Data, (3+4));
;;;845    #endif
;;;846        }
;;;847    #else
;;;848    #ifdef _SMP_ON_
;;;849        Uint8 i;
;;;850        MBLK *mblk;
;;;851    #ifdef _BOND_ON_
;;;852        extern void fil_INFO_FLASHBONDwEXST_PBID(void);
;;;853        extern void fil_DATA_FLASHBONDwEXST_PBID(void);
;;;854    #endif
;;;855        if(smp_Para_Bond[SMP_KEY_USE]==SMP_KEY_USE_STK)
000002  4f31              LDR      r7,|L8.200|
000004  4604              MOV      r4,r0                 ;833
000006  7cb8              LDRB     r0,[r7,#0x12]  ; smp_Para_Bond
;;;856        {
;;;857            if(pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Encrpt_En == HCI_ENCRPT_EN_AES_CCM_LE)
000008  2601              MOVS     r6,#1
00000a  2800              CMP      r0,#0                 ;855
00000c  d13b              BNE      |L8.134|
00000e  7ae0              LDRB     r0,[r4,#0xb]
000010  2801              CMP      r0,#1
000012  d138              BNE      |L8.134|
;;;858            {
;;;859                i = smp_PReq_Resp_Key_Distr & rsp_pairing_request_table[10];
000014  482d              LDR      r0,|L8.204|
000016  7a85              LDRB     r5,[r0,#0xa]  ; rsp_pairing_request_table
000018  482d              LDR      r0,|L8.208|
00001a  7800              LDRB     r0,[r0,#0]  ; smp_PReq_Resp_Key_Distr
00001c  4005              ANDS     r5,r5,r0
;;;860                if((i&KEY_DISTRIBUTION_ENCKEY_1))
00001e  07e8              LSLS     r0,r5,#31
000020  d01b              BEQ      |L8.90|
;;;861                {
;;;862                    setBLE_ConnTxData_SMP(pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_L, CODE_SMP_ENCRYPTION_INFORMATION, (Uint8 *)LTK, SIZE_AES_KEY);
000022  7aa0              LDRB     r0,[r4,#0xa]
000024  2310              MOVS     r3,#0x10
000026  4a2b              LDR      r2,|L8.212|
000028  2106              MOVS     r1,#6
00002a  f7fffffe          BL       setBLE_ConnTxData_SMP
;;;863                    setBLE_ConnTxData_SMP(pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_L, CODE_SMP_MASTER_IDENTIFICATION, (Uint8 *)LTK_SEED, (SIZE_SMP_EDIV + SIZE_SMP_RAND));
00002e  7aa0              LDRB     r0,[r4,#0xa]
000030  230a              MOVS     r3,#0xa
000032  4a29              LDR      r2,|L8.216|
000034  2107              MOVS     r1,#7
000036  f7fffffe          BL       setBLE_ConnTxData_SMP
;;;864                    Knl_MemCpy(&smp_Para_Bond[SMP_LTK], LTK, SIZE_AES_KEY);
00003a  2210              MOVS     r2,#0x10
00003c  4925              LDR      r1,|L8.212|
00003e  4827              LDR      r0,|L8.220|
000040  f7fffffe          BL       Knl_MemCpy
;;;865                    Knl_MemCpyInv(&smp_Para_Bond[SMP_RAND], LTK_SEED, LEN_SMP_RAND);
000044  2208              MOVS     r2,#8
000046  4924              LDR      r1,|L8.216|
000048  1df8              ADDS     r0,r7,#7
00004a  f7fffffe          BL       Knl_MemCpyInv
;;;866                    Knl_MemCpyInv(&smp_Para_Bond[SMP_EDIV], &LTK_SEED[LEN_SMP_RAND], LEN_SMP_EDIV);
00004e  2202              MOVS     r2,#2
000050  4923              LDR      r1,|L8.224|
000052  4824              LDR      r0,|L8.228|
000054  f7fffffe          BL       Knl_MemCpyInv
;;;867                    smp_Para_Bond[SMP_KEY_USE] = SMP_KEY_USE_LTK;
000058  74be              STRB     r6,[r7,#0x12]
                  |L8.90|
;;;868                }
;;;869                if((i&KEY_DISTRIBUTION_IDKEY_1))
00005a  07a8              LSLS     r0,r5,#30
00005c  d50b              BPL      |L8.118|
;;;870                {
;;;871                    setBLE_ConnTxData_SMP(pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_L, CODE_SMP_IDENTITY_INFORMATION, (Uint8 *)IRK_FIXED, SIZE_SMP_IRK);
00005e  7aa0              LDRB     r0,[r4,#0xa]
000060  2310              MOVS     r3,#0x10
000062  4a21              LDR      r2,|L8.232|
000064  2108              MOVS     r1,#8
000066  f7fffffe          BL       setBLE_ConnTxData_SMP
;;;872                    setBLE_ConnTxData_SMP(pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_L, CODE_SMP_IDENTITY_ADDRESS_INFORMATION, smp_Para_Bond, (1+SIZE_BLE_ADDR));
00006a  7aa0              LDRB     r0,[r4,#0xa]
00006c  2307              MOVS     r3,#7
00006e  4a16              LDR      r2,|L8.200|
000070  2109              MOVS     r1,#9
000072  f7fffffe          BL       setBLE_ConnTxData_SMP
                  |L8.118|
;;;873                }
;;;874                if((i&KEY_DISTRIBUTION_SIGN_1))
000076  0768              LSLS     r0,r5,#29
000078  d505              BPL      |L8.134|
;;;875                {
;;;876                    setBLE_ConnTxData_SMP(pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_L, CODE_SMP_SIGNING_INFORMATION, (Uint8 *)CSRK_FIXED, SIZE_SMP_CSRK);
00007a  7aa0              LDRB     r0,[r4,#0xa]
00007c  2310              MOVS     r3,#0x10
00007e  4a1b              LDR      r2,|L8.236|
000080  210a              MOVS     r1,#0xa
000082  f7fffffe          BL       setBLE_ConnTxData_SMP
                  |L8.134|
;;;877                }
;;;878            }
;;;879        }
;;;880        if(smp_Para_Bond[SEL_STK_GEN_METHOD] != STK_GEN_MTHD_JUST_WORKS)        //STK_GEN_MTHD_PASSKEY_ENTRY or STK_GEN_MTHD_PASSKEY_ENTRY_DISP
000086  7cf9              LDRB     r1,[r7,#0x13]  ; smp_Para_Bond
;;;881        {
;;;882            smp_Security_Mode = SMP_SECURITY_MODE_1_AUTHEN_PAIRING_W_ENCYPT;
000088  4819              LDR      r0,|L8.240|
00008a  2900              CMP      r1,#0                 ;880
00008c  d002              BEQ      |L8.148|
00008e  2102              MOVS     r1,#2
000090  7001              STRB     r1,[r0,#0]
000092  e000              B        |L8.150|
                  |L8.148|
;;;883        }
;;;884        else
;;;885        {
;;;886            smp_Security_Mode = SMP_SECURITY_MODE_1_UNAUTHEN_PAIRING_W_ENCYPT;
000094  7006              STRB     r6,[r0,#0]
                  |L8.150|
;;;887        }
;;;888        smp_Encryption = 1;
000096  4817              LDR      r0,|L8.244|
;;;889        smp_Phase = 0;
000098  2500              MOVS     r5,#0
00009a  7006              STRB     r6,[r0,#0]            ;888
00009c  4816              LDR      r0,|L8.248|
00009e  7005              STRB     r5,[r0,#0]
;;;890        mblk = GetMsgBlk();
0000a0  f7fffffe          BL       GetMsgBlk
;;;891        mblk->Primitive = MHC_EVENT_AUTH_STATUS;
0000a4  2177              MOVS     r1,#0x77
0000a6  7101              STRB     r1,[r0,#4]
;;;892        mblk->Para.MHC_Le_Auth_status_Para.HCI_Conn_Hdl_L = pMBlk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_L;
0000a8  7aa1              LDRB     r1,[r4,#0xa]
0000aa  7201              STRB     r1,[r0,#8]
;;;893        mblk->Para.MHC_Le_Auth_status_Para.HCI_AUTH_STATUS = AUTH_SUCCESS;
0000ac  7245              STRB     r5,[r0,#9]
;;;894        SndMsgBlk(mblk, Q_2HCI);
0000ae  2104              MOVS     r1,#4
0000b0  f7fffffe          BL       SndMsgBlk
;;;895    
;;;896    #ifdef _BOND_ON_
;;;897        fil_INFO_FLASHBONDwEXST_PBID();
0000b4  f7fffffe          BL       fil_INFO_FLASHBONDwEXST_PBID
;;;898        fil_DATA_FLASHBONDwEXST_PBID();
0000b8  f7fffffe          BL       fil_DATA_FLASHBONDwEXST_PBID
;;;899    #endif
;;;900    
;;;901    #endif  //(#ifdef _SMP_ON_)
;;;902        if((Event_Mask[0] & HCI_EVTMSK_0_ENC_CHANGE) != 0)
0000bc  480f              LDR      r0,|L8.252|
0000be  7800              LDRB     r0,[r0,#0]  ; Event_Mask
0000c0  0600              LSLS     r0,r0,#24
0000c2  d500              BPL      |L8.198|
;;;903        {
;;;904            __NOP();
0000c4  bf00              NOP      
                  |L8.198|
;;;905        }
;;;906    #endif  //(#ifdef _HCI_HW_)
;;;907    }
0000c6  bdf8              POP      {r3-r7,pc}
;;;908    
                          ENDP

                  |L8.200|
                          DCD      smp_Para_Bond
                  |L8.204|
                          DCD      rsp_pairing_request_table
                  |L8.208|
                          DCD      smp_PReq_Resp_Key_Distr
                  |L8.212|
                          DCD      LTK
                  |L8.216|
                          DCD      LTK_SEED
                  |L8.220|
                          DCD      smp_Para_Bond+0x14
                  |L8.224|
                          DCD      LTK_SEED+0x8
                  |L8.228|
                          DCD      smp_Para_Bond+0xf
                  |L8.232|
                          DCD      IRK_FIXED
                  |L8.236|
                          DCD      CSRK_FIXED
                  |L8.240|
                          DCD      smp_Security_Mode
                  |L8.244|
                          DCD      smp_Encryption
                  |L8.248|
                          DCD      smp_Phase
                  |L8.252|
                          DCD      ||.data||+0x8

                          AREA ||i.MHC_Event_Encrypt_Key_Refresh_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Encrypt_Key_Refresh_Complete PROC
;;;909    
;;;910    void MHC_Event_Encrypt_Key_Refresh_Complete(MBLK *pMBlk)
000000  b570              PUSH     {r4-r6,lr}
;;;911    {
000002  4604              MOV      r4,r0
;;;912    #ifdef _HCI_HW_
;;;913        if((Event_Mask[3] & HCI_EVTMSK_5_ENC_KEY_RFRSH_CMPLT) != 0)
;;;914        {
;;;915            pMBlk->Para.MHC_Encrypt_Key_Refresh_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;916            pMBlk->Para.MHC_Encrypt_Key_Refresh_Complete_Para.HCI_Event_Code = HCI_EVENT_ENCRYPTION_KEY_REFRESH_COMPLETE;
;;;917            pMBlk->Para.MHC_Encrypt_Key_Refresh_Complete_Para.HCI_Para_Length = 3;
;;;918            pMBlk->Para.MHC_Encrypt_Key_Refresh_Complete_Para.HCI_Status = HCI_ERR_CODE_ENCRYPTION_CHANGE_HAS_OCCURRED;
;;;919            pMBlk->Para.MHC_Encrypt_Key_Refresh_Complete_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;920    #ifdef _HCI_VIRTUAL_
;;;921            LL2HCI_Return_Data(pMBlk->Para.Data, (3+3));
;;;922    #else
;;;923            setUART_Tx(pMBlk->Para.Data, (3+3));
;;;924    #endif
;;;925        }
;;;926    #else   //(#ifdef _HCI_HW_)
;;;927    #ifdef _SMP_ON_
;;;928        MBLK *mblk;
;;;929    #ifdef _BOND_ON_
;;;930        extern void fil_INFO_FLASHBONDwEXST_PBID(void);
;;;931        fil_INFO_FLASHBONDwEXST_PBID();
000004  f7fffffe          BL       fil_INFO_FLASHBONDwEXST_PBID
;;;932    #endif
;;;933        if(smp_Para_Bond[SEL_STK_GEN_METHOD] != STK_GEN_MTHD_JUST_WORKS)        //STK_GEN_MTHD_PASSKEY_ENTRY or STK_GEN_MTHD_PASSKEY_ENTRY_DISP
000008  480f              LDR      r0,|L9.72|
;;;934        {
;;;935            smp_Security_Mode = SMP_SECURITY_MODE_1_AUTHEN_PAIRING_W_ENCYPT;
00000a  4910              LDR      r1,|L9.76|
00000c  7cc2              LDRB     r2,[r0,#0x13]         ;933  ; smp_Para_Bond
;;;936        }
;;;937        else
;;;938        {
;;;939            smp_Security_Mode = SMP_SECURITY_MODE_1_UNAUTHEN_PAIRING_W_ENCYPT;
00000e  2001              MOVS     r0,#1
000010  2a00              CMP      r2,#0                 ;933
000012  d002              BEQ      |L9.26|
000014  2202              MOVS     r2,#2                 ;935
000016  700a              STRB     r2,[r1,#0]            ;935
000018  e000              B        |L9.28|
                  |L9.26|
00001a  7008              STRB     r0,[r1,#0]
                  |L9.28|
;;;940        }
;;;941        smp_Encryption = 1;
00001c  490c              LDR      r1,|L9.80|
;;;942        smp_Phase = 0;
00001e  2500              MOVS     r5,#0
000020  7008              STRB     r0,[r1,#0]            ;941
000022  480c              LDR      r0,|L9.84|
000024  7005              STRB     r5,[r0,#0]
;;;943        mblk = GetMsgBlk();
000026  f7fffffe          BL       GetMsgBlk
;;;944        mblk->Primitive = MHC_EVENT_AUTH_STATUS;
00002a  2177              MOVS     r1,#0x77
00002c  7101              STRB     r1,[r0,#4]
;;;945        mblk->Para.MHC_Le_Auth_status_Para.HCI_Conn_Hdl_L = pMBlk->Para.MHC_Encrypt_Key_Refresh_Complete_Para.HCI_Conn_Hdl_L;
00002e  7aa1              LDRB     r1,[r4,#0xa]
000030  7201              STRB     r1,[r0,#8]
;;;946        mblk->Para.MHC_Le_Auth_status_Para.HCI_AUTH_STATUS = AUTH_SUCCESS;
000032  7245              STRB     r5,[r0,#9]
;;;947        SndMsgBlk(mblk, Q_2HCI);
000034  2104              MOVS     r1,#4
000036  f7fffffe          BL       SndMsgBlk
;;;948    
;;;949    #endif  //(#ifdef _SMP_ON_)
;;;950        if((Event_Mask[3] & HCI_EVTMSK_5_ENC_KEY_RFRSH_CMPLT) != 0)
00003a  4807              LDR      r0,|L9.88|
00003c  78c0              LDRB     r0,[r0,#3]  ; Event_Mask
00003e  0600              LSLS     r0,r0,#24
000040  d500              BPL      |L9.68|
;;;951        {
;;;952            __NOP();
000042  bf00              NOP      
                  |L9.68|
;;;953        }
;;;954    #endif  //(#ifdef _HCI_HW_)
;;;955    }
000044  bd70              POP      {r4-r6,pc}
;;;956    
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      smp_Para_Bond
                  |L9.76|
                          DCD      smp_Security_Mode
                  |L9.80|
                          DCD      smp_Encryption
                  |L9.84|
                          DCD      smp_Phase
                  |L9.88|
                          DCD      ||.data||+0x8

                          AREA ||i.MHC_Event_HCI_Raw||, CODE, READONLY, ALIGN=1

                  MHC_Event_HCI_Raw PROC
;;;1356   
;;;1357   void MHC_Event_HCI_Raw(MBLK *pMBlk)                             //Jeffrey defined
000000  bf00              NOP      
;;;1358   {
;;;1359   #ifdef _HCI_HW_
;;;1360   #ifdef _HCI_VIRTUAL_
;;;1361       LL2HCI_Return_Data(pMBlk->Para.MHC_Event_HCI_Raw_Para.Data, pMBlk->Para.MHC_Event_HCI_Raw_Para.HCI_Para_Length);
;;;1362   #else
;;;1363       setUART_Tx(pMBlk->Para.MHC_Event_HCI_Raw_Para.Data, pMBlk->Para.MHC_Event_HCI_Raw_Para.HCI_Para_Length);
;;;1364   #endif
;;;1365   #else
;;;1366       __NOP();
;;;1367   #ifdef _DEBUG_MSG_USER_
;;;1368       printf("%s",pMBlk->Para.MHC_Event_HCI_Raw_Para.Data);
;;;1369   #endif  //(#ifdef _DEBUG_MSG_USER_)
;;;1370   #endif
;;;1371   }
000002  4770              BX       lr
;;;1372   
                          ENDP


                          AREA ||i.MHC_Event_Hardware_Error||, CODE, READONLY, ALIGN=1

                  MHC_Event_Hardware_Error PROC
;;;967    
;;;968    void MHC_Event_Hardware_Error(MBLK *pMBlk)
000000  4770              BX       lr
;;;969    {
;;;970    
;;;971        if((Event_Mask[1] & HCI_EVTMSK_1_HW_ERROR) != 0)
;;;972        {
;;;973        }
;;;974        else
;;;975        {
;;;976        }
;;;977    }
;;;978    
                          ENDP


                          AREA ||i.MHC_Event_Le_Adv_Report||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_Adv_Report PROC
;;;1052   
;;;1053   void MHC_Event_Le_Adv_Report(MBLK *pMBlk)
000000  4909              LDR      r1,|L12.40|
;;;1054   {
;;;1055   #ifdef _HCI_HW_
;;;1056       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;1057       {
;;;1058           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_ADV_REPORT) != 0)
;;;1059           {
;;;1060               pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;1061               pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Event_Code = HCI_EVENT_LE_META;
;;;1062               pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Para_Length = pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Length0+12;
;;;1063   
;;;1064               pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Subevent_Code = HCI_SUBEVENT_CODE_LE_ADVERTISING_REPORT;
;;;1065   
;;;1066               pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Num_Reports = 1;
;;;1067               pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Event_Type0 = TABLE_CONV_ADV_TYPE_LL_HCI[pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Event_Type0];
;;;1068   #ifdef _HCI_VIRTUAL_
;;;1069               LL2HCI_Return_Data(pMBlk->Para.Data, (3+pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Para_Length));
;;;1070   #else
;;;1071               setUART_Tx(pMBlk->Para.Data, (3+pMBlk->Para.MHC_Le_Adv_Report_Para.HCI_Para_Length));
;;;1072   #endif
;;;1073           }
;;;1074       }
;;;1075   #else
;;;1076       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
000002  7909              LDRB     r1,[r1,#4]  ; Event_Mask
000004  0689              LSLS     r1,r1,#26
000006  d50d              BPL      |L12.36|
;;;1077       {
;;;1078           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_ADV_REPORT) != 0)
000008  4908              LDR      r1,|L12.44|
00000a  7809              LDRB     r1,[r1,#0]  ; LE_Event_Mask
00000c  0789              LSLS     r1,r1,#30
00000e  d509              BPL      |L12.36|
;;;1079           {
;;;1080   
;;;1081               BleMHC_PostEvent(BLECMD_EVENT_SCAN_REPORT,(void *)&(pMBlk->Para.MHC_Le_Adv_Report_Para));
000010  2202              MOVS     r2,#2
000012  4601              MOV      r1,r0
000014  4610              MOV      r0,r2
000016  b510              PUSH     {r4,lr}               ;1054
000018  4a05              LDR      r2,|L12.48|
00001a  3108              ADDS     r1,r1,#8
00001c  6852              LDR      r2,[r2,#4]  ; mhcCallBack
00001e  4790              BLX      r2
;;;1082               __NOP();
000020  bf00              NOP      
;;;1083           }
;;;1084       }
;;;1085   #endif
;;;1086   }
000022  bd10              POP      {r4,pc}
                  |L12.36|
000024  4770              BX       lr
;;;1087   
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      ||.data||+0x8
                  |L12.44|
                          DCD      ||.data||+0x1
                  |L12.48|
                          DCD      ||.data||

                          AREA ||i.MHC_Event_Le_Conn_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_Conn_Complete PROC
;;;978    
;;;979    void MHC_Event_Le_Conn_Complete(MBLK *pMBlk)
000000  b510              PUSH     {r4,lr}
;;;980    {
000002  4604              MOV      r4,r0
;;;981        extern Uint8 ATT_INDICATION_Packet_Sent;
;;;982    #ifdef _DEBUG_MSG_USER_
;;;983        extern uint8_t gateTimeline;
;;;984    #endif  //(#ifdef _DEBUG_MSG_USER_)
;;;985    #ifdef _SMP_ON_
;;;986        extern Uint32 seedR16;
;;;987        extern Uint8 smp_Local_Addr_advTemp[2+LEN_BD_ADDR];
;;;988        extern Uint8 smp_Local_Addr[MAX_NUM_CONN_HDL][2+LEN_BD_ADDR];
;;;989    #endif
;;;990    
;;;991    #ifdef _HCI_HW_
;;;992        if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;993        {
;;;994            if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_CONN_CMPLT) != 0)
;;;995            {
;;;996                pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;997                pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Event_Code = HCI_EVENT_LE_META;
;;;998                pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Para_Length = 19;
;;;999                pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Subevent_Code = HCI_SUBEVENT_CODE_LE_CONNECTION_COMPLETE;
;;;1000               pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;1001   #ifdef _HCI_VIRTUAL_
;;;1002               LL2HCI_Return_Data(pMBlk->Para.Data, (3+19));
;;;1003   #else
;;;1004               setUART_Tx(pMBlk->Para.Data, (3+19));
;;;1005   #endif
;;;1006           }
;;;1007       }
;;;1008   #else   //(#ifdef _HCI_HW_)
;;;1009   #ifdef _HOST_CLIENT_
;;;1010       MBLK *mblk;
;;;1011   #endif  //(#ifdef _HOST_CLIENT_)
;;;1012   
;;;1013       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
000004  4816              LDR      r0,|L13.96|
000006  7900              LDRB     r0,[r0,#4]  ; Event_Mask
000008  0680              LSLS     r0,r0,#26
00000a  d518              BPL      |L13.62|
;;;1014       {
;;;1015           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_CONN_CMPLT) != 0)
00000c  4815              LDR      r0,|L13.100|
00000e  7800              LDRB     r0,[r0,#0]  ; LE_Event_Mask
000010  07c0              LSLS     r0,r0,#31
000012  d014              BEQ      |L13.62|
;;;1016           {
;;;1017               __NOP();
000014  bf00              NOP      
;;;1018   #ifdef _HOST_CLIENT_
;;;1019               if(pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Role==HCI_ROLE_MASTER)
;;;1020               {
;;;1021                   mblk = GetMsgBlk();
;;;1022                   mblk->Primitive = PFHS_ATT_CHK_CLIENT_TAB;
;;;1023                   mblk->Para.PFHS_Att_Chk_Client_Tab_Para.HCI_Conn_Hdl_L = pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_Hdl_L;
;;;1024                   SndMsgBlk(mblk, Q_2HOST);
;;;1025               }
;;;1026   #endif  //(#ifdef _HOST_CLIENT_)
;;;1027   #ifdef _SMP_ON_
;;;1028               Knl_MemCpy(smp_Para_Bond, &pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddrType, (LEN_BD_ADDR+1));    //initialization, smp_Para_Bond.SMP_INI_ADDR
000016  2207              MOVS     r2,#7
000018  4621              MOV      r1,r4
00001a  310d              ADDS     r1,r1,#0xd
00001c  4812              LDR      r0,|L13.104|
00001e  f7fffffe          BL       Knl_MemCpy
;;;1029               Knl_MemCpy(&smp_Local_Addr[pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_Hdl_L][0], smp_Local_Addr_advTemp, (LEN_BD_ADDR+2));    //initialization
000022  7ae0              LDRB     r0,[r4,#0xb]
000024  4911              LDR      r1,|L13.108|
000026  00c0              LSLS     r0,r0,#3
000028  1840              ADDS     r0,r0,r1
00002a  2208              MOVS     r2,#8
00002c  4910              LDR      r1,|L13.112|
00002e  f7fffffe          BL       Knl_MemCpy
;;;1030               PassEC_BLE_CODE_SMP(pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_Hdl_L, SMEC_LE_SMP_KEY_GEN, (Uint8 *)&seedR16, 4);   //initialization, r_AES
000032  7ae0              LDRB     r0,[r4,#0xb]
000034  2304              MOVS     r3,#4
000036  4a0f              LDR      r2,|L13.116|
000038  2158              MOVS     r1,#0x58
00003a  f7fffffe          BL       PassEC_BLE_CODE_SMP
                  |L13.62|
;;;1031   #endif
;;;1032           }
;;;1033       }
;;;1034   #ifdef _DEBUG_MSG_USER_
;;;1035       //msg2uart("Connected to ", pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr, 6);
;;;1036       printf("Connected to %02x:%02x:%02x:%02x:%02x:%02x\n",pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr[5],
;;;1037              pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr[4],
;;;1038              pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr[3],
;;;1039              pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr[2],
;;;1040              pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr[1],
;;;1041              pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr[0]);
;;;1042       gateTimeline = 1;
;;;1043   #endif  //(#ifdef _DEBUG_MSG_USER_)
;;;1044       initBLE_AttServParamter();
00003e  f7fffffe          BL       initBLE_AttServParamter
;;;1045       aTT_MTU[pMBlk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_Hdl_L] = SIZE_DEFAULT_ATT_MTU;
000042  7ae1              LDRB     r1,[r4,#0xb]
000044  4a0c              LDR      r2,|L13.120|
000046  2017              MOVS     r0,#0x17
000048  5450              STRB     r0,[r2,r1]
;;;1046       ATT_INDICATION_Packet_Sent = 0;
00004a  490c              LDR      r1,|L13.124|
00004c  2000              MOVS     r0,#0
00004e  7008              STRB     r0,[r1,#0]
000050  4a0b              LDR      r2,|L13.128|
;;;1047   
;;;1048       BleMHC_PostEvent(BLECMD_EVENT_CONN_COMPLETE,(void *)&(pMBlk->Para.MHC_Le_Conn_Complete_Para));
000052  2003              MOVS     r0,#3
000054  4621              MOV      r1,r4
000056  6852              LDR      r2,[r2,#4]  ; mhcCallBack
000058  3108              ADDS     r1,r1,#8
00005a  4790              BLX      r2
;;;1049   #endif  //(#ifdef _HCI_HW_)
;;;1050   }
00005c  bd10              POP      {r4,pc}
;;;1051   
                          ENDP

00005e  0000              DCW      0x0000
                  |L13.96|
                          DCD      ||.data||+0x8
                  |L13.100|
                          DCD      ||.data||+0x1
                  |L13.104|
                          DCD      smp_Para_Bond
                  |L13.108|
                          DCD      smp_Local_Addr
                  |L13.112|
                          DCD      smp_Local_Addr_advTemp
                  |L13.116|
                          DCD      seedR16
                  |L13.120|
                          DCD      aTT_MTU
                  |L13.124|
                          DCD      ATT_INDICATION_Packet_Sent
                  |L13.128|
                          DCD      ||.data||

                          AREA ||i.MHC_Event_Le_Conn_Update_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_Conn_Update_Complete PROC
;;;1088   
;;;1089   void MHC_Event_Le_Conn_Update_Complete(MBLK *pMBlk)
000000  4908              LDR      r1,|L14.36|
;;;1090   {
;;;1091   #ifdef _HCI_HW_
;;;1092       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;1093       {
;;;1094           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_CONN_UPD_CMPLT) != 0)
;;;1095           {
;;;1096               pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;1097               pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Event_Code = HCI_EVENT_LE_META;
;;;1098               pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Para_Length = 10;
;;;1099               pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Subevent_Code = HCI_SUBEVENT_CODE_LE_CONNECTION_UPDATE_COMPLETE;
;;;1100               pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
;;;1101               pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;1102   #ifdef _HCI_VIRTUAL_
;;;1103               LL2HCI_Return_Data(pMBlk->Para.Data, (3+10));
;;;1104   #else
;;;1105               setUART_Tx(pMBlk->Para.Data, (3+10));
;;;1106   #endif
;;;1107           }
;;;1108       }
;;;1109   #else
;;;1110       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
000002  7909              LDRB     r1,[r1,#4]  ; Event_Mask
000004  0689              LSLS     r1,r1,#26
000006  d504              BPL      |L14.18|
;;;1111       {
;;;1112           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_CONN_UPD_CMPLT) != 0)
000008  4907              LDR      r1,|L14.40|
00000a  7809              LDRB     r1,[r1,#0]  ; LE_Event_Mask
00000c  0749              LSLS     r1,r1,#29
00000e  d500              BPL      |L14.18|
;;;1113           {
;;;1114               __NOP();
000010  bf00              NOP      
                  |L14.18|
;;;1115           }
;;;1116       }
;;;1117   #ifdef _DEBUG_MSG_USER_
;;;1118       printf("Conn_Upd, ID:%d\n",pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Conn_Hdl_L);
;;;1119   #endif  //(#ifdef _DEBUG_MSG_USER_)
;;;1120       pMBlk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
000012  2100              MOVS     r1,#0
000014  7281              STRB     r1,[r0,#0xa]
;;;1121       BleMHC_PostEvent(BLECMD_EVENT_CONN_UPDATE_COMPLETE,(void *)&(pMBlk->Para.MHC_Le_Conn_Update_Complete_Para));
000016  2206              MOVS     r2,#6
000018  4601              MOV      r1,r0
00001a  4610              MOV      r0,r2
00001c  4a03              LDR      r2,|L14.44|
00001e  3108              ADDS     r1,r1,#8
000020  6852              LDR      r2,[r2,#4]  ; mhcCallBack
000022  4710              BX       r2
;;;1122   
;;;1123   #endif
;;;1124   }
;;;1125   
                          ENDP

                  |L14.36|
                          DCD      ||.data||+0x8
                  |L14.40|
                          DCD      ||.data||+0x1
                  |L14.44|
                          DCD      ||.data||

                          AREA ||i.MHC_Event_Le_Data_Length_Change||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_Data_Length_Change PROC
;;;1373   
;;;1374   void MHC_Event_Le_Data_Length_Change(MBLK *pMBlk)
000000  4907              LDR      r1,|L15.32|
;;;1375   {
;;;1376   #ifdef _HCI_HW_
;;;1377       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;1378       {
;;;1379           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_DATA_LENGTH_CHANGE) != 0)
;;;1380           {
;;;1381               pMBlk->Para.MHC_Le_Data_Length_Change_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;1382               pMBlk->Para.MHC_Le_Data_Length_Change_Para.HCI_Event_Code = HCI_EVENT_LE_META;
;;;1383               pMBlk->Para.MHC_Le_Data_Length_Change_Para.HCI_Para_Length = 7;
;;;1384               pMBlk->Para.MHC_Le_Data_Length_Change_Para.HCI_Subevent_Code = HCI_SUBEVENT_CODE_LE_DATA_LENGTH_CHANGE;
;;;1385               pMBlk->Para.MHC_Le_Data_Length_Change_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;1386   #ifdef _HCI_VIRTUAL_
;;;1387               LL2HCI_Return_Data(pMBlk->Para.Data, (3+7));
;;;1388   #else
;;;1389               setUART_Tx(pMBlk->Para.Data, (3+7));
;;;1390   #endif
;;;1391           }
;;;1392       }
;;;1393   #else
;;;1394       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
000002  7909              LDRB     r1,[r1,#4]  ; Event_Mask
000004  0689              LSLS     r1,r1,#26
000006  d50a              BPL      |L15.30|
;;;1395       {
;;;1396           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_DATA_LENGTH_CHANGE) != 0)
000008  4906              LDR      r1,|L15.36|
00000a  7809              LDRB     r1,[r1,#0]  ; LE_Event_Mask
00000c  0649              LSLS     r1,r1,#25
00000e  d506              BPL      |L15.30|
;;;1397           {
;;;1398               BleMHC_PostEvent(BLECMD_EVENT_DATA_LENGTH_UPDATE, (void *)&(pMBlk->Para.MHC_Le_Data_Length_Change_Para.HCI_Conn_Hdl_L));
000010  2211              MOVS     r2,#0x11
000012  4601              MOV      r1,r0
000014  4610              MOV      r0,r2
000016  4a04              LDR      r2,|L15.40|
000018  310a              ADDS     r1,r1,#0xa
00001a  6852              LDR      r2,[r2,#4]  ; mhcCallBack
00001c  4710              BX       r2
                  |L15.30|
;;;1399           }
;;;1400       }
;;;1401   #endif
;;;1402   }
00001e  4770              BX       lr
;;;1403   
                          ENDP

                  |L15.32|
                          DCD      ||.data||+0x8
                  |L15.36|
                          DCD      ||.data||+0x1
                  |L15.40|
                          DCD      ||.data||

                          AREA ||i.MHC_Event_Le_Long_Term_Key_Req||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_Long_Term_Key_Req PROC
;;;1157   
;;;1158   void MHC_Event_Le_Long_Term_Key_Req(MBLK *pMBlk)    //HCI__029
000000  b5f8              PUSH     {r3-r7,lr}
;;;1159   {
000002  4605              MOV      r5,r0
;;;1160   #ifdef _HCI_HW_
;;;1161       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;1162       {
;;;1163           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_LONG_TRM_KEY_REQ) != 0)
;;;1164           {
;;;1165               pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;1166               pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Event_Code = HCI_EVENT_LE_META;
;;;1167               pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Para_Length = 13;
;;;1168               pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Subevent_Code = HCI_SUBEVENT_CODE_LE_LONG_TERM_KEY_REQUEST;
;;;1169               pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;1170   #ifdef _HCI_VIRTUAL_
;;;1171               LL2HCI_Return_Data(pMBlk->Para.Data, (3+13));
;;;1172   #else
;;;1173               setUART_Tx(pMBlk->Para.Data, (3+13));
;;;1174   #endif
;;;1175           }
;;;1176       }
;;;1177   #else   //(#ifdef _HCI_HW_)
;;;1178   #ifdef _SMP_ON_
;;;1179       MBLK    *mblk;
;;;1180       Uint8 i;
;;;1181       extern const Uint8 TAB_ZERO_128[];
;;;1182   #ifdef _BOND_ON_
;;;1183       Uint8 *k;
;;;1184   
;;;1185       extern uint8_t* cmd_FlashBond(uint8_t opcode, uint8_t * para_data);
;;;1186       for(i=SIZE_BLE_ADDR+1; i<SMP_PARA_BOND_SIZE; i++)   //1: ADDR_TYPE length
;;;1187       {
;;;1188           if(smp_Para_Bond[i] != 0)
000004  4e42              LDR      r6,|L16.272|
000006  2007              MOVS     r0,#7                 ;1186
                  |L16.8|
000008  5c31              LDRB     r1,[r6,r0]
00000a  2900              CMP      r1,#0
00000c  d103              BNE      |L16.22|
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0                 ;1186
000012  2825              CMP      r0,#0x25              ;1186
000014  d3f8              BCC      |L16.8|
                  |L16.22|
;;;1189           {
;;;1190               break;
;;;1191           }
;;;1192       }
;;;1193       if(i == SMP_PARA_BOND_SIZE)
000016  2825              CMP      r0,#0x25
000018  d11a              BNE      |L16.80|
;;;1194       {
;;;1195           k = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
00001a  493e              LDR      r1,|L16.276|
00001c  2005              MOVS     r0,#5
00001e  f7fffffe          BL       cmd_FlashBond
;;;1196           if(*k == FLH_BND_ERR_CODE_NO_ERR)
000022  7800              LDRB     r0,[r0,#0]
000024  2800              CMP      r0,#0
000026  d113              BNE      |L16.80|
;;;1197           {
;;;1198               k = cmd_FlashBond(CMD_FB_GET_INFO_FLASHBOND_PARA_BOND, (uint8_t*)smp_Para_Bond_tmp);
000028  493a              LDR      r1,|L16.276|
00002a  2006              MOVS     r0,#6
00002c  f7fffffe          BL       cmd_FlashBond
000030  4601              MOV      r1,r0
;;;1199               if(*k == FLH_BND_ERR_CODE_NO_ERR)
000032  7800              LDRB     r0,[r0,#0]
000034  2800              CMP      r0,#0
000036  d10b              BNE      |L16.80|
                  |L16.56|
000038  1c40              ADDS     r0,r0,#1
;;;1200               {
;;;1201                   for(i=0; i<SIZE_BLE_ADDR; i++)
00003a  b2c0              UXTB     r0,r0
00003c  2806              CMP      r0,#6
00003e  d3fb              BCC      |L16.56|
;;;1202                   {
;;;1203                   }
;;;1204                   if(i == SIZE_BLE_ADDR)
000040  d106              BNE      |L16.80|
                  |L16.66|
;;;1205                   {
;;;1206                       while(i < SMP_PARA_BOND_SIZE)
;;;1207                       {
;;;1208                           smp_Para_Bond[i] = *(k+TAB_PARA_DATA_INI_ADDR+i);
000042  180a              ADDS     r2,r1,r0
000044  78d2              LDRB     r2,[r2,#3]
000046  5432              STRB     r2,[r6,r0]
000048  1c40              ADDS     r0,r0,#1
;;;1209                           i++;
00004a  b2c0              UXTB     r0,r0
00004c  2825              CMP      r0,#0x25              ;1206
00004e  d3f8              BCC      |L16.66|
                  |L16.80|
;;;1210                       }
;;;1211                   }
;;;1212               }
;;;1213           }
;;;1214       }
;;;1215   #endif
;;;1216   
;;;1217       mblk = GetMsgBlk();
000050  f7fffffe          BL       GetMsgBlk
000054  4604              MOV      r4,r0
;;;1218       if(smp_Para_Bond[SMP_KEY_USE] == SMP_KEY_USE_STK)
000056  7cb1              LDRB     r1,[r6,#0x12]  ; smp_Para_Bond
;;;1219       {
;;;1220           if(Knl_CodeComp(pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Random_Num, TAB_ZERO_128, (LEN_SMP_RAND+LEN_SMP_EDIV))==SUCCESS_)
000058  4628              MOV      r0,r5
00005a  2700              MOVS     r7,#0                 ;1218
00005c  300b              ADDS     r0,r0,#0xb
00005e  2900              CMP      r1,#0                 ;1218
000060  d006              BEQ      |L16.112|
;;;1221           {
;;;1222               mblk->Primitive = HCLL_LE_LONG_TERM_KEY_REQ_REPLY;
;;;1223               mblk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_Conn_Hdl_L = pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Conn_Hdl_L;
;;;1224               if(smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE] > SIZE_MINIMUM_ENCRYPTION_KEY)
;;;1225               {
;;;1226                   i = SIZE_AES_KEY - SIZE_MINIMUM_ENCRYPTION_KEY;
;;;1227               }
;;;1228               else
;;;1229               {
;;;1230                   i = SIZE_AES_KEY - smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE];
;;;1231               }
;;;1232               if(i)
;;;1233               {
;;;1234                   //Knl_CodeCpy(mblk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_LongTermKey, TAB_ZERO_128, i);
;;;1235                   Knl_CodeCpy(smp_Temp16, TAB_ZERO_128, i);
;;;1236               }
;;;1237               Knl_MemCpyInv(mblk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_LongTermKey, smp_Temp16, LEN_AES_KEY);
;;;1238               smp_Encryption = 0;
;;;1239   #ifdef _BOND_ON_
;;;1240               cmd_FlashBond(CMD_FB_GET_NXT_PBID, (uint8_t*)smp_Para_Bond_tmp);
;;;1241   #endif
;;;1242           }
;;;1243           else
;;;1244           {
;;;1245               //should sent LL_REJECT_IND
;;;1246               mblk->Primitive = HCLL_LE_LONG_TERM_KEY_REQ_NEG_REPLY;
;;;1247               mblk->Para.HCLL_LE_Long_Term_key_Req_Neg_Reply_Para.HCI_Conn_Hdl_L = pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Conn_Hdl_L;
;;;1248           }
;;;1249       }
;;;1250       else    //(if(smp_Para_Bond[SMP_KEY_USE] == SMP_KEY_USE_STK))
;;;1251       {
;;;1252           if(Knl_MemComp(pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Random_Num, &smp_Para_Bond[SMP_RAND], (LEN_SMP_RAND+LEN_SMP_EDIV))==SUCCESS_)
000062  220a              MOVS     r2,#0xa
000064  1df1              ADDS     r1,r6,#7
000066  f7fffffe          BL       Knl_MemComp
00006a  2800              CMP      r0,#0
00006c  d035              BEQ      |L16.218|
00006e  e005              B        |L16.124|
                  |L16.112|
000070  220a              MOVS     r2,#0xa               ;1220
000072  4929              LDR      r1,|L16.280|
000074  f7fffffe          BL       Knl_CodeComp
000078  2800              CMP      r0,#0                 ;1220
00007a  d011              BEQ      |L16.160|
                  |L16.124|
;;;1253           {
;;;1254               mblk->Primitive = HCLL_LE_LONG_TERM_KEY_REQ_REPLY;
;;;1255               mblk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_Conn_Hdl_L = pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Conn_Hdl_L;
;;;1256               Knl_MemCpyInv(mblk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_LongTermKey, &smp_Para_Bond[SMP_LTK], LEN_AES_KEY);
;;;1257               if(smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE] > SIZE_MINIMUM_ENCRYPTION_KEY)
;;;1258               {
;;;1259                   i = SIZE_AES_KEY - SIZE_MINIMUM_ENCRYPTION_KEY;
;;;1260               }
;;;1261               else
;;;1262               {
;;;1263                   i = SIZE_AES_KEY - smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE];
;;;1264               }
;;;1265               if(i)
;;;1266               {
;;;1267                   Knl_CodeCpy(mblk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_LongTermKey, TAB_ZERO_128, i);
;;;1268               }
;;;1269               smp_Encryption = 0;
;;;1270           }
;;;1271           else
;;;1272           {
;;;1273               //should sent LL_REJECT_IND
;;;1274               mblk->Primitive = HCLL_LE_LONG_TERM_KEY_REQ_NEG_REPLY;
00007c  20dd              MOVS     r0,#0xdd
00007e  7120              STRB     r0,[r4,#4]
;;;1275               mblk->Para.HCLL_LE_Long_Term_key_Req_Neg_Reply_Para.HCI_Conn_Hdl_L = pMBlk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Conn_Hdl_L;
000080  7aa8              LDRB     r0,[r5,#0xa]
000082  7220              STRB     r0,[r4,#8]
                  |L16.132|
;;;1276           }
;;;1277       }
;;;1278       SndMsgBlk(mblk, Q_2LL);
000084  2100              MOVS     r1,#0
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       SndMsgBlk
;;;1279   #endif  //(#ifdef _SMP_ON_)
;;;1280   
;;;1281       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
00008c  4823              LDR      r0,|L16.284|
00008e  7900              LDRB     r0,[r0,#4]  ; Event_Mask
000090  0680              LSLS     r0,r0,#26
000092  d504              BPL      |L16.158|
;;;1282       {
;;;1283           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_LONG_TRM_KEY_REQ) != 0)
000094  4822              LDR      r0,|L16.288|
000096  7800              LDRB     r0,[r0,#0]  ; LE_Event_Mask
000098  06c0              LSLS     r0,r0,#27
00009a  d500              BPL      |L16.158|
;;;1284           {
;;;1285               __NOP();
00009c  bf00              NOP      
                  |L16.158|
;;;1286           }
;;;1287       }
;;;1288   #endif  //(#ifdef _HCI_HW_)
;;;1289   }
00009e  bdf8              POP      {r3-r7,pc}
                  |L16.160|
0000a0  20dc              MOVS     r0,#0xdc              ;1222
0000a2  7120              STRB     r0,[r4,#4]            ;1222
0000a4  7aa8              LDRB     r0,[r5,#0xa]          ;1223
0000a6  7220              STRB     r0,[r4,#8]            ;1223
0000a8  7c70              LDRB     r0,[r6,#0x11]         ;1224  ; smp_Para_Bond
0000aa  2810              CMP      r0,#0x10              ;1224
0000ac  d808              BHI      |L16.192|
0000ae  2110              MOVS     r1,#0x10              ;1230
0000b0  1a08              SUBS     r0,r1,r0              ;1230
0000b2  0602              LSLS     r2,r0,#24             ;1230
0000b4  0e12              LSRS     r2,r2,#24             ;1230
0000b6  d003              BEQ      |L16.192|
0000b8  4917              LDR      r1,|L16.280|
0000ba  481a              LDR      r0,|L16.292|
0000bc  f7fffffe          BL       Knl_CodeCpy
                  |L16.192|
0000c0  4620              MOV      r0,r4                 ;1237
0000c2  2210              MOVS     r2,#0x10              ;1237
0000c4  4917              LDR      r1,|L16.292|
0000c6  3009              ADDS     r0,r0,#9              ;1237
0000c8  f7fffffe          BL       Knl_MemCpyInv
0000cc  4816              LDR      r0,|L16.296|
0000ce  4911              LDR      r1,|L16.276|
0000d0  7007              STRB     r7,[r0,#0]            ;1238
0000d2  2001              MOVS     r0,#1                 ;1240
0000d4  f7fffffe          BL       cmd_FlashBond
0000d8  e7d4              B        |L16.132|
                  |L16.218|
0000da  20dc              MOVS     r0,#0xdc              ;1254
0000dc  7120              STRB     r0,[r4,#4]            ;1254
0000de  7aa8              LDRB     r0,[r5,#0xa]          ;1255
0000e0  7220              STRB     r0,[r4,#8]            ;1255
0000e2  4620              MOV      r0,r4                 ;1256
0000e4  3009              ADDS     r0,r0,#9              ;1256
0000e6  2210              MOVS     r2,#0x10              ;1256
0000e8  4910              LDR      r1,|L16.300|
0000ea  4605              MOV      r5,r0                 ;1256
0000ec  f7fffffe          BL       Knl_MemCpyInv
0000f0  7c70              LDRB     r0,[r6,#0x11]         ;1257  ; smp_Para_Bond
0000f2  2810              CMP      r0,#0x10              ;1257
0000f4  d808              BHI      |L16.264|
0000f6  2110              MOVS     r1,#0x10              ;1263
0000f8  1a08              SUBS     r0,r1,r0              ;1263
0000fa  0602              LSLS     r2,r0,#24             ;1263
0000fc  0e12              LSRS     r2,r2,#24             ;1263
0000fe  d003              BEQ      |L16.264|
000100  4905              LDR      r1,|L16.280|
000102  4628              MOV      r0,r5                 ;1267
000104  f7fffffe          BL       Knl_CodeCpy
                  |L16.264|
000108  4807              LDR      r0,|L16.296|
00010a  7007              STRB     r7,[r0,#0]            ;1269
00010c  e7ba              B        |L16.132|
;;;1290   
                          ENDP

00010e  0000              DCW      0x0000
                  |L16.272|
                          DCD      smp_Para_Bond
                  |L16.276|
                          DCD      smp_Para_Bond_tmp
                  |L16.280|
                          DCD      TAB_ZERO_128
                  |L16.284|
                          DCD      ||.data||+0x8
                  |L16.288|
                          DCD      ||.data||+0x1
                  |L16.292|
                          DCD      smp_Temp16
                  |L16.296|
                          DCD      smp_Encryption
                  |L16.300|
                          DCD      smp_Para_Bond+0x14

                          AREA ||i.MHC_Event_Le_PHY_Update_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_PHY_Update_Complete PROC
;;;1404   
;;;1405   void MHC_Event_Le_PHY_Update_Complete(MBLK *pMBlk)
000000  4909              LDR      r1,|L17.40|
;;;1406   {
;;;1407   #ifdef _HCI_HW_
;;;1408       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;1409       {
;;;1410           if((LE_Event_Mask[1] & HCI_LEEVTMSK_LE_PHY_UPDATE_CMPLT) != 0)
;;;1411           {
;;;1412               pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;1413               pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Event_Code = HCI_EVENT_LE_META;
;;;1414               pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Para_Length = 6;
;;;1415               pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Subevent_Code = HCI_SUBEVENT_CODE_LE_PHY_UPDATE_COMPLETE;
;;;1416               pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;1417   #ifdef _HCI_VIRTUAL_
;;;1418               LL2HCI_Return_Data(pMBlk->Para.Data, (3+6));
;;;1419   #else
;;;1420               setUART_Tx(pMBlk->Para.Data, (3+6));
;;;1421   #endif
;;;1422           }
;;;1423       }
;;;1424   #else
;;;1425       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
000002  7909              LDRB     r1,[r1,#4]  ; Event_Mask
000004  0689              LSLS     r1,r1,#26
000006  d50d              BPL      |L17.36|
;;;1426       {
;;;1427           if((LE_Event_Mask[1] & HCI_LEEVTMSK_LE_PHY_UPDATE_CMPLT) != 0)
000008  4908              LDR      r1,|L17.44|
00000a  7849              LDRB     r1,[r1,#1]  ; LE_Event_Mask
00000c  0709              LSLS     r1,r1,#28
00000e  d509              BPL      |L17.36|
;;;1428           {
;;;1429   //            BLE_Event_Phy_Update_Param phyParam;
;;;1430   
;;;1431   //            phyParam.status = pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Status;
;;;1432   //            phyParam.phyParam.connId = pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Conn_Hdl_L;
;;;1433   //            phyParam.phyParam.rx_Phy = pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_RX_PHY;
;;;1434   //            phyParam.phyParam.tx_Phy = pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_TX_PHY;
;;;1435               //BlePhy phy = pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_TX_PHY; // is the same as RX PHY
;;;1436               BleMHC_PostEvent(BLECMD_EVENT_PHY_UPDATE_COMPLETE,(void *)&(pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Status));
000010  2208              MOVS     r2,#8
000012  4601              MOV      r1,r0
000014  4610              MOV      r0,r2
000016  b510              PUSH     {r4,lr}               ;1406
000018  4a05              LDR      r2,|L17.48|
00001a  310a              ADDS     r1,r1,#0xa
00001c  6852              LDR      r2,[r2,#4]  ; mhcCallBack
00001e  4790              BLX      r2
;;;1437               //BleMHC_PostEvent(BLECMD_EVENT_PHY_UPDATE_COMPLETE,(void *)&(phyParam));
;;;1438   #ifdef _DEBUG_MSG_USER_
;;;1439               printf("TX PHY: %d, RX PHY: %d\n",pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_TX_PHY,pMBlk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_RX_PHY);
;;;1440   #endif
;;;1441               __NOP();
000020  bf00              NOP      
;;;1442           }
;;;1443       }
;;;1444   #endif
;;;1445   }
000022  bd10              POP      {r4,pc}
                  |L17.36|
000024  4770              BX       lr
;;;1446   
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
                          DCD      ||.data||+0x8
                  |L17.44|
                          DCD      ||.data||+0x1
                  |L17.48|
                          DCD      ||.data||

                          AREA ||i.MHC_Event_Le_Read_Remote_Used_Features_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_Read_Remote_Used_Features_Complete PROC
;;;1126   
;;;1127   void MHC_Event_Le_Read_Remote_Used_Features_Complete(MBLK *pMBlk)
000000  4804              LDR      r0,|L18.20|
;;;1128   {
;;;1129   #ifdef _HCI_HW_
;;;1130       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;1131       {
;;;1132           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_RD_RMT_USED_FEAT_CMPLT) != 0)
;;;1133           {
;;;1134               pMBlk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;1135               pMBlk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Event_Code = HCI_EVENT_LE_META;
;;;1136               pMBlk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Para_Length = 12;
;;;1137               pMBlk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Subevent_Code = HCI_SUBEVENT_CODE_LE_READ_REMOTE_USED_FEATURES_COMPLETE;
;;;1138               pMBlk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;1139   #ifdef _HCI_VIRTUAL_
;;;1140               LL2HCI_Return_Data(pMBlk->Para.Data, (3+12));
;;;1141   #else
;;;1142               setUART_Tx(pMBlk->Para.Data, (3+12));
;;;1143   #endif
;;;1144           }
;;;1145       }
;;;1146   #else
;;;1147       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
000002  7900              LDRB     r0,[r0,#4]  ; Event_Mask
000004  0680              LSLS     r0,r0,#26
000006  d504              BPL      |L18.18|
;;;1148       {
;;;1149           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_RD_RMT_USED_FEAT_CMPLT) != 0)
000008  4803              LDR      r0,|L18.24|
00000a  7800              LDRB     r0,[r0,#0]  ; LE_Event_Mask
00000c  0700              LSLS     r0,r0,#28
00000e  d500              BPL      |L18.18|
;;;1150           {
;;;1151               __NOP();
000010  bf00              NOP      
                  |L18.18|
;;;1152           }
;;;1153       }
;;;1154   #endif
;;;1155   }
000012  4770              BX       lr
;;;1156   
                          ENDP

                  |L18.20|
                          DCD      ||.data||+0x8
                  |L18.24|
                          DCD      ||.data||+0x1

                          AREA ||i.MHC_Event_Le_Remote_Conn_param_Req_Event||, CODE, READONLY, ALIGN=1

                  MHC_Event_Le_Remote_Conn_param_Req_Event PROC
;;;1291   
;;;1292   void MHC_Event_Le_Remote_Conn_param_Req_Event(MBLK *pMBlk)      //HCI__019
000000  4770              BX       lr
;;;1293   {
;;;1294       if((Event_Mask[4] & HCI_EVTMSK_7_LE_META) != 0)
;;;1295       {
;;;1296           if((LE_Event_Mask[0] & HCI_LEEVTMSK_LE_RMT_CONN_PARAM_REQ) != 0)
;;;1297           {
;;;1298           }
;;;1299       }
;;;1300   }
;;;1301   
                          ENDP


                          AREA ||i.MHC_Event_Le_Wait_Passkey_Confrim||, CODE, READONLY, ALIGN=2

                  MHC_Event_Le_Wait_Passkey_Confrim PROC
;;;1453   
;;;1454   void MHC_Event_Le_Wait_Passkey_Confrim(MBLK *pMBlk)
000000  220c              MOVS     r2,#0xc
;;;1455   {
;;;1456   #ifndef _HCI_HW_
;;;1457       BleMHC_PostEvent(BLECMD_EVENT_PASSKEY_CONFIRM,(void *)&pMBlk->Para.MHC_Le_Stk_Gen_Para.HCI_Conn_Hdl_L);
000002  4601              MOV      r1,r0
000004  4610              MOV      r0,r2
000006  4a02              LDR      r2,|L20.16|
000008  3108              ADDS     r1,r1,#8
00000a  6852              LDR      r2,[r2,#4]  ; mhcCallBack
00000c  4710              BX       r2
;;;1458   #endif
;;;1459   }
;;;1460   
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      ||.data||

                          AREA ||i.MHC_Event_Null||, CODE, READONLY, ALIGN=1

                  MHC_Event_Null PROC
;;;587    //HCI__011
;;;588    void MHC_Event_Null(MBLK *pMBlk)
000000  4770              BX       lr
;;;589    {
;;;590        //pMBlk = pMBlk;
;;;591    }
;;;592    
                          ENDP


                          AREA ||i.MHC_Event_Num_Of_Completed_Pckts||, CODE, READONLY, ALIGN=1

                  MHC_Event_Num_Of_Completed_Pckts PROC
;;;787    
;;;788    void MHC_Event_Num_Of_Completed_Pckts(MBLK *pMBlk)
000000  bf00              NOP      
;;;789    {
;;;790    #ifdef _HCI_HW_
;;;791        pMBlk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;792        pMBlk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_Event_Code = HCI_EVENT_NUMBER_OF_COMPLETED_PACKETS;
;;;793        pMBlk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_Para_Length = 5;
;;;794        pMBlk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_Num_of_Hdl = 1;
;;;795        pMBlk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;796        pMBlk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_HC_Num_Cmplt_Pkt_L = 0x01;
;;;797        pMBlk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_HC_Num_Cmplt_Pkt_H = 0x00;
;;;798    #ifdef _HCI_VIRTUAL_
;;;799        LL2HCI_Return_Data(pMBlk->Para.Data, (3+5));
;;;800    #else
;;;801        setUART_Tx(pMBlk->Para.Data, (3+5));
;;;802    #endif
;;;803    #else
;;;804        __NOP();
;;;805    #endif
;;;806    }
000002  4770              BX       lr
;;;807    
                          ENDP


                          AREA ||i.MHC_Event_Read_Remote_Ver_Info_Complete||, CODE, READONLY, ALIGN=2

                  MHC_Event_Read_Remote_Ver_Info_Complete PROC
;;;807    
;;;808    void MHC_Event_Read_Remote_Ver_Info_Complete(MBLK *pMBlk)
000000  4802              LDR      r0,|L23.12|
;;;809    {
;;;810    #ifdef _HCI_HW_
;;;811        if((Event_Mask[1] & HCI_EVTMSK_1_RD_RMT_VER_INFO_CMPLT) != 0)
;;;812        {
;;;813            pMBlk->Para.MHC_Read_Remote_Ver_Info_Complete_Para.HCI_Pckt_Typ = HCI_PKT_EVENT;
;;;814            pMBlk->Para.MHC_Read_Remote_Ver_Info_Complete_Para.HCI_Event_Code = HCI_EVENT_READ_REMOTE_VERSION_INFORMATION_COMPLETE;
;;;815            pMBlk->Para.MHC_Read_Remote_Ver_Info_Complete_Para.HCI_Para_Length = (NUM_LL_VERSION+3);
;;;816            pMBlk->Para.MHC_Read_Remote_Ver_Info_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
;;;817            pMBlk->Para.MHC_Read_Remote_Ver_Info_Complete_Para.HCI_Conn_Hdl_H = LL_CONN_ID_HDL_H;
;;;818    #ifdef _HCI_VIRTUAL_
;;;819            LL2HCI_Return_Data(pMBlk->Para.Data, ((NUM_LL_VERSION+3)+3));
;;;820    #else
;;;821            setUART_Tx(pMBlk->Para.Data, ((NUM_LL_VERSION+3)+3));    //8, Parameter Total Length
;;;822    #endif
;;;823        }
;;;824    #else
;;;825        if((Event_Mask[1] & HCI_EVTMSK_1_RD_RMT_VER_INFO_CMPLT) != 0)
000002  7840              LDRB     r0,[r0,#1]  ; Event_Mask
000004  0700              LSLS     r0,r0,#28
000006  d500              BPL      |L23.10|
;;;826        {
;;;827            __NOP();
000008  bf00              NOP      
                  |L23.10|
;;;828        }
;;;829    #endif
;;;830    }
00000a  4770              BX       lr
;;;831    
                          ENDP

                  |L23.12|
                          DCD      ||.data||+0x8

                          AREA ||i.MHC_Event_STK_Gen_Method||, CODE, READONLY, ALIGN=2

                  MHC_Event_STK_Gen_Method PROC
;;;1446   
;;;1447   void MHC_Event_STK_Gen_Method(MBLK *pMBlk)
000000  220b              MOVS     r2,#0xb
;;;1448   {
;;;1449   #ifndef _HCI_HW_
;;;1450       BleMHC_PostEvent(BLECMD_EVENT_STK_GEN_METHOD,(void *)&pMBlk->Para.MHC_Le_Stk_Gen_Para.HCI_Conn_Hdl_L);
000002  4601              MOV      r1,r0
000004  4610              MOV      r0,r2
000006  4a02              LDR      r2,|L24.16|
000008  3108              ADDS     r1,r1,#8
00000a  6852              LDR      r2,[r2,#4]  ; mhcCallBack
00000c  4710              BX       r2
;;;1451   #endif
;;;1452   }
;;;1453   
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      ||.data||

                          AREA ||i.MHC_Evnet_Auth_Status||, CODE, READONLY, ALIGN=2

                  MHC_Evnet_Auth_Status PROC
;;;1460   
;;;1461   void MHC_Evnet_Auth_Status(MBLK *pMBlk)
000000  220d              MOVS     r2,#0xd
;;;1462   {
;;;1463   #ifndef _HCI_HW_
;;;1464       BleMHC_PostEvent(BLECMD_EVENT_AUTH_STATUS,(void *)&pMBlk->Para.MHC_Le_Auth_status_Para.HCI_Conn_Hdl_L);
000002  4601              MOV      r1,r0
000004  4610              MOV      r0,r2
000006  4a02              LDR      r2,|L25.16|
000008  3108              ADDS     r1,r1,#8
00000a  6852              LDR      r2,[r2,#4]  ; mhcCallBack
00000c  4710              BX       r2
;;;1465   #endif
;;;1466   }
;;;1467   
                          ENDP

00000e  0000              DCW      0x0000
                  |L25.16|
                          DCD      ||.data||

                          AREA ||i.MHC_LE_ACL_Data_Pkt||, CODE, READONLY, ALIGN=2

                  MHC_LE_ACL_Data_Pkt PROC
;;;1310   #define NUM_BLE_L2CAP_PRCSS_LIMIT                  7
;;;1311   void MHC_LE_ACL_Data_Pkt(MBLK *pMBlk)
000000  7b41              LDRB     r1,[r0,#0xd]
;;;1312   {
;;;1313       Uint8 i;
;;;1314   #ifdef _HCI_HW_
;;;1315   
;;;1316       pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Pckt_Typ = HCI_PKT_ACL_DATA;
;;;1317       i = pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_H;
;;;1318       pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_H = ((i<<4)|LL_CONN_ID_HDL_H);
;;;1319       pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_LthH = 0;
;;;1320       i = (pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_LthL+SIZE_HCI_DATA_CONN_HDL+SIZE_HCI_DATA_PKT_LTH_BYTE);
;;;1321   #ifdef _HCI_VIRTUAL_
;;;1322       LL2HCI_Return_Data(pMBlk->Para.Data, i);
;;;1323   #else
;;;1324       setUART_Tx(pMBlk->Para.Data, i);
;;;1325   #endif
;;;1326   #else
;;;1327       MBLK *mblk;
;;;1328       extern L2CAPBuf L2CAP_Buf;
;;;1329   
;;;1330       if(pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data[TAB_BASIC_L2CAP_CID_L] < NUM_BLE_L2CAP_PRCSS_LIMIT)      //Solve the problem on IOS ver. 8.2 above of iPhones
000002  2907              CMP      r1,#7
000004  d219              BCS      |L26.58|
000006  b570              PUSH     {r4-r6,lr}            ;1312
;;;1331       {
;;;1332           mblk = pMBlk;
;;;1333           mblk->Primitive = MHC_LE_ACL_DATA_PKT_EXTEND;
000008  2178              MOVS     r1,#0x78
00000a  7101              STRB     r1,[r0,#4]
00000c  4604              MOV      r4,r0                 ;1332
;;;1334           L2CAP_Buf.connID_LL = pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L;
00000e  7a01              LDRB     r1,[r0,#8]
000010  480a              LDR      r0,|L26.60|
000012  4e0b              LDR      r6,|L26.64|
000014  76c1              STRB     r1,[r0,#0x1b]
;;;1335           i = 0;
000016  2500              MOVS     r5,#0
                  |L26.24|
;;;1336           while(1)
;;;1337           {
;;;1338               if(mblk != (MBLK *)0)
000018  2c00              CMP      r4,#0
00001a  d00d              BEQ      |L26.56|
;;;1339               {
;;;1340                   if(mblk->Primitive == MHC_LE_ACL_DATA_PKT_EXTEND)
00001c  7920              LDRB     r0,[r4,#4]
00001e  2878              CMP      r0,#0x78
000020  d10a              BNE      |L26.56|
;;;1341                   {
;;;1342                       Knl_MemCpy(&L2CAP_Buf.DataBuf[i], mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL);
000022  4621              MOV      r1,r4
000024  7aa2              LDRB     r2,[r4,#0xa]
000026  1970              ADDS     r0,r6,r5
000028  310b              ADDS     r1,r1,#0xb
00002a  f7fffffe          BL       Knl_MemCpy
;;;1343                       i += mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL;
00002e  7aa0              LDRB     r0,[r4,#0xa]
;;;1344                       mblk = mblk->Next;
000030  6824              LDR      r4,[r4,#0]
000032  1940              ADDS     r0,r0,r5              ;1343
000034  b2c5              UXTB     r5,r0                 ;1343
000036  e7ef              B        |L26.24|
                  |L26.56|
;;;1345                   }
;;;1346                   else
;;;1347                       break;
;;;1348               }
;;;1349               else
;;;1350                   break;
;;;1351           }
;;;1352       }
;;;1353   #endif
;;;1354   }
000038  bd70              POP      {r4-r6,pc}
                  |L26.58|
00003a  4770              BX       lr
;;;1355   
                          ENDP

                  |L26.60|
                          DCD      L2CAP_Buf+0xe0
                  |L26.64|
                          DCD      L2CAP_Buf

                          AREA ||i.MHC_LE_ACL_Data_Pkt_Extend||, CODE, READONLY, ALIGN=1

                  MHC_LE_ACL_Data_Pkt_Extend PROC
;;;1467   
;;;1468   void MHC_LE_ACL_Data_Pkt_Extend(MBLK *pMBlk)
000000  bf00              NOP      
;;;1469   {
;;;1470       __NOP();
;;;1471   }
000002  4770              BX       lr
;;;1472   
                          ENDP


                          AREA ||i.initHCI||, CODE, READONLY, ALIGN=2

                  initHCI PROC
;;;1540   
;;;1541   void initHCI(void)
000000  b510              PUSH     {r4,lr}
;;;1542   {
;;;1543       Knl_CodeCpy(Event_Mask, EVENT_MASK_INI, 5);
000002  2205              MOVS     r2,#5
000004  4906              LDR      r1,|L28.32|
000006  4807              LDR      r0,|L28.36|
000008  f7fffffe          BL       Knl_CodeCpy
;;;1544       Event_Mask2[0] = HCI_EVTMSK2_2_AUTHEN_PYLD_TIMEOUT_EXPRD;
00000c  4906              LDR      r1,|L28.40|
00000e  2080              MOVS     r0,#0x80
000010  7008              STRB     r0,[r1,#0]
;;;1545       Knl_CodeCpy(LE_Event_Mask, LE_EVENT_MASK_INI, 3);
000012  2203              MOVS     r2,#3
000014  4905              LDR      r1,|L28.44|
000016  4806              LDR      r0,|L28.48|
000018  f7fffffe          BL       Knl_CodeCpy
;;;1546   }
00001c  bd10              POP      {r4,pc}
;;;1547   
                          ENDP

00001e  0000              DCW      0x0000
                  |L28.32|
                          DCD      ||.constdata||+0x3
                  |L28.36|
                          DCD      ||.data||+0x8
                  |L28.40|
                          DCD      ||.data||
                  |L28.44|
                          DCD      ||.constdata||
                  |L28.48|
                          DCD      ||.data||+0x1

                          AREA ||i.initLLCallBack||, CODE, READONLY, ALIGN=2

                  initLLCallBack PROC
;;;580    
;;;581    void initLLCallBack(MHCCallBack callback)
000000  4901              LDR      r1,|L29.8|
;;;582    {
;;;583        mhcCallBack = callback;
000002  6048              STR      r0,[r1,#4]  ; mhcCallBack
;;;584    }
000004  4770              BX       lr
;;;585    
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      ||.data||

                          AREA ||i.initUart||, CODE, READONLY, ALIGN=1

                  initUart PROC
;;;1527   
;;;1528   void initUart(void)
000000  4770              BX       lr
;;;1529   {
;;;1530   #ifdef _HCI_HW_
;;;1531   #ifdef _HCI_VIRTUAL_
;;;1532   #else
;;;1533       UARTBufIdxR = 0;    //initail
;;;1534       UARTBufIdxT = 0;    //initail
;;;1535       UARTBufValidT= 0;   //initial
;;;1536   #endif
;;;1537   #endif
;;;1538   }
;;;1539   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  LE_EVENT_MASK_INI
000000  5f0800            DCB      0x5f,0x08,0x00
                  EVENT_MASK_INI
000003  90                DCB      0x90
000004  88028020          DCB      0x88,0x02,0x80,0x20
                  HCI_fsm
                          DCD      MHC_Event_Null
                          DCD      MHC_Event_Cmd_Complete
                          DCD      MHC_Event_Cmd_Status
                          DCD      MHC_Event_Disconn_Complete
                          DCD      MHC_Event_Num_Of_Completed_Pckts
                          DCD      MHC_Event_Read_Remote_Ver_Info_Complete
                          DCD      MHC_Event_Encrypt_Change
                          DCD      MHC_Event_Encrypt_Key_Refresh_Complete
                          DCD      MHC_Event_Data_Buffer_Overflow
                          DCD      MHC_Event_Hardware_Error
                          DCD      MHC_Event_Le_Conn_Complete
                          DCD      MHC_Event_Le_Adv_Report
                          DCD      MHC_Event_Le_Conn_Update_Complete
                          DCD      MHC_Event_Le_Read_Remote_Used_Features_Complete
                          DCD      MHC_Event_Le_Long_Term_Key_Req
                          DCD      MHC_Event_Le_Remote_Conn_param_Req_Event
                          DCD      MHC_Event_Authen_Payload_Timeout_Expired
                          DCD      MHC_LE_ACL_Data_Pkt
                          DCD      MHC_Event_HCI_Raw
                          DCD      MHC_Event_Le_Data_Length_Change
                          DCD      MHC_Event_Le_PHY_Update_Complete
                          DCD      MHC_Event_STK_Gen_Method
                          DCD      MHC_Event_Le_Wait_Passkey_Confrim
                          DCD      MHC_Evnet_Auth_Status
                          DCD      MHC_LE_ACL_Data_Pkt_Extend

                          AREA ||area_number.34||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.34||, ||.constdata||
                  TAB_SUPPORTED_COMMANDS_MASK
000000  20008000          DCB      0x20,0x00,0x80,0x00
000004  00c00000          DCB      0x00,0xc0,0x00,0x00
000008  0000e000          DCB      0x00,0x00,0xe0,0x00
00000c  0000a822          DCB      0x00,0x00,0xa8,0x22
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00f7ffff          DCB      0x00,0xf7,0xff,0xff
00001c  7f000000          DCB      0x7f,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||area_number.35||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.constdata||
                  TAB_LMP_FEATURES_MASK
000000  043f0f00          DCB      0x04,0x3f,0x0f,0x00
000004  7b1c7b87          DCB      0x7b,0x1c,0x7b,0x87

                          AREA ||.data||, DATA, ALIGN=2

                  Event_Mask2
000000  00                DCB      0x00
                  LE_Event_Mask
000001  000000            DCB      0x00,0x00,0x00
                  mhcCallBack
                          DCD      0x00000000
                  Event_Mask
                          DCD      0x00000000
00000c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\hci.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_hci_c_f426da9f____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_hci_c_f426da9f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_hci_c_f426da9f____REVSH|
#line 402
|__asm___5_hci_c_f426da9f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

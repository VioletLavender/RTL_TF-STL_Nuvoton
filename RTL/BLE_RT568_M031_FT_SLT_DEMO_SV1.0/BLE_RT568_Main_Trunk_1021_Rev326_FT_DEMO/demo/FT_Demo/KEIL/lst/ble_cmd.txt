; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ble_cmd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ble_cmd.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\..\..\Library\CMSIS\Include -I..\..\..\..\..\..\Library\StdDriver\inc -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\ble_cmd.crf ..\..\..\source\ble_cmd.c]
                          THUMB

                          AREA ||i.getBLE_BleDeviceAddr||, CODE, READONLY, ALIGN=2

                  getBLE_BleDeviceAddr PROC
;;;102     */
;;;103    void getBLE_BleDeviceAddr(BLE_Addr_Param *addrParam)
000000  b510              PUSH     {r4,lr}
;;;104    {
;;;105        addrParam->addrType = ble_device_param.ble_deviceAddr_param.addrType;
000002  4904              LDR      r1,|L1.20|
000004  784a              LDRB     r2,[r1,#1]  ; ble_device_param
000006  7002              STRB     r2,[r0,#0]
;;;106        Knl_MemCpy(addrParam->addr,ble_device_param.ble_deviceAddr_param.addr, SIZE_BLE_ADDR);
000008  2206              MOVS     r2,#6
00000a  1c40              ADDS     r0,r0,#1
00000c  1c89              ADDS     r1,r1,#2
00000e  f7fffffe          BL       Knl_MemCpy
;;;107    }
000012  bd10              POP      {r4,pc}
;;;108    
                          ENDP

                  |L1.20|
                          DCD      ble_device_param

                          AREA ||i.getBLE_Phy||, CODE, READONLY, ALIGN=1

                  getBLE_Phy PROC
;;;883     */
;;;884    BleStackStatus getBLE_Phy(Uint8 connID)
000000  2804              CMP      r0,#4
;;;885    {
;;;886        MBLK *mblk;
;;;887    
;;;888    #if MAX_NUM_CONN_MAS_HDL != 0
;;;889        if(connID < MAX_NUM_CONN_MAS_HDL)   //role = Master
000002  d302              BCC      |L2.10|
;;;890        {
;;;891        }
;;;892        else   //role = slave
;;;893    #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;894        {
;;;895    #if MAX_NUM_CONN_SLV_HDL != 0
;;;896            // temp to check connection ID
;;;897            if(connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED)
000004  d901              BLS      |L2.10|
;;;898            {
;;;899                return BLESTACK_STATUS_ERR_INVALID_CONNID;
000006  2005              MOVS     r0,#5
;;;900            }
;;;901    #endif
;;;902        }
;;;903    
;;;904        // check current BLE status first
;;;905        if((LL_CheckConnExist(connID) == NO_)) // temp to check is in connection state, only one link
;;;906        {
;;;907            return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;908        }
;;;909    
;;;910        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_Le_Read_Phy_Para));
;;;911        if(mblk == (MBLK *)0)
;;;912        {
;;;913            return BLESTACK_STATUS_ERR_BUSY;
;;;914        }
;;;915    
;;;916        mblk->Para.HCLL_Le_Read_Phy_Para.HCI_Conn_Hdl_L = connID;
;;;917        mblk->Primitive = HCLL_LE_READ_PHY;
;;;918        SndMsgBlk(mblk, Q_2LL);
;;;919        return BLESTACK_STATUS_SUCCESS;
;;;920    }
000008  4770              BX       lr
                  |L2.10|
00000a  b510              PUSH     {r4,lr}               ;885
00000c  4604              MOV      r4,r0                 ;885
00000e  f7fffffe          BL       LL_CheckConnExist
000012  2800              CMP      r0,#0                 ;905
000014  d00c              BEQ      |L2.48|
000016  2001              MOVS     r0,#1                 ;910
000018  f7fffffe          BL       GetMsgBlk_L2_wSize
00001c  2800              CMP      r0,#0                 ;911
00001e  d009              BEQ      |L2.52|
000020  7204              STRB     r4,[r0,#8]            ;916
000022  21eb              MOVS     r1,#0xeb              ;917
000024  7101              STRB     r1,[r0,#4]            ;917
000026  2100              MOVS     r1,#0                 ;918
000028  f7fffffe          BL       SndMsgBlk
00002c  2000              MOVS     r0,#0                 ;919
00002e  bd10              POP      {r4,pc}
                  |L2.48|
000030  2005              MOVS     r0,#5                 ;907
000032  bd10              POP      {r4,pc}
                  |L2.52|
000034  2001              MOVS     r0,#1                 ;913
000036  bd10              POP      {r4,pc}
;;;921    
                          ENDP


                          AREA ||i.getBLE_RssiValue||, CODE, READONLY, ALIGN=1

                  getBLE_RssiValue PROC
;;;934     */
;;;935    BleStackStatus getBLE_RssiValue(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;936    {
000002  4604              MOV      r4,r0
;;;937        MBLK *mblk;
;;;938    
;;;939        // temp to check connection ID
;;;940        if((connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED) || (LL_CheckConnExist(connID) == NO_)) // temp to check is in connection state, only one link
000004  2804              CMP      r0,#4
000006  d810              BHI      |L3.42|
000008  f7fffffe          BL       LL_CheckConnExist
00000c  2800              CMP      r0,#0
00000e  d00c              BEQ      |L3.42|
;;;941        {
;;;942            return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;943        }
;;;944    
;;;945    //    if((chkBLE_LL_State_Scan() == 0) &&
;;;946    //       (LL_CheckConnExist(connID) != YES_)) // temp to check is in connection state, only one link
;;;947    //    {
;;;948    //        return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;949    //    }
;;;950    
;;;951        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_Read_Rssi_Para));
000010  2001              MOVS     r0,#1
000012  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;952        if(mblk == (MBLK *)0)
000016  2800              CMP      r0,#0
000018  d009              BEQ      |L3.46|
;;;953        {
;;;954            return BLESTACK_STATUS_ERR_BUSY;
;;;955        }
;;;956    
;;;957        mblk->Primitive = HCLL_READ_RSSI;
00001a  21c3              MOVS     r1,#0xc3
00001c  7101              STRB     r1,[r0,#4]
;;;958        mblk->Para.HCLL_Read_Rssi_Para.HCI_Conn_Hdl_L = connID;
00001e  7204              STRB     r4,[r0,#8]
;;;959        SndMsgBlk(mblk, Q_2LL);
000020  2100              MOVS     r1,#0
000022  f7fffffe          BL       SndMsgBlk
;;;960        return BLESTACK_STATUS_SUCCESS;
000026  2000              MOVS     r0,#0
;;;961    }
000028  bd10              POP      {r4,pc}
                  |L3.42|
00002a  2005              MOVS     r0,#5                 ;942
00002c  bd10              POP      {r4,pc}
                  |L3.46|
00002e  2001              MOVS     r0,#1                 ;954
000030  bd10              POP      {r4,pc}
;;;962    
                          ENDP


                          AREA ||i.setBLE_AdvData||, CODE, READONLY, ALIGN=1

                  setBLE_AdvData PROC
;;;221     */
;;;222    BleStackStatus setBLE_AdvData(Uint8 *advData, Uint8 length)
000000  2920              CMP      r1,#0x20
;;;223    {
;;;224        MBLK *mblk;
;;;225    
;;;226        // Adv data payload length = 31 (LEN_ADV_SCAN_DATA_MAX)
;;;227        // Max. length of advData is 32(LEN_ADV_SCAN_DATA_MAX + 1(HCI_Adv_Data_Length) )
;;;228        if(length> (LEN_ADV_SCAN_DATA_MAX + 1))
000002  d901              BLS      |L4.8|
;;;229        {
;;;230            return BLESTACK_STATUS_ERR_INVALID_PARAM;
000004  2003              MOVS     r0,#3
;;;231        }
;;;232    
;;;233    
;;;234        mblk = GetMsgBlk_L2_wSize(length);
;;;235        if(mblk == (MBLK *)0)
;;;236        {
;;;237            return BLESTACK_STATUS_ERR_BUSY;
;;;238        }
;;;239    
;;;240        Knl_CodeCpy(mblk->Para.Data, advData, length);
;;;241    
;;;242        mblk->Primitive = HCLL_LE_SET_ADV_DATA;
;;;243        SndMsgBlk(mblk, Q_2LL);
;;;244        return BLESTACK_STATUS_SUCCESS;
;;;245    }
000006  4770              BX       lr
                  |L4.8|
000008  b570              PUSH     {r4-r6,lr}            ;223
00000a  4606              MOV      r6,r0                 ;223
00000c  460d              MOV      r5,r1                 ;223
00000e  4608              MOV      r0,r1                 ;234
000010  f7fffffe          BL       GetMsgBlk_L2_wSize
000014  0004              MOVS     r4,r0                 ;234
000016  d00d              BEQ      |L4.52|
000018  4620              MOV      r0,r4                 ;240
00001a  462a              MOV      r2,r5                 ;240
00001c  4631              MOV      r1,r6                 ;240
00001e  3008              ADDS     r0,r0,#8              ;240
000020  f7fffffe          BL       Knl_CodeCpy
000024  20ca              MOVS     r0,#0xca              ;242
000026  7120              STRB     r0,[r4,#4]            ;242
000028  2100              MOVS     r1,#0                 ;243
00002a  4620              MOV      r0,r4                 ;243
00002c  f7fffffe          BL       SndMsgBlk
000030  2000              MOVS     r0,#0                 ;244
000032  bd70              POP      {r4-r6,pc}
                  |L4.52|
000034  2001              MOVS     r0,#1                 ;237
000036  bd70              POP      {r4-r6,pc}
;;;246    
                          ENDP


                          AREA ||i.setBLE_AdvDisable||, CODE, READONLY, ALIGN=1

                  setBLE_AdvDisable PROC
;;;329     */
;;;330    BleStackStatus setBLE_AdvDisable(void)
000000  b510              PUSH     {r4,lr}
;;;331    {
;;;332        MBLK *mblk;
;;;333    
;;;334        if(chkBLE_LL_State_Adv() == 0)
000002  f7fffffe          BL       chkBLE_LL_State_Adv
000006  2800              CMP      r0,#0
000008  d00d              BEQ      |L5.38|
;;;335        {
;;;336            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;337        }
;;;338    
;;;339        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Set_Advertise_Enable_Para));
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;340        if(mblk == (MBLK *)0)
000010  2800              CMP      r0,#0
000012  d00a              BEQ      |L5.42|
;;;341        {
;;;342            return BLESTACK_STATUS_ERR_BUSY;
;;;343        }
;;;344    
;;;345        mblk->Para.HCLL_LE_Set_Advertise_Enable_Para.HCI_Adv_En = 0x00;
000014  2100              MOVS     r1,#0
000016  7201              STRB     r1,[r0,#8]
;;;346        mblk->Primitive = HCLL_LE_SET_ADVERTISE_ENABLE;
000018  21cc              MOVS     r1,#0xcc
00001a  7101              STRB     r1,[r0,#4]
;;;347        SndMsgBlk(mblk, Q_2LL);
00001c  2100              MOVS     r1,#0
00001e  f7fffffe          BL       SndMsgBlk
;;;348        return BLESTACK_STATUS_SUCCESS;
000022  2000              MOVS     r0,#0
;;;349    }
000024  bd10              POP      {r4,pc}
                  |L5.38|
000026  2004              MOVS     r0,#4                 ;336
000028  bd10              POP      {r4,pc}
                  |L5.42|
00002a  2001              MOVS     r0,#1                 ;342
00002c  bd10              POP      {r4,pc}
;;;350    
                          ENDP


                          AREA ||i.setBLE_AdvEnable||, CODE, READONLY, ALIGN=1

                  setBLE_AdvEnable PROC
;;;292     */
;;;293    BleStackStatus setBLE_AdvEnable(void)
000000  b510              PUSH     {r4,lr}
;;;294    {
;;;295        MBLK *mblk;
;;;296    
;;;297        // check current BLE status first
;;;298        if((chkBLE_LL_State_Adv()  != 0))
000002  f7fffffe          BL       chkBLE_LL_State_Adv
000006  2800              CMP      r0,#0
000008  d112              BNE      |L6.48|
;;;299        {
;;;300            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;301        }
;;;302    
;;;303        if((LL_CheckConnExist(BLE_ROLESLAVE_ONELINK_CONNID_FIXED) == YES_)) // temp to check is in connection state, only one link
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       LL_CheckConnExist
000010  2801              CMP      r0,#1
000012  d00d              BEQ      |L6.48|
;;;304        {
;;;305            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;306        }
;;;307    
;;;308        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Set_Advertise_Enable_Para));
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;309        if(mblk == (MBLK *)0)
00001a  2800              CMP      r0,#0
00001c  d00a              BEQ      |L6.52|
;;;310        {
;;;311            return BLESTACK_STATUS_ERR_BUSY;
;;;312        }
;;;313    
;;;314        mblk->Para.HCLL_LE_Set_Advertise_Enable_Para.HCI_Adv_En = 0x01;
00001e  2101              MOVS     r1,#1
000020  7201              STRB     r1,[r0,#8]
;;;315        mblk->Primitive = HCLL_LE_SET_ADVERTISE_ENABLE;
000022  21cc              MOVS     r1,#0xcc
000024  7101              STRB     r1,[r0,#4]
;;;316        SndMsgBlk(mblk, Q_2LL);
000026  2100              MOVS     r1,#0
000028  f7fffffe          BL       SndMsgBlk
;;;317        return BLESTACK_STATUS_SUCCESS;
00002c  2000              MOVS     r0,#0
;;;318    }
00002e  bd10              POP      {r4,pc}
                  |L6.48|
000030  2004              MOVS     r0,#4                 ;305
000032  bd10              POP      {r4,pc}
                  |L6.52|
000034  2001              MOVS     r0,#1                 ;311
000036  bd10              POP      {r4,pc}
;;;319    
                          ENDP


                          AREA ||i.setBLE_AdvParam||, CODE, READONLY, ALIGN=2

                  setBLE_AdvParam PROC
;;;136    */
;;;137    BleStackStatus setBLE_AdvParam(BLE_Adv_Param advParam)
000000  b51f              PUSH     {r0-r4,lr}
;;;138    {
;;;139        MBLK *mblk;
;;;140    
;;;141        // check current BLE status first
;;;142        if( (chkBLE_LL_State_Adv()  != 0) ||
000002  f7fffffe          BL       chkBLE_LL_State_Adv
000006  2800              CMP      r0,#0
000008  d124              BNE      |L7.84|
;;;143                (LL_CheckConnExist(BLE_ROLESLAVE_ONELINK_CONNID_FIXED) == YES_)) // temp to check is in connection state, only one link
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       LL_CheckConnExist
000010  2801              CMP      r0,#1
000012  d01f              BEQ      |L7.84|
;;;144        {
;;;145            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;146        }
;;;147    
;;;148        if( (advParam.Adv_Interval_Min < ADV_INTERVAL_MIN || advParam.Adv_Interval_Min>ADV_INTERVAL_MAX) ||
000014  4668              MOV      r0,sp
000016  8841              LDRH     r1,[r0,#2]
000018  4a2c              LDR      r2,|L7.204|
00001a  4608              MOV      r0,r1
00001c  3820              SUBS     r0,r0,#0x20
00001e  4290              CMP      r0,r2
000020  d215              BCS      |L7.78|
;;;149                (advParam.Adv_Interval_Max < ADV_INTERVAL_MIN || advParam.Adv_Interval_Max>ADV_INTERVAL_MAX) ||
000022  4668              MOV      r0,sp
000024  8880              LDRH     r0,[r0,#4]
000026  4603              MOV      r3,r0
000028  3b20              SUBS     r3,r3,#0x20
00002a  4293              CMP      r3,r2
00002c  d20f              BCS      |L7.78|
;;;150                (advParam.Adv_Interval_Min > advParam.Adv_Interval_Max) ||
00002e  4281              CMP      r1,r0
000030  d80d              BHI      |L7.78|
;;;151                (advParam.Adv_Channel_Map > ADV_CHANNEL_ALL) )
000032  4668              MOV      r0,sp
000034  7b40              LDRB     r0,[r0,#0xd]
000036  2807              CMP      r0,#7
000038  d809              BHI      |L7.78|
;;;152        {
;;;153            return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;154        }
;;;155    
;;;156        switch(advParam.Adv_Type)
00003a  4668              MOV      r0,sp
00003c  7800              LDRB     r0,[r0,#0]
00003e  2800              CMP      r0,#0
000040  d00b              BEQ      |L7.90|
000042  2801              CMP      r0,#1
000044  d009              BEQ      |L7.90|
000046  2802              CMP      r0,#2
000048  d007              BEQ      |L7.90|
00004a  2803              CMP      r0,#3
00004c  d005              BEQ      |L7.90|
                  |L7.78|
;;;157        {
;;;158        case ADV_TYPE_ADV_IND:
;;;159        case ADV_TYPE_ADV_DIRECT_IND:
;;;160        case ADV_TYPE_SCAN_IND:
;;;161        case ADV_TYPE_ADV_NONCONN_IND:
;;;162            break;
;;;163        default:
;;;164            return BLESTACK_STATUS_ERR_INVALID_PARAM;
00004e  2003              MOVS     r0,#3
;;;165        }
;;;166    
;;;167        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Set_Adv_Param_Para));
;;;168        if(mblk == (MBLK *)0)
;;;169        {
;;;170            return BLESTACK_STATUS_ERR_BUSY;
;;;171        }
;;;172    
;;;173        switch(advParam.Adv_Type)
;;;174        {
;;;175        case ADV_TYPE_ADV_IND:
;;;176            mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Type = HCI_ADV_TYPE_ADV_IND;
;;;177            break;
;;;178        case ADV_TYPE_ADV_DIRECT_IND:
;;;179            mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Type = HCI_ADV_TYPE_ADV_DIRECT_IND_HIGH;
;;;180            break;
;;;181        case ADV_TYPE_SCAN_IND:
;;;182            mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Type = HCI_ADV_TYPE_ADV_SCAN_IND;
;;;183            break;
;;;184        case ADV_TYPE_ADV_NONCONN_IND:
;;;185            mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Type = HCI_ADV_TYPE_ADV_NONCONN_IND;
;;;186            break;
;;;187        default:
;;;188            mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Type = HCI_ADV_TYPE_ADV_IND;
;;;189            break;
;;;190        }
;;;191    
;;;192        mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Channel_Map = advParam.Adv_Channel_Map;
;;;193    
;;;194        //mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Filter_Policy = advParam.Adv_Filter_Policy;
;;;195        mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Filter_Policy = ADV_FILTER_POLICY_ACCEPT_ALL; // set to the fixed setting, currently only support this filter
;;;196    
;;;197        mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Interval_Max = advParam.Adv_Interval_Max;
;;;198        mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Interval_Min = advParam.Adv_Interval_Min;
;;;199        mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Own_Addr_Type = ble_device_param.ble_deviceAddr_param.addrType;
;;;200        mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Direct_Addr_Type = advParam.Adv_DirectAddr_Param.addrType;
;;;201    
;;;202        Knl_CodeCpy( mblk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Direct_Addr, advParam.Adv_DirectAddr_Param.addr, SIZE_BLE_ADDR);
;;;203    
;;;204        mblk->Primitive = HCLL_LE_SET_ADV_PARAM;
;;;205        SndMsgBlk(mblk, Q_2LL);
;;;206        return BLESTACK_STATUS_SUCCESS;
;;;207    }
000050  b004              ADD      sp,sp,#0x10
000052  bd10              POP      {r4,pc}
                  |L7.84|
000054  2004              MOVS     r0,#4                 ;145
000056  b004              ADD      sp,sp,#0x10
000058  bd10              POP      {r4,pc}
                  |L7.90|
00005a  2010              MOVS     r0,#0x10              ;167
00005c  f7fffffe          BL       GetMsgBlk_L2_wSize
000060  0004              MOVS     r4,r0                 ;167
000062  d00c              BEQ      |L7.126|
000064  4668              MOV      r0,sp                 ;173
000066  7800              LDRB     r0,[r0,#0]            ;173
000068  2100              MOVS     r1,#0                 ;173
00006a  2800              CMP      r0,#0                 ;173
00006c  d005              BEQ      |L7.122|
00006e  2801              CMP      r0,#1                 ;173
000070  d008              BEQ      |L7.132|
000072  2802              CMP      r0,#2                 ;173
000074  d006              BEQ      |L7.132|
000076  2803              CMP      r0,#3                 ;173
000078  d006              BEQ      |L7.136|
                  |L7.122|
00007a  7321              STRB     r1,[r4,#0xc]          ;176
00007c  e006              B        |L7.140|
                  |L7.126|
00007e  2001              MOVS     r0,#1                 ;170
000080  b004              ADD      sp,sp,#0x10
000082  bd10              POP      {r4,pc}
                  |L7.132|
000084  7320              STRB     r0,[r4,#0xc]          ;179
000086  e001              B        |L7.140|
                  |L7.136|
000088  2003              MOVS     r0,#3                 ;185
00008a  7320              STRB     r0,[r4,#0xc]          ;185
                  |L7.140|
00008c  4668              MOV      r0,sp                 ;192
00008e  7b40              LDRB     r0,[r0,#0xd]          ;192
000090  7560              STRB     r0,[r4,#0x15]         ;192
000092  75a1              STRB     r1,[r4,#0x16]         ;195
000094  4668              MOV      r0,sp                 ;197
000096  8880              LDRH     r0,[r0,#4]            ;197
000098  8160              STRH     r0,[r4,#0xa]          ;197
00009a  4668              MOV      r0,sp                 ;198
00009c  8840              LDRH     r0,[r0,#2]            ;198
00009e  8120              STRH     r0,[r4,#8]            ;198
0000a0  480b              LDR      r0,|L7.208|
0000a2  a901              ADD      r1,sp,#4              ;202
0000a4  7840              LDRB     r0,[r0,#1]            ;199  ; ble_device_param
0000a6  7360              STRB     r0,[r4,#0xd]          ;199
0000a8  4668              MOV      r0,sp                 ;200
0000aa  7980              LDRB     r0,[r0,#6]            ;200
0000ac  73a0              STRB     r0,[r4,#0xe]          ;200
0000ae  4620              MOV      r0,r4                 ;202
0000b0  2206              MOVS     r2,#6                 ;202
0000b2  300f              ADDS     r0,r0,#0xf            ;202
0000b4  3103              ADDS     r1,#3                 ;202
0000b6  f7fffffe          BL       Knl_CodeCpy
0000ba  20c8              MOVS     r0,#0xc8              ;204
0000bc  7120              STRB     r0,[r4,#4]            ;204
0000be  2100              MOVS     r1,#0                 ;205
0000c0  4620              MOV      r0,r4                 ;205
0000c2  f7fffffe          BL       SndMsgBlk
0000c6  2000              MOVS     r0,#0                 ;206
0000c8  b004              ADD      sp,sp,#0x10
0000ca  bd10              POP      {r4,pc}
;;;208    
                          ENDP

                  |L7.204|
                          DCD      0x00003fe1
                  |L7.208|
                          DCD      ble_device_param

                          AREA ||i.setBLE_BleDeviceAddr||, CODE, READONLY, ALIGN=2

                  setBLE_BleDeviceAddr PROC
;;;59      */
;;;60     BleStackStatus setBLE_BleDeviceAddr(BLE_Addr_Param *addrParam)
000000  b510              PUSH     {r4,lr}
;;;61     {
000002  4604              MOV      r4,r0
;;;62         extern Uint8 BD_Rand_Addr[LEN_BD_ADDR];
;;;63     
;;;64         // check current BLE status first
;;;65         if( (chkBLE_LL_State_Adv()  != 0) ||
000004  f7fffffe          BL       chkBLE_LL_State_Adv
000008  2800              CMP      r0,#0
00000a  d112              BNE      |L8.50|
;;;66                 (chkBLE_LL_State_Scan() != 0) ||
00000c  f7fffffe          BL       chkBLE_LL_State_Scan
000010  2800              CMP      r0,#0
000012  d10e              BNE      |L8.50|
;;;67                 (chkBLE_LL_State_Init() != 0) ||
000014  f7fffffe          BL       chkBLE_LL_State_Init
000018  2800              CMP      r0,#0
00001a  d10a              BNE      |L8.50|
;;;68                 (LL_CheckConnExist(BLE_ROLESLAVE_ONELINK_CONNID_FIXED) == YES_)) // temp to check is in connection state
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       LL_CheckConnExist
000022  2801              CMP      r0,#1
000024  d005              BEQ      |L8.50|
;;;69         {
;;;70             return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;71         }
;;;72     
;;;73         if(((addrParam->addrType != PUBLIC_ADDR) && (addrParam->addrType != RANDOM_ADDR)) ||
000026  7820              LDRB     r0,[r4,#0]
000028  2800              CMP      r0,#0
00002a  d00a              BEQ      |L8.66|
00002c  2801              CMP      r0,#1
00002e  d106              BNE      |L8.62|
000030  e001              B        |L8.54|
                  |L8.50|
000032  2004              MOVS     r0,#4                 ;70
;;;74                 ((addrParam->addrType == RANDOM_ADDR) && ((addrParam->addr[SIZE_BLE_ADDR - 1] & 0xC0) != 0xC0 ))) // static random address --> ADDDR MSB[4:5] = 11
;;;75         {
;;;76             return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;77         }
;;;78     
;;;79         ble_device_param.ble_deviceAddr_param.addrType = addrParam->addrType;
;;;80         Knl_MemCpy(ble_device_param.ble_deviceAddr_param.addr, addrParam->addr, SIZE_BLE_ADDR);
;;;81     
;;;82         if(addrParam->addrType == RANDOM_ADDR)
;;;83         {
;;;84             // BD_Rand_Addr is used in LL
;;;85             Knl_MemCpy(BD_Rand_Addr,addrParam->addr,SIZE_BLE_ADDR);
;;;86         }
;;;87     
;;;88         return BLESTACK_STATUS_SUCCESS;
;;;89     }
000034  bd10              POP      {r4,pc}
                  |L8.54|
000036  79a1              LDRB     r1,[r4,#6]            ;74
000038  0989              LSRS     r1,r1,#6              ;74
00003a  2903              CMP      r1,#3                 ;74
00003c  d001              BEQ      |L8.66|
                  |L8.62|
00003e  2003              MOVS     r0,#3                 ;76
000040  bd10              POP      {r4,pc}
                  |L8.66|
000042  4b08              LDR      r3,|L8.100|
000044  2206              MOVS     r2,#6                 ;80
000046  7058              STRB     r0,[r3,#1]            ;79
000048  1c61              ADDS     r1,r4,#1              ;80
00004a  1c98              ADDS     r0,r3,#2              ;80
00004c  f7fffffe          BL       Knl_MemCpy
000050  7820              LDRB     r0,[r4,#0]            ;82
000052  2801              CMP      r0,#1                 ;82
000054  d104              BNE      |L8.96|
000056  2206              MOVS     r2,#6                 ;85
000058  1c61              ADDS     r1,r4,#1              ;85
00005a  4803              LDR      r0,|L8.104|
00005c  f7fffffe          BL       Knl_MemCpy
                  |L8.96|
000060  2000              MOVS     r0,#0                 ;88
000062  bd10              POP      {r4,pc}
;;;90     
                          ENDP

                  |L8.100|
                          DCD      ble_device_param
                  |L8.104|
                          DCD      BD_Rand_Addr

                          AREA ||i.setBLE_BondingFlags||, CODE, READONLY, ALIGN=2

                  setBLE_BondingFlags PROC
;;;1126    */
;;;1127   BleStackStatus setBLE_BondingFlags(BLE_Bonding_Flags *Param)
000000  b510              PUSH     {r4,lr}
;;;1128   {
000002  4604              MOV      r4,r0
;;;1129   #ifdef _SMP_ON_
;;;1130       extern Uint8 chkBLE_LL_State_Init(void);
;;;1131   
;;;1132       if((chkBLE_LL_State_Init() != 0))
000004  f7fffffe          BL       chkBLE_LL_State_Init
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L9.16|
;;;1133       {
;;;1134           return BLESTACK_STATUS_ERR_INVALID_STATE;
00000c  2004              MOVS     r0,#4
;;;1135       }
;;;1136   
;;;1137       if(Param->Flags == AUTHREQ_BONDING_FLAGS_BONDING)
;;;1138       {
;;;1139           rsp_pairing_request_table[TAB_AUTHREQ] |= AUTHREQ_BONDING_FLAGS_BONDING;
;;;1140       }
;;;1141       else
;;;1142       {
;;;1143           rsp_pairing_request_table[TAB_AUTHREQ] &= ~(AUTHREQ_BONDING_FLAGS_BONDING);
;;;1144       }
;;;1145   
;;;1146       return BLESTACK_STATUS_SUCCESS;
;;;1147   #else
;;;1148       return BLESTACK_STATUS_ERR_INVALID_CMD;
;;;1149   #endif
;;;1150   }
00000e  bd10              POP      {r4,pc}
                  |L9.16|
000010  7821              LDRB     r1,[r4,#0]            ;1137
000012  4806              LDR      r0,|L9.44|
000014  2901              CMP      r1,#1                 ;1137
000016  79c1              LDRB     r1,[r0,#7]            ;1143  ; rsp_pairing_request_table
000018  d004              BEQ      |L9.36|
00001a  0849              LSRS     r1,r1,#1              ;1143
00001c  0049              LSLS     r1,r1,#1              ;1143
                  |L9.30|
00001e  71c1              STRB     r1,[r0,#7]            ;1143
000020  2000              MOVS     r0,#0                 ;1146
000022  bd10              POP      {r4,pc}
                  |L9.36|
000024  2201              MOVS     r2,#1                 ;1139
000026  4311              ORRS     r1,r1,r2              ;1139
000028  e7f9              B        |L9.30|
;;;1151   
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      rsp_pairing_request_table

                          AREA ||i.setBLE_ConnCancel||, CODE, READONLY, ALIGN=1

                  setBLE_ConnCancel PROC
;;;602     */
;;;603    BleStackStatus setBLE_ConnCancel(void)
000000  b510              PUSH     {r4,lr}
;;;604    {
;;;605        MBLK *mblk;
;;;606    
;;;607        // check current BLE status first
;;;608        if( chkBLE_LL_State_Init() == 0)
000002  f7fffffe          BL       chkBLE_LL_State_Init
000006  2800              CMP      r0,#0
000008  d00b              BEQ      |L10.34|
;;;609        {
;;;610            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;611        }
;;;612    
;;;613        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Create_Conn_Cancel_Para));
00000a  202c              MOVS     r0,#0x2c
00000c  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;614        if(mblk == (MBLK *)0)
000010  2800              CMP      r0,#0
000012  d008              BEQ      |L10.38|
;;;615        {
;;;616            return BLESTACK_STATUS_ERR_BUSY;
;;;617        }
;;;618    
;;;619        mblk->Primitive = HCLL_LE_CREATE_CONN_CANCEL;
000014  21d0              MOVS     r1,#0xd0
000016  7101              STRB     r1,[r0,#4]
;;;620        SndMsgBlk(mblk, Q_2LL);
000018  2100              MOVS     r1,#0
00001a  f7fffffe          BL       SndMsgBlk
;;;621        return BLESTACK_STATUS_SUCCESS;
00001e  2000              MOVS     r0,#0
;;;622    }
000020  bd10              POP      {r4,pc}
                  |L10.34|
000022  2004              MOVS     r0,#4                 ;610
000024  bd10              POP      {r4,pc}
                  |L10.38|
000026  2001              MOVS     r0,#1                 ;616
000028  bd10              POP      {r4,pc}
;;;623    
                          ENDP


                          AREA ||i.setBLE_ConnCreate||, CODE, READONLY, ALIGN=2

                  setBLE_ConnCreate PROC
;;;532     */
;;;533    BleStackStatus setBLE_ConnCreate(BLE_Addr_Param peerAddrParam, BLE_Scan_Param scanParam,BLE_Conn_Param connParam)
000000  b5ff              PUSH     {r0-r7,lr}
;;;534    {
000002  b083              SUB      sp,sp,#0xc
000004  4616              MOV      r6,r2
;;;535        MBLK *mblk;
;;;536    
;;;537        if( (chkBLE_LL_State_Adv()  != 0) ||
000006  9d0c              LDR      r5,[sp,#0x30]
000008  9c0d              LDR      r4,[sp,#0x34]
00000a  f7fffffe          BL       chkBLE_LL_State_Adv
00000e  2800              CMP      r0,#0
000010  d107              BNE      |L11.34|
;;;538                (chkBLE_LL_State_Scan() != 0) ||
000012  f7fffffe          BL       chkBLE_LL_State_Scan
000016  2800              CMP      r0,#0
000018  d103              BNE      |L11.34|
;;;539                (chkBLE_LL_State_Init() != 0))
00001a  f7fffffe          BL       chkBLE_LL_State_Init
00001e  2800              CMP      r0,#0
000020  d002              BEQ      |L11.40|
                  |L11.34|
;;;540        {
;;;541            return BLESTACK_STATUS_ERR_INVALID_STATE;
000022  2004              MOVS     r0,#4
;;;542        }
;;;543    
;;;544        if(((peerAddrParam.addrType != PUBLIC_ADDR) && (peerAddrParam.addrType != RANDOM_ADDR)) ||
;;;545                ((peerAddrParam.addrType == RANDOM_ADDR) && ((peerAddrParam.addr[SIZE_BLE_ADDR - 1] & 0xC0) != 0xC0 ))) // static random address --> ADDDR MSB[4:5] = 11
;;;546        {
;;;547            return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;548        }
;;;549    
;;;550        if( (scanParam.Scan_Type!=SCAN_TYPE_PASSIVE && scanParam.Scan_Type!=SCAN_TYPE_ACTIVE) ||
;;;551                (scanParam.Scan_Interval<SCAN_INTERVAL_MIN || scanParam.Scan_Interval>SCAN_INTERVAL_MAX) ||
;;;552                (scanParam.Scan_Window<SCAN_WINDOW_MIN || scanParam.Scan_Window>SCAN_WINDOW_MAX) ||
;;;553                (scanParam.Scan_Window > scanParam.Scan_Interval) )
;;;554        {
;;;555            return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;556        }
;;;557    
;;;558        if( (connParam.Conn_IntervalMin<CONN_INTERVAL_MIN || connParam.Conn_IntervalMin>CONN_INTERVAL_MAX) ||
;;;559                (connParam.Conn_IntervalMax<CONN_INTERVAL_MIN || connParam.Conn_IntervalMax>CONN_INTERVAL_MAX) ||
;;;560                (connParam.Conn_IntervalMin > connParam.Conn_IntervalMax) ||
;;;561                (connParam.Conn_Latency>CONN_Latency_MAX) ||
;;;562                (connParam.Conn_SvisionTimeout<CONN_SUBTIMEOUT_MIN || connParam.Conn_SvisionTimeout>CONN_SUBTIMEOUT_MAX) ||
;;;563                ((connParam.Conn_SvisionTimeout * 4) < ((1 + connParam.Conn_Latency) * connParam.Conn_IntervalMax )))
;;;564        {
;;;565            return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;566        }
;;;567    
;;;568    
;;;569        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Create_Conn_Para));
;;;570        if(mblk == (MBLK *)0)
;;;571        {
;;;572            return BLESTACK_STATUS_ERR_BUSY;
;;;573        }
;;;574    
;;;575        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_ConnIntervalMax = connParam.Conn_IntervalMax;
;;;576        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_ConnIntervalMin = connParam.Conn_IntervalMin;
;;;577        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_ConnLatency = connParam.Conn_Latency;
;;;578        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_InitFilterPolicy = scanParam.Scan_FilterPolicy;
;;;579        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_LE_Scan_Interval = scanParam.Scan_Interval;
;;;580        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_LE_Scan_Window = scanParam.Scan_Window;
;;;581        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_MaxCELength = 12;
;;;582        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_MinCELength = 12;
;;;583        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_Own_Addr_Type = ble_device_param.ble_deviceAddr_param.addrType;
;;;584        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_SvisionTimeout = connParam.Conn_SvisionTimeout;
;;;585    
;;;586        mblk->Para.HCLL_LE_Create_Conn_Para.HCI_PeerAddrType = peerAddrParam.addrType;
;;;587        Knl_CodeCpy(mblk->Para.HCLL_LE_Create_Conn_Para.HCI_PeerAddr,peerAddrParam.addr, SIZE_BLE_ADDR);
;;;588    
;;;589        mblk->Primitive = HCLL_LE_CREATE_CONN;
;;;590        SndMsgBlk(mblk, Q_2LL);
;;;591        return BLESTACK_STATUS_SUCCESS;
;;;592    }
000024  b007              ADD      sp,sp,#0x1c
000026  bdf0              POP      {r4-r7,pc}
                  |L11.40|
000028  4668              MOV      r0,sp                 ;544
00002a  7b00              LDRB     r0,[r0,#0xc]          ;544
00002c  2800              CMP      r0,#0                 ;544
00002e  d006              BEQ      |L11.62|
000030  2801              CMP      r0,#1                 ;544
000032  d136              BNE      |L11.162|
000034  4668              MOV      r0,sp                 ;545
000036  7c80              LDRB     r0,[r0,#0x12]         ;545
000038  0980              LSRS     r0,r0,#6              ;545
00003a  2803              CMP      r0,#3                 ;545
00003c  d131              BNE      |L11.162|
                  |L11.62|
00003e  0630              LSLS     r0,r6,#24             ;545
000040  0e00              LSRS     r0,r0,#24             ;545
000042  d001              BEQ      |L11.72|
000044  2801              CMP      r0,#1                 ;550
000046  d12c              BNE      |L11.162|
                  |L11.72|
000048  0c30              LSRS     r0,r6,#16             ;550
00004a  492e              LDR      r1,|L11.260|
00004c  9001              STR      r0,[sp,#4]            ;551
00004e  1f00              SUBS     r0,r0,#4              ;551
000050  4288              CMP      r0,r1                 ;551
000052  d226              BCS      |L11.162|
000054  9806              LDR      r0,[sp,#0x18]         ;552
000056  b280              UXTH     r0,r0                 ;552
000058  9000              STR      r0,[sp,#0]            ;552
00005a  1f00              SUBS     r0,r0,#4              ;552
00005c  4288              CMP      r0,r1                 ;552
00005e  d220              BCS      |L11.162|
000060  9901              LDR      r1,[sp,#4]            ;553
000062  9800              LDR      r0,[sp,#0]            ;553
000064  4288              CMP      r0,r1                 ;553
000066  d81c              BHI      |L11.162|
000068  b2a8              UXTH     r0,r5                 ;553
00006a  4927              LDR      r1,|L11.264|
00006c  9002              STR      r0,[sp,#8]            ;558
00006e  1f80              SUBS     r0,r0,#6              ;558
000070  4288              CMP      r0,r1                 ;558
000072  d216              BCS      |L11.162|
000074  0c2d              LSRS     r5,r5,#16             ;558
000076  1fa8              SUBS     r0,r5,#6              ;559
000078  4288              CMP      r0,r1                 ;559
00007a  d212              BCS      |L11.162|
00007c  9802              LDR      r0,[sp,#8]            ;560
00007e  42a8              CMP      r0,r5                 ;560
000080  d80f              BHI      |L11.162|
000082  20ff              MOVS     r0,#0xff              ;561
000084  b2a6              UXTH     r6,r4                 ;560
000086  30f4              ADDS     r0,r0,#0xf4           ;561
000088  4286              CMP      r6,r0                 ;561
00008a  d80a              BHI      |L11.162|
00008c  0c27              LSRS     r7,r4,#16             ;561
00008e  4638              MOV      r0,r7                 ;562
000090  380a              SUBS     r0,r0,#0xa            ;562
000092  1f09              SUBS     r1,r1,#4              ;562
000094  4288              CMP      r0,r1                 ;562
000096  d204              BCS      |L11.162|
000098  1c70              ADDS     r0,r6,#1              ;563
00009a  4368              MULS     r0,r5,r0              ;563
00009c  00b9              LSLS     r1,r7,#2              ;563
00009e  4288              CMP      r0,r1                 ;563
0000a0  dd02              BLE      |L11.168|
                  |L11.162|
0000a2  2003              MOVS     r0,#3                 ;565
0000a4  b007              ADD      sp,sp,#0x1c
0000a6  bdf0              POP      {r4-r7,pc}
                  |L11.168|
0000a8  201a              MOVS     r0,#0x1a              ;569
0000aa  f7fffffe          BL       GetMsgBlk_L2_wSize
0000ae  0004              MOVS     r4,r0                 ;569
0000b0  d025              BEQ      |L11.254|
0000b2  8325              STRH     r5,[r4,#0x18]         ;575
0000b4  9802              LDR      r0,[sp,#8]            ;576
0000b6  82e0              STRH     r0,[r4,#0x16]         ;576
0000b8  8366              STRH     r6,[r4,#0x1a]         ;577
0000ba  9806              LDR      r0,[sp,#0x18]         ;578
0000bc  a903              ADD      r1,sp,#0xc            ;587
0000be  0200              LSLS     r0,r0,#8              ;578
0000c0  0e00              LSRS     r0,r0,#24             ;578
0000c2  7320              STRB     r0,[r4,#0xc]          ;578
0000c4  9801              LDR      r0,[sp,#4]            ;579
0000c6  8120              STRH     r0,[r4,#8]            ;579
0000c8  9800              LDR      r0,[sp,#0]            ;580
0000ca  8160              STRH     r0,[r4,#0xa]          ;580
0000cc  200c              MOVS     r0,#0xc               ;581
0000ce  8420              STRH     r0,[r4,#0x20]         ;581
0000d0  83e0              STRH     r0,[r4,#0x1e]         ;582
0000d2  480e              LDR      r0,|L11.268|
0000d4  2206              MOVS     r2,#6                 ;587
0000d6  7840              LDRB     r0,[r0,#1]            ;583  ; ble_device_param
0000d8  7520              STRB     r0,[r4,#0x14]         ;583
0000da  83a7              STRH     r7,[r4,#0x1c]         ;584
0000dc  4668              MOV      r0,sp                 ;586
0000de  7b00              LDRB     r0,[r0,#0xc]          ;586
0000e0  7360              STRB     r0,[r4,#0xd]          ;586
0000e2  4620              MOV      r0,r4                 ;587
0000e4  3101              ADDS     r1,#1                 ;587
0000e6  300e              ADDS     r0,r0,#0xe            ;587
0000e8  f7fffffe          BL       Knl_CodeCpy
0000ec  20cf              MOVS     r0,#0xcf              ;589
0000ee  7120              STRB     r0,[r4,#4]            ;589
0000f0  2100              MOVS     r1,#0                 ;590
0000f2  4620              MOV      r0,r4                 ;590
0000f4  f7fffffe          BL       SndMsgBlk
0000f8  2000              MOVS     r0,#0                 ;591
0000fa  b007              ADD      sp,sp,#0x1c
0000fc  bdf0              POP      {r4-r7,pc}
                  |L11.254|
0000fe  2001              MOVS     r0,#1                 ;572
000100  b007              ADD      sp,sp,#0x1c
000102  bdf0              POP      {r4-r7,pc}
;;;593    
                          ENDP

                  |L11.260|
                          DCD      0x00003ffd
                  |L11.264|
                          DCD      0x00000c7b
                  |L11.268|
                          DCD      ble_device_param

                          AREA ||i.setBLE_ConnUpdate||, CODE, READONLY, ALIGN=2

                  setBLE_ConnUpdate PROC
;;;641     */
;;;642    BleStackStatus setBLE_ConnUpdate(BLE_ConnUpdate_Param connParam)
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;643    {
;;;644        MBLK *mblk;
;;;645        BLE_Conn_Param* param;
;;;646        extern Uint8 L2cap_Identifier;
;;;647        extern Uint8 setBLE_CmdTimer(Uint8 connID, CmdTimerEvent event, Uint32 timeout_base);
;;;648        extern uint8_t getBLE_CmdTimerEvent(uint8_t connID, CmdTimerEvent event);
;;;649    
;;;650        param = &connParam.connUpdateParam;
000002  466d              MOV      r5,sp
;;;651        if( (param->Conn_IntervalMin < CONN_INTERVAL_MIN || param->Conn_IntervalMin > CONN_INTERVAL_MAX) ||
000004  8869              LDRH     r1,[r5,#2]
000006  4a43              LDR      r2,|L12.276|
000008  1f88              SUBS     r0,r1,#6
00000a  4290              CMP      r0,r2
00000c  d215              BCS      |L12.58|
;;;652                (param->Conn_IntervalMax < CONN_INTERVAL_MIN || param->Conn_IntervalMax > CONN_INTERVAL_MAX) ||
00000e  88a8              LDRH     r0,[r5,#4]
000010  1f83              SUBS     r3,r0,#6
000012  4293              CMP      r3,r2
000014  d211              BCS      |L12.58|
;;;653                (param->Conn_IntervalMin > param->Conn_IntervalMax) ||
000016  4281              CMP      r1,r0
000018  d80f              BHI      |L12.58|
;;;654                (param->Conn_Latency > CONN_Latency_MAX) ||
00001a  88e9              LDRH     r1,[r5,#6]
00001c  22ff              MOVS     r2,#0xff
00001e  32f4              ADDS     r2,r2,#0xf4
000020  4291              CMP      r1,r2
000022  d80a              BHI      |L12.58|
;;;655                (param->Conn_SvisionTimeout < CONN_SUBTIMEOUT_MIN || param->Conn_SvisionTimeout > CONN_SUBTIMEOUT_MAX) ||
000024  892a              LDRH     r2,[r5,#8]
000026  4c3c              LDR      r4,|L12.280|
000028  4613              MOV      r3,r2
00002a  3b0a              SUBS     r3,r3,#0xa
00002c  42a3              CMP      r3,r4
00002e  d204              BCS      |L12.58|
000030  1c49              ADDS     r1,r1,#1
;;;656                ((param->Conn_SvisionTimeout * 4) < ((1 + param->Conn_Latency) * param->Conn_IntervalMax )))
000032  4341              MULS     r1,r0,r1
000034  0090              LSLS     r0,r2,#2
000036  4281              CMP      r1,r0
000038  dd02              BLE      |L12.64|
                  |L12.58|
;;;657        {
;;;658            return BLESTACK_STATUS_ERR_INVALID_PARAM;
00003a  2003              MOVS     r0,#3
;;;659        }
;;;660    
;;;661    #if MAX_NUM_CONN_MAS_HDL != 0
;;;662        if(connParam.connId < MAX_NUM_CONN_MAS_HDL)   // role = Master
;;;663        {
;;;664            // check current BLE status first
;;;665            if((LL_CheckConnExist(connParam.connId) == NO_))
;;;666            {
;;;667                return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;668            }
;;;669    
;;;670            mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Conn_Update_Para));
;;;671            if(mblk == (MBLK *)0)
;;;672            {
;;;673                return BLESTACK_STATUS_ERR_BUSY;
;;;674            }
;;;675    
;;;676            mblk->Para.HCLL_LE_Conn_Update_Para.HCI_Conn_Hdl_L = connParam.connId;
;;;677            mblk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax = connParam.connUpdateParam.Conn_IntervalMax;
;;;678            mblk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMin = connParam.connUpdateParam.Conn_IntervalMin;
;;;679            mblk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnLatency = connParam.connUpdateParam.Conn_Latency;
;;;680            mblk->Para.HCLL_LE_Conn_Update_Para.HCI_SvisionTimeout = connParam.connUpdateParam.Conn_SvisionTimeout;
;;;681            mblk->Primitive = HCLL_LE_CONN_UPDATE;
;;;682            SndMsgBlk(mblk, Q_2LL);
;;;683            return BLESTACK_STATUS_SUCCESS;
;;;684        }
;;;685        else     // role = Slave
;;;686    #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;687        {
;;;688    #if MAX_NUM_CONN_SLV_HDL != 0
;;;689            // temp to check connection ID
;;;690            if((connParam.connId > BLE_ROLESLAVE_ONELINK_CONNID_FIXED) || (LL_CheckConnExist(BLE_ROLESLAVE_ONELINK_CONNID_FIXED) == NO_)) // temp to check is in connection state, only one link
;;;691            {
;;;692                return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;693            }
;;;694    
;;;695            if((getBLE_CmdTimerEvent(connParam.connId, TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP) == TIMER_EVENT_NULL) &&
;;;696                    (getBLE_CmdTimerEvent(connParam.connId, TIMER_EVENT_CONN_UPDATE_COMPLETE) == TIMER_EVENT_NULL))
;;;697            {
;;;698                SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 12;
;;;699                SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;700                SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL;
;;;701                SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;702                SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = CODE_SIGNL_CMD_CONNECTION_PARAMETER_UPDATE_REQUEST;
;;;703                L2cap_Identifier++;
;;;704                SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_IDENTIFIER] = L2cap_Identifier;
;;;705                SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_L] = 8;
;;;706                SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H] = 0;
;;;707                Knl_MemCpy(&SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H+1], (uint8_t *)&connParam.connUpdateParam, sizeof(connParam.connUpdateParam));
;;;708                if(setBLE_ConnTxData(connParam.connId, SPIBuffer, (SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] + SIZE_BASIC_L2CAP_HEADER)) == FAIL_)
;;;709                {
;;;710                    return BLESTACK_STATUS_ERR_BUSY;
;;;711                }
;;;712    
;;;713                setBLE_CmdTimer(connParam.connId, TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP, 480000);  //60s (125us)
;;;714                return BLESTACK_STATUS_SUCCESS;
;;;715            }
;;;716            else
;;;717            {
;;;718                return BLESTACK_STATUS_ERR_TIMER_BUSY;
;;;719            }
;;;720    #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;721        }
;;;722    }
00003c  b003              ADD      sp,sp,#0xc
00003e  bd30              POP      {r4,r5,pc}
                  |L12.64|
000040  7828              LDRB     r0,[r5,#0]            ;662
000042  2804              CMP      r0,#4                 ;662
000044  d220              BCS      |L12.136|
000046  f7fffffe          BL       LL_CheckConnExist
00004a  2800              CMP      r0,#0                 ;665
00004c  d02b              BEQ      |L12.166|
00004e  200e              MOVS     r0,#0xe               ;670
000050  f7fffffe          BL       GetMsgBlk_L2_wSize
000054  2800              CMP      r0,#0                 ;671
000056  d014              BEQ      |L12.130|
000058  4669              MOV      r1,sp                 ;676
00005a  7809              LDRB     r1,[r1,#0]            ;676
00005c  7201              STRB     r1,[r0,#8]            ;676
00005e  4669              MOV      r1,sp                 ;677
000060  8889              LDRH     r1,[r1,#4]            ;677
000062  8181              STRH     r1,[r0,#0xc]          ;677
000064  4669              MOV      r1,sp                 ;678
000066  8849              LDRH     r1,[r1,#2]            ;678
000068  8141              STRH     r1,[r0,#0xa]          ;678
00006a  4669              MOV      r1,sp                 ;679
00006c  88c9              LDRH     r1,[r1,#6]            ;679
00006e  81c1              STRH     r1,[r0,#0xe]          ;679
000070  4669              MOV      r1,sp                 ;680
000072  8909              LDRH     r1,[r1,#8]            ;680
000074  8201              STRH     r1,[r0,#0x10]         ;680
000076  21d5              MOVS     r1,#0xd5              ;681
000078  7101              STRB     r1,[r0,#4]            ;681
00007a  2100              MOVS     r1,#0                 ;682
00007c  f7fffffe          BL       SndMsgBlk
000080  e045              B        |L12.270|
                  |L12.130|
000082  2001              MOVS     r0,#1                 ;673
000084  b003              ADD      sp,sp,#0xc
000086  bd30              POP      {r4,r5,pc}
                  |L12.136|
000088  2804              CMP      r0,#4                 ;690
00008a  d80c              BHI      |L12.166|
00008c  2004              MOVS     r0,#4                 ;690
00008e  f7fffffe          BL       LL_CheckConnExist
000092  2800              CMP      r0,#0                 ;690
000094  d007              BEQ      |L12.166|
000096  4668              MOV      r0,sp                 ;695
000098  7800              LDRB     r0,[r0,#0]            ;695
00009a  2100              MOVS     r1,#0                 ;695
00009c  f7fffffe          BL       getBLE_CmdTimerEvent
0000a0  28ff              CMP      r0,#0xff              ;695
0000a2  d003              BEQ      |L12.172|
0000a4  e009              B        |L12.186|
                  |L12.166|
0000a6  2005              MOVS     r0,#5                 ;692
0000a8  b003              ADD      sp,sp,#0xc
0000aa  bd30              POP      {r4,r5,pc}
                  |L12.172|
0000ac  4668              MOV      r0,sp                 ;696
0000ae  7800              LDRB     r0,[r0,#0]            ;696
0000b0  2101              MOVS     r1,#1                 ;696
0000b2  f7fffffe          BL       getBLE_CmdTimerEvent
0000b6  28ff              CMP      r0,#0xff              ;696
0000b8  d002              BEQ      |L12.192|
                  |L12.186|
0000ba  2006              MOVS     r0,#6                 ;718
                  |L12.188|
0000bc  b003              ADD      sp,sp,#0xc
0000be  bd30              POP      {r4,r5,pc}
                  |L12.192|
0000c0  4c16              LDR      r4,|L12.284|
0000c2  200c              MOVS     r0,#0xc               ;698
0000c4  7020              STRB     r0,[r4,#0]            ;698
0000c6  2200              MOVS     r2,#0                 ;699
0000c8  7062              STRB     r2,[r4,#1]            ;699
0000ca  2005              MOVS     r0,#5                 ;700
0000cc  70a0              STRB     r0,[r4,#2]            ;700
0000ce  70e2              STRB     r2,[r4,#3]            ;701
0000d0  2012              MOVS     r0,#0x12              ;702
0000d2  4913              LDR      r1,|L12.288|
0000d4  7120              STRB     r0,[r4,#4]            ;702
0000d6  7808              LDRB     r0,[r1,#0]            ;703  ; L2cap_Identifier
0000d8  1c40              ADDS     r0,r0,#1              ;703
0000da  7008              STRB     r0,[r1,#0]            ;703
0000dc  7160              STRB     r0,[r4,#5]            ;704
0000de  2008              MOVS     r0,#8                 ;705
0000e0  71a0              STRB     r0,[r4,#6]            ;705
0000e2  71e2              STRB     r2,[r4,#7]            ;706
0000e4  4602              MOV      r2,r0                 ;707
0000e6  1ca9              ADDS     r1,r5,#2              ;707
0000e8  480e              LDR      r0,|L12.292|
0000ea  f7fffffe          BL       Knl_MemCpy
0000ee  7820              LDRB     r0,[r4,#0]            ;708  ; SPIBuffer
0000f0  4621              MOV      r1,r4                 ;708
0000f2  1d00              ADDS     r0,r0,#4              ;708
0000f4  b2c2              UXTB     r2,r0                 ;708
0000f6  4668              MOV      r0,sp                 ;708
0000f8  7800              LDRB     r0,[r0,#0]            ;708
0000fa  f7fffffe          BL       setBLE_ConnTxData
0000fe  2801              CMP      r0,#1                 ;708
000100  d0dc              BEQ      |L12.188|
000102  4668              MOV      r0,sp                 ;713
000104  7800              LDRB     r0,[r0,#0]            ;713
000106  4a08              LDR      r2,|L12.296|
000108  2100              MOVS     r1,#0                 ;713
00010a  f7fffffe          BL       setBLE_CmdTimer
                  |L12.270|
00010e  2000              MOVS     r0,#0                 ;714
000110  b003              ADD      sp,sp,#0xc
000112  bd30              POP      {r4,r5,pc}
;;;723    
                          ENDP

                  |L12.276|
                          DCD      0x00000c7b
                  |L12.280|
                          DCD      0x00000c77
                  |L12.284|
                          DCD      SPIBuffer
                  |L12.288|
                          DCD      L2cap_Identifier
                  |L12.292|
                          DCD      SPIBuffer+0x8
                  |L12.296|
                          DCD      0x00075300

                          AREA ||i.setBLE_DataLength||, CODE, READONLY, ALIGN=1

                  setBLE_DataLength PROC
;;;1162    */
;;;1163   BleStackStatus setBLE_DataLength(BLE_DataLength_Param *Param)
000000  b510              PUSH     {r4,lr}
;;;1164   {
000002  4604              MOV      r4,r0
;;;1165       MBLK *mblk;
;;;1166   
;;;1167   #if MAX_NUM_CONN_MAS_HDL != 0
;;;1168       if(Param->connId < MAX_NUM_CONN_MAS_HDL)   // role = Master
000004  7800              LDRB     r0,[r0,#0]
000006  2804              CMP      r0,#4
000008  d300              BCC      |L13.12|
;;;1169       {
;;;1170       }
;;;1171       else
;;;1172   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;1173       {
;;;1174   #if MAX_NUM_CONN_SLV_HDL != 0
;;;1175           // temp to check connection ID
;;;1176           if(Param->connId > BLE_ROLESLAVE_ONELINK_CONNID_FIXED)
00000a  d80e              BHI      |L13.42|
                  |L13.12|
;;;1177           {
;;;1178               return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;1179           }
;;;1180   #endif
;;;1181       }
;;;1182   
;;;1183       // check current BLE status first
;;;1184       if((LL_CheckConnExist(Param->connId) == NO_)) // temp to check is in connection state, only one link
00000c  f7fffffe          BL       LL_CheckConnExist
000010  2800              CMP      r0,#0
000012  d00a              BEQ      |L13.42|
;;;1185       {
;;;1186           return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;1187       }
;;;1188   
;;;1189       if(((Param->RxMaxOctets) < LEN_CONN_DATA_INITIAL) ||
000014  88a0              LDRH     r0,[r4,#4]
000016  381b              SUBS     r0,r0,#0x1b
000018  28e1              CMP      r0,#0xe1
00001a  d204              BCS      |L13.38|
;;;1190               ((Param->RxMaxOctets) > LEN_CONN_DATA_DEFAULT) ||
;;;1191               ((Param->TxMaxOctets) < LEN_CONN_DATA_INITIAL) ||
00001c  8860              LDRH     r0,[r4,#2]
00001e  281b              CMP      r0,#0x1b
000020  d301              BCC      |L13.38|
;;;1192               ((Param->TxMaxOctets) > LEN_CONN_DATA_DEFAULT) )
000022  28fb              CMP      r0,#0xfb
000024  d903              BLS      |L13.46|
                  |L13.38|
;;;1193       {
;;;1194           return BLESTACK_STATUS_ERR_INVALID_PARAM;
000026  2003              MOVS     r0,#3
;;;1195       }
;;;1196   
;;;1197       mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Set_Data_Length_Para));
;;;1198       if(mblk == (MBLK *)0)
;;;1199       {
;;;1200           return BLESTACK_STATUS_ERR_BUSY;
;;;1201       }
;;;1202   
;;;1203       mblk->Primitive = HCLL_LE_SET_DATA_LENGTH;
;;;1204       mblk->Para.HCLL_LE_Set_Data_Length_Para.HCI_Conn_Hdl_L = Param->connId;
;;;1205       mblk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxOctets0 = Param->RxMaxOctets;
;;;1206       mblk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxTime = ((Param->RxMaxOctets + 14u) << 3u);
;;;1207       mblk->Para.HCLL_LE_Set_Data_Length_Para.HCI_TxOctets0 = Param->TxMaxOctets;
;;;1208       mblk->Para.HCLL_LE_Set_Data_Length_Para.HCI_TxTime = ((Param->TxMaxOctets + 14u) << 3u);
;;;1209   
;;;1210       SndMsgBlk(mblk, Q_2LL);
;;;1211       return BLESTACK_STATUS_SUCCESS;
;;;1212   }
000028  bd10              POP      {r4,pc}
                  |L13.42|
00002a  2005              MOVS     r0,#5                 ;1186
00002c  bd10              POP      {r4,pc}
                  |L13.46|
00002e  200c              MOVS     r0,#0xc               ;1197
000030  f7fffffe          BL       GetMsgBlk_L2_wSize
000034  2800              CMP      r0,#0                 ;1198
000036  d014              BEQ      |L13.98|
000038  21ee              MOVS     r1,#0xee              ;1203
00003a  7101              STRB     r1,[r0,#4]            ;1203
00003c  7821              LDRB     r1,[r4,#0]            ;1204
00003e  7201              STRB     r1,[r0,#8]            ;1204
000040  88a1              LDRH     r1,[r4,#4]            ;1205
000042  8181              STRH     r1,[r0,#0xc]          ;1205
000044  88a1              LDRH     r1,[r4,#4]            ;1206
000046  00c9              LSLS     r1,r1,#3              ;1206
000048  3170              ADDS     r1,r1,#0x70           ;1206
00004a  81c1              STRH     r1,[r0,#0xe]          ;1206
00004c  8861              LDRH     r1,[r4,#2]            ;1207
00004e  8201              STRH     r1,[r0,#0x10]         ;1207
000050  8861              LDRH     r1,[r4,#2]            ;1208
000052  00c9              LSLS     r1,r1,#3              ;1208
000054  3170              ADDS     r1,r1,#0x70           ;1208
000056  8241              STRH     r1,[r0,#0x12]         ;1208
000058  2100              MOVS     r1,#0                 ;1210
00005a  f7fffffe          BL       SndMsgBlk
00005e  2000              MOVS     r0,#0                 ;1211
000060  bd10              POP      {r4,pc}
                  |L13.98|
000062  2001              MOVS     r0,#1                 ;1200
000064  bd10              POP      {r4,pc}
;;;1213   
                          ENDP


                          AREA ||i.setBLE_Disconnect||, CODE, READONLY, ALIGN=1

                  setBLE_Disconnect PROC
;;;479     */
;;;480    BleStackStatus setBLE_Disconnect(Uint8 connID)
000000  2804              CMP      r0,#4
;;;481    {
;;;482        MBLK *mblk;
;;;483    
;;;484    #if MAX_NUM_CONN_MAS_HDL != 0
;;;485        if(connID < MAX_NUM_CONN_MAS_HDL)   //role = Master
000002  d302              BCC      |L14.10|
;;;486        {
;;;487        }
;;;488        else   //role = slave
;;;489    #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;490        {
;;;491    #if MAX_NUM_CONN_SLV_HDL != 0
;;;492            // temp to check connection ID
;;;493            if(connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED) // temp to check is in connection state, only one link
000004  d901              BLS      |L14.10|
;;;494            {
;;;495                return BLESTACK_STATUS_ERR_INVALID_CONNID;
000006  2005              MOVS     r0,#5
;;;496            }
;;;497    #endif
;;;498        }
;;;499    
;;;500        // check current BLE status first
;;;501        if((LL_CheckConnExist(connID) == NO_)) // temp to check is in connection state, only one link
;;;502        {
;;;503            return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;504        }
;;;505    
;;;506        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_Disconnect_Para));
;;;507        if(mblk == (MBLK *)0)
;;;508        {
;;;509            return BLESTACK_STATUS_ERR_BUSY;
;;;510        }
;;;511    
;;;512        mblk->Para.HCLL_Disconnect_Para.HCI_Conn_Hdl_L = connID;
;;;513        mblk->Para.HCLL_Disconnect_Para.HCI_Reason = HCI_ERR_CODE_REMOTE_USER_TERMINATED_CONNECTION;
;;;514        mblk->Primitive = HCLL_DISCONNECT;
;;;515        SndMsgBlk(mblk, Q_2LL);
;;;516        return BLESTACK_STATUS_SUCCESS;
;;;517    }
000008  4770              BX       lr
                  |L14.10|
00000a  b510              PUSH     {r4,lr}               ;481
00000c  4604              MOV      r4,r0                 ;481
00000e  f7fffffe          BL       LL_CheckConnExist
000012  2800              CMP      r0,#0                 ;501
000014  d00e              BEQ      |L14.52|
000016  2002              MOVS     r0,#2                 ;506
000018  f7fffffe          BL       GetMsgBlk_L2_wSize
00001c  2800              CMP      r0,#0                 ;507
00001e  d00b              BEQ      |L14.56|
000020  7204              STRB     r4,[r0,#8]            ;512
000022  2113              MOVS     r1,#0x13              ;513
000024  7241              STRB     r1,[r0,#9]            ;513
000026  21b1              MOVS     r1,#0xb1              ;514
000028  7101              STRB     r1,[r0,#4]            ;514
00002a  2100              MOVS     r1,#0                 ;515
00002c  f7fffffe          BL       SndMsgBlk
000030  2000              MOVS     r0,#0                 ;516
000032  bd10              POP      {r4,pc}
                  |L14.52|
000034  2005              MOVS     r0,#5                 ;503
000036  bd10              POP      {r4,pc}
                  |L14.56|
000038  2001              MOVS     r0,#1                 ;509
00003a  bd10              POP      {r4,pc}
;;;518    
                          ENDP


                          AREA ||i.setBLE_IOCapabilities||, CODE, READONLY, ALIGN=2

                  setBLE_IOCapabilities PROC
;;;1080    */
;;;1081   BleStackStatus setBLE_IOCapabilities(BLE_IO_Caps *Param)
000000  b510              PUSH     {r4,lr}
;;;1082   {
000002  4604              MOV      r4,r0
;;;1083   #ifdef _SMP_ON_
;;;1084       extern Uint8 chkBLE_LL_State_Init(void);
;;;1085   
;;;1086       if((chkBLE_LL_State_Init() != 0))
000004  f7fffffe          BL       chkBLE_LL_State_Init
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L15.16|
;;;1087       {
;;;1088           return BLESTACK_STATUS_ERR_INVALID_STATE;
00000c  2004              MOVS     r0,#4
;;;1089       }
;;;1090   
;;;1091       if((Param->IO_Param != DISPLAY_ONLY) &&
;;;1092               (Param->IO_Param != DISPLAY_YESNO) &&
;;;1093               (Param->IO_Param != KEYBOARD_ONLY) &&
;;;1094               (Param->IO_Param != NOINPUT_NOOUTPUT) &&
;;;1095               (Param->IO_Param != KEYBOARD_DISPLAY))
;;;1096       {
;;;1097           return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;1098       }
;;;1099   
;;;1100       rsp_pairing_request_table[TAB_IO_CAPABILITY] = Param->IO_Param;
;;;1101   
;;;1102       if(Param->IO_Param == IO_CAPABILITY_NOINPUT_NOOUTPUT)
;;;1103       {
;;;1104           rsp_pairing_request_table[TAB_AUTHREQ] &= ~(MITM_PROTECTION_YES);
;;;1105       }
;;;1106       else
;;;1107       {
;;;1108           rsp_pairing_request_table[TAB_AUTHREQ] |= MITM_PROTECTION_YES;
;;;1109       }
;;;1110   
;;;1111       return BLESTACK_STATUS_SUCCESS;
;;;1112   #else
;;;1113       return BLESTACK_STATUS_ERR_INVALID_CMD;
;;;1114   #endif
;;;1115   }
00000e  bd10              POP      {r4,pc}
                  |L15.16|
000010  7821              LDRB     r1,[r4,#0]            ;1091
000012  2900              CMP      r1,#0                 ;1091
000014  d009              BEQ      |L15.42|
000016  2901              CMP      r1,#1                 ;1092
000018  d007              BEQ      |L15.42|
00001a  2902              CMP      r1,#2                 ;1093
00001c  d005              BEQ      |L15.42|
00001e  2903              CMP      r1,#3                 ;1094
000020  d003              BEQ      |L15.42|
000022  2904              CMP      r1,#4                 ;1095
000024  d001              BEQ      |L15.42|
000026  2003              MOVS     r0,#3                 ;1097
000028  bd10              POP      {r4,pc}
                  |L15.42|
00002a  4807              LDR      r0,|L15.72|
00002c  7141              STRB     r1,[r0,#5]            ;1100
00002e  7821              LDRB     r1,[r4,#0]            ;1102
000030  2903              CMP      r1,#3                 ;1102
000032  79c1              LDRB     r1,[r0,#7]            ;1108  ; rsp_pairing_request_table
000034  d004              BEQ      |L15.64|
000036  2204              MOVS     r2,#4                 ;1108
000038  4311              ORRS     r1,r1,r2              ;1108
                  |L15.58|
00003a  71c1              STRB     r1,[r0,#7]            ;1108
00003c  2000              MOVS     r0,#0                 ;1111
00003e  bd10              POP      {r4,pc}
                  |L15.64|
000040  22fb              MOVS     r2,#0xfb              ;1104
000042  4011              ANDS     r1,r1,r2              ;1104
000044  e7f9              B        |L15.58|
;;;1116   
                          ENDP

000046  0000              DCW      0x0000
                  |L15.72|
                          DCD      rsp_pairing_request_table

                          AREA ||i.setBLE_Pairing_PassKey||, CODE, READONLY, ALIGN=1

                  setBLE_Pairing_PassKey PROC
;;;1046    */
;;;1047   BleStackStatus setBLE_Pairing_PassKey(Uint8 connID, Uint32 hexPasskey)
000000  b570              PUSH     {r4-r6,lr}
;;;1048   {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;1049   
;;;1050   #ifdef _SMP_ON_
;;;1051       // temp to check connection ID
;;;1052       if((connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED)||(LL_CheckConnExist(connID) == NO_)) // temp to check is in connection state, only one link
000006  2804              CMP      r0,#4
000008  d80b              BHI      |L16.34|
00000a  f7fffffe          BL       LL_CheckConnExist
00000e  2800              CMP      r0,#0
000010  d007              BEQ      |L16.34|
;;;1053       {
;;;1054           return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;1055       }
;;;1056   
;;;1057       if(smpPasskey_set(hexPasskey, connID) == SUCCESS_)
000012  4621              MOV      r1,r4
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       smpPasskey_set
00001a  2800              CMP      r0,#0
00001c  d000              BEQ      |L16.32|
;;;1058       {
;;;1059           return BLESTACK_STATUS_SUCCESS;
;;;1060       }
;;;1061       else
;;;1062       {
;;;1063           return BLESTACK_STATUS_ERR_BUSY;
00001e  2001              MOVS     r0,#1
                  |L16.32|
;;;1064       }
;;;1065   #else
;;;1066       return BLESTACK_STATUS_ERR_NOT_SUPPORTED;
;;;1067   #endif
;;;1068   }
000020  bd70              POP      {r4-r6,pc}
                  |L16.34|
000022  2005              MOVS     r0,#5                 ;1054
000024  bd70              POP      {r4-r6,pc}
;;;1069   
                          ENDP


                          AREA ||i.setBLE_Phy||, CODE, READONLY, ALIGN=2

                  setBLE_Phy PROC
;;;817     */
;;;818    BleStackStatus setBLE_Phy(Uint8 connID, BLE_Phy_Param blePhy)
000000  2804              CMP      r0,#4
;;;819    {
;;;820        MBLK *mblk;
;;;821    
;;;822    #if MAX_NUM_CONN_MAS_HDL != 0
;;;823        if(connID < MAX_NUM_CONN_MAS_HDL)   //role = Master
000002  d302              BCC      |L17.10|
;;;824        {
;;;825        }
;;;826        else   //role = slave
;;;827    #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;828        {
;;;829    #if MAX_NUM_CONN_SLV_HDL != 0
;;;830            // temp to check connection ID
;;;831            if(connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED)
000004  d901              BLS      |L17.10|
;;;832            {
;;;833                return BLESTACK_STATUS_ERR_INVALID_CONNID;
000006  2005              MOVS     r0,#5
;;;834            }
;;;835    #endif
;;;836        }
;;;837    
;;;838        // check current BLE status first
;;;839        if((LL_CheckConnExist(connID) == NO_)) // temp to check is in connection state, only one link
;;;840        {
;;;841            return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;842        }
;;;843    
;;;844        if((ble_device_param.ble_deviceChipId&PHY_LIMIT_BY_IC_VERSION) == PHY_LIMIT_1M)
;;;845        {
;;;846            return BLESTACK_STATUS_ERR_NOT_SUPPORTED;
;;;847        }
;;;848    
;;;849    
;;;850        if(((blePhy.tx_Phy != BLE_PHY_1M) && (blePhy.tx_Phy != BLE_PHY_2M)) ||
;;;851                (blePhy.rx_Phy != blePhy.tx_Phy))
;;;852        {
;;;853            return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;854        }
;;;855    
;;;856    
;;;857        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_Le_Set_Phy_Para));
;;;858        if(mblk == (MBLK *)0)
;;;859        {
;;;860            return BLESTACK_STATUS_ERR_BUSY;
;;;861        }
;;;862    
;;;863        mblk->Para.HCLL_Le_Set_Phy_Para.HCI_Conn_Hdl_L = connID;
;;;864        mblk->Para.HCLL_Le_Set_Phy_Para.HCI_TxPhys = blePhy.tx_Phy;
;;;865        mblk->Para.HCLL_Le_Set_Phy_Para.HCI_RxPhys = blePhy.rx_Phy;
;;;866        mblk->Para.HCLL_Le_Set_Phy_Para.HCI_AllPhys = LL_ALL_PHYS_PREFER_TX_Y_RX_Y;
;;;867        mblk->Primitive = HCLL_LE_SET_PHY;
;;;868        SndMsgBlk(mblk, Q_2LL);
;;;869        return BLESTACK_STATUS_SUCCESS;
;;;870    }
000008  4770              BX       lr
                  |L17.10|
00000a  b570              PUSH     {r4-r6,lr}            ;819
00000c  460e              MOV      r6,r1                 ;819
00000e  4605              MOV      r5,r0                 ;819
000010  f7fffffe          BL       LL_CheckConnExist
000014  2800              CMP      r0,#0                 ;839
000016  d00b              BEQ      |L17.48|
000018  4813              LDR      r0,|L17.104|
00001a  7800              LDRB     r0,[r0,#0]            ;844  ; ble_device_param
00001c  0640              LSLS     r0,r0,#25             ;844
00001e  0f40              LSRS     r0,r0,#29             ;844
000020  2807              CMP      r0,#7                 ;844
000022  d006              BEQ      |L17.50|
000024  b2f4              UXTB     r4,r6                 ;844
000026  2c01              CMP      r4,#1                 ;850
000028  d004              BEQ      |L17.52|
00002a  2c02              CMP      r4,#2                 ;850
00002c  d106              BNE      |L17.60|
00002e  e001              B        |L17.52|
                  |L17.48|
000030  2005              MOVS     r0,#5                 ;841
                  |L17.50|
000032  bd70              POP      {r4-r6,pc}
                  |L17.52|
000034  0430              LSLS     r0,r6,#16
000036  0e06              LSRS     r6,r0,#24
000038  42a6              CMP      r6,r4                 ;851
00003a  d001              BEQ      |L17.64|
                  |L17.60|
00003c  2003              MOVS     r0,#3                 ;853
00003e  bd70              POP      {r4-r6,pc}
                  |L17.64|
000040  2005              MOVS     r0,#5                 ;857
000042  f7fffffe          BL       GetMsgBlk_L2_wSize
000046  2800              CMP      r0,#0                 ;858
000048  d00b              BEQ      |L17.98|
00004a  7205              STRB     r5,[r0,#8]            ;863
00004c  7284              STRB     r4,[r0,#0xa]          ;864
00004e  72c6              STRB     r6,[r0,#0xb]          ;865
000050  2100              MOVS     r1,#0                 ;866
000052  7241              STRB     r1,[r0,#9]            ;866
000054  21ed              MOVS     r1,#0xed              ;867
000056  7101              STRB     r1,[r0,#4]            ;867
000058  2100              MOVS     r1,#0                 ;868
00005a  f7fffffe          BL       SndMsgBlk
00005e  2000              MOVS     r0,#0                 ;869
000060  bd70              POP      {r4-r6,pc}
                  |L17.98|
000062  2001              MOVS     r0,#1                 ;860
000064  bd70              POP      {r4-r6,pc}
;;;871    
                          ENDP

000066  0000              DCW      0x0000
                  |L17.104|
                          DCD      ble_device_param

                          AREA ||i.setBLE_RssiValueOffset||, CODE, READONLY, ALIGN=2

                  setBLE_RssiValueOffset PROC
;;;970     */
;;;971    void setBLE_RssiValueOffset(uint8_t offset)
000000  4901              LDR      r1,|L18.8|
;;;972    {
;;;973        extern uint8_t rssiOffsetValue;
;;;974        rssiOffsetValue = offset;
000002  7008              STRB     r0,[r1,#0]
;;;975    }
000004  4770              BX       lr
;;;976    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      rssiOffsetValue

                          AREA ||i.setBLE_ScanDisable||, CODE, READONLY, ALIGN=1

                  setBLE_ScanDisable PROC
;;;447     */
;;;448    BleStackStatus setBLE_ScanDisable(void)
000000  b510              PUSH     {r4,lr}
;;;449    {
;;;450        MBLK *mblk;
;;;451    
;;;452        if(chkBLE_LL_State_Scan() == 0)
000002  f7fffffe          BL       chkBLE_LL_State_Scan
000006  2800              CMP      r0,#0
000008  d00d              BEQ      |L19.38|
;;;453        {
;;;454            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;455        }
;;;456    
;;;457        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Set_Scan_Enable_Para));
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;458        if(mblk == (MBLK *)0)
000010  2800              CMP      r0,#0
000012  d00a              BEQ      |L19.42|
;;;459        {
;;;460            return BLESTACK_STATUS_ERR_BUSY;
;;;461        }
;;;462    
;;;463        mblk->Para.HCLL_LE_Set_Scan_Enable_Para.HCI_LE_Scan_En = 0;
000014  2100              MOVS     r1,#0
000016  7201              STRB     r1,[r0,#8]
;;;464        mblk->Primitive = HCLL_LE_SET_SCAN_ENABLE;
000018  21ce              MOVS     r1,#0xce
00001a  7101              STRB     r1,[r0,#4]
;;;465        SndMsgBlk(mblk, Q_2LL);
00001c  2100              MOVS     r1,#0
00001e  f7fffffe          BL       SndMsgBlk
;;;466        return BLESTACK_STATUS_SUCCESS;
000022  2000              MOVS     r0,#0
;;;467    }
000024  bd10              POP      {r4,pc}
                  |L19.38|
000026  2004              MOVS     r0,#4                 ;454
000028  bd10              POP      {r4,pc}
                  |L19.42|
00002a  2001              MOVS     r0,#1                 ;460
00002c  bd10              POP      {r4,pc}
;;;468    
                          ENDP


                          AREA ||i.setBLE_ScanEnable||, CODE, READONLY, ALIGN=1

                  setBLE_ScanEnable PROC
;;;413     */
;;;414    BleStackStatus setBLE_ScanEnable(BleScanFilterPolicy scanFilter)
000000  b510              PUSH     {r4,lr}
;;;415    {
000002  4604              MOV      r4,r0
;;;416        MBLK *mblk;
;;;417    
;;;418        // check current BLE status first
;;;419        if( (chkBLE_LL_State_Adv()  != 0) ||
000004  f7fffffe          BL       chkBLE_LL_State_Adv
000008  2800              CMP      r0,#0
00000a  d107              BNE      |L20.28|
;;;420                (chkBLE_LL_State_Scan() != 0) ||
00000c  f7fffffe          BL       chkBLE_LL_State_Scan
000010  2800              CMP      r0,#0
000012  d103              BNE      |L20.28|
;;;421                (chkBLE_LL_State_Init() != 0))
000014  f7fffffe          BL       chkBLE_LL_State_Init
000018  2800              CMP      r0,#0
00001a  d001              BEQ      |L20.32|
                  |L20.28|
;;;422        {
;;;423            return BLESTACK_STATUS_ERR_INVALID_STATE;
00001c  2004              MOVS     r0,#4
;;;424        }
;;;425    
;;;426        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Set_Scan_Enable_Para));
;;;427        if(mblk == (MBLK *)0)
;;;428        {
;;;429            return BLESTACK_STATUS_ERR_BUSY;
;;;430        }
;;;431    
;;;432        mblk->Para.HCLL_LE_Set_Scan_Enable_Para.HCI_LE_Scan_En = 1;
;;;433        mblk->Para.HCLL_LE_Set_Scan_Enable_Para.HCI_Filter_Dupl = scanFilter; // ?
;;;434        mblk->Primitive = HCLL_LE_SET_SCAN_ENABLE;
;;;435        SndMsgBlk(mblk, Q_2LL);
;;;436        return BLESTACK_STATUS_SUCCESS;
;;;437    }
00001e  bd10              POP      {r4,pc}
                  |L20.32|
000020  2002              MOVS     r0,#2                 ;426
000022  f7fffffe          BL       GetMsgBlk_L2_wSize
000026  2800              CMP      r0,#0                 ;427
000028  d009              BEQ      |L20.62|
00002a  2101              MOVS     r1,#1                 ;432
00002c  7201              STRB     r1,[r0,#8]            ;432
00002e  7244              STRB     r4,[r0,#9]            ;433
000030  21ce              MOVS     r1,#0xce              ;434
000032  7101              STRB     r1,[r0,#4]            ;434
000034  2100              MOVS     r1,#0                 ;435
000036  f7fffffe          BL       SndMsgBlk
00003a  2000              MOVS     r0,#0                 ;436
00003c  bd10              POP      {r4,pc}
                  |L20.62|
00003e  2001              MOVS     r0,#1                 ;429
000040  bd10              POP      {r4,pc}
;;;438    
                          ENDP


                          AREA ||i.setBLE_ScanParam||, CODE, READONLY, ALIGN=2

                  setBLE_ScanParam PROC
;;;365     */
;;;366    BleStackStatus setBLE_ScanParam(BLE_Scan_Param scanParam)
000000  b570              PUSH     {r4-r6,lr}
;;;367    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;368        MBLK *mblk;
;;;369    
;;;370        // check current BLE status first
;;;371        if( (chkBLE_LL_State_Adv()  != 0) ||
000006  f7fffffe          BL       chkBLE_LL_State_Adv
00000a  2800              CMP      r0,#0
00000c  d107              BNE      |L21.30|
;;;372                (chkBLE_LL_State_Scan() != 0) ||
00000e  f7fffffe          BL       chkBLE_LL_State_Scan
000012  2800              CMP      r0,#0
000014  d103              BNE      |L21.30|
;;;373                (chkBLE_LL_State_Init() != 0))
000016  f7fffffe          BL       chkBLE_LL_State_Init
00001a  2800              CMP      r0,#0
00001c  d001              BEQ      |L21.34|
                  |L21.30|
;;;374        {
;;;375            return BLESTACK_STATUS_ERR_INVALID_STATE;
00001e  2004              MOVS     r0,#4
;;;376        }
;;;377    
;;;378        if( (scanParam.Scan_Type!=SCAN_TYPE_PASSIVE && scanParam.Scan_Type!=SCAN_TYPE_ACTIVE) ||
;;;379                (scanParam.Scan_Interval<SCAN_INTERVAL_MIN || scanParam.Scan_Interval>SCAN_INTERVAL_MAX) ||
;;;380                (scanParam.Scan_Window<SCAN_WINDOW_MIN || scanParam.Scan_Window>SCAN_WINDOW_MAX) ||
;;;381                (scanParam.Scan_Window > scanParam.Scan_Interval))
;;;382        {
;;;383            return BLESTACK_STATUS_ERR_INVALID_PARAM;
;;;384        }
;;;385    
;;;386        mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_LE_Set_Scan_Param_Para));
;;;387        if(mblk == (MBLK *)0)
;;;388        {
;;;389            return BLESTACK_STATUS_ERR_BUSY;
;;;390        }
;;;391    
;;;392        mblk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_LEScanType = scanParam.Scan_Type;
;;;393        mblk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_LE_Scan_Interval = scanParam.Scan_Interval;
;;;394        mblk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_LE_Scan_Window = scanParam.Scan_Window;
;;;395        //mblk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_ScannFilterPolicy = scanParam.Scan_FilterPolicy;
;;;396        mblk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_ScannFilterPolicy = SCAN_FILTER_POLICY_ACCEPT_ALL; // set to the fixed setting, currently only support this filter
;;;397        mblk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_Own_Addr_Type = ble_device_param.ble_deviceAddr_param.addrType;
;;;398        mblk->Primitive = HCLL_LE_SET_SCAN_PARAM;
;;;399        SndMsgBlk(mblk, Q_2LL);
;;;400        return BLESTACK_STATUS_SUCCESS;
;;;401    }
000020  bd70              POP      {r4-r6,pc}
                  |L21.34|
000022  062e              LSLS     r6,r5,#24
000024  0e36              LSRS     r6,r6,#24
000026  d001              BEQ      |L21.44|
000028  2e01              CMP      r6,#1                 ;378
00002a  d10a              BNE      |L21.66|
                  |L21.44|
00002c  0c2d              LSRS     r5,r5,#16             ;378
00002e  4811              LDR      r0,|L21.116|
000030  1f29              SUBS     r1,r5,#4              ;379
000032  4281              CMP      r1,r0                 ;379
000034  d205              BCS      |L21.66|
000036  b2a4              UXTH     r4,r4                 ;379
000038  1f21              SUBS     r1,r4,#4              ;380
00003a  4281              CMP      r1,r0                 ;380
00003c  d201              BCS      |L21.66|
00003e  42ac              CMP      r4,r5                 ;381
000040  d901              BLS      |L21.70|
                  |L21.66|
000042  2003              MOVS     r0,#3                 ;383
000044  bd70              POP      {r4-r6,pc}
                  |L21.70|
000046  2008              MOVS     r0,#8                 ;386
000048  f7fffffe          BL       GetMsgBlk_L2_wSize
00004c  2800              CMP      r0,#0                 ;387
00004e  d00e              BEQ      |L21.110|
000050  7206              STRB     r6,[r0,#8]            ;392
000052  8145              STRH     r5,[r0,#0xa]          ;393
000054  8184              STRH     r4,[r0,#0xc]          ;394
000056  2100              MOVS     r1,#0                 ;396
000058  73c1              STRB     r1,[r0,#0xf]          ;396
00005a  4907              LDR      r1,|L21.120|
00005c  7849              LDRB     r1,[r1,#1]            ;397  ; ble_device_param
00005e  7381              STRB     r1,[r0,#0xe]          ;397
000060  21cd              MOVS     r1,#0xcd              ;398
000062  7101              STRB     r1,[r0,#4]            ;398
000064  2100              MOVS     r1,#0                 ;399
000066  f7fffffe          BL       SndMsgBlk
00006a  2000              MOVS     r0,#0                 ;400
00006c  bd70              POP      {r4-r6,pc}
                  |L21.110|
00006e  2001              MOVS     r0,#1                 ;389
000070  bd70              POP      {r4-r6,pc}
;;;402    
                          ENDP

000072  0000              DCW      0x0000
                  |L21.116|
                          DCD      0x00003ffd
                  |L21.120|
                          DCD      ble_device_param

                          AREA ||i.setBLE_ScanRspData||, CODE, READONLY, ALIGN=1

                  setBLE_ScanRspData PROC
;;;259     */
;;;260    BleStackStatus setBLE_ScanRspData(Uint8 *scanRspData, Uint8 length)
000000  2920              CMP      r1,#0x20
;;;261    {
;;;262        MBLK *mblk;
;;;263    
;;;264        // scanrsp data payload length = 31 (LEN_ADV_SCAN_DATA_MAX)
;;;265        // Max. length of scanRspData is 32(LEN_ADV_SCAN_DATA_MAX + 1(HCI_Adv_Data_Length) )
;;;266        if(length> (LEN_ADV_SCAN_DATA_MAX + 1))
000002  d901              BLS      |L22.8|
;;;267        {
;;;268            return BLESTACK_STATUS_ERR_INVALID_PARAM;
000004  2003              MOVS     r0,#3
;;;269        }
;;;270    
;;;271        mblk = GetMsgBlk_L2_wSize(length);
;;;272        if(mblk == (MBLK *)0)
;;;273        {
;;;274            return BLESTACK_STATUS_ERR_BUSY;
;;;275        }
;;;276    
;;;277        Knl_CodeCpy(mblk->Para.Data, scanRspData, length);
;;;278    
;;;279        mblk->Primitive = HCLL_LE_SET_SCAN_RESPONSE_DATA;
;;;280        SndMsgBlk(mblk, Q_2LL);
;;;281        return BLESTACK_STATUS_SUCCESS;
;;;282    }
000006  4770              BX       lr
                  |L22.8|
000008  b570              PUSH     {r4-r6,lr}            ;261
00000a  4606              MOV      r6,r0                 ;261
00000c  460d              MOV      r5,r1                 ;261
00000e  4608              MOV      r0,r1                 ;271
000010  f7fffffe          BL       GetMsgBlk_L2_wSize
000014  0004              MOVS     r4,r0                 ;271
000016  d00d              BEQ      |L22.52|
000018  4620              MOV      r0,r4                 ;277
00001a  462a              MOV      r2,r5                 ;277
00001c  4631              MOV      r1,r6                 ;277
00001e  3008              ADDS     r0,r0,#8              ;277
000020  f7fffffe          BL       Knl_CodeCpy
000024  20cb              MOVS     r0,#0xcb              ;279
000026  7120              STRB     r0,[r4,#4]            ;279
000028  2100              MOVS     r1,#0                 ;280
00002a  4620              MOV      r0,r4                 ;280
00002c  f7fffffe          BL       SndMsgBlk
000030  2000              MOVS     r0,#0                 ;281
000032  bd70              POP      {r4-r6,pc}
                  |L22.52|
000034  2001              MOVS     r0,#1                 ;274
000036  bd70              POP      {r4-r6,pc}
;;;283    
                          ENDP


                          AREA ||i.setBLE_SecurityRequest||, CODE, READONLY, ALIGN=2

                  setBLE_SecurityRequest PROC
;;;988     */
;;;989    BleStackStatus setBLE_SecurityRequest(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;990    {
000002  4604              MOV      r4,r0
;;;991        extern Uint8 setBLE_CmdTimer(Uint8 connID, CmdTimerEvent event, Uint32 timeout_base);
;;;992        extern uint8_t getBLE_CmdTimerEvent(uint8_t connID, CmdTimerEvent event);
;;;993    
;;;994    
;;;995    #ifdef _SMP_ON_
;;;996    #if MAX_NUM_CONN_MAS_HDL != 0
;;;997        if(connID < MAX_NUM_CONN_MAS_HDL)   //role = Master
000004  2804              CMP      r0,#4
000006  d201              BCS      |L23.12|
;;;998        {
;;;999            return BLESTACK_STATUS_ERR_NOT_SUPPORTED;
000008  2007              MOVS     r0,#7
;;;1000       }
;;;1001       else   //role = slave
;;;1002   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;1003       {
;;;1004   #if MAX_NUM_CONN_SLV_HDL != 0
;;;1005           // temp to check connection ID
;;;1006           if((connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED) || (LL_CheckConnExist(connID) == NO_)) // temp to check is in connection state, only one link
;;;1007           {
;;;1008               return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;1009           }
;;;1010   
;;;1011           if(getBLE_CmdTimerEvent(connID, TIMER_EVENT_AUTH_STATUS) == TIMER_EVENT_NULL)
;;;1012           {
;;;1013               if(setBLE_ConnTxData_SMP(connID, CODE_SMP_SECURITY_REQUEST, (Uint8 *)&rsp_pairing_request_table[TAB_AUTHREQ], 1) == SUCCESS_)
;;;1014               {
;;;1015                   setBLE_CmdTimer(connID, TIMER_EVENT_AUTH_STATUS, 240000);  // 30s/125us = 240000
;;;1016                   return BLESTACK_STATUS_SUCCESS;
;;;1017               }
;;;1018               else
;;;1019               {
;;;1020                   return BLESTACK_STATUS_ERR_BUSY;
;;;1021               }
;;;1022           }
;;;1023           else
;;;1024           {
;;;1025               return BLESTACK_STATUS_ERR_TIMER_BUSY;
;;;1026           }
;;;1027   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;1028       }
;;;1029   #else
;;;1030       return BLESTACK_STATUS_ERR_NOT_SUPPORTED;
;;;1031   #endif //_SMP_ON_
;;;1032   }
00000a  bd10              POP      {r4,pc}
                  |L23.12|
00000c  2c04              CMP      r4,#4                 ;1006
00000e  d80b              BHI      |L23.40|
000010  f7fffffe          BL       LL_CheckConnExist
000014  2800              CMP      r0,#0                 ;1006
000016  d007              BEQ      |L23.40|
000018  2102              MOVS     r1,#2                 ;1011
00001a  4620              MOV      r0,r4                 ;1011
00001c  f7fffffe          BL       getBLE_CmdTimerEvent
000020  28ff              CMP      r0,#0xff              ;1011
000022  d003              BEQ      |L23.44|
000024  2006              MOVS     r0,#6                 ;1025
000026  bd10              POP      {r4,pc}
                  |L23.40|
000028  2005              MOVS     r0,#5                 ;1008
00002a  bd10              POP      {r4,pc}
                  |L23.44|
00002c  2301              MOVS     r3,#1                 ;1013
00002e  4a08              LDR      r2,|L23.80|
000030  210b              MOVS     r1,#0xb               ;1013
000032  4620              MOV      r0,r4                 ;1013
000034  f7fffffe          BL       setBLE_ConnTxData_SMP
000038  2800              CMP      r0,#0                 ;1013
00003a  d001              BEQ      |L23.64|
00003c  2001              MOVS     r0,#1                 ;1020
00003e  bd10              POP      {r4,pc}
                  |L23.64|
000040  4a04              LDR      r2,|L23.84|
000042  2102              MOVS     r1,#2                 ;1015
000044  4620              MOV      r0,r4                 ;1015
000046  f7fffffe          BL       setBLE_CmdTimer
00004a  2000              MOVS     r0,#0                 ;1016
00004c  bd10              POP      {r4,pc}
;;;1033   
                          ENDP

00004e  0000              DCW      0x0000
                  |L23.80|
                          DCD      rsp_pairing_request_table+0x7
                  |L23.84|
                          DCD      0x0003a980

                          AREA ||i.setBLE_TxPower||, CODE, READONLY, ALIGN=1

                  setBLE_TxPower PROC
;;;744     */
;;;745    BleStackStatus setBLE_TxPower(BleTxPowerLevel txPower, BleMode bleMode)
000000  b570              PUSH     {r4-r6,lr}
;;;746    {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;747        extern Uint8 setBLE_LL_TxPowerLevel_Adv(Uint8 powerLevel);
;;;748        extern Uint8 setBLE_LL_TxPowerLevel_Scan(Uint8 powerLevel);
;;;749        extern Uint8 setBLE_LL_TxPowerLevel_Init(Uint8 powerLevel);
;;;750        uint8_t errCode;
;;;751    
;;;752        // check current BLE status first
;;;753        if( (chkBLE_LL_State_Adv()  != 0) ||
000006  f7fffffe          BL       chkBLE_LL_State_Adv
00000a  2800              CMP      r0,#0
00000c  d12b              BNE      |L24.102|
;;;754                (chkBLE_LL_State_Scan() != 0) ||
00000e  f7fffffe          BL       chkBLE_LL_State_Scan
000012  2800              CMP      r0,#0
000014  d127              BNE      |L24.102|
;;;755                (chkBLE_LL_State_Init() != 0))
000016  f7fffffe          BL       chkBLE_LL_State_Init
00001a  2800              CMP      r0,#0
00001c  d123              BNE      |L24.102|
;;;756        {
;;;757            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;758        }
;;;759    
;;;760        if((LL_CheckConnExist(BLE_ROLESLAVE_ONELINK_CONNID_FIXED) == YES_)) // temp to check is in connection state, only one link
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       LL_CheckConnExist
000024  2801              CMP      r0,#1
000026  d01c              BEQ      |L24.98|
;;;761        {
;;;762            // do nothing
;;;763            return BLESTACK_STATUS_SUCCESS;
;;;764        }
;;;765    
;;;766    
;;;767        // check TX power level
;;;768        switch(txPower)
000028  2c00              CMP      r4,#0
00002a  d005              BEQ      |L24.56|
00002c  2c04              CMP      r4,#4
00002e  d003              BEQ      |L24.56|
000030  2c08              CMP      r4,#8
000032  d001              BEQ      |L24.56|
000034  2c0a              CMP      r4,#0xa
000036  d105              BNE      |L24.68|
                  |L24.56|
;;;769        {
;;;770        case TX_POWER_0_DBM:
;;;771        case TX_POWER_4_DBM:
;;;772        case TX_POWER_8_DBM:
;;;773        case TX_POWER_10_DBM:
;;;774            break;
;;;775        default:
;;;776            return BLESTACK_STATUS_ERR_INVALID_PARAM; // error tx power
;;;777        }
;;;778    
;;;779        // set TX power
;;;780        switch(bleMode)
000038  2d01              CMP      r5,#1
00003a  d005              BEQ      |L24.72|
00003c  2d03              CMP      r5,#3
00003e  d007              BEQ      |L24.80|
000040  2d04              CMP      r5,#4
000042  d009              BEQ      |L24.88|
                  |L24.68|
;;;781        {
;;;782        case STATE_BLE_ADVERTISING:
;;;783            errCode = setBLE_LL_TxPowerLevel_Adv(txPower);
;;;784            break;
;;;785        case STATE_BLE_SCANNING:
;;;786            errCode = setBLE_LL_TxPowerLevel_Scan(txPower);
;;;787            break;
;;;788        case STATE_BLE_INITIATING:
;;;789            errCode = setBLE_LL_TxPowerLevel_Init(txPower);
;;;790            break;
;;;791        default:
;;;792            return BLESTACK_STATUS_ERR_INVALID_PARAM;
000044  2003              MOVS     r0,#3
;;;793        }
;;;794    
;;;795        if(errCode == FAIL_)
;;;796        {
;;;797            return BLESTACK_STATUS_ERR_INVALID_STATE;
;;;798        }
;;;799    
;;;800        return BLESTACK_STATUS_SUCCESS;
;;;801    }
000046  bd70              POP      {r4-r6,pc}
                  |L24.72|
000048  b2e0              UXTB     r0,r4                 ;783
00004a  f7fffffe          BL       setBLE_LL_TxPowerLevel_Adv
00004e  e006              B        |L24.94|
                  |L24.80|
000050  b2e0              UXTB     r0,r4                 ;786
000052  f7fffffe          BL       setBLE_LL_TxPowerLevel_Scan
000056  e002              B        |L24.94|
                  |L24.88|
000058  b2e0              UXTB     r0,r4                 ;789
00005a  f7fffffe          BL       setBLE_LL_TxPowerLevel_Init
                  |L24.94|
00005e  2801              CMP      r0,#1                 ;795
000060  d001              BEQ      |L24.102|
                  |L24.98|
000062  2000              MOVS     r0,#0                 ;800
000064  bd70              POP      {r4-r6,pc}
                  |L24.102|
000066  2004              MOVS     r0,#4                 ;797
000068  bd70              POP      {r4-r6,pc}
;;;802    
                          ENDP


                          AREA ||i.setBLE_WhiteList||, CODE, READONLY, ALIGN=1

                  setBLE_WhiteList PROC
;;;115     */
;;;116    void setBLE_WhiteList(void)
000000  4770              BX       lr
;;;117    {
;;;118    }
;;;119    
                          ENDP


                          AREA ||i.setBLE_exchangeMtuRequest||, CODE, READONLY, ALIGN=2

                  setBLE_exchangeMtuRequest PROC
;;;1226    */
;;;1227   BleStackStatus setBLE_exchangeMtuRequest(uint8_t connID, uint8_t client_rx_mtu)
000000  b570              PUSH     {r4-r6,lr}
;;;1228   {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;1229       extern uint8_t aTT_MTU[MAX_NUM_CONN_HDL];
;;;1230   
;;;1231       // check current BLE status first
;;;1232       if((chkBLE_LL_State_Adv()  != 0) ||
000006  f7fffffe          BL       chkBLE_LL_State_Adv
00000a  2800              CMP      r0,#0
00000c  d107              BNE      |L26.30|
;;;1233               (chkBLE_LL_State_Scan() != 0) ||
00000e  f7fffffe          BL       chkBLE_LL_State_Scan
000012  2800              CMP      r0,#0
000014  d103              BNE      |L26.30|
;;;1234               (chkBLE_LL_State_Init() != 0))
000016  f7fffffe          BL       chkBLE_LL_State_Init
00001a  2800              CMP      r0,#0
00001c  d001              BEQ      |L26.34|
                  |L26.30|
;;;1235       {
;;;1236           return BLESTACK_STATUS_ERR_INVALID_STATE;
00001e  2004              MOVS     r0,#4
                  |L26.32|
;;;1237       }
;;;1238   
;;;1239       if(connID < MAX_NUM_CONN_MAS_HDL)   // role = Master
;;;1240       {
;;;1241           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 3;
;;;1242           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;1243           SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;1244           SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;1245           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_EXCHANGE_MTU_REQUEST;
;;;1246           SPIBuffer[TAB_ATTRIBUTE_SERVER_RX_MTU_L] = client_rx_mtu;
;;;1247           SPIBuffer[TAB_ATTRIBUTE_SERVER_RX_MTU_H] = client_rx_mtu >> 8;
;;;1248   
;;;1249           if(setBLE_ConnTxData(connID, SPIBuffer, (SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] + SIZE_BASIC_L2CAP_HEADER)) == FAIL_)
;;;1250           {
;;;1251               return BLESTACK_STATUS_ERR_BUSY;
;;;1252           }
;;;1253           aTT_MTU[connID] = client_rx_mtu;
;;;1254   
;;;1255           return BLESTACK_STATUS_SUCCESS;
;;;1256       }
;;;1257       else
;;;1258       {
;;;1259           return BLESTACK_STATUS_ERR_INVALID_ROLE;
;;;1260       }
;;;1261   }
000020  bd70              POP      {r4-r6,pc}
                  |L26.34|
000022  2d04              CMP      r5,#4                 ;1239
000024  d216              BCS      |L26.84|
000026  4a0c              LDR      r2,|L26.88|
000028  2003              MOVS     r0,#3                 ;1241
00002a  7010              STRB     r0,[r2,#0]            ;1241
00002c  2000              MOVS     r0,#0                 ;1242
00002e  7050              STRB     r0,[r2,#1]            ;1242
000030  2104              MOVS     r1,#4                 ;1243
000032  7091              STRB     r1,[r2,#2]            ;1243
000034  70d0              STRB     r0,[r2,#3]            ;1244
000036  2102              MOVS     r1,#2                 ;1245
000038  7111              STRB     r1,[r2,#4]            ;1245
00003a  7154              STRB     r4,[r2,#5]            ;1246
00003c  7190              STRB     r0,[r2,#6]            ;1247
00003e  2207              MOVS     r2,#7                 ;1249
000040  4905              LDR      r1,|L26.88|
000042  4628              MOV      r0,r5                 ;1249
000044  f7fffffe          BL       setBLE_ConnTxData
000048  2801              CMP      r0,#1                 ;1249
00004a  d0e9              BEQ      |L26.32|
00004c  4803              LDR      r0,|L26.92|
00004e  5544              STRB     r4,[r0,r5]            ;1253
000050  2000              MOVS     r0,#0                 ;1255
000052  bd70              POP      {r4-r6,pc}
                  |L26.84|
000054  200a              MOVS     r0,#0xa               ;1259
000056  bd70              POP      {r4-r6,pc}
;;;1262   
                          ENDP

                  |L26.88|
                          DCD      SPIBuffer
                  |L26.92|
                          DCD      aTT_MTU

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\ble_cmd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_cmd_c_585d19f6____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ble_cmd_c_585d19f6____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_cmd_c_585d19f6____REVSH|
#line 402
|__asm___9_ble_cmd_c_585d19f6____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ble_event.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ble_event.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\..\..\Library\CMSIS\Include -I..\..\..\..\..\..\Library\StdDriver\inc -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\ble_event.crf ..\..\..\source\ble_event.c]
                          THUMB

                          AREA ||i.MHC_Callback||, CODE, READONLY, ALIGN=2

                  MHC_Callback PROC
;;;56     // post event to the registered callback
;;;57     static void MHC_Callback(BleCmdEvent event, void* param)
000000  b510              PUSH     {r4,lr}
;;;58     {
000002  b08c              SUB      sp,sp,#0x30
000004  460c              MOV      r4,r1
;;;59         extern Uint8 setBLE_CmdTimer(Uint8 connID, CmdTimerEvent event, Uint32 timeout_base);
;;;60         extern void clearBLE_CmdTimer(uint8_t connID, BleCmdEvent event);
;;;61         extern uint8_t getBLE_CmdTimerEvent(uint8_t connID, CmdTimerEvent event);
;;;62     
;;;63         switch(event)
000006  2812              CMP      r0,#0x12
000008  d212              BCS      |L1.48|
00000a  0001              MOVS     r1,r0
00000c  4479              ADD      r1,r1,pc
00000e  7909              LDRB     r1,[r1,#4]
000010  1849              ADDS     r1,r1,r1
000012  448f              ADD      pc,pc,r1
000014  0d081629          DCB      0x0d,0x08,0x16,0x29
000018  ad5e7951          DCB      0xad,0x5e,0x79,0x51
00001c  b4bbc2c9          DCB      0xb4,0xbb,0xc2,0xc9
000020  d8df0fea          DCB      0xd8,0xdf,0x0f,0xea
000024  f3fa              DCB      0xf3,0xfa
000026  4a7c              LDR      r2,|L1.536|
;;;64         {
;;;65         case BLECMD_EVENT_ADV_COMPLETE:
;;;66             BleEvent_PostEvent(BLECMD_EVENT_ADV_COMPLETE, (BLE_Event_ADV_Complete_Param *)param);
000028  2001              MOVS     r0,#1
00002a  6812              LDR      r2,[r2,#0]  ; bleEventCallBack
00002c  4621              MOV      r1,r4
00002e  4790              BLX      r2
                  |L1.48|
;;;67             break;
;;;68     
;;;69         case BLECMD_EVENT_SCAN_COMPLETE:
;;;70             BleEvent_PostEvent(BLECMD_EVENT_SCAN_COMPLETE, NULL);
;;;71             break;
;;;72     
;;;73         case BLECMD_EVENT_SCAN_REPORT:
;;;74         {
;;;75             struct MHC_Le_Adv_Report_Para *report_param = (struct MHC_Le_Adv_Report_Para *)param;
;;;76             BLE_Event_Scan_Report evt;
;;;77             Knl_MemCpy(&evt.Rpt_Type, &report_param->HCI_Event_Type0, report_param->HCI_Length0+9);
;;;78             evt.Rpt_Rssi = report_param->HCI_Data0[report_param->HCI_Length0];
;;;79             BleEvent_PostEvent(BLECMD_EVENT_SCAN_REPORT, (BLE_Event_Scan_Report *)&evt);
;;;80         }
;;;81         break;
;;;82     
;;;83         case BLECMD_EVENT_CONN_COMPLETE:
;;;84         {
;;;85             struct MHC_Le_Conn_Complete_Para *connparam = (struct MHC_Le_Conn_Complete_Para *)param;
;;;86             BLE_Event_ConnParam eventParam;
;;;87     
;;;88             eventParam.status = connparam->HCI_Status;
;;;89             eventParam.connId = connparam->HCI_Conn_Hdl_L;
;;;90             eventParam.connInterval = ((Uint16)(connparam->HCI_Conn_IntervalH) << 8 )|(connparam->HCI_Conn_IntervalL);
;;;91             eventParam.connLatency = ((Uint16)(connparam->HCI_ConnLatencyH) << 8 )|(connparam->HCI_ConnLatencyL);
;;;92             eventParam.connRole = connparam->HCI_Role;
;;;93             eventParam.supervisionTimeout = ((Uint16)(connparam->HCI_SvisionTimeoutH) << 8 )|(connparam->HCI_SvisionTimeoutL);
;;;94             eventParam.peerAddr.addrType = connparam->HCI_PeerAddrType;
;;;95             Knl_CodeCpy(eventParam.peerAddr.addr,connparam->HCI_PeerAddr, SIZE_BLE_ADDR);
;;;96     
;;;97             BleEvent_PostEvent(BLECMD_EVENT_CONN_COMPLETE,(BLE_Event_ConnParam *)&eventParam);
;;;98         }
;;;99         break;
;;;100    
;;;101        case BLECMD_EVENT_DISCONN_COMPLETE:
;;;102        {
;;;103            struct MHC_Disconn_Complete_Para *connparam = (struct MHC_Disconn_Complete_Para *)param;
;;;104            BLE_Event_DisconnParam eventParam;
;;;105    
;;;106            eventParam.connId = connparam->HCI_Conn_Hdl_L;
;;;107            eventParam.disconnectReason = connparam->HCI_Reason;
;;;108    
;;;109            BleEvent_PostEvent(BLECMD_EVENT_DISCONN_COMPLETE,(BLE_Event_DisconnParam *)&eventParam);
;;;110            clearBLE_CmdTimer(eventParam.connId, TIMER_EVENT_NULL); //Turn off the cmdTimer beacuse of disconnect.
;;;111        }
;;;112        break;
;;;113    
;;;114        case BLECMD_EVENT_CONN_PARAMETER_UPDATE_RSP:
;;;115        {
;;;116            BLE_Event_ConnUpdateParam eventParam;
;;;117            eventParam.connId = *((Uint8 *)(param)+1);
;;;118            eventParam.status = *((Uint8 *)(param));
;;;119    
;;;120            if(eventParam.status == CMD_SUCCESS)
;;;121            {
;;;122                if(getBLE_CmdTimerEvent(eventParam.connId, TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP) == TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP)
;;;123                {
;;;124                    clearBLE_CmdTimer(eventParam.connId, TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP);
;;;125                    setBLE_CmdTimer(eventParam.connId, TIMER_EVENT_CONN_UPDATE_COMPLETE, 480000); //60s (125u)
;;;126                }
;;;127            }
;;;128            else
;;;129            {
;;;130                clearBLE_CmdTimer(eventParam.connId, TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP);
;;;131                BleEvent_PostEvent(BLECMD_EVENT_CONN_UPDATE_COMPLETE,(BLE_Event_ConnUpdateParam *)&eventParam);
;;;132            }
;;;133        }
;;;134        break;
;;;135    
;;;136        case BLECMD_EVENT_CONN_UPDATE_COMPLETE:
;;;137        {
;;;138            struct MHC_Le_Conn_Update_Complete_Para *connparam = (struct MHC_Le_Conn_Update_Complete_Para *)param;
;;;139            BLE_Event_ConnUpdateParam eventParam;
;;;140    
;;;141            eventParam.connId = connparam->HCI_Conn_Hdl_L;
;;;142            eventParam.status = connparam->HCI_Status;
;;;143            eventParam.connInterval = ((Uint16)(connparam->HCI_ConnIntervalH) << 8 )|(connparam->HCI_ConnIntervalL);
;;;144            eventParam.connLatency = ((Uint16)(connparam->HCI_ConnLatencyH) << 8 )|(connparam->HCI_ConnLatencyL);
;;;145            eventParam.supervisionTimeout = ((Uint16)(connparam->HCI_SvisionTimeoutH) << 8 )|(connparam->HCI_SvisionTimeoutL);
;;;146    
;;;147            if(getBLE_CmdTimerEvent(eventParam.connId, TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP) == TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP)
;;;148            {
;;;149                clearBLE_CmdTimer(eventParam.connId, TIMER_EVENT_CONN_PARAMETER_UPDATE_RSP);
;;;150            }
;;;151            if(getBLE_CmdTimerEvent(eventParam.connId, TIMER_EVENT_CONN_UPDATE_COMPLETE) == TIMER_EVENT_CONN_UPDATE_COMPLETE)
;;;152            {
;;;153                clearBLE_CmdTimer(eventParam.connId, TIMER_EVENT_CONN_UPDATE_COMPLETE);
;;;154            }
;;;155    
;;;156            BleEvent_PostEvent(BLECMD_EVENT_CONN_UPDATE_COMPLETE,(BLE_Event_ConnUpdateParam *)&eventParam);
;;;157        }
;;;158        break;
;;;159    
;;;160        case BLECMD_EVENT_CONN_CANCEL_COMPLETE:
;;;161            BleEvent_PostEvent(BLECMD_EVENT_CONN_CANCEL_COMPLETE,NULL);
;;;162            break;
;;;163    
;;;164        case BLECMD_EVENT_PHY_UPDATE_COMPLETE:
;;;165            BleEvent_PostEvent(BLECMD_EVENT_PHY_UPDATE_COMPLETE,(BLE_Event_Phy_Update_Param *)param);
;;;166            break;
;;;167    
;;;168        case BLECMD_EVENT_PHY_READ_COMPLETE:
;;;169            BleEvent_PostEvent(BLECMD_EVENT_PHY_READ_COMPLETE,(BLE_Event_Phy_Param *)param);
;;;170            break;
;;;171    
;;;172        case BLECMD_EVENT_READ_RSSI_COMPLETE:
;;;173            BleEvent_PostEvent(BLECMD_EVENT_READ_RSSI_COMPLETE,(BLE_Event_Rssi_Param *)param);
;;;174            break;
;;;175    
;;;176        case BLECMD_EVENT_STK_GEN_METHOD:
;;;177        {
;;;178    #ifdef _SMP_ON_
;;;179            struct BLE_Event_Stk_Gen_Method *report = (struct BLE_Event_Stk_Gen_Method *)param;
;;;180    
;;;181            setBLE_CmdTimer(report->connId, TIMER_EVENT_AUTH_STATUS, 240000); //30s
;;;182    
;;;183            if(report->Stk_Gen_Method != STK_GEN_MTHD_JUST_WORKS)
;;;184            {
;;;185                BleEvent_PostEvent(BLECMD_EVENT_STK_GEN_METHOD,(BLE_Event_Stk_Gen_Method *)param);
;;;186            }
;;;187    #endif
;;;188        }
;;;189        break;
;;;190    
;;;191        case BLECMD_EVENT_PASSKEY_CONFIRM:
;;;192    #ifdef _SMP_ON_
;;;193            BleEvent_PostEvent(BLECMD_EVENT_PASSKEY_CONFIRM,(BLE_Event_PassKey_Confirm *)param);
;;;194    #endif
;;;195            break;
;;;196    
;;;197        case BLECMD_EVENT_AUTH_STATUS:
;;;198        {
;;;199    #ifdef _SMP_ON_
;;;200            struct BLE_Event_Auth_Status *report = (struct BLE_Event_Auth_Status *)param;
;;;201    
;;;202            BleEvent_PostEvent(BLECMD_EVENT_AUTH_STATUS,(BLE_Event_Auth_Status *)param);
;;;203            clearBLE_CmdTimer(report->connId, TIMER_EVENT_AUTH_STATUS);
;;;204    #endif
;;;205        }
;;;206        break;
;;;207    
;;;208        case BLECMD_EVENT_CREATE_CONNECTION:
;;;209            BleEvent_PostEvent(BLECMD_EVENT_CREATE_CONNECTION, (BLE_Event_CreateConn_Param *)param);
;;;210            break;
;;;211    
;;;212        case BLECMD_EVENT_EXCHANGE_MTU_SIZE:
;;;213            BleEvent_PostEvent(BLECMD_EVENT_EXCHANGE_MTU_SIZE, (BLE_Event_Mtu *)param);
;;;214            break;
;;;215    
;;;216        case BLECMD_EVENT_DATA_LENGTH_UPDATE:
;;;217            BleEvent_PostEvent(BLECMD_EVENT_DATA_LENGTH_UPDATE, (BLE_Event_Data_Length_Param *)param);
;;;218            break;
;;;219    
;;;220        default:
;;;221            break;
;;;222        }
;;;223    }
000030  b00c              ADD      sp,sp,#0x30
000032  bd10              POP      {r4,pc}
000034  4a78              LDR      r2,|L1.536|
000036  200e              MOVS     r0,#0xe               ;70
000038  6812              LDR      r2,[r2,#0]            ;70  ; bleEventCallBack
00003a  2100              MOVS     r1,#0                 ;70
00003c  4790              BLX      r2                    ;70
00003e  b00c              ADD      sp,sp,#0x30
000040  bd10              POP      {r4,pc}
000042  7ae0              LDRB     r0,[r4,#0xb]          ;77
000044  1ce1              ADDS     r1,r4,#3              ;77
000046  3009              ADDS     r0,r0,#9              ;77
000048  b2c2              UXTB     r2,r0                 ;77
00004a  4668              MOV      r0,sp                 ;77
00004c  f7fffffe          BL       Knl_MemCpy
000050  7ae0              LDRB     r0,[r4,#0xb]          ;78
000052  340c              ADDS     r4,r4,#0xc            ;78
000054  5d00              LDRB     r0,[r0,r4]            ;78
000056  a908              ADD      r1,sp,#0x20           ;78
000058  7208              STRB     r0,[r1,#8]            ;78
00005a  4a6f              LDR      r2,|L1.536|
00005c  2002              MOVS     r0,#2                 ;79
00005e  6812              LDR      r2,[r2,#0]            ;79  ; bleEventCallBack
000060  4669              MOV      r1,sp                 ;79
000062  4790              BLX      r2                    ;79
000064  b00c              ADD      sp,sp,#0x30
000066  bd10              POP      {r4,pc}
000068  78a0              LDRB     r0,[r4,#2]            ;88
00006a  466a              MOV      r2,sp                 ;88
00006c  7010              STRB     r0,[r2,#0]            ;88
00006e  78e0              LDRB     r0,[r4,#3]            ;89
000070  7050              STRB     r0,[r2,#1]            ;89
000072  7b60              LDRB     r0,[r4,#0xd]          ;90
000074  7b22              LDRB     r2,[r4,#0xc]          ;90
000076  0200              LSLS     r0,r0,#8              ;90
000078  4310              ORRS     r0,r0,r2              ;90
00007a  466a              MOV      r2,sp                 ;90
00007c  8150              STRH     r0,[r2,#0xa]          ;90
00007e  7be0              LDRB     r0,[r4,#0xf]          ;91
000080  7ba2              LDRB     r2,[r4,#0xe]          ;91
000082  0200              LSLS     r0,r0,#8              ;91
000084  4310              ORRS     r0,r0,r2              ;91
000086  466a              MOV      r2,sp                 ;91
000088  4621              MOV      r1,r4                 ;85
00008a  8190              STRH     r0,[r2,#0xc]          ;91
00008c  7908              LDRB     r0,[r1,#4]            ;92
00008e  7090              STRB     r0,[r2,#2]            ;92
000090  7c48              LDRB     r0,[r1,#0x11]         ;93
000092  7c0a              LDRB     r2,[r1,#0x10]         ;93
000094  0200              LSLS     r0,r0,#8              ;93
000096  4310              ORRS     r0,r0,r2              ;93
000098  466a              MOV      r2,sp                 ;93
00009a  81d0              STRH     r0,[r2,#0xe]          ;93
00009c  7948              LDRB     r0,[r1,#5]            ;94
00009e  70d0              STRB     r0,[r2,#3]            ;94
0000a0  2206              MOVS     r2,#6                 ;95
0000a2  1da1              ADDS     r1,r4,#6              ;95
0000a4  a801              ADD      r0,sp,#4              ;95
0000a6  f7fffffe          BL       Knl_CodeCpy
0000aa  4a5b              LDR      r2,|L1.536|
0000ac  2003              MOVS     r0,#3                 ;97
0000ae  6812              LDR      r2,[r2,#0]            ;97  ; bleEventCallBack
0000b0  4669              MOV      r1,sp                 ;97
0000b2  4790              BLX      r2                    ;97
                  |L1.180|
0000b4  b00c              ADD      sp,sp,#0x30
0000b6  bd10              POP      {r4,pc}
0000b8  78a0              LDRB     r0,[r4,#2]            ;106
0000ba  4669              MOV      r1,sp                 ;106
0000bc  7008              STRB     r0,[r1,#0]            ;106
0000be  78e0              LDRB     r0,[r4,#3]            ;107
0000c0  4a55              LDR      r2,|L1.536|
0000c2  7048              STRB     r0,[r1,#1]            ;107
0000c4  6812              LDR      r2,[r2,#0]            ;107  ; bleEventCallBack
0000c6  2007              MOVS     r0,#7                 ;109
0000c8  4790              BLX      r2                    ;109
0000ca  4669              MOV      r1,sp                 ;110
0000cc  7808              LDRB     r0,[r1,#0]            ;110
0000ce  21ff              MOVS     r1,#0xff              ;110
0000d0  e087              B        |L1.482|
0000d2  7860              LDRB     r0,[r4,#1]            ;117
0000d4  466a              MOV      r2,sp                 ;117
0000d6  7010              STRB     r0,[r2,#0]            ;117
0000d8  7821              LDRB     r1,[r4,#0]            ;118
0000da  7051              STRB     r1,[r2,#1]            ;118
0000dc  2900              CMP      r1,#0                 ;120
0000de  d001              BEQ      |L1.228|
0000e0  2100              MOVS     r1,#0                 ;130
0000e2  e03c              B        |L1.350|
                  |L1.228|
0000e4  2100              MOVS     r1,#0                 ;122
0000e6  f7fffffe          BL       getBLE_CmdTimerEvent
0000ea  2800              CMP      r0,#0                 ;122
0000ec  d1e2              BNE      |L1.180|
0000ee  4668              MOV      r0,sp                 ;124
0000f0  7800              LDRB     r0,[r0,#0]            ;124
0000f2  2100              MOVS     r1,#0                 ;124
0000f4  f7fffffe          BL       clearBLE_CmdTimer
0000f8  4668              MOV      r0,sp                 ;125
0000fa  7800              LDRB     r0,[r0,#0]            ;125
0000fc  4a47              LDR      r2,|L1.540|
0000fe  2101              MOVS     r1,#1                 ;125
000100  f7fffffe          BL       setBLE_CmdTimer
000104  b00c              ADD      sp,sp,#0x30
000106  bd10              POP      {r4,pc}
000108  78e0              LDRB     r0,[r4,#3]            ;141
00010a  466a              MOV      r2,sp                 ;141
00010c  7010              STRB     r0,[r2,#0]            ;141
00010e  78a1              LDRB     r1,[r4,#2]            ;142
000110  7051              STRB     r1,[r2,#1]            ;142
000112  7961              LDRB     r1,[r4,#5]            ;143
000114  7922              LDRB     r2,[r4,#4]            ;143
000116  0209              LSLS     r1,r1,#8              ;143
000118  4311              ORRS     r1,r1,r2              ;143
00011a  466a              MOV      r2,sp                 ;143
00011c  8051              STRH     r1,[r2,#2]            ;143
00011e  79e1              LDRB     r1,[r4,#7]            ;144
000120  79a2              LDRB     r2,[r4,#6]            ;144
000122  0209              LSLS     r1,r1,#8              ;144
000124  4311              ORRS     r1,r1,r2              ;144
000126  466a              MOV      r2,sp                 ;144
000128  8091              STRH     r1,[r2,#4]            ;144
00012a  7a61              LDRB     r1,[r4,#9]            ;145
00012c  7a22              LDRB     r2,[r4,#8]            ;145
00012e  0209              LSLS     r1,r1,#8              ;145
000130  4311              ORRS     r1,r1,r2              ;145
000132  466a              MOV      r2,sp                 ;145
000134  80d1              STRH     r1,[r2,#6]            ;145
000136  2100              MOVS     r1,#0                 ;147
000138  f7fffffe          BL       getBLE_CmdTimerEvent
00013c  2800              CMP      r0,#0                 ;147
00013e  d104              BNE      |L1.330|
000140  4668              MOV      r0,sp                 ;149
000142  7800              LDRB     r0,[r0,#0]            ;149
000144  2100              MOVS     r1,#0                 ;149
000146  f7fffffe          BL       clearBLE_CmdTimer
                  |L1.330|
00014a  4668              MOV      r0,sp                 ;151
00014c  7800              LDRB     r0,[r0,#0]            ;151
00014e  2101              MOVS     r1,#1                 ;151
000150  f7fffffe          BL       getBLE_CmdTimerEvent
000154  2801              CMP      r0,#1                 ;151
000156  d104              BNE      |L1.354|
000158  4668              MOV      r0,sp                 ;153
00015a  7800              LDRB     r0,[r0,#0]            ;153
00015c  2101              MOVS     r1,#1                 ;153
                  |L1.350|
00015e  f7fffffe          BL       clearBLE_CmdTimer
                  |L1.354|
000162  4a2d              LDR      r2,|L1.536|
000164  2006              MOVS     r0,#6                 ;156
000166  6812              LDR      r2,[r2,#0]            ;156  ; bleEventCallBack
000168  4669              MOV      r1,sp                 ;156
00016a  4790              BLX      r2                    ;156
00016c  b00c              ADD      sp,sp,#0x30
00016e  bd10              POP      {r4,pc}
000170  4a29              LDR      r2,|L1.536|
000172  2004              MOVS     r0,#4                 ;161
000174  6812              LDR      r2,[r2,#0]            ;161  ; bleEventCallBack
000176  2100              MOVS     r1,#0                 ;161
000178  4790              BLX      r2                    ;161
00017a  b00c              ADD      sp,sp,#0x30
00017c  bd10              POP      {r4,pc}
00017e  4a26              LDR      r2,|L1.536|
000180  2008              MOVS     r0,#8                 ;165
000182  6812              LDR      r2,[r2,#0]            ;165  ; bleEventCallBack
000184  4621              MOV      r1,r4                 ;165
000186  4790              BLX      r2                    ;165
000188  b00c              ADD      sp,sp,#0x30
00018a  bd10              POP      {r4,pc}
00018c  4a22              LDR      r2,|L1.536|
00018e  2009              MOVS     r0,#9                 ;169
000190  6812              LDR      r2,[r2,#0]            ;169  ; bleEventCallBack
000192  4621              MOV      r1,r4                 ;169
000194  4790              BLX      r2                    ;169
000196  b00c              ADD      sp,sp,#0x30
000198  bd10              POP      {r4,pc}
00019a  4a1f              LDR      r2,|L1.536|
00019c  200a              MOVS     r0,#0xa               ;173
00019e  6812              LDR      r2,[r2,#0]            ;173  ; bleEventCallBack
0001a0  4621              MOV      r1,r4                 ;173
0001a2  4790              BLX      r2                    ;173
                  |L1.420|
0001a4  b00c              ADD      sp,sp,#0x30
0001a6  bd10              POP      {r4,pc}
0001a8  7820              LDRB     r0,[r4,#0]            ;181
0001aa  4a1d              LDR      r2,|L1.544|
0001ac  2102              MOVS     r1,#2                 ;181
0001ae  f7fffffe          BL       setBLE_CmdTimer
0001b2  7860              LDRB     r0,[r4,#1]            ;183
0001b4  2800              CMP      r0,#0                 ;183
0001b6  d0f5              BEQ      |L1.420|
0001b8  4a17              LDR      r2,|L1.536|
0001ba  200b              MOVS     r0,#0xb               ;185
0001bc  6812              LDR      r2,[r2,#0]            ;185  ; bleEventCallBack
0001be  4621              MOV      r1,r4                 ;185
0001c0  4790              BLX      r2                    ;185
0001c2  b00c              ADD      sp,sp,#0x30
0001c4  bd10              POP      {r4,pc}
0001c6  4a14              LDR      r2,|L1.536|
0001c8  200c              MOVS     r0,#0xc               ;193
0001ca  6812              LDR      r2,[r2,#0]            ;193  ; bleEventCallBack
0001cc  4621              MOV      r1,r4                 ;193
0001ce  4790              BLX      r2                    ;193
0001d0  b00c              ADD      sp,sp,#0x30
0001d2  bd10              POP      {r4,pc}
0001d4  4a10              LDR      r2,|L1.536|
0001d6  200d              MOVS     r0,#0xd               ;202
0001d8  6812              LDR      r2,[r2,#0]            ;202  ; bleEventCallBack
0001da  4621              MOV      r1,r4                 ;202
0001dc  4790              BLX      r2                    ;202
0001de  7820              LDRB     r0,[r4,#0]            ;203
0001e0  2102              MOVS     r1,#2                 ;203
                  |L1.482|
0001e2  f7fffffe          BL       clearBLE_CmdTimer
0001e6  b00c              ADD      sp,sp,#0x30
0001e8  bd10              POP      {r4,pc}
0001ea  4a0b              LDR      r2,|L1.536|
0001ec  200f              MOVS     r0,#0xf               ;209
0001ee  6812              LDR      r2,[r2,#0]            ;209  ; bleEventCallBack
0001f0  4621              MOV      r1,r4                 ;209
0001f2  4790              BLX      r2                    ;209
0001f4  b00c              ADD      sp,sp,#0x30
0001f6  bd10              POP      {r4,pc}
0001f8  e007              B        |L1.522|
0001fa  e7ff              B        |L1.508|
                  |L1.508|
0001fc  4a06              LDR      r2,|L1.536|
0001fe  2010              MOVS     r0,#0x10              ;213
000200  6812              LDR      r2,[r2,#0]            ;213  ; bleEventCallBack
000202  4621              MOV      r1,r4                 ;213
000204  4790              BLX      r2                    ;213
000206  b00c              ADD      sp,sp,#0x30
000208  bd10              POP      {r4,pc}
                  |L1.522|
00020a  4a03              LDR      r2,|L1.536|
00020c  2011              MOVS     r0,#0x11              ;217
00020e  6812              LDR      r2,[r2,#0]            ;217  ; bleEventCallBack
000210  4621              MOV      r1,r4                 ;217
000212  4790              BLX      r2                    ;217
000214  b00c              ADD      sp,sp,#0x30
000216  bd10              POP      {r4,pc}
;;;224    
                          ENDP

                  |L1.536|
                          DCD      ||.data||
                  |L1.540|
                          DCD      0x00075300
                  |L1.544|
                          DCD      0x0003a980

                          AREA ||i.setBLE_RegisterBleEvent||, CODE, READONLY, ALIGN=2

                  setBLE_RegisterBleEvent PROC
;;;32      */
;;;33     void setBLE_RegisterBleEvent(BleEventCallBack callback)
000000  b510              PUSH     {r4,lr}
;;;34     {
000002  4604              MOV      r4,r0
;;;35         extern void initLLCallBack(MHCCallBack callback);
;;;36         initLLCallBack(MHC_Callback);  // LL -> ble_event
000004  4802              LDR      r0,|L2.16|
000006  f7fffffe          BL       initLLCallBack
;;;37     
;;;38         bleEventCallBack = callback;  // ble_event -> application
00000a  4802              LDR      r0,|L2.20|
00000c  6004              STR      r4,[r0,#0]  ; bleEventCallBack
;;;39     }
00000e  bd10              POP      {r4,pc}
;;;40     
                          ENDP

                  |L2.16|
                          DCD      MHC_Callback
                  |L2.20|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=2

                  bleEventCallBack
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\ble_event.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_ble_event_c_5839585d____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_ble_event_c_5839585d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_ble_event_c_5839585d____REVSH|
#line 402
|__asm___11_ble_event_c_5839585d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

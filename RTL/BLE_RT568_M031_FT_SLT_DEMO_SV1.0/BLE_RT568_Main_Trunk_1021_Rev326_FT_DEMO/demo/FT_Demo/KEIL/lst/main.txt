; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;503      */
;;;504    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4906              LDR      r1,|L1.28|
;;;505    {
;;;506        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L1.32|
000008  6148              STR      r0,[r1,#0x14]
;;;507        SysTick->VAL  = (0x00);
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
;;;508        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L1.18|
;;;509    
;;;510        /* Waiting for down-count to zero */
;;;511        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L1.18|
;;;512    
;;;513        /* Disable SysTick counter */
;;;514        SysTick->CTRL = 0;
000018  610a              STR      r2,[r1,#0x10]
;;;515    }
00001a  4770              BX       lr
;;;516    
                          ENDP

                  |L1.28|
                          DCD      CyclesPerUs
                  |L1.32|
                          DCD      0xe000e000

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;687     */
;;;688    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;689    {
;;;690      if ((int32_t)(IRQn) < 0)
;;;691      {
;;;692        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;690
000010  da0b              BGE      |L2.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L2.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;693           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;694      }
;;;695      else
;;;696      {
;;;697        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
;;;698           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;699      }
;;;700    }
000028  4770              BX       lr
                  |L2.42|
00002a  0883              LSRS     r3,r0,#2              ;697
00002c  4804              LDR      r0,|L2.64|
00002e  009b              LSLS     r3,r3,#2              ;697
000030  1818              ADDS     r0,r3,r0              ;697
000032  6803              LDR      r3,[r0,#0]            ;697
000034  4393              BICS     r3,r3,r2              ;697
000036  430b              ORRS     r3,r3,r1              ;697
000038  6003              STR      r3,[r0,#0]            ;697
00003a  4770              BX       lr
;;;701    
                          ENDP

                  |L2.60|
                          DCD      0xe000ed00
                  |L2.64|
                          DCD      0xe000e400

                          AREA ||i.RF_Open||, CODE, READONLY, ALIGN=2

                  RF_Open PROC
;;;121    
;;;122    void RF_Open()
000000  b510              PUSH     {r4,lr}
;;;123    {
;;;124    #ifndef _TMR_USE_INTERNAL_
;;;125        MCU_Timer0Enable();    //new add, Init Timer0
;;;126    #endif  //(#ifndef _TMR_USE_INTERNAL_)
;;;127    
;;;128        /* Wait RF PHY stable */
;;;129        CLK_SysTickDelay(25000);
000002  4808              LDR      r0,|L3.36|
000004  f7fffffe          BL       CLK_SysTickDelay
;;;130    
;;;131        /* Initialize Gpio reset pin */
;;;132        MCU_GpioResetInit();
000008  f7fffffe          BL       MCU_GpioResetInit
;;;133    
;;;134        /* Do Gpio Reset */
;;;135        MCU_GpioReset();
00000c  f7fffffe          BL       MCU_GpioReset
;;;136        CLK_SysTickDelay(50000);     //HW 32K clk count 15ms, but need to consider 32K deviation & MCU HIRC deviation
000010  4805              LDR      r0,|L3.40|
000012  f7fffffe          BL       CLK_SysTickDelay
;;;137    
;;;138        /* SPI IO remapping */
;;;139        RF_SpiIoMapping();
000016  f7fffffe          BL       RF_SpiIoMapping
;;;140    
;;;141        /* initial SPI PDMA */
;;;142        SPI_PDMA_Init();
00001a  f7fffffe          BL       SPI_PDMA_Init
;;;143      
;;;144        /* Initialize RF PHY */
;;;145        RF_Init();
00001e  f7fffffe          BL       RF_Init
;;;146    }
000022  bd10              POP      {r4,pc}
;;;147    
                          ENDP

                  |L3.36|
                          DCD      0x000061a8
                  |L3.40|
                          DCD      0x0000c350

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;20     */
;;;21     void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2259              MOVS     r2,#0x59
000004  4d1d              LDR      r5,|L4.124|
000006  2116              MOVS     r1,#0x16
000008  2088              MOVS     r0,#0x88
                  |L4.10|
00000a  602a              STR      r2,[r5,#0]
00000c  6029              STR      r1,[r5,#0]
00000e  6028              STR      r0,[r5,#0]
000010  682b              LDR      r3,[r5,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L4.10|
;;;22     {
;;;23         int8_t irqno;
;;;24     
;;;25         /* Unlock protected registers */
;;;26         SYS_UnlockReg();
;;;27     
;;;28         /*---------------------------------------------------------------------------------------------------------*/
;;;29         /* Init System Clock                                                                                       */
;;;30         /*---------------------------------------------------------------------------------------------------------*/
;;;31     
;;;32     #if (_BOARD_SELECTION_==_BOARD_NUVOTON_M031TD2AE_QFN33_)   //HIRC
;;;33         //GPIO_SetMode(PF, (BIT2|BIT3), GPIO_MODE_INPUT);
;;;34         // Enable HIRC
;;;35         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;36         // Waiting for HIRC clock ready
;;;37         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;38     #elif (_BOARD_SELECTION_==_BOARD_NUVOTON_M031_SIP_)
;;;39     #if (_USE_MCU_CLK_==MCU_CLK_SOURCE_HXT) //HXT
;;;40         GPIO_SetMode(PF, (BIT2|BIT3), GPIO_MODE_INPUT);
;;;41         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk|CLK_PWRCTL_HIRCEN_Msk);
;;;42         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk|CLK_STATUS_HIRCSTB_Msk);
;;;43     #else                                   //HIRC   
;;;44         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
;;;45         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
;;;46     #endif
;;;47     #else
;;;48         //GPIO_SetMode(PF, (BIT2|BIT3), GPIO_MODE_INPUT);
;;;49         // Enable HXT
;;;50         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
;;;51         // Waiting for HXT clock ready
;;;52         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
;;;53     #endif
;;;54     
;;;55         /* Set core clock as PLL_CLOCK from PLL */
;;;56         //CLK_SetCoreClock(CPU_CLOCK_RATE);  //48MHz for M0, 64MHz for M4
;;;57         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;58     
;;;59     #if (_BOARD_SELECTION_==_BOARD_NUVOTON_M487JIDAE_B3_)  //M487
;;;60         /* Set both PCLK0 and PCLK1 as HCLK/PCLK_DIV */
;;;61     #if (PCLK_DIV==4)
;;;62         CLK->PCLKDIV = CLK_PCLKDIV_PCLK0DIV4 | CLK_PCLKDIV_PCLK1DIV4;  //96/4=24MHz
;;;63     #elif (PCLK_DIV==2)
;;;64         CLK->PCLKDIV = CLK_PCLKDIV_PCLK0DIV2 | CLK_PCLKDIV_PCLK1DIV2;  //64/2=32MHz
;;;65     #elif (PCLK_DIV==1)
;;;66         CLK->PCLKDIV = CLK_PCLKDIV_PCLK0DIV1 | CLK_PCLKDIV_PCLK1DIV1;
;;;67     #endif //(PCLK_DIV==4)
;;;68     
;;;69     #else //M031 series
;;;70         /* Set both PCLK0 and PCLK1 as HCLK/PCLK_DIV */
;;;71     #if (PCLK_DIV==4)
;;;72         CLK->PCLKDIV = CLK_PCLKDIV_APB0DIV_DIV4 | CLK_PCLKDIV_APB1DIV_DIV4;
;;;73     #elif (PCLK_DIV==2)
;;;74         CLK->PCLKDIV = CLK_PCLKDIV_APB0DIV_DIV2 | CLK_PCLKDIV_APB1DIV_DIV2;  //48/2=24MHz
00002a  4915              LDR      r1,|L4.128|
00002c  2011              MOVS     r0,#0x11
00002e  6348              STR      r0,[r1,#0x34]
;;;75     #elif (PCLK_DIV==1)
;;;76         CLK->PCLKDIV = CLK_PCLKDIV_APB0DIV_DIV1 | CLK_PCLKDIV_APB1DIV_DIV1;
;;;77     #endif //(PCLK_DIV==4)
;;;78     
;;;79     #endif //(_BOARD_SELECTION_==_BOARD_NUVOTON_M487JIDAE_B3_))
;;;80     
;;;81     
;;;82         //debug print use UART0
;;;83         /* Select HIRC as the clock source of UART0 */
;;;84         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
000030  4c14              LDR      r4,|L4.132|
000032  2103              MOVS     r1,#3
000034  2200              MOVS     r2,#0
000036  0609              LSLS     r1,r1,#24
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;85     
;;;86         /* Enable UART peripheral clock */
;;;87         CLK_EnableModuleClock(UART0_MODULE);
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       CLK_EnableModuleClock
;;;88     
;;;89         /*---------------------------------------------------------------------------------------------------------*/
;;;90         /* Init I/O Multi-function                                                                                 */
;;;91         /*---------------------------------------------------------------------------------------------------------*/
;;;92     #if (_BOARD_SELECTION_==_BOARD_NUVOTON_M031_SIP_)   //Nuvoton SIP EVK
;;;93         /* Set PA multi-function pins for UART0 RXD=PA.0 and TXD=PA.1 */
;;;94         SYS->GPA_MFPL = (SYS->GPA_MFPL & ~(SYS_GPA_MFPL_PA0MFP_Msk | SYS_GPA_MFPL_PA1MFP_Msk)) |
;;;95                         (SYS_GPA_MFPL_PA0MFP_UART0_RXD | SYS_GPA_MFPL_PA1MFP_UART0_TXD);
;;;96     #else
;;;97         /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;98         SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk)) |     //It is also VCOM TX/RX port
000044  06a0              LSLS     r0,r4,#26
000046  6bc1              LDR      r1,[r0,#0x3c]
000048  22ff              MOVS     r2,#0xff
00004a  0412              LSLS     r2,r2,#16
00004c  4391              BICS     r1,r1,r2
00004e  2233              MOVS     r2,#0x33
000050  0452              LSLS     r2,r2,#17
000052  1889              ADDS     r1,r1,r2
000054  63c1              STR      r1,[r0,#0x3c]
;;;99                         (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;100    #endif
;;;101    
;;;102        /* Set only BLE interrupt with the highest priority to mkae sure RF can handle event in time */
;;;103        for(irqno = BOD_IRQn; irqno <= RTC_IRQn; irqno++)
000056  2400              MOVS     r4,#0
                  |L4.88|
;;;104        {
;;;105            NVIC_SetPriority((IRQn_Type)irqno, 1);
000058  2101              MOVS     r1,#1
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       NVIC_SetPriority
000060  1c64              ADDS     r4,r4,#1
000062  b264              SXTB     r4,r4                 ;103
000064  2c1f              CMP      r4,#0x1f              ;103
000066  ddf7              BLE      |L4.88|
;;;106        }
;;;107    
;;;108    #if ((_BOARD_SELECTION_ == _BOARD_NUVOTON_M031SE_)||(_BOARD_SELECTION_ == _BOARD_NUVOTON_M032SE3AE_))
;;;109        NVIC_SetPriority(GPIO_PAPB_IRQn, 0);
;;;110        NVIC_SetPriority(GPIO_PAPBPGPH_IRQn, 0);
;;;111    #else
;;;112        NVIC_SetPriority(GPIO_PCPDPEPF_IRQn, 0);
000068  2100              MOVS     r1,#0
00006a  2005              MOVS     r0,#5
00006c  f7fffffe          BL       NVIC_SetPriority
;;;113    #endif
;;;114    
;;;115        /* Update System Core Clock */
;;;116        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock and CyclesPerUs automatically. */
;;;117        SystemCoreClockUpdate();
000070  f7fffffe          BL       SystemCoreClockUpdate
000074  2000              MOVS     r0,#0
000076  6028              STR      r0,[r5,#0]
;;;118        /* Lock protected registers */
;;;119        SYS_LockReg();
;;;120    }
000078  bd70              POP      {r4-r6,pc}
;;;121    
                          ENDP

00007a  0000              DCW      0x0000
                  |L4.124|
                          DCD      0x40000100
                  |L4.128|
                          DCD      0x40000200
                  |L4.132|
                          DCD      0x5f803d10

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;147    
;;;148    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;149    {
;;;150        UART_Open(UART0, 115200);
000002  4c07              LDR      r4,|L5.32|
000004  21e1              MOVS     r1,#0xe1
000006  0249              LSLS     r1,r1,#9
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       UART_Open
;;;151        UART_EnableInt(UART0,(UART_INTEN_RDAIEN_Msk|UART_INTEN_RXTOIEN_Msk));
00000e  2111              MOVS     r1,#0x11
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       UART_EnableInt
000016  2001              MOVS     r0,#1
000018  4902              LDR      r1,|L5.36|
00001a  0300              LSLS     r0,r0,#12
00001c  6008              STR      r0,[r1,#0]
;;;152        NVIC_EnableIRQ(UART02_IRQn);
;;;153    }
00001e  bd10              POP      {r4,pc}
;;;154    
                          ENDP

                  |L5.32|
                          DCD      0x40070000
                  |L5.36|
                          DCD      0xe000e100

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                  main PROC
;;;158    */
;;;159    int main(void)
000000  f7fffffe          BL       SYS_Init
;;;160    {
;;;161        extern BleStackStatus Ble_Kernel_Root(void);
;;;162        extern void BleApp_Main(void);
;;;163        extern void BleApp_Init(void);
;;;164        uint8_t chipId;
;;;165    
;;;166        /* Init System, IP clock and multi-function I/O. */
;;;167        SYS_Init();
;;;168    
;;;169        /* Init UART0 - for control test item and debug message */
;;;170        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;171    
;;;172        /* Enable the BLE RF PHY */
;;;173        RF_Open();
000008  f7fffffe          BL       RF_Open
;;;174    
;;;175        D_msg("-------------------\n");
00000c  a015              ADR      r0,|L6.100|
00000e  f7fffffe          BL       __2printf
;;;176        D_msg("  FT Test          \n");
000012  a01a              ADR      r0,|L6.124|
000014  f7fffffe          BL       __2printf
;;;177        D_msg("-------------------\n");
000018  a012              ADR      r0,|L6.100|
00001a  f7fffffe          BL       __2printf
;;;178    
;;;179        chipId = ChipId_Get();
00001e  f7fffffe          BL       ChipId_Get
000022  4604              MOV      r4,r0
;;;180        D_msg("Chip_ID=0x%x\n",chipId);
000024  4601              MOV      r1,r0
000026  a01b              ADR      r0,|L6.148|
000028  f7fffffe          BL       __2printf
;;;181        
;;;182        if((chipId != MP_A1) && (chipId != MP_A2))
00002c  2c66              CMP      r4,#0x66
00002e  d005              BEQ      |L6.60|
000030  2c67              CMP      r4,#0x67
000032  d003              BEQ      |L6.60|
;;;183        {
;;;184          D_msg("Result:FAIL Error Code: 0x%02x\n",RT568_TEST_ERROR_ID);
000034  2101              MOVS     r1,#1
000036  a01b              ADR      r0,|L6.164|
000038  f7fffffe          BL       __2printf
                  |L6.60|
;;;185        }   
;;;186    
;;;187        if(WDT_GET_RESET_FLAG() == 1)
00003c  4821              LDR      r0,|L6.196|
00003e  6801              LDR      r1,[r0,#0]
000040  0749              LSLS     r1,r1,#29
000042  d505              BPL      |L6.80|
;;;188        {
;;;189            WDT_CLEAR_RESET_FLAG();
000044  6801              LDR      r1,[r0,#0]
000046  2228              MOVS     r2,#0x28
000048  4391              BICS     r1,r1,r2
00004a  2204              MOVS     r2,#4
00004c  4311              ORRS     r1,r1,r2
00004e  6001              STR      r1,[r0,#0]
                  |L6.80|
;;;190        }
;;;191    
;;;192        BleApp_Init();
000050  f7fffffe          BL       BleApp_Init
                  |L6.84|
;;;193    
;;;194        while(1)
;;;195        {
;;;196            /* Run BLE kernel, the task priority is LL > Host */
;;;197            if(Ble_Kernel_Root() == BLESTACK_STATUS_FREE)
000054  f7fffffe          BL       Ble_Kernel_Root
000058  2809              CMP      r0,#9
00005a  d1fb              BNE      |L6.84|
;;;198            {
;;;199                BleApp_Main();
00005c  f7fffffe          BL       BleApp_Main
000060  e7f8              B        |L6.84|
;;;200            }
;;;201        }
;;;202    }
                          ENDP

000062  0000              DCW      0x0000
                  |L6.100|
000064  2d2d2d2d          DCB      "-------------------\n",0
000068  2d2d2d2d
00006c  2d2d2d2d
000070  2d2d2d2d
000074  2d2d2d0a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
                  |L6.124|
00007c  20204654          DCB      "  FT Test          \n",0
000080  20546573
000084  74202020
000088  20202020
00008c  2020200a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L6.148|
000094  43686970          DCB      "Chip_ID=0x%x\n",0
000098  5f49443d
00009c  30782578
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L6.164|
0000a4  52657375          DCB      "Result:FAIL Error Code: 0x%02x\n",0
0000a8  6c743a46
0000ac  41494c20
0000b0  4572726f
0000b4  7220436f
0000b8  64653a20
0000bc  30782530
0000c0  32780a00
                  |L6.196|
                          DCD      0x40040000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0

; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ll.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ll.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\..\..\Library\CMSIS\Include -I..\..\..\..\..\..\Library\StdDriver\inc -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\ll.crf ..\..\..\source\LL.c]
                          THUMB

                          AREA ||i.Ble_EC_Chk_Isr||, CODE, READONLY, ALIGN=2

                  Ble_EC_Chk_Isr PROC
;;;4204   
;;;4205   void Ble_EC_Chk_Isr(void)
000000  b510              PUSH     {r4,lr}
;;;4206   {
;;;4207       if(MsgQueueEC.QOut != (MBLK *)0)
000002  480c              LDR      r0,|L1.52|
000004  6844              LDR      r4,[r0,#4]  ; MsgQueueEC
000006  2c00              CMP      r4,#0
000008  d013              BEQ      |L1.50|
00000a  6801              LDR      r1,[r0,#0]            ;4206  ; MsgQueueEC
00000c  428c              CMP      r4,r1                 ;4206
00000e  d103              BNE      |L1.24|
000010  2100              MOVS     r1,#0                 ;4206
000012  6041              STR      r1,[r0,#4]            ;4206  ; MsgQueueEC
000014  6001              STR      r1,[r0,#0]            ;4206  ; MsgQueueEC
000016  e001              B        |L1.28|
                  |L1.24|
000018  6821              LDR      r1,[r4,#0]            ;4206
00001a  6041              STR      r1,[r0,#4]            ;4206  ; MsgQueueEC
                  |L1.28|
00001c  7920              LDRB     r0,[r4,#4]            ;4206
00001e  4906              LDR      r1,|L1.56|
000020  3850              SUBS     r0,r0,#0x50           ;4206
000022  0600              LSLS     r0,r0,#24             ;4206
000024  0d80              LSRS     r0,r0,#22             ;4206
000026  5809              LDR      r1,[r1,r0]            ;4206
000028  4620              MOV      r0,r4                 ;4206
00002a  4788              BLX      r1                    ;4206
00002c  4620              MOV      r0,r4                 ;4206
00002e  f7fffffe          BL       FreeMsgBlk_Isr
                  |L1.50|
;;;4208       {
;;;4209           EC_Root_Isr();
;;;4210       }
;;;4211   }
000032  bd10              POP      {r4,pc}
;;;4212   
                          ENDP

                  |L1.52|
                          DCD      ||.data||+0x78
                  |L1.56|
                          DCD      ||.constdata||+0x36c

                          AREA ||i.ECHC_LE_Ctrl_Pkt||, CODE, READONLY, ALIGN=2

                  ECHC_LE_Ctrl_Pkt PROC
;;;3983   
;;;3984   void ECHC_LE_Ctrl_Pkt(MBLK *pMBlk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3985   {
;;;3986       MBLK *mblk;
;;;3987       Uint8 i;
;;;3988       LL_Conn *pLL_Conn;
;;;3989       Uint8 *pCtrlPkt_Data;
;;;3990   
;;;3991       pCtrlPkt_Data = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data;
;;;3992       i = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_Conn_Hdl_L;
000002  7a05              LDRB     r5,[r0,#8]
;;;3993       pLL_Conn = &LL_Conn_Para[i];
000004  2188              MOVS     r1,#0x88
000006  4a36              LDR      r2,|L2.224|
000008  4369              MULS     r1,r5,r1
00000a  4606              MOV      r6,r0                 ;3991
00000c  188c              ADDS     r4,r1,r2
;;;3994       switch(pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode)
00000e  7ac1              LDRB     r1,[r0,#0xb]
000010  3014              ADDS     r0,r0,#0x14
000012  360c              ADDS     r6,r6,#0xc            ;3991
000014  9000              STR      r0,[sp,#0]
000016  2903              CMP      r1,#3
000018  d02a              BEQ      |L2.112|
00001a  2904              CMP      r1,#4
00001c  d127              BNE      |L2.110|
;;;3995       {
;;;3996       case LL_ENC_REQ:
;;;3997           LL_smp_SKD_IV_genIn((pCtrlPkt_Data+(LEN_SMP_RAND+LEN_SMP_EDIV+LEN_SMP_SKDM+LEN_SMP_IVM)));
;;;3998   
;;;3999           Knl_MemCpy_Isr(pLL_Conn->LE_Conn_Para.LL_SMP_Key, (pCtrlPkt_Data+(LEN_SMP_RAND+LEN_SMP_EDIV)), LEN_SMP_SKDM);
;;;4000           Knl_MemCpy_Isr(pLL_Conn->LE_Conn_Para.LL_SMP_IV, (pCtrlPkt_Data+(LEN_SMP_RAND+LEN_SMP_EDIV+LEN_SMP_SKDM)), LEN_SMP_IVM);
;;;4001   
;;;4002           mblk = GetMsgBlk_Isr();
;;;4003           mblk->Primitive = MHC_EVENT_LE_LONG_TERM_KEY_REQ;
;;;4004           mblk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Conn_Hdl_L = i;
;;;4005           Knl_MemCpy_Isr(mblk->Para.MHC_Le_Long_Term_Key_Req_Para.HCI_Random_Num, pCtrlPkt_Data, (LEN_SMP_EDIV+LEN_SMP_RAND));
;;;4006           SndMsgBlk_Isr(mblk, Q_2HCI);
;;;4007   
;;;4008           smpAES_out(pCtrlPkt_Data);
;;;4009           Knl_MemCpy_Isr(&pLL_Conn->LE_Conn_Para.LL_SMP_Key[LEN_SMP_SKDM], pCtrlPkt_Data, LEN_SMP_SKDS);
;;;4010           Knl_MemCpy_Isr(&pLL_Conn->LE_Conn_Para.LL_SMP_IV[LEN_SMP_IVM], (pCtrlPkt_Data+LEN_SMP_SKDS), LEN_SMP_IVS);
;;;4011   
;;;4012           LL_Msg_CTRL_PKT_Isr(pCtrlPkt_Data, LL_ENC_RSP, (LEN_SMP_SKDS+LEN_SMP_IVS), i);
;;;4013           break;
;;;4014   
;;;4015       case LL_ENC_RSP:
;;;4016           mblk = mblk_LL_conn_Para[i];
00001e  4831              LDR      r0,|L2.228|
000020  00af              LSLS     r7,r5,#2
000022  59c5              LDR      r5,[r0,r7]
;;;4017   
;;;4018           Knl_MemCpy_Isr((mblk->Para.MLL_LE_Conn_Para_SMP.LL_SMP_IV+LEN_SMP_IVM), (pCtrlPkt_Data+LEN_SMP_SKDS), LEN_SMP_IVS);
000024  2204              MOVS     r2,#4
000026  4628              MOV      r0,r5
000028  301e              ADDS     r0,r0,#0x1e
00002a  9900              LDR      r1,[sp,#0]
00002c  f7fffffe          BL       Knl_MemCpy_Isr
;;;4019           Knl_MemCpy_Isr(pLL_Conn->LE_Conn_Para.LL_SMP_IV, mblk->Para.MLL_LE_Conn_Para_SMP.LL_SMP_IV, (LEN_SMP_IVM+LEN_SMP_IVS));
000030  4629              MOV      r1,r5
000032  311a              ADDS     r1,r1,#0x1a
000034  4620              MOV      r0,r4
000036  2208              MOVS     r2,#8
000038  3058              ADDS     r0,r0,#0x58
00003a  9100              STR      r1,[sp,#0]
00003c  f7fffffe          BL       Knl_MemCpy_Isr
;;;4020   
;;;4021           Knl_MemCpy_Isr(mblk->Para.MLL_LE_Conn_Para_SMP.LL_SMP_IV, pCtrlPkt_Data, LEN_SMP_SKDS);
000040  2208              MOVS     r2,#8
000042  4631              MOV      r1,r6
000044  9800              LDR      r0,[sp,#0]
000046  f7fffffe          BL       Knl_MemCpy_Isr
;;;4022           smpAES_inInv(mblk->Para.MLL_LE_Conn_Para_SMP.LL_SMP_Key, mblk->Para.MLL_LE_Conn_Para_SMP.LL_SMP_SKD);
00004a  4629              MOV      r1,r5
00004c  4628              MOV      r0,r5
00004e  3112              ADDS     r1,r1,#0x12
000050  3022              ADDS     r0,r0,#0x22
000052  f7fffffe          BL       smpAES_inInv
;;;4023   
;;;4024           mblk->Primitive = MLL_HCI_NULL;
000056  20b0              MOVS     r0,#0xb0
000058  7128              STRB     r0,[r5,#4]
;;;4025           mblk_LL_conn_Para[i] = (MBLK *)0;
00005a  4822              LDR      r0,|L2.228|
00005c  2100              MOVS     r1,#0
00005e  51c1              STR      r1,[r0,r7]
;;;4026           SndMsgBlk_Isr(mblk, Q_2LL);
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       SndMsgBlk_Isr
;;;4027   
;;;4028           smpAES_out(pLL_Conn->LE_Conn_Para.LL_SMP_Key);
000066  4620              MOV      r0,r4
000068  3060              ADDS     r0,r0,#0x60
00006a  f7fffffe          BL       smpAES_out
                  |L2.110|
;;;4029           break;
;;;4030   
;;;4031       default:
;;;4032           break;
;;;4033       }
;;;4034   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L2.112|
000070  4630              MOV      r0,r6                 ;3997
000072  3016              ADDS     r0,r0,#0x16           ;3997
000074  f7fffffe          BL       LL_smp_SKD_IV_genIn
000078  4631              MOV      r1,r6                 ;3999
00007a  4620              MOV      r0,r4                 ;3999
00007c  2208              MOVS     r2,#8                 ;3999
00007e  310a              ADDS     r1,r1,#0xa            ;3999
000080  3060              ADDS     r0,r0,#0x60           ;3999
000082  f7fffffe          BL       Knl_MemCpy_Isr
000086  4631              MOV      r1,r6                 ;4000
000088  4620              MOV      r0,r4                 ;4000
00008a  2204              MOVS     r2,#4                 ;4000
00008c  3112              ADDS     r1,r1,#0x12           ;4000
00008e  3058              ADDS     r0,r0,#0x58           ;4000
000090  f7fffffe          BL       Knl_MemCpy_Isr
000094  f7fffffe          BL       GetMsgBlk_Isr
000098  4607              MOV      r7,r0                 ;4002
00009a  206e              MOVS     r0,#0x6e              ;4003
00009c  7138              STRB     r0,[r7,#4]            ;4003
00009e  4638              MOV      r0,r7                 ;4005
0000a0  72bd              STRB     r5,[r7,#0xa]          ;4004
0000a2  220a              MOVS     r2,#0xa               ;4005
0000a4  4631              MOV      r1,r6                 ;4005
0000a6  300b              ADDS     r0,r0,#0xb            ;4005
0000a8  f7fffffe          BL       Knl_MemCpy_Isr
0000ac  2104              MOVS     r1,#4                 ;4006
0000ae  4638              MOV      r0,r7                 ;4006
0000b0  f7fffffe          BL       SndMsgBlk_Isr
0000b4  4630              MOV      r0,r6                 ;4008
0000b6  f7fffffe          BL       smpAES_out
0000ba  4620              MOV      r0,r4                 ;4009
0000bc  2208              MOVS     r2,#8                 ;4009
0000be  4631              MOV      r1,r6                 ;4009
0000c0  3068              ADDS     r0,r0,#0x68           ;4009
0000c2  f7fffffe          BL       Knl_MemCpy_Isr
0000c6  4620              MOV      r0,r4                 ;4010
0000c8  2204              MOVS     r2,#4                 ;4010
0000ca  305c              ADDS     r0,r0,#0x5c           ;4010
0000cc  9900              LDR      r1,[sp,#0]            ;4010
0000ce  f7fffffe          BL       Knl_MemCpy_Isr
0000d2  462b              MOV      r3,r5                 ;4012
0000d4  220c              MOVS     r2,#0xc               ;4012
0000d6  2104              MOVS     r1,#4                 ;4012
0000d8  4630              MOV      r0,r6                 ;4012
0000da  f7fffffe          BL       LL_Msg_CTRL_PKT_Isr
0000de  bdf8              POP      {r3-r7,pc}
;;;4035   
                          ENDP

                  |L2.224|
                          DCD      ||.bss||+0xd0
                  |L2.228|
                          DCD      ||.bss||+0x5c4

                          AREA ||i.EC_Root_Isr||, CODE, READONLY, ALIGN=2

                  EC_Root_Isr PROC
;;;4181   
;;;4182   void EC_Root_Isr(void)
000000  b510              PUSH     {r4,lr}
;;;4183   {
;;;4184       Uint8 event;
;;;4185       MBLK *pmblk;
;;;4186   
;;;4187       pmblk = MsgQueueEC.QOut;
000002  480b              LDR      r0,|L3.48|
;;;4188       if (MsgQueueEC.QOut == MsgQueueEC.QIn)
000004  6844              LDR      r4,[r0,#4]  ; MsgQueueEC
000006  6801              LDR      r1,[r0,#0]  ; MsgQueueEC
000008  428c              CMP      r4,r1
00000a  d103              BNE      |L3.20|
;;;4189       {
;;;4190           MsgQueueEC.QOut = (MBLK *)0;
00000c  2100              MOVS     r1,#0
;;;4191           MsgQueueEC.QIn = (MBLK *)0;
00000e  6041              STR      r1,[r0,#4]  ; MsgQueueEC
000010  6001              STR      r1,[r0,#0]  ; MsgQueueEC
000012  e001              B        |L3.24|
                  |L3.20|
;;;4192       }
;;;4193       else
;;;4194       {
;;;4195           MsgQueueEC.QOut = pmblk->Next;
000014  6821              LDR      r1,[r4,#0]
000016  6041              STR      r1,[r0,#4]  ; MsgQueueEC
                  |L3.24|
;;;4196       }
;;;4197       //pmblk = RcvMsgBlk(QueueId);
;;;4198   
;;;4199       event = pmblk->Primitive - EC_E0;
000018  7920              LDRB     r0,[r4,#4]
;;;4200       (*(EC_fsm[event]))(pmblk);
00001a  4906              LDR      r1,|L3.52|
00001c  3850              SUBS     r0,r0,#0x50           ;4199
00001e  0600              LSLS     r0,r0,#24             ;4199
000020  0d80              LSRS     r0,r0,#22
000022  5809              LDR      r1,[r1,r0]
000024  4620              MOV      r0,r4
000026  4788              BLX      r1
;;;4201       FreeMsgBlk_Isr(pmblk);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       FreeMsgBlk_Isr
;;;4202   }
00002e  bd10              POP      {r4,pc}
;;;4203   
                          ENDP

                  |L3.48|
                          DCD      ||.data||+0x78
                  |L3.52|
                          DCD      ||.constdata||+0x36c

                          AREA ||i.HCLL_Disconnect||, CODE, READONLY, ALIGN=2

                  HCLL_Disconnect PROC
;;;1246   
;;;1247   void HCLL_Disconnect(MBLK *pMBlk)                         //OGF: Link Control, 0x01
000000  b510              PUSH     {r4,lr}
;;;1248   {
;;;1249       Uint8 i;
;;;1250   
;;;1251       i = pMBlk->Para.HCLL_Disconnect_Para.HCI_Conn_Hdl_L;
000002  7a03              LDRB     r3,[r0,#8]
;;;1252       if(i >= MAX_NUM_CONN_HDL)
000004  2b05              CMP      r3,#5
000006  d216              BCS      |L4.54|
;;;1253       {
;;;1254           return;
;;;1255       }
;;;1256       if(LL_Conn_Para[i].LE_Conn_Para.LL_Conn_ID != LL_CONN_ID_STBY)
000008  2188              MOVS     r1,#0x88
00000a  4a0b              LDR      r2,|L4.56|
00000c  4359              MULS     r1,r3,r1
00000e  5c51              LDRB     r1,[r2,r1]
000010  2901              CMP      r1,#1
000012  d00f              BEQ      |L4.52|
;;;1257       {
;;;1258           switch(pMBlk->Para.HCLL_Disconnect_Para.HCI_Reason)                 //LL__004
000014  7a41              LDRB     r1,[r0,#9]
000016  2915              CMP      r1,#0x15
000018  da0c              BGE      |L4.52|
00001a  2905              CMP      r1,#5
00001c  d00a              BEQ      |L4.52|
00001e  2913              CMP      r1,#0x13
000020  d108              BNE      |L4.52|
;;;1259           {
;;;1260           case HCI_ERR_CODE_REMOTE_USER_TERMINATED_CONNECTION:
;;;1261               LL_Msg_CTRL_PKT(&pMBlk->Para.HCLL_Disconnect_Para.HCI_Reason, LL_TERMINATE_IND, 1, i);
000022  2201              MOVS     r2,#1
000024  2102              MOVS     r1,#2
000026  3009              ADDS     r0,r0,#9
000028  f7fffffe          BL       LL_Msg_CTRL_PKT
;;;1262   #ifdef _HCI_HW_
;;;1263               LL_Msg_Event_Status(HCI_ERR_CODE_COMMAND_CURRENTLY_IN_PENDING, pMBlk->Para.HCLL_Disconnect_Para.HCI_Ocf, pMBlk->Para.HCLL_Disconnect_Para.HCI_Ogf);
;;;1264   #else
;;;1265               LL_Msg_Event_Status(HCI_ERR_CODE_COMMAND_CURRENTLY_IN_PENDING, HCLL_DISCONNECT);
00002c  21b1              MOVS     r1,#0xb1
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       LL_Msg_Event_Status
                  |L4.52|
;;;1266   #endif
;;;1267               break;
;;;1268   
;;;1269           case HCI_ERR_CODE_AUTHENTICATION_FAILURE:
;;;1270           case HCI_ERR_CODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_LOW_RESOURCES:
;;;1271           case HCI_ERR_CODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_POWER_OFF:
;;;1272           case HCI_ERR_CODE_UNSUPPORTED_REMOTE_FEATURE_UNSUPPORTED_LMP_FEATURE:
;;;1273           case HCI_ERR_CODE_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED:
;;;1274           case HCI_ERR_CODE_UNACCEPTABLE_CONNECTION_INTERVAL:
;;;1275               break;
;;;1276   
;;;1277           default:
;;;1278               break;
;;;1279           }
;;;1280       }
;;;1281       __NOP();
000034  bf00              NOP      
                  |L4.54|
;;;1282   }
000036  bd10              POP      {r4,pc}
;;;1283   
                          ENDP

                  |L4.56|
                          DCD      ||.bss||+0xd0

                          AREA ||i.HCLL_Host_Buffer_Size||, CODE, READONLY, ALIGN=1

                  HCLL_Host_Buffer_Size PROC
;;;1375   
;;;1376   void HCLL_Host_Buffer_Size(MBLK *pMBlk)                   //OGF: Controller & Baseband, 0x03
000000  4770              BX       lr
;;;1377   {
;;;1378       pMBlk = pMBlk;
;;;1379   }
;;;1380   
                          ENDP


                          AREA ||i.HCLL_Host_Num_of_Completed_Packets||, CODE, READONLY, ALIGN=1

                  HCLL_Host_Num_of_Completed_Packets PROC
;;;1381   
;;;1382   void HCLL_Host_Num_of_Completed_Packets(MBLK *pMBlk)      //OGF: Controller & Baseband, 0x03
000000  4770              BX       lr
;;;1383   {
;;;1384       pMBlk = pMBlk;
;;;1385   }
;;;1386   
                          ENDP


                          AREA ||i.HCLL_LE_ACL_Data_Pkt||, CODE, READONLY, ALIGN=1

                  HCLL_LE_ACL_Data_Pkt PROC
;;;3198   
;;;3199   void HCLL_LE_ACL_Data_Pkt(MBLK *pMBlk)
000000  4770              BX       lr
;;;3200   {
;;;3201   #ifdef _HCI_HW_
;;;3202       MQUEUE *pqueue;
;;;3203   
;;;3204       InterruptDisable();
;;;3205       if(LL_CheckConnExist(pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Pckt_Typ) == NO_)
;;;3206       {
;;;3207           InterruptEnable();
;;;3208       }
;;;3209       else
;;;3210       {
;;;3211           if(pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1&PB_HCI_FLAG_CONT_FRAGMENT)
;;;3212           {
;;;3213               pMBlk->Primitive = HCLL_LE_ACL_DATA_PKT_EXTEND;
;;;3214           }
;;;3215           pqueue = &LL_ConnDataQ[pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Pckt_Typ];
;;;3216           if (pqueue->QIn == (MBLK *)0)
;;;3217           {
;;;3218               pqueue->QOut = pMBlk;
;;;3219           }
;;;3220           else
;;;3221           {
;;;3222               (pqueue->QIn)->Next = (MBLK *)pMBlk;
;;;3223           }
;;;3224           pqueue->QIn = pMBlk;
;;;3225           InterruptEnable();
;;;3226       }
;;;3227   #endif
;;;3228   }
;;;3229   
                          ENDP


                          AREA ||i.HCLL_LE_ACL_Data_Pkt_Extend||, CODE, READONLY, ALIGN=1

                  HCLL_LE_ACL_Data_Pkt_Extend PROC
;;;3230   
;;;3231   void HCLL_LE_ACL_Data_Pkt_Extend(MBLK *pMBlk)
000000  bf00              NOP      
;;;3232   {
;;;3233       __NOP();
;;;3234   }
000002  4770              BX       lr
;;;3235   
                          ENDP


                          AREA ||i.HCLL_LE_Add_Device_to_White_List||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Add_Device_to_White_List PROC
;;;2521   
;;;2522   void HCLL_LE_Add_Device_to_White_List(MBLK *pMBlk)        //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2523   {
;;;2524       MBLK *mblk;
;;;2525       Uint8 status, i;
;;;2526   
;;;2527       InterruptDisable();
000002  b672              CPSID    i
;;;2528       i = LL_Msg_AdvScnConn;
000004  491f              LDR      r1,|L9.132|
000006  7a49              LDRB     r1,[r1,#9]  ; LL_Msg_AdvScnConn
;;;2529       InterruptEnable();
000008  b662              CPSIE    i
;;;2530       if((i & (LL_MSG_ADVSCNCONN_ADV_CONT|LL_MSG_ADVSCNCONN_SCN_CONT)) == 0)
00000a  0689              LSLS     r1,r1,#26
00000c  0f89              LSRS     r1,r1,#30
00000e  d00b              BEQ      |L9.40|
;;;2531       {
;;;2532           for(status=0; status<SIZE_WHITE_LIST_ENTRIES; status++)
;;;2533           {
;;;2534               if(LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType != DEF_EMPTY_WHITE_LIST)
;;;2535               {
;;;2536                   if(Knl_MemComp(&LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType, &pMBlk->Para.HCLL_LE_Add_Device_To_White_List_Para.HCI_Addr_Type, LEN_LE_WHITELIST_PARA) == SUCCESS_)
;;;2537                   {
;;;2538                       break;
;;;2539                   }
;;;2540               }
;;;2541           }
;;;2542   
;;;2543           if(status == SIZE_WHITE_LIST_ENTRIES)
;;;2544           {
;;;2545               for(status=0; status<SIZE_WHITE_LIST_ENTRIES; status++)
;;;2546               {
;;;2547                   if(LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType == DEF_EMPTY_WHITE_LIST)
;;;2548                   {
;;;2549                       Knl_MemCpy(&LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType, &pMBlk->Para.HCLL_LE_Add_Device_To_White_List_Para.HCI_Addr_Type, LEN_LE_WHITELIST_PARA);
;;;2550                       break;
;;;2551                   }
;;;2552               }
;;;2553           }
;;;2554           if(status == SIZE_WHITE_LIST_ENTRIES)
;;;2555           {
;;;2556               status = HCI_ERR_CODE_MEMORY_CAPACITY_EXCEEDED;
;;;2557           }
;;;2558           else
;;;2559           {
;;;2560               status = HCI_ERR_CODE_SUCCESS;
;;;2561           }
;;;2562       }
;;;2563       else
;;;2564       {
;;;2565           status = HCI_ERR_CODE_COMMAND_DISALLOWED;
000010  240c              MOVS     r4,#0xc
                  |L9.18|
;;;2566       }
;;;2567       mblk = GetMsgBlk();
000012  f7fffffe          BL       GetMsgBlk
;;;2568       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000016  2161              MOVS     r1,#0x61
000018  7101              STRB     r1,[r0,#4]
;;;2569   #ifdef _HCI_HW_
;;;2570       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2571       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Add_Device_To_White_List_Para.HCI_Ocf;
;;;2572       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Add_Device_To_White_List_Para.HCI_Ogf;
;;;2573   #else
;;;2574       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_ADD_DEVICE_TO_WHITE_LIST;
00001a  21d3              MOVS     r1,#0xd3
00001c  7281              STRB     r1,[r0,#0xa]
;;;2575   #endif
;;;2576       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = status;
00001e  72c4              STRB     r4,[r0,#0xb]
;;;2577   #ifdef _HCI_NEW_
;;;2578       SndMsgBlk(mblk, Q_2HCI);
000020  2104              MOVS     r1,#4
000022  f7fffffe          BL       SndMsgBlk
;;;2579   #endif
;;;2580   }
000026  bd70              POP      {r4-r6,pc}
                  |L9.40|
000028  2400              MOVS     r4,#0                 ;2532
00002a  4606              MOV      r6,r0                 ;2536
00002c  4d16              LDR      r5,|L9.136|
00002e  3608              ADDS     r6,r6,#8              ;2536
                  |L9.48|
000030  00e0              LSLS     r0,r4,#3              ;2534
000032  1b00              SUBS     r0,r0,r4              ;2534
000034  5c29              LDRB     r1,[r5,r0]            ;2534
000036  29fc              CMP      r1,#0xfc              ;2534
000038  d006              BEQ      |L9.72|
00003a  1940              ADDS     r0,r0,r5              ;2536
00003c  2207              MOVS     r2,#7                 ;2536
00003e  4631              MOV      r1,r6                 ;2536
000040  f7fffffe          BL       Knl_MemComp
000044  2800              CMP      r0,#0                 ;2536
000046  d003              BEQ      |L9.80|
                  |L9.72|
000048  1c64              ADDS     r4,r4,#1              ;2536
00004a  b2e4              UXTB     r4,r4                 ;2532
00004c  2c04              CMP      r4,#4                 ;2532
00004e  d3ef              BCC      |L9.48|
                  |L9.80|
000050  2c04              CMP      r4,#4                 ;2543
000052  d10b              BNE      |L9.108|
000054  2400              MOVS     r4,#0                 ;2545
                  |L9.86|
000056  00e0              LSLS     r0,r4,#3              ;2547
000058  1b00              SUBS     r0,r0,r4              ;2547
00005a  5c28              LDRB     r0,[r5,r0]            ;2547
00005c  28fc              CMP      r0,#0xfc              ;2547
00005e  d007              BEQ      |L9.112|
000060  1c64              ADDS     r4,r4,#1              ;2547
000062  b2e4              UXTB     r4,r4                 ;2545
000064  2c04              CMP      r4,#4                 ;2545
000066  d3f6              BCC      |L9.86|
                  |L9.104|
000068  2c04              CMP      r4,#4                 ;2554
00006a  d009              BEQ      |L9.128|
                  |L9.108|
00006c  2400              MOVS     r4,#0                 ;2560
00006e  e7d0              B        |L9.18|
                  |L9.112|
000070  00e0              LSLS     r0,r4,#3              ;2549
000072  1b00              SUBS     r0,r0,r4              ;2549
000074  1940              ADDS     r0,r0,r5              ;2549
000076  2207              MOVS     r2,#7                 ;2549
000078  4631              MOV      r1,r6                 ;2549
00007a  f7fffffe          BL       Knl_MemCpy
00007e  e7f3              B        |L9.104|
                  |L9.128|
000080  2407              MOVS     r4,#7                 ;2556
000082  e7c6              B        |L9.18|
;;;2581   
                          ENDP

                  |L9.132|
                          DCD      ||.data||
                  |L9.136|
                          DCD      ||.bss||+0x420

                          AREA ||i.HCLL_LE_Clear_White_List||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Clear_White_List PROC
;;;2485   
;;;2486   void HCLL_LE_Clear_White_List(MBLK *pMBlk)                //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;2487   {
;;;2488       MBLK *mblk;
;;;2489       Uint8 status, i;
;;;2490   
;;;2491       InterruptDisable();
000002  b672              CPSID    i
;;;2492       i = LL_Msg_AdvScnConn;
000004  480e              LDR      r0,|L10.64|
000006  7a40              LDRB     r0,[r0,#9]  ; LL_Msg_AdvScnConn
;;;2493       InterruptEnable();
000008  b662              CPSIE    i
;;;2494       if((i & (LL_MSG_ADVSCNCONN_ADV_CONT|LL_MSG_ADVSCNCONN_SCN_CONT)) == 0)
00000a  0680              LSLS     r0,r0,#26
00000c  0f80              LSRS     r0,r0,#30
00000e  d00b              BEQ      |L10.40|
;;;2495       {
;;;2496           for(i=0; i<SIZE_WHITE_LIST_ENTRIES; i++)
;;;2497           {
;;;2498               LL_WhiteList_Para[i].LE_WhiteList_Para.AddrType = DEF_EMPTY_WHITE_LIST;
;;;2499           }
;;;2500           status = HCI_ERR_CODE_SUCCESS;
;;;2501       }
;;;2502       else
;;;2503       {
;;;2504           status = HCI_ERR_CODE_COMMAND_DISALLOWED;
000010  240c              MOVS     r4,#0xc
                  |L10.18|
;;;2505       }
;;;2506       mblk = GetMsgBlk();
000012  f7fffffe          BL       GetMsgBlk
;;;2507       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000016  2161              MOVS     r1,#0x61
000018  7101              STRB     r1,[r0,#4]
;;;2508   #ifdef _HCI_HW_
;;;2509       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2510       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Clear_White_List_Para.HCI_Ocf;
;;;2511       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Clear_White_List_Para.HCI_Ogf;
;;;2512   #else
;;;2513       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_CLEAR_WHITE_LIST;
00001a  21d2              MOVS     r1,#0xd2
00001c  7281              STRB     r1,[r0,#0xa]
;;;2514   #endif
;;;2515       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = status;
00001e  72c4              STRB     r4,[r0,#0xb]
;;;2516   #ifdef _HCI_NEW_
;;;2517       SndMsgBlk(mblk, Q_2HCI);
000020  2104              MOVS     r1,#4
000022  f7fffffe          BL       SndMsgBlk
;;;2518   #endif
;;;2519   }
000026  bd10              POP      {r4,pc}
                  |L10.40|
000028  2000              MOVS     r0,#0                 ;2496
00002a  4a06              LDR      r2,|L10.68|
00002c  21fc              MOVS     r1,#0xfc              ;2498
                  |L10.46|
00002e  00c3              LSLS     r3,r0,#3              ;2498
000030  1a1b              SUBS     r3,r3,r0              ;2498
000032  1c40              ADDS     r0,r0,#1              ;2498
000034  b2c0              UXTB     r0,r0                 ;2496
000036  54d1              STRB     r1,[r2,r3]            ;2498
000038  2804              CMP      r0,#4                 ;2496
00003a  d3f8              BCC      |L10.46|
00003c  2400              MOVS     r4,#0                 ;2500
00003e  e7e8              B        |L10.18|
;;;2520   
                          ENDP

                  |L10.64|
                          DCD      ||.data||
                  |L10.68|
                          DCD      ||.bss||+0x420

                          AREA ||i.HCLL_LE_Conn_update||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Conn_update PROC
;;;2632   
;;;2633   void HCLL_LE_Conn_update(MBLK *pMBlk)                     //OGF: LE Controller, 0x08
000000  b5fe              PUSH     {r1-r7,lr}
;;;2634   {
000002  4604              MOV      r4,r0
;;;2635       Uint8 i, j;
;;;2636       Uint16 i16, j16;
;;;2637       LL_Conn *pLL_Conn;
;;;2638       MBLK *mblk;
;;;2639   
;;;2640   //#ifdef _HCI_HW_
;;;2641       i16 = pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMin;
000004  8946              LDRH     r6,[r0,#0xa]
;;;2642       j16 = pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax;
000006  8980              LDRH     r0,[r0,#0xc]
;;;2643       if(i16 != j16)
000008  4286              CMP      r6,r0
00000a  d005              BEQ      |L11.24|
;;;2644       {
;;;2645           i16 = ((i16+j16)>>1)|0x01;
00000c  1830              ADDS     r0,r6,r0
00000e  0846              LSRS     r6,r0,#1
000010  2001              MOVS     r0,#1
000012  4306              ORRS     r6,r6,r0
;;;2646           pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMin = i16;
000014  8166              STRH     r6,[r4,#0xa]
;;;2647           pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax = i16;
000016  81a6              STRH     r6,[r4,#0xc]
                  |L11.24|
;;;2648       }
;;;2649       mblk = GetMsgBlk();
000018  f7fffffe          BL       GetMsgBlk
00001c  4605              MOV      r5,r0
;;;2650       Knl_MemCpy((Uint8 *)&mblk->Para.HCLL_LE_Ctrl_Pkt_Conn_Update_Para.HCI_CtrlPkt_Interval, (Uint8 *)&pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax, 6);
00001e  4621              MOV      r1,r4
000020  310c              ADDS     r1,r1,#0xc
000022  3010              ADDS     r0,r0,#0x10
000024  2206              MOVS     r2,#6
000026  9100              STR      r1,[sp,#0]
000028  9002              STR      r0,[sp,#8]
00002a  f7fffffe          BL       Knl_MemCpy
;;;2651   
;;;2652   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;2653       pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax = (pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax*10);   //transfer to 125us
00002e  89a0              LDRH     r0,[r4,#0xc]
000030  210a              MOVS     r1,#0xa
000032  4348              MULS     r0,r1,r0
000034  81a0              STRH     r0,[r4,#0xc]
;;;2654       pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_SvisionTimeout = (pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_SvisionTimeout<<3);     //transfer to 1.25ms
000036  8a20              LDRH     r0,[r4,#0x10]
;;;2655   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;2656       pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax = (pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax<<3);
;;;2657       pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_SvisionTimeout = (pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_SvisionTimeout<<3);
;;;2658   #endif  //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;2659       i = pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_Conn_Hdl_L;
;;;2660       pLL_Conn = &LL_Conn_Para[i];      //in Conn_update
000038  4923              LDR      r1,|L11.200|
00003a  00c0              LSLS     r0,r0,#3              ;2654
00003c  8220              STRH     r0,[r4,#0x10]         ;2654
00003e  7a27              LDRB     r7,[r4,#8]            ;2659
000040  2088              MOVS     r0,#0x88
000042  4378              MULS     r0,r7,r0
000044  1844              ADDS     r4,r0,r1
;;;2661   #ifdef _HCI_HW_
;;;2662       LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_Ocf, pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_Ogf);
;;;2663   #else
;;;2664       LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, HCLL_LE_CONN_UPDATE);
000046  21d5              MOVS     r1,#0xd5
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       LL_Msg_Event_Status
;;;2665   #endif
;;;2666       if(Knl_MemComp((Uint8 *)&pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd, (Uint8 *)&pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax, 6) == SUCCESS_)     //update to LL_Conn_Para[]: Conn_Int_Upd, Conn_Latency_Upd, SupervisionTO_Upd
00004e  4620              MOV      r0,r4
000050  3026              ADDS     r0,r0,#0x26
000052  2206              MOVS     r2,#6
000054  9900              LDR      r1,[sp,#0]
000056  9001              STR      r0,[sp,#4]
000058  f7fffffe          BL       Knl_MemComp
00005c  2800              CMP      r0,#0
00005e  d02b              BEQ      |L11.184|
;;;2667       {
;;;2668           mblk->Primitive = MLL_HCI_NULL;
;;;2669           SndMsgBlk(mblk, Q_2LL);
;;;2670           return;
;;;2671       }
;;;2672   //    mblk->Para.HCLL_LE_Ctrl_Pkt_Conn_Update_Para.HCI_CtrlPkt_WinOffset = (pLL_Conn->LE_Conn_Para.LL_ConnIntervalOrg-1);
;;;2673       for(j=0; j<7; j++)
;;;2674       {
;;;2675           if(LL_RF_PARA_TX_WIN_SIZE_MAP[j] > i16)
000060  491a              LDR      r1,|L11.204|
000062  2000              MOVS     r0,#0                 ;2673
                  |L11.100|
000064  0042              LSLS     r2,r0,#1
000066  5a8a              LDRH     r2,[r1,r2]
000068  42b2              CMP      r2,r6
00006a  d803              BHI      |L11.116|
00006c  1c40              ADDS     r0,r0,#1
00006e  b2c0              UXTB     r0,r0                 ;2673
000070  2807              CMP      r0,#7                 ;2673
000072  d3f7              BCC      |L11.100|
                  |L11.116|
000074  1c40              ADDS     r0,r0,#1              ;2673
;;;2676           {
;;;2677               break;
;;;2678           }
;;;2679       }
;;;2680       mblk->Para.HCLL_LE_Ctrl_Pkt_Conn_Update_Para.HCI_CtrlPkt_WinSize = j+1;
000076  7368              STRB     r0,[r5,#0xd]
;;;2681   
;;;2682       mblk->Para.HCLL_LE_Ctrl_Pkt_Conn_Update_Para.HCI_CtrlPkt_Instant = (pLL_Conn->LE_Conn_Para.LL_EventCounter+(MAX_NUM_CONN_HDL+3));
000078  8b60              LDRH     r0,[r4,#0x1a]
;;;2683   
;;;2684       LL_Msg_CTRL_PKT(&mblk->Para.HCLL_LE_Ctrl_Pkt_Conn_Update_Para.HCI_CtrlPkt_WinSize, LL_CONN_UPDATE_REQ, 11, i);
00007a  463b              MOV      r3,r7
00007c  3008              ADDS     r0,r0,#8              ;2682
00007e  82e8              STRH     r0,[r5,#0x16]         ;2682
000080  4628              MOV      r0,r5
000082  220b              MOVS     r2,#0xb
000084  2100              MOVS     r1,#0
000086  300d              ADDS     r0,r0,#0xd
000088  f7fffffe          BL       LL_Msg_CTRL_PKT
;;;2685       mblk->Primitive = MHC_EVENT_LE_CONN_UPDATE_COMPLETE;
00008c  206c              MOVS     r0,#0x6c
00008e  7128              STRB     r0,[r5,#4]
;;;2686       Knl_MemCpy_Fwd(&mblk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_ConnIntervalL, (Uint8 *)&mblk->Para.HCLL_LE_Ctrl_Pkt_Conn_Update_Para.HCI_CtrlPkt_Interval, 6);
000090  4628              MOV      r0,r5
000092  2206              MOVS     r2,#6
000094  300c              ADDS     r0,r0,#0xc
000096  9902              LDR      r1,[sp,#8]
000098  f7fffffe          BL       Knl_MemCpy_Fwd
;;;2687       mblk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Conn_Hdl_L = i;
;;;2688       mblk_LL_conn_Para[i] = mblk;
00009c  490c              LDR      r1,|L11.208|
00009e  72ef              STRB     r7,[r5,#0xb]          ;2687
0000a0  00b8              LSLS     r0,r7,#2
0000a2  500d              STR      r5,[r1,r0]
;;;2689       pLL_Conn->LE_Conn_Para.LL_EventCounterUpd = (pLL_Conn->LE_Conn_Para.LL_EventCounter+(MAX_NUM_CONN_HDL+3));
0000a4  8b60              LDRH     r0,[r4,#0x1a]
;;;2690       pLL_Conn->LE_Conn_Para.LL_ConnIntervalOrgUpd = i16;
;;;2691       Knl_MemCpy((Uint8 *)&pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd, (Uint8 *)&pMBlk->Para.HCLL_LE_Conn_Update_Para.HCI_ConnIntervalMax, 6);
0000a6  2206              MOVS     r2,#6
0000a8  3008              ADDS     r0,r0,#8              ;2689
0000aa  85a0              STRH     r0,[r4,#0x2c]         ;2689
0000ac  8426              STRH     r6,[r4,#0x20]         ;2690
0000ae  9900              LDR      r1,[sp,#0]
0000b0  9801              LDR      r0,[sp,#4]
0000b2  f7fffffe          BL       Knl_MemCpy
;;;2692   }
0000b6  bdfe              POP      {r1-r7,pc}
                  |L11.184|
0000b8  20b0              MOVS     r0,#0xb0              ;2668
0000ba  7128              STRB     r0,[r5,#4]            ;2668
0000bc  2100              MOVS     r1,#0                 ;2669
0000be  4628              MOV      r0,r5                 ;2669
0000c0  f7fffffe          BL       SndMsgBlk
0000c4  bdfe              POP      {r1-r7,pc}
;;;2693   
                          ENDP

0000c6  0000              DCW      0x0000
                  |L11.200|
                          DCD      ||.bss||+0xd0
                  |L11.204|
                          DCD      ||.constdata||+0x60
                  |L11.208|
                          DCD      ||.bss||+0x5c4

                          AREA ||i.HCLL_LE_Create_Conn||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Create_Conn PROC
;;;2181   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;2182   void HCLL_LE_Create_Conn(MBLK *pMBlk)                     //OGF: LE Controller, 0x08
000000  b5f8              PUSH     {r3-r7,lr}
;;;2183   {
000002  4606              MOV      r6,r0
;;;2184   #if MAX_NUM_CONN_MAS_HDL != 0
;;;2185       Uint8 i;
;;;2186       LL_Conn *pLL_conn;
;;;2187       MBLK *mblk;
;;;2188       Uint16 i16, j16;
;;;2189   
;;;2190       InterruptDisable();
000004  b672              CPSID    i
;;;2191       if((LL_Msg_AdvScnConnUpd & LL_MSG_ADVSCNCONN_INIT_EN))
000006  4857              LDR      r0,|L12.356|
000008  7a80              LDRB     r0,[r0,#0xa]  ; LL_Msg_AdvScnConnUpd
00000a  0740              LSLS     r0,r0,#29
;;;2192       {
;;;2193           InterruptEnable();
;;;2194           mblk = GetMsgBlk();
;;;2195           mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
;;;2196   #ifdef _HCI_HW_
;;;2197           mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2198           mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_Ocf;
;;;2199           mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_Ogf;
;;;2200   #else
;;;2201           mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_CREATE_CONN;
;;;2202   #endif
;;;2203           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_COMMAND_DISALLOWED;
;;;2204   #ifdef _HCI_NEW_
;;;2205           SndMsgBlk(mblk, Q_2HCI);
;;;2206   #endif
;;;2207           return;
;;;2208       }
;;;2209       else
;;;2210       {
;;;2211           InterruptEnable();
00000c  b662              CPSIE    i
00000e  d50b              BPL      |L12.40|
000010  f7fffffe          BL       GetMsgBlk
000014  2161              MOVS     r1,#0x61              ;2195
000016  7101              STRB     r1,[r0,#4]            ;2195
000018  21cf              MOVS     r1,#0xcf              ;2201
00001a  7281              STRB     r1,[r0,#0xa]          ;2201
00001c  210c              MOVS     r1,#0xc               ;2203
00001e  72c1              STRB     r1,[r0,#0xb]          ;2203
000020  2104              MOVS     r1,#4                 ;2205
000022  f7fffffe          BL       SndMsgBlk
                  |L12.38|
;;;2212   #ifdef _HCI_HW_
;;;2213           LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_Ocf, pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_Ogf);
;;;2214   #else
;;;2215           LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, HCLL_LE_CREATE_CONN);
;;;2216   #endif
;;;2217       }
;;;2218       i = LL_GetMasterFreeConnID();
;;;2219       if(i==MAX_NUM_CONN_MAS_HDL)
;;;2220       {
;;;2221           return;
;;;2222       }
;;;2223       Knl_MemCpy((uint8_t *)&LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval, (uint8_t *)&pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_LE_Scan_Interval, (1*3+LEN_BD_ADDR+2*2));
;;;2224   
;;;2225       mblk = GetMsgBlk();
;;;2226       mblk->Primitive = MHC_EVENT_LE_CONN_COMPLETE;
;;;2227       mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
;;;2228       mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Role = HCI_ROLE_MASTER;
;;;2229       mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Master_Clk_Accuracy = LE_LL_SCA;
;;;2230       Knl_MemCpy(&mblk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddrType, &pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_PeerAddrType, (LEN_BD_ADDR+1));
;;;2231       mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_Hdl_L = i;
;;;2232       mblk_LL_conn_Para[i] = mblk;
;;;2233       LL_Init_Para.LE_Init_Para.LL_Conn_ID = i;
;;;2234       LL_Init_Para.LE_Init_Para.LL_AdvMap_ID = CH_ADV_CH_HOP_BY_MAP_TABLE[0x07][0];
;;;2235       pLL_conn = &LL_Conn_Para[i];        //in Create_Conn
;;;2236       pLL_conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_INIT;
;;;2237       pLL_conn->LE_Conn_Para.LL_AccessAddr = LL_REF_ACS_ADDR[(ble_device_param.ble_deviceAddr_param.addr[0]&0x03)];       //original: BD_Addr[];
;;;2238   
;;;2239       Knl_CodeCpy(pLL_conn->LE_Conn_Para.LL_CRC_Init, LL_REF_CRC_INI[i], LEN_CRC_INIT);
;;;2240       Knl_CodeCpy(pLL_conn->LE_Conn_Para.LL_RF_Data_Ch_ReM, LL_RF_DATA_CH, NUM_LL_DATA_CH);
;;;2241       Knl_MemCpy(pLL_conn->LE_Conn_Para.LL_ChMapReM, LL_Ref_ChMap, LEN_LL_CH_MAP);
;;;2242       i = PRIME_NUM[(i&0x07)];
;;;2243       pLL_conn->LE_Conn_Para.LL_HopIncrement = i;
;;;2244       pLL_conn->LE_Conn_Para.LL_CurrentCH = i;
;;;2245   
;;;2246       i16 = pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_ConnIntervalMin;
;;;2247       j16 = pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_ConnIntervalMax;
;;;2248       if(i16 == j16)
;;;2249       {
;;;2250           LL_Init_Para.LE_Init_Para.LL_ConnInterval = i16;
;;;2251       }
;;;2252       else
;;;2253       {
;;;2254           i16 = ((i16+j16)>>1)|0x01;
;;;2255           LL_Init_Para.LE_Init_Para.LL_ConnInterval = i16;
;;;2256       }
;;;2257       pLL_conn->LE_Conn_Para.LL_ConnIntervalOrg = i16;   //1.25ms base
;;;2258       pLL_conn->LE_Conn_Para.LL_SvToutAccu = i16<<2;     //(3)start accumulate SupervisionTO. It is 4*ConnInterval, Due to (10-4)=6 ConnInterval is SupervisionTO at connection established
;;;2259       i16 = i16*10;
;;;2260       pLL_conn->LE_Conn_Para.LL_ConnInterval = i16;      //(1)transfer to 125us base. 125us*10=1.25ms
;;;2261       pLL_conn->LE_Conn_Para.LL_SvisionTimeout = i16;    //(2)To reduce execute timing, LL_SvisionTimeout assign a same value. But it's meaning is 10*ConnInterval
;;;2262       for(i=0; i<7; i++)
;;;2263       {
;;;2264           if(LL_RF_PARA_TX_WIN_SIZE_MAP[i] > i16)
;;;2265           {
;;;2266               break;
;;;2267           }
;;;2268       }
;;;2269       pLL_conn->LE_Conn_Para.WinSize_DataHdr = i;
;;;2270       LL_Init_Para.LE_Init_Para.LL_ConnLatency = pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_ConnLatency;
;;;2271       pLL_conn->LE_Conn_Para.LL_ConnLatency = pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_ConnLatency;
;;;2272       //Temp add - yuwei/////////////////////////////////////
;;;2273       LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval = 4;
;;;2274       LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window = 4;
;;;2275       ///////////////////////////////////////////////////////
;;;2276       i16 = pMBlk->Para.HCLL_LE_Create_Conn_Para.HCI_SvisionTimeout;
;;;2277       LL_Init_Para.LE_Init_Para.LL_SvisionTimeout = i16;            //it is 10ms base
;;;2278       pLL_conn->LE_Conn_Para.LL_SvisionTimeoutUpd = (i16<<3);       //transfer to 1.25ms base & update to LL_Conn_Para[] LL_SvisionTimeoutUpd
;;;2279       Knl_MemCpy(&mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_IntervalL, (Uint8 *)&LL_Init_Para.LE_Init_Para.LL_ConnInterval, 6);
;;;2280       LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval = (LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval*5);
;;;2281       if(LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval==0)
;;;2282       {
;;;2283           LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval = 0xFFFF;
;;;2284       }
;;;2285       LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window = (LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window*5);
;;;2286       if(LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window==0)
;;;2287       {
;;;2288           LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window = 0xFFFF;
;;;2289       }
;;;2290       InterruptDisable();
;;;2291       LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_INIT_EN;
;;;2292       InterruptEnable();
;;;2293   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;2294   }
000026  bdf8              POP      {r3-r7,pc}
                  |L12.40|
000028  21cf              MOVS     r1,#0xcf              ;2215
00002a  2000              MOVS     r0,#0                 ;2215
00002c  f7fffffe          BL       LL_Msg_Event_Status
000030  f7fffffe          BL       LL_GetMasterFreeConnID
000034  4607              MOV      r7,r0                 ;2218
000036  2804              CMP      r0,#4                 ;2219
000038  d0f5              BEQ      |L12.38|
00003a  4c4b              LDR      r4,|L12.360|
00003c  4631              MOV      r1,r6                 ;2223
00003e  220d              MOVS     r2,#0xd               ;2223
000040  3108              ADDS     r1,r1,#8              ;2223
000042  1d20              ADDS     r0,r4,#4              ;2223
000044  f7fffffe          BL       Knl_MemCpy
000048  f7fffffe          BL       GetMsgBlk
00004c  4605              MOV      r5,r0                 ;2225
00004e  206a              MOVS     r0,#0x6a              ;2226
000050  7128              STRB     r0,[r5,#4]            ;2226
000052  2000              MOVS     r0,#0                 ;2227
000054  72a8              STRB     r0,[r5,#0xa]          ;2227
000056  7328              STRB     r0,[r5,#0xc]          ;2228
000058  76a8              STRB     r0,[r5,#0x1a]         ;2229
00005a  4631              MOV      r1,r6                 ;2230
00005c  4628              MOV      r0,r5                 ;2230
00005e  2207              MOVS     r2,#7                 ;2230
000060  310d              ADDS     r1,r1,#0xd            ;2230
000062  300d              ADDS     r0,r0,#0xd            ;2230
000064  f7fffffe          BL       Knl_MemCpy
000068  4940              LDR      r1,|L12.364|
00006a  72ef              STRB     r7,[r5,#0xb]          ;2231
00006c  00b8              LSLS     r0,r7,#2              ;2232
00006e  500d              STR      r5,[r1,r0]            ;2232
000070  7027              STRB     r7,[r4,#0]            ;2233
000072  2001              MOVS     r0,#1                 ;2234
000074  7060              STRB     r0,[r4,#1]            ;2234
000076  2088              MOVS     r0,#0x88              ;2235
000078  493d              LDR      r1,|L12.368|
00007a  4378              MULS     r0,r7,r0              ;2235
00007c  1844              ADDS     r4,r0,r1              ;2235
00007e  2003              MOVS     r0,#3                 ;2236
000080  7020              STRB     r0,[r4,#0]            ;2236
000082  483c              LDR      r0,|L12.372|
000084  493c              LDR      r1,|L12.376|
000086  7880              LDRB     r0,[r0,#2]            ;2237  ; ble_device_param
000088  2203              MOVS     r2,#3                 ;2239
00008a  0780              LSLS     r0,r0,#30             ;2237
00008c  0f00              LSRS     r0,r0,#28             ;2237
00008e  5808              LDR      r0,[r1,r0]            ;2237
000090  6060              STR      r0,[r4,#4]            ;2239
000092  0078              LSLS     r0,r7,#1              ;2239
000094  1838              ADDS     r0,r7,r0              ;2239
000096  3110              ADDS     r1,r1,#0x10           ;2239
000098  1841              ADDS     r1,r0,r1              ;2239
00009a  4620              MOV      r0,r4                 ;2239
00009c  3008              ADDS     r0,r0,#8              ;2239
00009e  f7fffffe          BL       Knl_CodeCpy
0000a2  4935              LDR      r1,|L12.376|
0000a4  4620              MOV      r0,r4                 ;2240
0000a6  2225              MOVS     r2,#0x25              ;2240
0000a8  314c              ADDS     r1,r1,#0x4c           ;2240
0000aa  302e              ADDS     r0,r0,#0x2e           ;2240
0000ac  f7fffffe          BL       Knl_CodeCpy
0000b0  492c              LDR      r1,|L12.356|
0000b2  4620              MOV      r0,r4                 ;2241
0000b4  2205              MOVS     r2,#5                 ;2241
0000b6  3140              ADDS     r1,r1,#0x40           ;2241
0000b8  3014              ADDS     r0,r0,#0x14           ;2241
0000ba  f7fffffe          BL       Knl_MemCpy
0000be  492e              LDR      r1,|L12.376|
0000c0  0778              LSLS     r0,r7,#29             ;2242
0000c2  0f40              LSRS     r0,r0,#29             ;2242
0000c4  390a              SUBS     r1,r1,#0xa            ;2242
0000c6  5c08              LDRB     r0,[r1,r0]            ;2242
0000c8  7660              STRB     r0,[r4,#0x19]         ;2243
0000ca  7720              STRB     r0,[r4,#0x1c]         ;2244
0000cc  8af0              LDRH     r0,[r6,#0x16]         ;2246
0000ce  8b31              LDRH     r1,[r6,#0x18]         ;2247
0000d0  4288              CMP      r0,r1                 ;2248
0000d2  d003              BEQ      |L12.220|
0000d4  1840              ADDS     r0,r0,r1              ;2254
0000d6  0840              LSRS     r0,r0,#1              ;2254
0000d8  2101              MOVS     r1,#1                 ;2254
0000da  4308              ORRS     r0,r0,r1              ;2254
                  |L12.220|
0000dc  4922              LDR      r1,|L12.360|
0000de  0082              LSLS     r2,r0,#2              ;2258
0000e0  82c8              STRH     r0,[r1,#0x16]         ;2250
0000e2  83e0              STRH     r0,[r4,#0x1e]         ;2257
0000e4  2184              MOVS     r1,#0x84              ;2258
0000e6  530a              STRH     r2,[r1,r4]            ;2258
0000e8  210a              MOVS     r1,#0xa               ;2259
0000ea  4348              MULS     r0,r1,r0              ;2259
0000ec  b281              UXTH     r1,r0                 ;2259
0000ee  4a22              LDR      r2,|L12.376|
0000f0  81e1              STRH     r1,[r4,#0xe]          ;2260
0000f2  2000              MOVS     r0,#0                 ;2262
0000f4  8261              STRH     r1,[r4,#0x12]         ;2261
0000f6  321c              ADDS     r2,r2,#0x1c           ;2264
                  |L12.248|
0000f8  0043              LSLS     r3,r0,#1              ;2264
0000fa  5ad3              LDRH     r3,[r2,r3]            ;2264
0000fc  428b              CMP      r3,r1                 ;2264
0000fe  d803              BHI      |L12.264|
000100  1c40              ADDS     r0,r0,#1              ;2264
000102  b2c0              UXTB     r0,r0                 ;2262
000104  2807              CMP      r0,#7                 ;2262
000106  d3f7              BCC      |L12.248|
                  |L12.264|
000108  4f17              LDR      r7,|L12.360|
00010a  72e0              STRB     r0,[r4,#0xb]          ;2269
00010c  8b70              LDRH     r0,[r6,#0x1a]         ;2270
00010e  8338              STRH     r0,[r7,#0x18]         ;2270
000110  8b70              LDRH     r0,[r6,#0x1a]         ;2271
000112  8220              STRH     r0,[r4,#0x10]         ;2271
000114  2004              MOVS     r0,#4                 ;2273
000116  80b8              STRH     r0,[r7,#4]            ;2273
000118  80f8              STRH     r0,[r7,#6]            ;2274
00011a  8bb0              LDRH     r0,[r6,#0x1c]         ;2276
00011c  8378              STRH     r0,[r7,#0x1a]         ;2277
00011e  00c0              LSLS     r0,r0,#3              ;2278
000120  8560              STRH     r0,[r4,#0x2a]         ;2278
000122  4639              MOV      r1,r7                 ;2279
000124  4628              MOV      r0,r5                 ;2279
000126  2206              MOVS     r2,#6                 ;2279
000128  3116              ADDS     r1,r1,#0x16           ;2279
00012a  3014              ADDS     r0,r0,#0x14           ;2279
00012c  f7fffffe          BL       Knl_MemCpy
000130  88b8              LDRH     r0,[r7,#4]            ;2280  ; LL_Init_Para
000132  0081              LSLS     r1,r0,#2              ;2280
000134  1840              ADDS     r0,r0,r1              ;2280
000136  0400              LSLS     r0,r0,#16             ;2280
000138  0c00              LSRS     r0,r0,#16             ;2280
00013a  4910              LDR      r1,|L12.380|
00013c  80b8              STRH     r0,[r7,#4]            ;2280
00013e  d100              BNE      |L12.322|
000140  80b9              STRH     r1,[r7,#4]            ;2283
                  |L12.322|
000142  88f8              LDRH     r0,[r7,#6]            ;2285  ; LL_Init_Para
000144  0082              LSLS     r2,r0,#2              ;2285
000146  1880              ADDS     r0,r0,r2              ;2285
000148  0400              LSLS     r0,r0,#16             ;2285
00014a  0c00              LSRS     r0,r0,#16             ;2285
00014c  80f8              STRH     r0,[r7,#6]            ;2285
00014e  d100              BNE      |L12.338|
000150  80f9              STRH     r1,[r7,#6]            ;2288
                  |L12.338|
000152  b672              CPSID    i                     ;2290
000154  4a03              LDR      r2,|L12.356|
000156  2004              MOVS     r0,#4                 ;2291
000158  7a91              LDRB     r1,[r2,#0xa]          ;2291  ; LL_Msg_AdvScnConnUpd
00015a  4301              ORRS     r1,r1,r0              ;2291
00015c  7291              STRB     r1,[r2,#0xa]          ;2291
00015e  b662              CPSIE    i                     ;2292
000160  bdf8              POP      {r3-r7,pc}
;;;2295   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
                          ENDP

000162  0000              DCW      0x0000
                  |L12.356|
                          DCD      ||.data||
                  |L12.360|
                          DCD      ||.bss||+0x404
                  |L12.364|
                          DCD      ||.bss||+0x5c4
                  |L12.368|
                          DCD      ||.bss||+0xd0
                  |L12.372|
                          DCD      ble_device_param
                  |L12.376|
                          DCD      ||.constdata||+0x44
                  |L12.380|
                          DCD      0x0000ffff

                          AREA ||i.HCLL_LE_Create_conn_cancel||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Create_conn_cancel PROC
;;;2424   
;;;2425   void HCLL_LE_Create_conn_cancel(MBLK *pMBlk)              //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2426   {
;;;2427   #if MAX_NUM_CONN_MAS_HDL != 0
;;;2428       Uint8 i;
;;;2429       MBLK *mblk;
;;;2430   
;;;2431       if((LL_Msg_AdvScnConnUpd & LL_MSG_ADVSCNCONN_INIT_EN))
000002  4d12              LDR      r5,|L13.76|
000004  7aa8              LDRB     r0,[r5,#0xa]  ; LL_Msg_AdvScnConnUpd
000006  0740              LSLS     r0,r0,#29
000008  d51e              BPL      |L13.72|
;;;2432       {
;;;2433           i = LL_Init_Para.LE_Init_Para.LL_Conn_ID;
00000a  4811              LDR      r0,|L13.80|
;;;2434           LL_Init_Para.LE_Init_Para.LL_Conn_ID = LL_CONN_ID_RSV;
00000c  21ff              MOVS     r1,#0xff
00000e  7804              LDRB     r4,[r0,#0]            ;2433  ; LL_Init_Para
000010  7001              STRB     r1,[r0,#0]
;;;2435           LL_ReleaseConnID(i);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       LL_ReleaseConnID
;;;2436           mblk = mblk_LL_conn_Para[i];
000018  4a0e              LDR      r2,|L13.84|
00001a  00a1              LSLS     r1,r4,#2
00001c  5850              LDR      r0,[r2,r1]
00001e  2400              MOVS     r4,#0
;;;2437           if(mblk!=(MBLK *)0)
000020  2800              CMP      r0,#0
000022  d001              BEQ      |L13.40|
;;;2438           {
;;;2439               mblk_LL_conn_Para[i] = (MBLK *)0;
000024  5054              STR      r4,[r2,r1]
000026  e001              B        |L13.44|
                  |L13.40|
;;;2440           }
;;;2441           else
;;;2442           {
;;;2443               mblk = GetMsgBlk();
000028  f7fffffe          BL       GetMsgBlk
                  |L13.44|
;;;2444           }
;;;2445           mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00002c  2161              MOVS     r1,#0x61
00002e  7101              STRB     r1,[r0,#4]
;;;2446   #ifdef _HCI_HW_
;;;2447           mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2448           mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Create_Conn_Cancel_Para.HCI_Ocf;
;;;2449           mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Create_Conn_Cancel_Para.HCI_Ogf;
;;;2450   #else
;;;2451           mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_CREATE_CONN_CANCEL;
000030  21d0              MOVS     r1,#0xd0
000032  7281              STRB     r1,[r0,#0xa]
;;;2452   #endif
;;;2453           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000034  72c4              STRB     r4,[r0,#0xb]
;;;2454   #ifdef _HCI_NEW_
;;;2455           SndMsgBlk(mblk, Q_2HCI);
000036  2104              MOVS     r1,#4
000038  f7fffffe          BL       SndMsgBlk
;;;2456   #endif
;;;2457           InterruptDisable();
00003c  b672              CPSID    i
;;;2458           LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_INIT_EN);
00003e  7aa8              LDRB     r0,[r5,#0xa]  ; LL_Msg_AdvScnConnUpd
000040  21fb              MOVS     r1,#0xfb
000042  4008              ANDS     r0,r0,r1
000044  72a8              STRB     r0,[r5,#0xa]
;;;2459           InterruptEnable();
000046  b662              CPSIE    i
                  |L13.72|
;;;2460       }
;;;2461   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;2462   }
000048  bd70              POP      {r4-r6,pc}
;;;2463   
                          ENDP

00004a  0000              DCW      0x0000
                  |L13.76|
                          DCD      ||.data||
                  |L13.80|
                          DCD      ||.bss||+0x404
                  |L13.84|
                          DCD      ||.bss||+0x5c4

                          AREA ||i.HCLL_LE_Ctrl_Pkt||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Ctrl_Pkt PROC
;;;3644   
;;;3645   void HCLL_LE_Ctrl_Pkt(MBLK *pMBlk)
000000  b570              PUSH     {r4-r6,lr}
;;;3646   {
000002  4605              MOV      r5,r0
;;;3647       MBLK *mblk;
;;;3648       MQUEUE *pqueue;
;;;3649       LL_Conn *pLL_Conn;
;;;3650       Uint8 i, connID;
;;;3651       extern MBLK *MBlk_Free;
;;;3652   
;;;3653       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
000008  4604              MOV      r4,r0
;;;3654       Knl_MemCpy(mblk->Para.Data, pMBlk->Para.Data, (pMBlk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL+SIZE_HCI_DATA_CONN_HDL+SIZE_HCI_DATA_PKT_LTH_BYTE));
00000a  7aa8              LDRB     r0,[r5,#0xa]
00000c  4629              MOV      r1,r5
00000e  1cc0              ADDS     r0,r0,#3
000010  b2c2              UXTB     r2,r0
000012  4620              MOV      r0,r4
000014  3108              ADDS     r1,r1,#8
000016  3008              ADDS     r0,r0,#8
000018  f7fffffe          BL       Knl_MemCpy
;;;3655       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = pMBlk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL;
00001c  7aa8              LDRB     r0,[r5,#0xa]
00001e  7260              STRB     r0,[r4,#9]
;;;3656   
;;;3657   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS
;;;3658       if(pMBlk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL<=LEN_LL_PATCH_MIC_FAIL_CONDITION)
000020  7aa8              LDRB     r0,[r5,#0xa]
000022  2100              MOVS     r1,#0
000024  2807              CMP      r0,#7
000026  d801              BHI      |L14.44|
;;;3659       {
;;;3660           mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Length_CCM = 0;
000028  2021              MOVS     r0,#0x21
00002a  5501              STRB     r1,[r0,r4]
                  |L14.44|
;;;3661       }
;;;3662   #endif
;;;3663       mblk->Primitive = MLL_LE_CTRL_PKT;
00002c  20ef              MOVS     r0,#0xef
00002e  7120              STRB     r0,[r4,#4]
;;;3664       i = pMBlk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode;
000030  7aea              LDRB     r2,[r5,#0xb]
;;;3665       connID = pMBlk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_Conn_Hdl_L;
000032  7a2b              LDRB     r3,[r5,#8]
;;;3666       pLL_Conn = &LL_Conn_Para[connID];
000034  2088              MOVS     r0,#0x88
000036  4d1d              LDR      r5,|L14.172|
000038  4358              MULS     r0,r3,r0
00003a  1940              ADDS     r0,r0,r5
;;;3667       if(i == LL_TERMINATE_IND)
00003c  2a02              CMP      r2,#2
00003e  d103              BNE      |L14.72|
;;;3668       {
;;;3669           pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_LL_TERM_IND;
000040  2542              MOVS     r5,#0x42
000042  7005              STRB     r5,[r0,#0]
000044  3080              ADDS     r0,r0,#0x80
;;;3670           pLL_Conn->LE_Conn_Para.LL_PrToutAccu = 0;
000046  80c1              STRH     r1,[r0,#6]
                  |L14.72|
;;;3671       }
;;;3672       if(LL_CheckConnExist(connID))
000048  4618              MOV      r0,r3
00004a  f7fffffe          BL       LL_CheckConnExist
00004e  2800              CMP      r0,#0
000050  d019              BEQ      |L14.134|
;;;3673       {
;;;3674           pqueue = &LL_ConnCtrlQ[connID];
000052  4917              LDR      r1,|L14.176|
000054  00d8              LSLS     r0,r3,#3
000056  1840              ADDS     r0,r0,r1
;;;3675           InterruptDisable();
000058  b672              CPSID    i
;;;3676           if (pqueue->QIn == (MBLK *)0)
00005a  6801              LDR      r1,[r0,#0]
00005c  2900              CMP      r1,#0
00005e  d00c              BEQ      |L14.122|
000060  1e92              SUBS     r2,r2,#2
;;;3677           {
;;;3678               pqueue->QOut = mblk;
;;;3679               pqueue->QIn = mblk;
;;;3680               InterruptEnable();
;;;3681           }
;;;3682           else
;;;3683           {
;;;3684               //InterruptEnable();
;;;3685               switch(i)
000062  0013              MOVS     r3,r2
000064  f7fffffe          BL       __ARM_common_switch8
000068  100b1010          DCB      0x10,0x0b,0x10,0x10
00006c  10102020          DCB      0x10,0x10,0x20,0x20
000070  20101020          DCB      0x20,0x10,0x10,0x20
000074  10202020          DCB      0x10,0x20,0x20,0x20
000078  1020              DCB      0x10,0x20
                  |L14.122|
00007a  6044              STR      r4,[r0,#4]            ;3680
00007c  e012              B        |L14.164|
;;;3686               {
;;;3687               case LL_TERMINATE_IND:
;;;3688                   //InterruptDisable();
;;;3689                   mblk->Next = pqueue->QOut;
00007e  6841              LDR      r1,[r0,#4]
;;;3690                   pqueue->QOut = mblk;
;;;3691                   InterruptEnable();
;;;3692                   break;
000080  6021              STR      r1,[r4,#0]
000082  e007              B        |L14.148|
                  |L14.132|
000084  b662              CPSIE    i                     ;3680
                  |L14.134|
;;;3693   
;;;3694               case LL_ENC_REQ:
;;;3695               case LL_ENC_RSP:
;;;3696               case LL_START_ENC_REQ:
;;;3697               case LL_START_ENC_RSP:
;;;3698               case LL_PAUSE_ENC_REQ:
;;;3699               case LL_PAUSE_ENC_RSP:
;;;3700               case LL_REJECT_IND:
;;;3701               case LL_REJECT_IND_EXT:
;;;3702                   if(pqueue->QOut->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode >= mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode)
;;;3703                   {
;;;3704                       //InterruptDisable();
;;;3705                       mblk->Next = pqueue->QOut;
;;;3706                       pqueue->QOut = mblk;
;;;3707                   }
;;;3708                   else
;;;3709                   {
;;;3710                       //InterruptDisable();
;;;3711                       if (pqueue->QOut == pqueue->QIn)
;;;3712                       {
;;;3713                           pqueue->QIn = mblk;
;;;3714                       }
;;;3715                       mblk->Next = (pqueue->QOut)->Next;
;;;3716                       (pqueue->QOut)->Next = mblk;
;;;3717                   }
;;;3718                   InterruptEnable();
;;;3719                   break;
;;;3720   
;;;3721               default:
;;;3722                   //InterruptDisable();
;;;3723                   (pqueue->QIn)->Next = mblk;
;;;3724                   pqueue->QIn = mblk;
;;;3725                   InterruptEnable();
;;;3726                   break;
;;;3727               }
;;;3728           }
;;;3729       }
;;;3730   }
000086  bd70              POP      {r4-r6,pc}
000088  6842              LDR      r2,[r0,#4]            ;3702
00008a  7ae5              LDRB     r5,[r4,#0xb]          ;3702
00008c  7ad3              LDRB     r3,[r2,#0xb]          ;3702
00008e  42ab              CMP      r3,r5                 ;3702
000090  d302              BCC      |L14.152|
000092  6022              STR      r2,[r4,#0]            ;3705
                  |L14.148|
000094  6044              STR      r4,[r0,#4]            ;3706
000096  e7f5              B        |L14.132|
                  |L14.152|
000098  428a              CMP      r2,r1                 ;3711
00009a  d100              BNE      |L14.158|
00009c  6004              STR      r4,[r0,#0]            ;3713
                  |L14.158|
00009e  6811              LDR      r1,[r2,#0]            ;3715
0000a0  6021              STR      r1,[r4,#0]            ;3716
0000a2  6840              LDR      r0,[r0,#4]            ;3716
                  |L14.164|
0000a4  6004              STR      r4,[r0,#0]            ;3724
0000a6  e7ed              B        |L14.132|
0000a8  600c              STR      r4,[r1,#0]            ;3726
0000aa  e7fb              B        |L14.164|
;;;3731   
                          ENDP

                  |L14.172|
                          DCD      ||.bss||+0xd0
                  |L14.176|
                          DCD      ||.bss||+0x3a0

                          AREA ||i.HCLL_LE_Encrypt||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Encrypt PROC
;;;2795   
;;;2796   void HCLL_LE_Encrypt(MBLK *pMBlk)                         //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2797   {
000002  4605              MOV      r5,r0
;;;2798       MBLK *mblk;
;;;2799   
;;;2800       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
000008  4604              MOV      r4,r0
;;;2801       mblk->Primitive = LLEC_LE_ENCRYPT;
00000a  2051              MOVS     r0,#0x51
00000c  7120              STRB     r0,[r4,#4]
;;;2802       Knl_MemCpy(mblk->Para.Data, pMBlk->Para.Data, (LEN_AES_KEY+LEN_AES_KEY+SIZE_HCLL_HCI_HW_OPCODE));
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  2220              MOVS     r2,#0x20
000014  3108              ADDS     r1,r1,#8
000016  3008              ADDS     r0,r0,#8
000018  f7fffffe          BL       Knl_MemCpy
;;;2803       SndMsgBlkEC(mblk);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SndMsgBlkEC
;;;2804   }
000022  bd70              POP      {r4-r6,pc}
;;;2805   
                          ENDP


                          AREA ||i.HCLL_LE_Long_term_key_req_neg_reply||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Long_term_key_req_neg_reply PROC
;;;2839   
;;;2840   void HCLL_LE_Long_term_key_req_neg_reply(MBLK *pMBlk)     //OGF: LE Controller, 0x08
000000  b5f8              PUSH     {r3-r7,lr}
;;;2841   {
;;;2842       Uint8 i;
;;;2843       Uint8 *p;
;;;2844       MBLK *mblk;
;;;2845       LL_Conn *pLL_Conn;
;;;2846   
;;;2847       i = pMBlk->Para.HCLL_LE_Long_Term_key_Req_Neg_Reply_Para.HCI_Conn_Hdl_L;
000002  7a06              LDRB     r6,[r0,#8]
;;;2848       pLL_Conn = &LL_Conn_Para[i];
000004  2088              MOVS     r0,#0x88
000006  4914              LDR      r1,|L16.88|
000008  4370              MULS     r0,r6,r0
00000a  1845              ADDS     r5,r0,r1
;;;2849       pLL_Conn->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_OFF;
00000c  2700              MOVS     r7,#0
00000e  2053              MOVS     r0,#0x53
000010  5547              STRB     r7,[r0,r5]
;;;2850       pLL_Conn->LE_Conn_Para.LL_SMP_DataCh = LL_SMP_DATA_CH_R_T_NORMAL;
000012  2075              MOVS     r0,#0x75
000014  5547              STRB     r7,[r0,r5]
;;;2851   
;;;2852       mblk = GetMsgBlk();
000016  f7fffffe          BL       GetMsgBlk
;;;2853       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00001a  2161              MOVS     r1,#0x61
00001c  7101              STRB     r1,[r0,#4]
;;;2854   #ifdef _HCI_HW_
;;;2855       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (1+2);
;;;2856       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Long_Term_key_Req_Neg_Reply_Para.HCI_Ocf;
;;;2857       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Long_Term_key_Req_Neg_Reply_Para.HCI_Ogf;
;;;2858   #else
;;;2859       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_LONG_TERM_KEY_REQ_NEG_REPLY;
00001e  21dd              MOVS     r1,#0xdd
000020  7281              STRB     r1,[r0,#0xa]
;;;2860   #endif
;;;2861       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000022  72c7              STRB     r7,[r0,#0xb]
;;;2862       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = i;
000024  7306              STRB     r6,[r0,#0xc]
;;;2863   #ifdef _HCI_HW_
;;;2864       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = LL_CONN_ID_HDL_H;
;;;2865       p = &mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3];
;;;2866   #else
;;;2867       p = &mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2];
;;;2868   #endif
;;;2869       if((pLL_Conn->LE_Conn_Para.LL_Feature&LL_FEATURE_EXTND_REJ_IND))
000026  7869              LDRB     r1,[r5,#1]
000028  4604              MOV      r4,r0                 ;2852
00002a  074a              LSLS     r2,r1,#29
00002c  300d              ADDS     r0,r0,#0xd            ;2867
;;;2870       {
;;;2871           *p = LL_ENC_REQ;
;;;2872           *(p+1) = HCI_ERR_CODE_PIN_OR_KEY_MISSING;
00002e  2106              MOVS     r1,#6
000030  2a00              CMP      r2,#0                 ;2869
000032  da06              BGE      |L16.66|
000034  2203              MOVS     r2,#3                 ;2871
000036  7002              STRB     r2,[r0,#0]            ;2871
000038  7041              STRB     r1,[r0,#1]
;;;2873           LL_Msg_CTRL_PKT(p, LL_REJECT_IND_EXT, 2, i);
00003a  2202              MOVS     r2,#2
00003c  4633              MOV      r3,r6
00003e  2111              MOVS     r1,#0x11
000040  e003              B        |L16.74|
                  |L16.66|
;;;2874       }
;;;2875       else
;;;2876       {
;;;2877           *p = HCI_ERR_CODE_PIN_OR_KEY_MISSING;
000042  7001              STRB     r1,[r0,#0]
;;;2878           LL_Msg_CTRL_PKT(p, LL_REJECT_IND, 1, i);
000044  4633              MOV      r3,r6
000046  2201              MOVS     r2,#1
000048  210d              MOVS     r1,#0xd
                  |L16.74|
00004a  f7fffffe          BL       LL_Msg_CTRL_PKT
;;;2879       }
;;;2880   #ifdef _HCI_NEW_
;;;2881       SndMsgBlk(mblk, Q_2HCI);
00004e  2104              MOVS     r1,#4
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       SndMsgBlk
;;;2882   #endif
;;;2883   }
000056  bdf8              POP      {r3-r7,pc}
;;;2884   
                          ENDP

                  |L16.88|
                          DCD      ||.bss||+0xd0

                          AREA ||i.HCLL_LE_Long_term_key_req_reply||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Long_term_key_req_reply PROC
;;;2828   
;;;2829   void HCLL_LE_Long_term_key_req_reply(MBLK *pMBlk)         //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2830   {
000002  4605              MOV      r5,r0
;;;2831       MBLK *mblk;
;;;2832   
;;;2833       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
000008  4604              MOV      r4,r0
;;;2834       mblk->Primitive = LLEC_LE_LONG_TERM_KEY_REQ_REPLY;
00000a  2054              MOVS     r0,#0x54
00000c  7120              STRB     r0,[r4,#4]
;;;2835       Knl_MemCpy(mblk->Para.Data, pMBlk->Para.Data, (SIZE_HCLL_HCI_HW_OPCODE+SIZE_HCI_CONN_HDL+LEN_AES_KEY));
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  2211              MOVS     r2,#0x11
000014  3108              ADDS     r1,r1,#8
000016  3008              ADDS     r0,r0,#8
000018  f7fffffe          BL       Knl_MemCpy
;;;2836       SndMsgBlkEC(mblk);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SndMsgBlkEC
;;;2837   }
000022  bd70              POP      {r4-r6,pc}
;;;2838   
                          ENDP


                          AREA ||i.HCLL_LE_Rand||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Rand PROC
;;;2806   
;;;2807   void HCLL_LE_Rand(MBLK *pMBlk)                            //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2808   {
000002  4605              MOV      r5,r0
;;;2809       MBLK *mblk;
;;;2810   
;;;2811       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
000008  4604              MOV      r4,r0
;;;2812       mblk->Primitive = LLEC_LE_RAND;
00000a  2052              MOVS     r0,#0x52
00000c  7120              STRB     r0,[r4,#4]
;;;2813       Knl_MemCpy(mblk->Para.Data, pMBlk->Para.Data, SIZE_HCLL_HCI_HW_OPCODE);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  2200              MOVS     r2,#0
000014  3108              ADDS     r1,r1,#8
000016  3008              ADDS     r0,r0,#8
000018  f7fffffe          BL       Knl_MemCpy
;;;2814       SndMsgBlkEC(mblk);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SndMsgBlkEC
;;;2815   }
000022  bd70              POP      {r4-r6,pc}
;;;2816   
                          ENDP


                          AREA ||i.HCLL_LE_Read_Adv_Ch_Tx_Pwr||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Read_Adv_Ch_Tx_Pwr PROC
;;;1786   
;;;1787   void HCLL_LE_Read_Adv_Ch_Tx_Pwr(MBLK *pMBlk)              //OGF: LE Controller, 0x08
000000  bf00              NOP      
;;;1788   {
;;;1789       __NOP();
;;;1790   }
000002  4770              BX       lr
;;;1791   
                          ENDP


                          AREA ||i.HCLL_LE_Read_Buffer_Size||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Read_Buffer_Size PROC
;;;1589   
;;;1590   void HCLL_LE_Read_Buffer_Size(MBLK *pMBlk)                //OGF: LE Controller, 0x08, LL__009
000000  b510              PUSH     {r4,lr}
;;;1591   {
;;;1592       MBLK *mblk;
;;;1593   
;;;1594       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
;;;1595       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000006  2161              MOVS     r1,#0x61
000008  7101              STRB     r1,[r0,#4]
;;;1596   #ifdef _HCI_HW_
;;;1597       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 4;
;;;1598       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Read_Buffer_Size_Para.HCI_Ocf;
;;;1599       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Read_Buffer_Size_Para.HCI_Ogf;
;;;1600   #else
;;;1601       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_READ_BUFFER_SIZE;
00000a  21c1              MOVS     r1,#0xc1
00000c  7281              STRB     r1,[r0,#0xa]
;;;1602   #endif
;;;1603       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00000e  2100              MOVS     r1,#0
000010  72c1              STRB     r1,[r0,#0xb]
;;;1604       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = MAX_MBLK_SIZE;
000012  222c              MOVS     r2,#0x2c
000014  7302              STRB     r2,[r0,#0xc]
;;;1605       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = 0x00;
000016  7341              STRB     r1,[r0,#0xd]
;;;1606       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] = 0x01;
000018  2101              MOVS     r1,#1
00001a  7381              STRB     r1,[r0,#0xe]
;;;1607   #ifdef _HCI_NEW_
;;;1608       SndMsgBlk(mblk, Q_2HCI);
00001c  2104              MOVS     r1,#4
00001e  f7fffffe          BL       SndMsgBlk
;;;1609   #endif
;;;1610   }
000022  bd10              POP      {r4,pc}
;;;1611   
                          ENDP


                          AREA ||i.HCLL_LE_Read_Local_Supported_Feat||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Read_Local_Supported_Feat PROC
;;;1612   
;;;1613   void HCLL_LE_Read_Local_Supported_Feat(MBLK *pMBlk)       //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;1614   {
;;;1615       MBLK *mblk;
;;;1616   
;;;1617       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
000006  4604              MOV      r4,r0
;;;1618       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000008  2061              MOVS     r0,#0x61
00000a  7120              STRB     r0,[r4,#4]
;;;1619   #ifdef _HCI_HW_
;;;1620       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1+sizeof(LL_FEATURE);
;;;1621       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Read_Local_Supported_Feat_Para.HCI_Ocf;
;;;1622       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Read_Local_Supported_Feat_Para.HCI_Ogf;
;;;1623   #else
;;;1624       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_READ_LOCAL_SUPPORTED_FEAT;
00000c  20c6              MOVS     r0,#0xc6
00000e  72a0              STRB     r0,[r4,#0xa]
;;;1625   #endif
;;;1626       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000010  2000              MOVS     r0,#0
000012  72e0              STRB     r0,[r4,#0xb]
;;;1627       Knl_CodeCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1], LL_FEATURE, sizeof(LL_FEATURE));
000014  4620              MOV      r0,r4
000016  2208              MOVS     r2,#8
000018  4909              LDR      r1,|L21.64|
00001a  300c              ADDS     r0,r0,#0xc
00001c  f7fffffe          BL       Knl_CodeCpy
;;;1628       if((ble_device_param.ble_deviceChipId&PHY_LIMIT_BY_IC_VERSION) == PHY_LIMIT_1M)
000020  4808              LDR      r0,|L21.68|
000022  7800              LDRB     r0,[r0,#0]  ; ble_device_param
000024  0640              LSLS     r0,r0,#25
000026  0f40              LSRS     r0,r0,#29
000028  2807              CMP      r0,#7
00002a  d103              BNE      |L21.52|
;;;1629       {
;;;1630           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] &= (~LL_FEATURE_LE_2M_PHY);
00002c  7b20              LDRB     r0,[r4,#0xc]
00002e  0840              LSRS     r0,r0,#1
000030  0040              LSLS     r0,r0,#1
000032  7320              STRB     r0,[r4,#0xc]
                  |L21.52|
;;;1631       }
;;;1632   #ifdef _HCI_NEW_
;;;1633       SndMsgBlk(mblk, Q_2HCI);
000034  2104              MOVS     r1,#4
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       SndMsgBlk
;;;1634   #endif
;;;1635   }
00003c  bd10              POP      {r4,pc}
;;;1636   
                          ENDP

00003e  0000              DCW      0x0000
                  |L21.64|
                          DCD      ||.constdata||+0x2a
                  |L21.68|
                          DCD      ble_device_param

                          AREA ||i.HCLL_LE_Read_Phy||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Read_Phy PROC
;;;2924   
;;;2925   void HCLL_LE_Read_Phy(MBLK *pMBlk)     //OGF: LE Controller, 0x08, Spec. 5.0
000000  b510              PUSH     {r4,lr}
;;;2926   {
000002  4604              MOV      r4,r0
;;;2927       Uint8 i;
;;;2928       MBLK *mblk;
;;;2929   
;;;2930       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
;;;2931       i = pMBlk->Para.HCLL_Le_Read_Phy_Para.HCI_Conn_Hdl_L;
000008  7a21              LDRB     r1,[r4,#8]
;;;2932       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00000a  2261              MOVS     r2,#0x61
00000c  7102              STRB     r2,[r0,#4]
;;;2933   #ifdef _HCI_HW_
;;;2934       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 5;
;;;2935       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Le_Read_Phy_Para.HCI_Ocf;
;;;2936       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Le_Read_Phy_Para.HCI_Ogf;
;;;2937   #else
;;;2938       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_READ_PHY;
00000e  22eb              MOVS     r2,#0xeb
000010  7282              STRB     r2,[r0,#0xa]
;;;2939   #endif
;;;2940       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000012  2200              MOVS     r2,#0
000014  72c2              STRB     r2,[r0,#0xb]
;;;2941       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = i;
000016  7301              STRB     r1,[r0,#0xc]
;;;2942   #ifdef _HCI_HW_
;;;2943       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = LL_CONN_ID_HDL_H;
;;;2944       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] = LL_Conn_Para[i].LE_Conn_Para.LL_Tx_PHYS;
;;;2945       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[4] = LL_Conn_Para[i].LE_Conn_Para.LL_Rx_PHYS;
;;;2946       if(mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] == LL_TX_PHYS_CODED_PHY)
;;;2947       {
;;;2948           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] = 0x03;
;;;2949       }
;;;2950       if(mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[4] == LL_RX_PHYS_CODED_PHY)
;;;2951       {
;;;2952           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[4] = 0x03;
;;;2953       }
;;;2954   #else
;;;2955       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = LL_Conn_Para[i].LE_Conn_Para.LL_Tx_PHYS;
000018  2288              MOVS     r2,#0x88
00001a  4351              MULS     r1,r2,r1
00001c  4a08              LDR      r2,|L22.64|
;;;2956       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] = LL_Conn_Para[i].LE_Conn_Para.LL_Rx_PHYS;
;;;2957       if(mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] == LL_TX_PHYS_CODED_PHY)
;;;2958       {
;;;2959           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = 0x03;
00001e  2303              MOVS     r3,#3
000020  1889              ADDS     r1,r1,r2              ;2955
000022  3160              ADDS     r1,r1,#0x60           ;2955
000024  7f4a              LDRB     r2,[r1,#0x1d]         ;2955
000026  7342              STRB     r2,[r0,#0xd]          ;2955
000028  7f89              LDRB     r1,[r1,#0x1e]         ;2956
00002a  7381              STRB     r1,[r0,#0xe]          ;2956
00002c  2a04              CMP      r2,#4                 ;2957
00002e  d100              BNE      |L22.50|
000030  7343              STRB     r3,[r0,#0xd]
                  |L22.50|
;;;2960       }
;;;2961       if(mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] == LL_RX_PHYS_CODED_PHY)
000032  2904              CMP      r1,#4
000034  d100              BNE      |L22.56|
;;;2962       {
;;;2963           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] = 0x03;
000036  7383              STRB     r3,[r0,#0xe]
                  |L22.56|
;;;2964       }
;;;2965   #endif
;;;2966   #ifdef _HCI_NEW_
;;;2967       SndMsgBlk(mblk, Q_2HCI);
000038  2104              MOVS     r1,#4
00003a  f7fffffe          BL       SndMsgBlk
;;;2968   #endif
;;;2969   }
00003e  bd10              POP      {r4,pc}
;;;2970   
                          ENDP

                  |L22.64|
                          DCD      ||.bss||+0xd0

                          AREA ||i.HCLL_LE_Read_Remote_Used_Feat||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Read_Remote_Used_Feat PROC
;;;2765   
;;;2766   void HCLL_LE_Read_Remote_Used_Feat(MBLK *pMBlk)           //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2767   {
;;;2768       Uint8 *pCtrlPkt_Data;
;;;2769   
;;;2770       pCtrlPkt_Data = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data;
000002  4604              MOV      r4,r0
000004  4605              MOV      r5,r0                 ;2767
000006  340c              ADDS     r4,r4,#0xc
;;;2771       Knl_CodeCpy(pCtrlPkt_Data, LL_FEATURE, sizeof(LL_FEATURE));
000008  2208              MOVS     r2,#8
00000a  490f              LDR      r1,|L23.72|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       Knl_CodeCpy
;;;2772       if((ble_device_param.ble_deviceChipId&PHY_LIMIT_BY_IC_VERSION) == PHY_LIMIT_1M)
000012  480e              LDR      r0,|L23.76|
000014  7800              LDRB     r0,[r0,#0]  ; ble_device_param
000016  0640              LSLS     r0,r0,#25
000018  0f40              LSRS     r0,r0,#29
00001a  2807              CMP      r0,#7
00001c  d103              BNE      |L23.38|
;;;2773       {
;;;2774           *(pCtrlPkt_Data+1) &= (~LL_FEATURE_LE_2M_PHY);
00001e  7860              LDRB     r0,[r4,#1]
000020  0840              LSRS     r0,r0,#1
000022  0040              LSLS     r0,r0,#1
000024  7060              STRB     r0,[r4,#1]
                  |L23.38|
;;;2775       }
;;;2776   #if MAX_NUM_CONN_MAS_HDL != 0
;;;2777       if(pMBlk->Para.HCLL_LE_Read_Remote_Used_Feat_Para.HCI_Conn_Hdl_L < MAX_NUM_CONN_MAS_HDL)
000026  7a2b              LDRB     r3,[r5,#8]
000028  2b04              CMP      r3,#4
00002a  d202              BCS      |L23.50|
;;;2778       {
;;;2779           LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_FEATURE_REQ, sizeof(LL_FEATURE), pMBlk->Para.HCLL_LE_Read_Remote_Used_Feat_Para.HCI_Conn_Hdl_L);
00002c  2208              MOVS     r2,#8
00002e  4611              MOV      r1,r2
000030  e001              B        |L23.54|
                  |L23.50|
;;;2780       }
;;;2781       else
;;;2782   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;2783       {
;;;2784   #if MAX_NUM_CONN_SLV_HDL != 0
;;;2785           LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_SLAVE_FEATURE_REQ, sizeof(LL_FEATURE), pMBlk->Para.HCLL_LE_Read_Remote_Used_Feat_Para.HCI_Conn_Hdl_L);
000032  2208              MOVS     r2,#8
000034  210e              MOVS     r1,#0xe
                  |L23.54|
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       LL_Msg_CTRL_PKT
;;;2786   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;2787       }
;;;2788   #ifdef _HCI_HW_
;;;2789       LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, pMBlk->Para.HCLL_LE_Read_Remote_Used_Feat_Para.HCI_Ocf, pMBlk->Para.HCLL_LE_Read_Remote_Used_Feat_Para.HCI_Ogf);
;;;2790   #else
;;;2791       LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, HCLL_LE_READ_REMOTE_USED_FEAT);
00003c  21d8              MOVS     r1,#0xd8
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       LL_Msg_Event_Status
;;;2792   #endif
;;;2793   }
000044  bd70              POP      {r4-r6,pc}
;;;2794   
                          ENDP

000046  0000              DCW      0x0000
                  |L23.72|
                          DCD      ||.constdata||+0x2a
                  |L23.76|
                          DCD      ble_device_param

                          AREA ||i.HCLL_LE_Read_White_List_Size||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Read_White_List_Size PROC
;;;2464   
;;;2465   void HCLL_LE_Read_White_List_Size(MBLK *pMBlk)            //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;2466   {
;;;2467       MBLK *mblk;
;;;2468   
;;;2469       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
;;;2470       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000006  2161              MOVS     r1,#0x61
000008  7101              STRB     r1,[r0,#4]
;;;2471   #ifdef _HCI_HW_
;;;2472       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 2;
;;;2473       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Read_White_List_Size_Para.HCI_Ocf;
;;;2474       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Read_White_List_Size_Para.HCI_Ogf;
;;;2475   #else
;;;2476       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_READ_WHITE_LIST_SIZE;
00000a  21d1              MOVS     r1,#0xd1
00000c  7281              STRB     r1,[r0,#0xa]
;;;2477   #endif
;;;2478       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00000e  2100              MOVS     r1,#0
000010  72c1              STRB     r1,[r0,#0xb]
;;;2479       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = SIZE_WHITE_LIST_ENTRIES;
000012  2104              MOVS     r1,#4
000014  7301              STRB     r1,[r0,#0xc]
;;;2480   #ifdef _HCI_NEW_
;;;2481       SndMsgBlk(mblk, Q_2HCI);
000016  f7fffffe          BL       SndMsgBlk
;;;2482   #endif
;;;2483   }
00001a  bd10              POP      {r4,pc}
;;;2484   
                          ENDP


                          AREA ||i.HCLL_LE_Read_ch_map||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Read_ch_map PROC
;;;2735   
;;;2736   void HCLL_LE_Read_ch_map(MBLK *pMBlk)                     //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2737   {
;;;2738       MBLK *mblk;
;;;2739       Uint8 i;
;;;2740   
;;;2741       i = pMBlk->Para.HCLL_LE_Read_Ch_map_Para.HCI_Conn_Hdl_L;
000002  7a05              LDRB     r5,[r0,#8]
;;;2742       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
000008  4604              MOV      r4,r0
;;;2743       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00000a  2061              MOVS     r0,#0x61
00000c  7120              STRB     r0,[r4,#4]
;;;2744   #ifdef _HCI_HW_
;;;2745       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 8;
;;;2746       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Read_Ch_map_Para.HCI_Ocf;
;;;2747       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Read_Ch_map_Para.HCI_Ogf;
;;;2748   #else
;;;2749       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_READ_CH_MAP;
00000e  20d7              MOVS     r0,#0xd7
000010  72a0              STRB     r0,[r4,#0xa]
;;;2750   #endif
;;;2751       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000012  2000              MOVS     r0,#0
000014  72e0              STRB     r0,[r4,#0xb]
;;;2752       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = i;
000016  7325              STRB     r5,[r4,#0xc]
;;;2753   #ifdef _HCI_HW_
;;;2754       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = LL_CONN_ID_HDL_H;
;;;2755       Knl_MemCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3], LL_Conn_Para[i].LE_Conn_Para.LL_ChMapReM, LEN_LL_CH_MAP);
;;;2756   #else
;;;2757       Knl_MemCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2], LL_Conn_Para[i].LE_Conn_Para.LL_ChMapReM, LEN_LL_CH_MAP);
000018  2088              MOVS     r0,#0x88
00001a  4345              MULS     r5,r0,r5
00001c  4806              LDR      r0,|L25.56|
00001e  2205              MOVS     r2,#5
000020  1829              ADDS     r1,r5,r0
000022  4620              MOV      r0,r4
000024  300d              ADDS     r0,r0,#0xd
000026  3114              ADDS     r1,r1,#0x14
000028  f7fffffe          BL       Knl_MemCpy
;;;2758   #endif
;;;2759   
;;;2760   #ifdef _HCI_NEW_
;;;2761       SndMsgBlk(mblk, Q_2HCI);
00002c  2104              MOVS     r1,#4
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SndMsgBlk
;;;2762   #endif
;;;2763   }
000034  bd70              POP      {r4-r6,pc}
;;;2764   
                          ENDP

000036  0000              DCW      0x0000
                  |L25.56|
                          DCD      ||.bss||+0xd0

                          AREA ||i.HCLL_LE_Read_supported_states||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Read_supported_states PROC
;;;2885   
;;;2886   void HCLL_LE_Read_supported_states(MBLK *pMBlk)           //OGF: LE Controller, 0x08
000000  4770              BX       lr
;;;2887   {
;;;2888       pMBlk = pMBlk;
;;;2889   }
;;;2890   
                          ENDP


                          AREA ||i.HCLL_LE_Receiver_test||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Receiver_test PROC
;;;2891   
;;;2892   void HCLL_LE_Receiver_test(MBLK *pMBlk)                   //OGF: LE Controller, 0x08
000000  4770              BX       lr
;;;2893   {
;;;2894       pMBlk = pMBlk;
;;;2895   }
;;;2896   
                          ENDP


                          AREA ||i.HCLL_LE_Remote_conn_param_req_neg_reply||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Remote_conn_param_req_neg_reply PROC
;;;2917   
;;;2918   void HCLL_LE_Remote_conn_param_req_neg_reply(MBLK *pMBlk) //OGF: LE Controller, 0x08, Spec. 4.1
000000  bf00              NOP      
;;;2919   {
;;;2920       //MBLK *mblk;
;;;2921       //mblk = pMBlk;
;;;2922       __NOP();
;;;2923   }
000002  4770              BX       lr
;;;2924   
                          ENDP


                          AREA ||i.HCLL_LE_Remote_conn_param_req_reply||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Remote_conn_param_req_reply PROC
;;;2909   
;;;2910   void HCLL_LE_Remote_conn_param_req_reply(MBLK *pMBlk)     //OGF: LE Controller, 0x08, Spec. 4.1
000000  bf00              NOP      
;;;2911   {
;;;2912       //MBLK *mblk;
;;;2913       //mblk = pMBlk;
;;;2914       __NOP();
;;;2915   }
000002  4770              BX       lr
;;;2916   
                          ENDP


                          AREA ||i.HCLL_LE_Rmv_Device_from_White_List||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Rmv_Device_from_White_List PROC
;;;2582   
;;;2583   void HCLL_LE_Rmv_Device_from_White_List(MBLK *pMBlk)      //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2584   {
;;;2585       MBLK *mblk;
;;;2586       Uint8 status, i;
;;;2587   
;;;2588       InterruptDisable();
000002  b672              CPSID    i
;;;2589       i = LL_Msg_AdvScnConn;
000004  4918              LDR      r1,|L30.104|
000006  7a49              LDRB     r1,[r1,#9]  ; LL_Msg_AdvScnConn
;;;2590       InterruptEnable();
000008  b662              CPSIE    i
;;;2591       if((i & (LL_MSG_ADVSCNCONN_ADV_CONT|LL_MSG_ADVSCNCONN_SCN_CONT)) == 0)
00000a  0689              LSLS     r1,r1,#26
00000c  0f89              LSRS     r1,r1,#30
00000e  d00b              BEQ      |L30.40|
;;;2592       {
;;;2593           for(status=0; status<SIZE_WHITE_LIST_ENTRIES; status++)
;;;2594           {
;;;2595               if(LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType != DEF_EMPTY_WHITE_LIST)
;;;2596               {
;;;2597                   if(Knl_MemComp(&LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType, &pMBlk->Para.HCLL_LE_Add_Device_To_White_List_Para.HCI_Addr_Type, LEN_LE_WHITELIST_PARA) == SUCCESS_)
;;;2598                   {
;;;2599                       LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType = DEF_EMPTY_WHITE_LIST;
;;;2600                       break;
;;;2601                   }
;;;2602               }
;;;2603           }
;;;2604           if(status == SIZE_WHITE_LIST_ENTRIES)
;;;2605           {
;;;2606               status = HCI_ERR_CODE_INVALID_HCI_COMMAND_PARAMETERS;
;;;2607           }
;;;2608           else
;;;2609           {
;;;2610               status = HCI_ERR_CODE_SUCCESS;
;;;2611           }
;;;2612       }
;;;2613       else
;;;2614       {
;;;2615           status = HCI_ERR_CODE_COMMAND_DISALLOWED;
000010  240c              MOVS     r4,#0xc
                  |L30.18|
;;;2616       }
;;;2617       mblk = GetMsgBlk();
000012  f7fffffe          BL       GetMsgBlk
;;;2618       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000016  2161              MOVS     r1,#0x61
000018  7101              STRB     r1,[r0,#4]
;;;2619   #ifdef _HCI_HW_
;;;2620       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2621       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Rmv_Device_From_White_List_Para.HCI_Ocf;
;;;2622       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Rmv_Device_From_White_List_Para.HCI_Ogf;
;;;2623   #else
;;;2624       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_RMV_DEVICE_FROM_WHITE_LIST;
00001a  21d4              MOVS     r1,#0xd4
00001c  7281              STRB     r1,[r0,#0xa]
;;;2625   #endif
;;;2626       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = status;
00001e  72c4              STRB     r4,[r0,#0xb]
;;;2627   #ifdef _HCI_NEW_
;;;2628       SndMsgBlk(mblk, Q_2HCI);
000020  2104              MOVS     r1,#4
000022  f7fffffe          BL       SndMsgBlk
;;;2629   #endif
;;;2630   }
000026  bd70              POP      {r4-r6,pc}
                  |L30.40|
000028  2400              MOVS     r4,#0                 ;2593
00002a  4d10              LDR      r5,|L30.108|
00002c  4606              MOV      r6,r0                 ;2595
00002e  3608              ADDS     r6,r6,#8              ;2595
                  |L30.48|
000030  00e0              LSLS     r0,r4,#3              ;2595
000032  1b02              SUBS     r2,r0,r4              ;2595
000034  5ca8              LDRB     r0,[r5,r2]            ;2595
000036  28fc              CMP      r0,#0xfc              ;2595
000038  d006              BEQ      |L30.72|
00003a  1950              ADDS     r0,r2,r5              ;2597
00003c  2207              MOVS     r2,#7                 ;2597
00003e  4631              MOV      r1,r6                 ;2597
000040  f7fffffe          BL       Knl_MemComp
000044  2800              CMP      r0,#0                 ;2597
000046  d007              BEQ      |L30.88|
                  |L30.72|
000048  1c64              ADDS     r4,r4,#1              ;2597
00004a  b2e4              UXTB     r4,r4                 ;2593
00004c  2c04              CMP      r4,#4                 ;2593
00004e  d3ef              BCC      |L30.48|
                  |L30.80|
000050  2c04              CMP      r4,#4                 ;2604
000052  d006              BEQ      |L30.98|
000054  2400              MOVS     r4,#0                 ;2610
000056  e7dc              B        |L30.18|
                  |L30.88|
000058  20fc              MOVS     r0,#0xfc              ;2599
00005a  00e1              LSLS     r1,r4,#3              ;2599
00005c  1b09              SUBS     r1,r1,r4              ;2599
00005e  5468              STRB     r0,[r5,r1]            ;2599
000060  e7f6              B        |L30.80|
                  |L30.98|
000062  2412              MOVS     r4,#0x12              ;2606
000064  e7d5              B        |L30.18|
;;;2631   
                          ENDP

000066  0000              DCW      0x0000
                  |L30.104|
                          DCD      ||.data||
                  |L30.108|
                          DCD      ||.bss||+0x420

                          AREA ||i.HCLL_LE_Set_Adv_Data||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Adv_Data PROC
;;;1792   
;;;1793   void HCLL_LE_Set_Adv_Data(MBLK *pMBlk)                    //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;1794   {
;;;1795       MBLK *mblk;
;;;1796       Uint8 i;
;;;1797   
;;;1798       if(LL_Msg_AdvScnConnUpdSts&LL_MSG_ADVSCNCONN_UPD_ADV_DATA)
000002  4c14              LDR      r4,|L31.84|
000004  4601              MOV      r1,r0                 ;1794
000006  7ae0              LDRB     r0,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
000008  0700              LSLS     r0,r0,#28
00000a  d501              BPL      |L31.16|
;;;1799       {
;;;1800           LL_Adv_Data_Buf = (Adv_Data_Buf *)&LL_Adv_Para.Adv_Para.LL_Adv_Data;
00000c  4812              LDR      r0,|L31.88|
00000e  e001              B        |L31.20|
                  |L31.16|
;;;1801       }
;;;1802       else
;;;1803       {
;;;1804           LL_Adv_Data_Buf = (Adv_Data_Buf *)&LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Data;
000010  4811              LDR      r0,|L31.88|
000012  305c              ADDS     r0,r0,#0x5c
                  |L31.20|
000014  301c              ADDS     r0,r0,#0x1c
;;;1805       }
;;;1806       i = pMBlk->Para.HCLL_LE_Set_Adv_Data_Para.HCI_Adv_Data_Length;
000016  6120              STR      r0,[r4,#0x10]  ; LL_Adv_Data_Buf
000018  7a0a              LDRB     r2,[r1,#8]
;;;1807       LL_Adv_Data_Buf->LL_Adv_Data_Length = i+LEN_BD_ADDR;
00001a  3109              ADDS     r1,r1,#9
00001c  1d93              ADDS     r3,r2,#6
00001e  77c3              STRB     r3,[r0,#0x1f]
;;;1808       Knl_MemCpy(LL_Adv_Data_Buf->LL_Adv_Data, pMBlk->Para.HCLL_LE_Set_Adv_Data_Para.HCI_Adv_Data, i);
000020  f7fffffe          BL       Knl_MemCpy
;;;1809   
;;;1810       mblk = GetMsgBlk();
000024  f7fffffe          BL       GetMsgBlk
;;;1811       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000028  2161              MOVS     r1,#0x61
00002a  7101              STRB     r1,[r0,#4]
;;;1812   #ifdef _HCI_HW_
;;;1813       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1814       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Adv_Data_Para.HCI_Ocf;
;;;1815       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Adv_Data_Para.HCI_Ogf;
;;;1816   #else
;;;1817       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_ADV_DATA;
00002c  21ca              MOVS     r1,#0xca
00002e  7281              STRB     r1,[r0,#0xa]
;;;1818   #endif
;;;1819       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000030  2100              MOVS     r1,#0
000032  72c1              STRB     r1,[r0,#0xb]
;;;1820   #ifdef _HCI_NEW_
;;;1821       SndMsgBlk(mblk, Q_2HCI);
000034  2104              MOVS     r1,#4
000036  f7fffffe          BL       SndMsgBlk
;;;1822   #endif
;;;1823       InterruptDisable();
00003a  b672              CPSID    i
;;;1824       if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_UPD_ADV_DATA))
00003c  7ae0              LDRB     r0,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
00003e  0700              LSLS     r0,r0,#28
;;;1825       {
;;;1826           LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_UPD_ADV_DATA);
;;;1827       }
;;;1828       else
;;;1829       {
;;;1830           LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_UPD_ADV_DATA;
000040  7aa0              LDRB     r0,[r4,#0xa]  ; LL_Msg_AdvScnConnUpd
000042  d502              BPL      |L31.74|
000044  21f7              MOVS     r1,#0xf7              ;1826
000046  4008              ANDS     r0,r0,r1              ;1826
000048  e001              B        |L31.78|
                  |L31.74|
00004a  2108              MOVS     r1,#8
00004c  4308              ORRS     r0,r0,r1
                  |L31.78|
00004e  72a0              STRB     r0,[r4,#0xa]
;;;1831       }
;;;1832       InterruptEnable();
000050  b662              CPSIE    i
;;;1833   }
000052  bd10              POP      {r4,pc}
;;;1834   
                          ENDP

                  |L31.84|
                          DCD      ||.data||
                  |L31.88|
                          DCD      ||.bss||

                          AREA ||i.HCLL_LE_Set_Adv_Param||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Adv_Param PROC
;;;1684   
;;;1685   void HCLL_LE_Set_Adv_Param(MBLK *pMBlk)                   //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;1686   {
;;;1687       MBLK    *mblk;
;;;1688       Uint8   i;
;;;1689       Uint8   eventRsp;
;;;1690   
;;;1691       if (LL_Msg_AdvScnConnUpd & LL_MSG_ADVSCNCONN_ADV_EN)
000002  4d23              LDR      r5,|L32.144|
000004  7aaa              LDRB     r2,[r5,#0xa]  ; LL_Msg_AdvScnConnUpd
000006  07d2              LSLS     r2,r2,#31
000008  d001              BEQ      |L32.14|
;;;1692       {
;;;1693           // Advertising mechanism is work in progress
;;;1694           eventRsp = HCI_ERR_CODE_COMMAND_DISALLOWED;
00000a  240c              MOVS     r4,#0xc
00000c  e034              B        |L32.120|
                  |L32.14|
;;;1695       }
;;;1696   #ifdef _HCI_HW_
;;;1697       else if((pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Type != HCI_ADV_TYPE_ADV_DIRECT_IND_HIGH) &&
;;;1698               ((pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Interval_Min < 0x0020) ||
;;;1699                (pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Interval_Min > 0x4000) ||
;;;1700                (pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Interval_Max < 0x0020) ||
;;;1701                (pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Interval_Max > 0x4000)))
;;;1702       {
;;;1703   
;;;1704           /* only check interval if not ADV_DIRECT_HDC */
;;;1705   
;;;1706           // Advertising interval is out of range
;;;1707           eventRsp = HCI_ERR_CODE_INVALID_HCI_COMMAND_PARAMETERS;
;;;1708       }
;;;1709   #endif
;;;1710       else
;;;1711       {
;;;1712           Knl_MemCpy((uint8_t *)&LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_MinI, (uint8_t *)&(pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Adv_Interval_Min), LEN_HCLL_LE_SET_ADV_PARAM_PARA);
00000e  4601              MOV      r1,r0
000010  4c20              LDR      r4,|L32.148|
000012  220f              MOVS     r2,#0xf
000014  3108              ADDS     r1,r1,#8
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       Knl_MemCpy
;;;1713   
;;;1714           i = LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Type;
00001c  7a20              LDRB     r0,[r4,#8]  ; LL_Adv_Para_UpdBuf
;;;1715   
;;;1716   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;1717           if(i != HCI_ADV_TYPE_ADV_DIRECT_IND_HIGH)
00001e  2801              CMP      r0,#1
000020  d003              BEQ      |L32.42|
;;;1718           {
;;;1719               LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_Min = (LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_MinI*5);
000022  88a1              LDRH     r1,[r4,#4]  ; LL_Adv_Para_UpdBuf
000024  008a              LSLS     r2,r1,#2
000026  1889              ADDS     r1,r1,r2
000028  e000              B        |L32.44|
                  |L32.42|
;;;1720           }
;;;1721           else
;;;1722           {
;;;1723               LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_Min = LL_INTERVAL_DIR_ADV_HIGHDUTY;
00002a  2133              MOVS     r1,#0x33
                  |L32.44|
;;;1724           }
;;;1725   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;1726           if(i != HCI_ADV_TYPE_ADV_DIRECT_IND_HIGH)
;;;1727           {
;;;1728               if(LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_Min>0x4000)
;;;1729               {
;;;1730                   LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_Min = 0x4000;
;;;1731               }
;;;1732               LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_Min = (LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_MinI<<2);
;;;1733           }
;;;1734           else
;;;1735           {
;;;1736               LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_Min = LL_INTERVAL_DIR_ADV_HIGHDUTY;
;;;1737           }
;;;1738   #endif  //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;1739   
;;;1740           i = TABLE_CONV_ADV_TYPE_HCI_LL[i];
00002c  6161              STR      r1,[r4,#0x14]  ; LL_Adv_Para_UpdBuf
00002e  491a              LDR      r1,|L32.152|
000030  5c08              LDRB     r0,[r1,r0]
;;;1741           if(i == LE_ADV_TYPE_ADV_DIRECT_IND)
000032  2801              CMP      r0,#1
000034  d103              BNE      |L32.62|
;;;1742           {
;;;1743               if(LL_Adv_Para_UpdBuf.Adv_Para.LL_DirectAddr_Type != HCI_ADDR_TYPE_PUBLIC)
000036  7aa1              LDRB     r1,[r4,#0xa]  ; LL_Adv_Para_UpdBuf
000038  2900              CMP      r1,#0
00003a  d000              BEQ      |L32.62|
;;;1744               {
;;;1745                   i |= FLD_MSK_LL_ADV_RXADDR_TYPE;
00003c  2081              MOVS     r0,#0x81
                  |L32.62|
;;;1746               }
;;;1747           }
;;;1748           if(LL_Adv_Para_UpdBuf.Adv_Para.LL_Own_Addr_Type != HCI_ADDR_TYPE_PUBLIC)
00003e  7a61              LDRB     r1,[r4,#9]  ; LL_Adv_Para_UpdBuf
000040  2900              CMP      r1,#0
000042  d001              BEQ      |L32.72|
;;;1749           {
;;;1750               i |= FLD_MSK_LL_ADV_TXADDR_TYPE;
000044  2140              MOVS     r1,#0x40
000046  4308              ORRS     r0,r0,r1
                  |L32.72|
;;;1751           }
;;;1752           LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Type = i;
000048  7220              STRB     r0,[r4,#8]
;;;1753   
;;;1754           Knl_CodeCpy(Ch_ADV_Ch_Hop_TableBuf, CH_ADV_CH_HOP_BY_MAP_TABLE[LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Channel_Map], 4);
00004a  7c60              LDRB     r0,[r4,#0x11]  ; LL_Adv_Para_UpdBuf
00004c  4912              LDR      r1,|L32.152|
00004e  0080              LSLS     r0,r0,#2
000050  31c4              ADDS     r1,r1,#0xc4
000052  1841              ADDS     r1,r0,r1
000054  480e              LDR      r0,|L32.144|
000056  2204              MOVS     r2,#4
000058  303c              ADDS     r0,r0,#0x3c
00005a  f7fffffe          BL       Knl_CodeCpy
;;;1755   
;;;1756           InterruptDisable();
00005e  b672              CPSID    i
;;;1757           if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_UPD_ADV_PARA))
000060  7ae8              LDRB     r0,[r5,#0xb]  ; LL_Msg_AdvScnConnUpdSts
000062  0680              LSLS     r0,r0,#26
;;;1758           {
;;;1759               LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_UPD_ADV_PARA);
;;;1760           }
;;;1761           else
;;;1762           {
;;;1763               LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_UPD_ADV_PARA;
000064  7aa8              LDRB     r0,[r5,#0xa]  ; LL_Msg_AdvScnConnUpd
000066  d502              BPL      |L32.110|
000068  21df              MOVS     r1,#0xdf              ;1759
00006a  4008              ANDS     r0,r0,r1              ;1759
00006c  e001              B        |L32.114|
                  |L32.110|
00006e  2120              MOVS     r1,#0x20
000070  4308              ORRS     r0,r0,r1
                  |L32.114|
000072  72a8              STRB     r0,[r5,#0xa]
;;;1764           }
;;;1765           InterruptEnable();
000074  b662              CPSIE    i
;;;1766           eventRsp = HCI_ERR_CODE_SUCCESS;
000076  2400              MOVS     r4,#0
                  |L32.120|
;;;1767       }
;;;1768   
;;;1769       // Send command complete event
;;;1770       mblk = GetMsgBlk();
000078  f7fffffe          BL       GetMsgBlk
;;;1771       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00007c  2161              MOVS     r1,#0x61
00007e  7101              STRB     r1,[r0,#4]
;;;1772   #ifdef _HCI_HW_
;;;1773       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1774       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Ocf;
;;;1775       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Adv_Param_Para.HCI_Ogf;
;;;1776       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = eventRsp;
;;;1777   #else
;;;1778       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_ADV_PARAM;
000080  21c8              MOVS     r1,#0xc8
000082  7281              STRB     r1,[r0,#0xa]
;;;1779       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = eventRsp;
000084  72c4              STRB     r4,[r0,#0xb]
;;;1780   #endif
;;;1781   #ifdef _HCI_NEW_
;;;1782       SndMsgBlk(mblk, Q_2HCI);
000086  2104              MOVS     r1,#4
000088  f7fffffe          BL       SndMsgBlk
;;;1783   #endif
;;;1784   }
00008c  bd70              POP      {r4-r6,pc}
;;;1785   
                          ENDP

00008e  0000              DCW      0x0000
                  |L32.144|
                          DCD      ||.data||
                  |L32.148|
                          DCD      ||.bss||+0x5c
                  |L32.152|
                          DCD      ||.constdata||+0x16

                          AREA ||i.HCLL_LE_Set_Advertise_Enable||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Advertise_Enable PROC
;;;1878   
;;;1879   void HCLL_LE_Set_Advertise_Enable(MBLK *pMBlk)            //OGF: LE Controller, 0x08
000000  b5f8              PUSH     {r3-r7,lr}
;;;1880   {
;;;1881       Uint8 i, id, advType;
;;;1882       MBLK *mblk;
;;;1883   
;;;1884       if((pMBlk->Para.HCLL_LE_Set_Advertise_Enable_Para.HCI_Adv_En & 0x01))     //ADV_enable
000002  7a00              LDRB     r0,[r0,#8]
;;;1885       {
;;;1886           i = HCI_ERR_CODE_SUCCESS;
;;;1887           InterruptDisable();
;;;1888           if((LL_Msg_AdvScnConnUpdSts ^ LL_MSG_ADVSCNCONN_ADV_EN)==0)
000004  4946              LDR      r1,|L33.288|
000006  07c5              LSLS     r5,r0,#31             ;1884
000008  7ac8              LDRB     r0,[r1,#0xb]
;;;1889           {
;;;1890               InterruptEnable();
;;;1891           }
;;;1892           else
;;;1893           {
;;;1894               InterruptEnable();
;;;1895               advType = (LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Type&FLD_MSK_LL_ADV_TYPE);   //Get ADV type
00000a  4a46              LDR      r2,|L33.292|
;;;1896               InterruptDisable();
;;;1897               id = LL_GetSlaveFreeConnID();                                  //Get Slave conn ID
;;;1898               InterruptEnable();
;;;1899               if(id==LL_CONN_ID_SLAVE_RSV)      //Previous Role is Slave
;;;1900               {
;;;1901                   switch(advType)
;;;1902                   {
;;;1903                   case LE_ADV_TYPE_ADV_DIRECT_IND:
;;;1904                   case LE_ADV_TYPE_ADV_IND:
;;;1905                       i = HCI_ERR_CODE_CONNECTION_REJECTED_DUE_TO_LIMITED_RESOURCES;
;;;1906                       break;
;;;1907   
;;;1908                   default:
;;;1909                       break;
;;;1910                   }
;;;1911               }
;;;1912               if(i== HCI_ERR_CODE_SUCCESS)
;;;1913               {
;;;1914   #ifdef _HCI_HW_
;;;1915                   if ((LL_Adv_Para_UpdBuf.Adv_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_RANDOM) ||
;;;1916                           (LL_Adv_Para_UpdBuf.Adv_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_RESOLVABLE_PRIVATE_RANDOM))
;;;1917                   {
;;;1918                       //Uint8   idx;
;;;1919   
;;;1920                       // Check if the random address is initialized or not
;;;1921                       i = HCI_ERR_CODE_INVALID_HCI_COMMAND_PARAMETERS;
;;;1922                       if(Knl_CodeComp(BD_Rand_AddrBuf, TAB_ZERO_128, LEN_BD_ADDR))
;;;1923                       {
;;;1924                           i = HCI_ERR_CODE_SUCCESS;
;;;1925                       }
;;;1926                   }
;;;1927                   else
;;;1928                       i = HCI_ERR_CODE_SUCCESS;
;;;1929   
;;;1930                   if (i == HCI_ERR_CODE_SUCCESS)
;;;1931   #else   //(#ifdef _HCI_HW_)
;;;1932                   //if((LL_Msg_AdvScnConn & (LL_MSG_ADVSCNCONN_ADV_CONT|LL_MSG_ADVSCNCONN_ADV_EN))==0)
;;;1933   #endif  //(#ifdef _HCI_HW_)
;;;1934                   {
;;;1935                       LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvMap_ID = Ch_ADV_Ch_Hop_TableBuf[0];
;;;1936                       LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Interval_Max = 0;
;;;1937                       if(mblk_LL_conn_Para[id]==(MBLK *)0)
00000c  4b46              LDR      r3,|L33.296|
00000e  d05c              BEQ      |L33.202|
000010  2500              MOVS     r5,#0                 ;1886
000012  b672              CPSID    i                     ;1887
000014  2801              CMP      r0,#1                 ;1888
000016  b662              CPSIE    i                     ;1894
000018  d02c              BEQ      |L33.116|
00001a  4842              LDR      r0,|L33.292|
00001c  7a00              LDRB     r0,[r0,#8]            ;1895  ; LL_Adv_Para_UpdBuf
00001e  0707              LSLS     r7,r0,#28             ;1895
000020  0f3f              LSRS     r7,r7,#28             ;1895
000022  b672              CPSID    i                     ;1896
000024  f7fffffe          BL       LL_GetSlaveFreeConnID
000028  4606              MOV      r6,r0                 ;1897
00002a  b662              CPSIE    i                     ;1898
00002c  2805              CMP      r0,#5                 ;1899
00002e  d103              BNE      |L33.56|
000030  2f00              CMP      r7,#0                 ;1901
000032  d00f              BEQ      |L33.84|
000034  2f01              CMP      r7,#1                 ;1901
000036  d00d              BEQ      |L33.84|
                  |L33.56|
000038  4839              LDR      r0,|L33.288|
00003a  303c              ADDS     r0,r0,#0x3c           ;1935
00003c  7801              LDRB     r1,[r0,#0]            ;1935  ; Ch_ADV_Ch_Hop_TableBuf
00003e  4839              LDR      r0,|L33.292|
000040  7001              STRB     r1,[r0,#0]            ;1935
000042  2100              MOVS     r1,#0                 ;1936
000044  6181              STR      r1,[r0,#0x18]  ; LL_Adv_Para_UpdBuf
000046  00b0              LSLS     r0,r6,#2
000048  4937              LDR      r1,|L33.296|
00004a  9000              STR      r0,[sp,#0]
00004c  5808              LDR      r0,[r1,r0]
00004e  2800              CMP      r0,#0
000050  d002              BEQ      |L33.88|
000052  e004              B        |L33.94|
                  |L33.84|
000054  250d              MOVS     r5,#0xd               ;1905
000056  e00d              B        |L33.116|
                  |L33.88|
;;;1938                       {
;;;1939                           mblk = GetMsgBlk();
000058  f7fffffe          BL       GetMsgBlk
00005c  4604              MOV      r4,r0
                  |L33.94|
;;;1940                       }
;;;1941                       switch(advType)
00005e  2f00              CMP      r7,#0
000060  d021              BEQ      |L33.166|
000062  2f01              CMP      r7,#1
000064  d00a              BEQ      |L33.124|
;;;1942                       {
;;;1943                       case LE_ADV_TYPE_ADV_DIRECT_IND:
;;;1944                           if(LL_Adv_Para_UpdBuf.Adv_Para.LL_DirectAddr_Type)
;;;1945                           {
;;;1946                               i = HCI_ADDR_TYPE_RANDOM;
;;;1947                           }
;;;1948                           else
;;;1949                           {
;;;1950                               i = HCI_ADDR_TYPE_PUBLIC;
;;;1951                           }
;;;1952                           mblk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddrType = i;
;;;1953                           mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Status = HCI_ERR_CODE_DIRECTED_ADVERTISING_TIMEOUT;
;;;1954                           Knl_MemCpy(mblk->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr, LL_Adv_Para_UpdBuf.Adv_Para.LL_DirectAddr, LEN_BD_ADDR);
;;;1955                           Knl_CodeCpy(&mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_IntervalL, TAB_ZERO_128, 6);
;;;1956                       case LE_ADV_TYPE_ADV_IND:
;;;1957                           mblk->Primitive = MHC_EVENT_LE_CONN_COMPLETE;
;;;1958                           mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_Hdl_L = id;
;;;1959                           mblk->Para.MHC_Le_Conn_Complete_Para.HCI_Role = HCI_ROLE_SLAVE;
;;;1960                           mblk_LL_conn_Para[id] = mblk;
;;;1961                           LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvConn_ID = id;
;;;1962                           break;
;;;1963   
;;;1964                       default:
;;;1965                           mblk->Primitive = MLL_HCI_NULL;
000066  20b0              MOVS     r0,#0xb0
000068  7120              STRB     r0,[r4,#4]
;;;1966                           SndMsgBlk(mblk, Q_2LL);
00006a  2100              MOVS     r1,#0
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       SndMsgBlk
                  |L33.114|
;;;1967                           break;
;;;1968                       }
;;;1969                       i = HCI_ERR_CODE_SUCCESS;
000072  2500              MOVS     r5,#0
                  |L33.116|
;;;1970                   }
;;;1971               }
;;;1972           }
;;;1973           InterruptDisable();
000074  b672              CPSID    i
;;;1974   
;;;1975           if(i==HCI_ERR_CODE_SUCCESS)
000076  2d00              CMP      r5,#0
000078  d020              BEQ      |L33.188|
00007a  e024              B        |L33.198|
                  |L33.124|
00007c  4829              LDR      r0,|L33.292|
00007e  7a80              LDRB     r0,[r0,#0xa]          ;1944  ; LL_Adv_Para_UpdBuf
000080  2800              CMP      r0,#0                 ;1944
000082  d000              BEQ      |L33.134|
000084  2501              MOVS     r5,#1                 ;1946
                  |L33.134|
000086  7365              STRB     r5,[r4,#0xd]          ;1952
000088  203c              MOVS     r0,#0x3c              ;1953
00008a  72a0              STRB     r0,[r4,#0xa]          ;1953
00008c  4925              LDR      r1,|L33.292|
00008e  4620              MOV      r0,r4                 ;1954
000090  2206              MOVS     r2,#6                 ;1954
000092  310b              ADDS     r1,r1,#0xb            ;1954
000094  300e              ADDS     r0,r0,#0xe            ;1954
000096  f7fffffe          BL       Knl_MemCpy
00009a  4620              MOV      r0,r4                 ;1955
00009c  2206              MOVS     r2,#6                 ;1955
00009e  4923              LDR      r1,|L33.300|
0000a0  3014              ADDS     r0,r0,#0x14           ;1955
0000a2  f7fffffe          BL       Knl_CodeCpy
                  |L33.166|
0000a6  206a              MOVS     r0,#0x6a              ;1957
0000a8  7120              STRB     r0,[r4,#4]            ;1957
0000aa  72e6              STRB     r6,[r4,#0xb]          ;1958
0000ac  2001              MOVS     r0,#1                 ;1959
0000ae  7320              STRB     r0,[r4,#0xc]          ;1959
0000b0  491d              LDR      r1,|L33.296|
0000b2  9800              LDR      r0,[sp,#0]            ;1960
0000b4  500c              STR      r4,[r1,r0]            ;1960
0000b6  481b              LDR      r0,|L33.292|
0000b8  7046              STRB     r6,[r0,#1]            ;1961
0000ba  e7da              B        |L33.114|
                  |L33.188|
;;;1976           {
;;;1977               LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_ADV_EN;
0000bc  4818              LDR      r0,|L33.288|
0000be  2201              MOVS     r2,#1
0000c0  7a81              LDRB     r1,[r0,#0xa]  ; LL_Msg_AdvScnConnUpd
0000c2  4311              ORRS     r1,r1,r2
0000c4  7281              STRB     r1,[r0,#0xa]
                  |L33.198|
;;;1978           }
;;;1979           InterruptEnable();
0000c6  b662              CPSIE    i
0000c8  e01f              B        |L33.266|
                  |L33.202|
;;;1980       }
;;;1981       else     //ADV disable
;;;1982       {
;;;1983           InterruptDisable();
0000ca  b672              CPSID    i
;;;1984           LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_ADV_EN);
0000cc  7a8c              LDRB     r4,[r1,#0xa]  ; LL_Msg_AdvScnConnUpd
0000ce  0864              LSRS     r4,r4,#1
0000d0  0064              LSLS     r4,r4,#1
0000d2  728c              STRB     r4,[r1,#0xa]
;;;1985           i = LL_Msg_AdvScnConnUpdSts;
;;;1986           InterruptEnable();
0000d4  b662              CPSIE    i
;;;1987           if((i&LL_MSG_ADVSCNCONN_ADV_EN)==0)
0000d6  07c0              LSLS     r0,r0,#31
0000d8  d116              BNE      |L33.264|
;;;1988           {
;;;1989               id = LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvConn_ID;
0000da  7850              LDRB     r0,[r2,#1]  ; LL_Adv_Para_UpdBuf
;;;1990               if(LL_Conn_Para[id].LE_Conn_Para.LL_Conn_ID != LL_CONN_ID_ADV)
0000dc  4a11              LDR      r2,|L33.292|
0000de  2188              MOVS     r1,#0x88
0000e0  4341              MULS     r1,r0,r1
0000e2  3274              ADDS     r2,r2,#0x74
0000e4  5c54              LDRB     r4,[r2,r1]
0000e6  2c02              CMP      r4,#2
0000e8  d00e              BEQ      |L33.264|
;;;1991               {
;;;1992                   if(id < LL_CONN_ID_SLAVE_RSV)
0000ea  2805              CMP      r0,#5
0000ec  d20c              BCS      |L33.264|
;;;1993                   {
;;;1994                       LL_Conn_Para[id].LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_STBY;
0000ee  2401              MOVS     r4,#1
0000f0  5454              STRB     r4,[r2,r1]
;;;1995   
;;;1996                       mblk = mblk_LL_conn_Para[id];
0000f2  0081              LSLS     r1,r0,#2
0000f4  5858              LDR      r0,[r3,r1]
;;;1997                       if(mblk!=(MBLK *)0)
0000f6  2800              CMP      r0,#0
0000f8  d006              BEQ      |L33.264|
;;;1998                       {
;;;1999                           mblk->Primitive = MLL_HCI_NULL;
0000fa  22b0              MOVS     r2,#0xb0
0000fc  7102              STRB     r2,[r0,#4]
;;;2000                           mblk_LL_conn_Para[id] = (MBLK *)0;
0000fe  2200              MOVS     r2,#0
000100  505a              STR      r2,[r3,r1]
;;;2001                           SndMsgBlk(mblk, Q_2LL);
000102  4611              MOV      r1,r2
000104  f7fffffe          BL       SndMsgBlk
                  |L33.264|
;;;2002                       }
;;;2003                   }
;;;2004               }
;;;2005           }
;;;2006           i = HCI_ERR_CODE_SUCCESS;
000108  2500              MOVS     r5,#0
                  |L33.266|
;;;2007       }
;;;2008       mblk = GetMsgBlk();
00010a  f7fffffe          BL       GetMsgBlk
;;;2009       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00010e  2161              MOVS     r1,#0x61
000110  7101              STRB     r1,[r0,#4]
;;;2010   #ifdef _HCI_HW_
;;;2011       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2012       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Advertise_Enable_Para.HCI_Ocf;
;;;2013       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Advertise_Enable_Para.HCI_Ogf;
;;;2014   #else
;;;2015       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_ADVERTISE_ENABLE;
000112  21cc              MOVS     r1,#0xcc
000114  7281              STRB     r1,[r0,#0xa]
;;;2016   #endif
;;;2017       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = i;
000116  72c5              STRB     r5,[r0,#0xb]
;;;2018   #ifdef _HCI_NEW_
;;;2019       SndMsgBlk(mblk, Q_2HCI);
000118  2104              MOVS     r1,#4
00011a  f7fffffe          BL       SndMsgBlk
;;;2020   #endif
;;;2021   #ifdef _DEBUG_MSG_USER_
;;;2022       if((pMBlk->Para.HCLL_LE_Set_Advertise_Enable_Para.HCI_Adv_En & 0x01))
;;;2023       {
;;;2024           printf("Adv. starts\n");
;;;2025       }
;;;2026       else
;;;2027       {
;;;2028           printf("Adv. stopped\n");
;;;2029       }
;;;2030   #endif  //(#ifdef _DEBUG_MSG_USER_)
;;;2031   }
00011e  bdf8              POP      {r3-r7,pc}
;;;2032   
                          ENDP

                  |L33.288|
                          DCD      ||.data||
                  |L33.292|
                          DCD      ||.bss||+0x5c
                  |L33.296|
                          DCD      ||.bss||+0x5c4
                  |L33.300|
                          DCD      ||.constdata||+0x1c6

                          AREA ||i.HCLL_LE_Set_Data_Length||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Data_Length PROC
;;;3111   
;;;3112   void HCLL_LE_Set_Data_Length(MBLK *pMBlk)
000000  b570              PUSH     {r4-r6,lr}
;;;3113   {
000002  4604              MOV      r4,r0
;;;3114       Uint8 i;
;;;3115       MBLK *mblk;
;;;3116   
;;;3117       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
;;;3118       i = pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_Conn_Hdl_L;
000008  7a25              LDRB     r5,[r4,#8]
;;;3119       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00000a  2161              MOVS     r1,#0x61
00000c  7101              STRB     r1,[r0,#4]
;;;3120   #ifdef _HCI_HW_
;;;3121       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 3;
;;;3122       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_Ocf;
;;;3123       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_Ogf;
;;;3124   #else
;;;3125       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_DATA_LENGTH;
00000e  21ee              MOVS     r1,#0xee
000010  7281              STRB     r1,[r0,#0xa]
;;;3126   #endif
;;;3127       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000012  2100              MOVS     r1,#0
000014  72c1              STRB     r1,[r0,#0xb]
;;;3128       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = i;
000016  7305              STRB     r5,[r0,#0xc]
;;;3129   #ifdef _HCI_HW_
;;;3130       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = LL_CONN_ID_HDL_H;
;;;3131   #endif
;;;3132   #ifdef _HCI_NEW_
;;;3133       SndMsgBlk(mblk, Q_2HCI);
000018  2104              MOVS     r1,#4
00001a  f7fffffe          BL       SndMsgBlk
;;;3134   #endif
;;;3135       if(pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxOctets0 > LEN_CONN_DATA_DEFAULT)
00001e  89a0              LDRH     r0,[r4,#0xc]
000020  28fb              CMP      r0,#0xfb
000022  d901              BLS      |L34.40|
;;;3136       {
;;;3137           pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxOctets0 = LEN_CONN_DATA_DEFAULT;
000024  20fb              MOVS     r0,#0xfb
000026  81a0              STRH     r0,[r4,#0xc]
                  |L34.40|
;;;3138       }
;;;3139       if(pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxTime > ((LEN_CONN_DATA_DEFAULT+LEN_CONN_PKT_EXCEPT_DATA_W_CCM)*8))
000028  89e1              LDRH     r1,[r4,#0xe]
00002a  4811              LDR      r0,|L34.112|
00002c  4281              CMP      r1,r0
00002e  d900              BLS      |L34.50|
;;;3140       {
;;;3141           pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxTime = ((LEN_CONN_DATA_DEFAULT+LEN_CONN_PKT_EXCEPT_DATA_W_CCM)*8);
000030  81e0              STRH     r0,[r4,#0xe]
                  |L34.50|
;;;3142       }
;;;3143       if(pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_TxOctets0 > LEN_CONN_DATA_DEFAULT)
000032  8a21              LDRH     r1,[r4,#0x10]
000034  29fb              CMP      r1,#0xfb
000036  d906              BLS      |L34.70|
;;;3144       {
;;;3145           //pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_TxOctets0 = LEN_CONN_DATA_DEFAULT;
;;;3146           pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_TxOctets0 = LL_Conn_Para[i].LE_Conn_Para.LL_Tx_length_2M;
000038  2188              MOVS     r1,#0x88
00003a  4a0e              LDR      r2,|L34.116|
00003c  4369              MULS     r1,r5,r1
00003e  1889              ADDS     r1,r1,r2
000040  3180              ADDS     r1,r1,#0x80
000042  7889              LDRB     r1,[r1,#2]
000044  8221              STRH     r1,[r4,#0x10]
                  |L34.70|
;;;3147       }
;;;3148       if(pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_TxTime > ((LEN_CONN_DATA_DEFAULT+LEN_CONN_PKT_EXCEPT_DATA_W_CCM)*8))
000046  8a61              LDRH     r1,[r4,#0x12]
000048  4281              CMP      r1,r0
00004a  d900              BLS      |L34.78|
;;;3149       {
;;;3150           pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_TxTime = ((LEN_CONN_DATA_DEFAULT+LEN_CONN_PKT_EXCEPT_DATA_W_CCM)*8);
00004c  8260              STRH     r0,[r4,#0x12]
                  |L34.78|
;;;3151       }
;;;3152   
;;;3153       Knl_MemCpy((Uint8 *)LL_Length_Prefer[i], (Uint8 *)&pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxOctets0, sizeof(LL_LENGTH));
00004e  490a              LDR      r1,|L34.120|
000050  00e8              LSLS     r0,r5,#3
000052  1840              ADDS     r0,r0,r1
000054  4621              MOV      r1,r4
000056  310c              ADDS     r1,r1,#0xc
000058  2208              MOVS     r2,#8
00005a  460c              MOV      r4,r1
00005c  f7fffffe          BL       Knl_MemCpy
;;;3154       LL_Msg_CTRL_PKT((Uint8 *)&pMBlk->Para.HCLL_LE_Set_Data_Length_Para.HCI_RxOctets0, LL_LENGTH_REQ, sizeof(LL_LENGTH), i);
000060  462b              MOV      r3,r5
000062  2208              MOVS     r2,#8
000064  2114              MOVS     r1,#0x14
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       LL_Msg_CTRL_PKT
;;;3155   }
00006c  bd70              POP      {r4-r6,pc}
;;;3156   
                          ENDP

00006e  0000              DCW      0x0000
                  |L34.112|
                          DCD      0x00000848
                  |L34.116|
                          DCD      ||.bss||+0xd0
                  |L34.120|
                          DCD      ||.bss||+0x5d8

                          AREA ||i.HCLL_LE_Set_Default_Phy||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Default_Phy PROC
;;;2971   
;;;2972   void HCLL_LE_Set_Default_Phy(MBLK *pMBlk)     //OGF: LE Controller, 0x08, Spec. 5.0
000000  b570              PUSH     {r4-r6,lr}
;;;2973   {
000002  4604              MOV      r4,r0
;;;2974       MBLK *mblk;
;;;2975   
;;;2976       /* Get PHY From Command */
;;;2977       /* Currently, THIS COMMAND DOES NOT REALLY CHANGE DEFAULT PHY!!! */
;;;2978       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
;;;2979   
;;;2980       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000008  2161              MOVS     r1,#0x61
00000a  7101              STRB     r1,[r0,#4]
;;;2981   #ifdef _HCI_HW_
;;;2982       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2983       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_Ocf;
;;;2984       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_Ogf;
;;;2985   #else
;;;2986       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_DEFAULT_PHY;
00000c  21ec              MOVS     r1,#0xec
00000e  7281              STRB     r1,[r0,#0xa]
;;;2987   #endif
;;;2988       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000010  2100              MOVS     r1,#0
000012  72c1              STRB     r1,[r0,#0xb]
;;;2989   
;;;2990       if((pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_TxPhys&LL_RX_PHYS_TX_NO_SUPPORT)||(pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_RxPhys&LL_RX_PHYS_TX_NO_SUPPORT))
000014  7a61              LDRB     r1,[r4,#9]
;;;2991       {
;;;2992           mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE;
000016  2511              MOVS     r5,#0x11
000018  088a              LSRS     r2,r1,#2              ;2990
00001a  2a00              CMP      r2,#0                 ;2990
00001c  d10d              BNE      |L35.58|
00001e  7aa2              LDRB     r2,[r4,#0xa]          ;2990
000020  0893              LSRS     r3,r2,#2              ;2990
000022  d10a              BNE      |L35.58|
;;;2993       }
;;;2994       else
;;;2995       {
;;;2996           switch(pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_AllPhys)
000024  7a23              LDRB     r3,[r4,#8]
;;;2997           {
;;;2998           case LL_ALL_PHYS_PREFER_TX_Y_RX_Y:
;;;2999               if(pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_TxPhys != pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_RxPhys)
;;;3000               {
;;;3001                   mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE;
;;;3002               }
;;;3003               else
;;;3004               {
;;;3005                   LL_Ref_Default_PHY.Tx_PHYs = pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_TxPhys;
000026  4c0d              LDR      r4,|L35.92|
000028  2b00              CMP      r3,#0                 ;2996
00002a  d004              BEQ      |L35.54|
00002c  2b01              CMP      r3,#1                 ;2996
00002e  d00c              BEQ      |L35.74|
000030  2b02              CMP      r3,#2                 ;2996
000032  d10e              BNE      |L35.82|
000034  e006              B        |L35.68|
                  |L35.54|
000036  4291              CMP      r1,r2                 ;2999
000038  d001              BEQ      |L35.62|
                  |L35.58|
00003a  72c5              STRB     r5,[r0,#0xb]          ;3001
00003c  e009              B        |L35.82|
                  |L35.62|
00003e  7061              STRB     r1,[r4,#1]
;;;3006                   LL_Ref_Default_PHY.Rx_PHYs = LL_Ref_Default_PHY.Tx_PHYs;            //symmetric
000040  70a1              STRB     r1,[r4,#2]
000042  e006              B        |L35.82|
                  |L35.68|
;;;3007               }
;;;3008               break;
;;;3009   
;;;3010           case LL_ALL_PHYS_PREFER_TX_Y_RX_N:
;;;3011               if(pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_TxPhys)
000044  2900              CMP      r1,#0
000046  d1fa              BNE      |L35.62|
000048  e003              B        |L35.82|
                  |L35.74|
;;;3012               {
;;;3013                   LL_Ref_Default_PHY.Tx_PHYs = pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_TxPhys;
;;;3014                   LL_Ref_Default_PHY.Rx_PHYs = LL_Ref_Default_PHY.Tx_PHYs;            //symmetric
;;;3015               }
;;;3016               break;
;;;3017   
;;;3018           case LL_ALL_PHYS_PREFER_TX_N_RX_Y:
;;;3019               if(pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_RxPhys)
00004a  2a00              CMP      r2,#0
00004c  d001              BEQ      |L35.82|
;;;3020               {
;;;3021                   LL_Ref_Default_PHY.Tx_PHYs = pMBlk->Para.HCLL_Le_Set_Default_Phy_Para.HCI_RxPhys;
00004e  7062              STRB     r2,[r4,#1]
;;;3022                   LL_Ref_Default_PHY.Rx_PHYs = LL_Ref_Default_PHY.Tx_PHYs;            //symmetric
000050  70a2              STRB     r2,[r4,#2]
                  |L35.82|
;;;3023               }
;;;3024               break;
;;;3025   
;;;3026           default:
;;;3027               break;
;;;3028           }
;;;3029       }
;;;3030   #ifdef _HCI_NEW_
;;;3031       SndMsgBlk(mblk, Q_2HCI);
000052  2104              MOVS     r1,#4
000054  f7fffffe          BL       SndMsgBlk
;;;3032   #endif
;;;3033   }
000058  bd70              POP      {r4-r6,pc}
;;;3034   
                          ENDP

00005a  0000              DCW      0x0000
                  |L35.92|
                          DCD      ||.data||+0x14

                          AREA ||i.HCLL_LE_Set_Event_Mask||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Event_Mask PROC
;;;1566   
;;;1567   void HCLL_LE_Set_Event_Mask(MBLK *pMBlk)                  //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;1568   {
;;;1569       MBLK *mblk;
;;;1570   
;;;1571       LE_Event_Mask[0] = pMBlk->Para.HCLL_LE_Set_Event_Mask_Para.HCI_LE_Event_Mask[0];
000002  4909              LDR      r1,|L36.40|
000004  7a02              LDRB     r2,[r0,#8]
000006  700a              STRB     r2,[r1,#0]
;;;1572       LE_Event_Mask[1] = pMBlk->Para.HCLL_LE_Set_Event_Mask_Para.HCI_LE_Event_Mask[1];
000008  7a42              LDRB     r2,[r0,#9]
00000a  704a              STRB     r2,[r1,#1]
;;;1573       LE_Event_Mask[2] = pMBlk->Para.HCLL_LE_Set_Event_Mask_Para.HCI_LE_Event_Mask[2];
00000c  7a80              LDRB     r0,[r0,#0xa]
00000e  7088              STRB     r0,[r1,#2]
;;;1574       mblk = GetMsgBlk();
000010  f7fffffe          BL       GetMsgBlk
;;;1575       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000014  2161              MOVS     r1,#0x61
000016  7101              STRB     r1,[r0,#4]
;;;1576   #ifdef _HCI_HW_
;;;1577       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1578       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Event_Mask_Para.HCI_Ocf;
;;;1579       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Event_Mask_Para.HCI_Ogf;
;;;1580   #else
;;;1581       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_EVENT_MASK;
000018  21c4              MOVS     r1,#0xc4
00001a  7281              STRB     r1,[r0,#0xa]
;;;1582   #endif
;;;1583       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00001c  2100              MOVS     r1,#0
00001e  72c1              STRB     r1,[r0,#0xb]
;;;1584   #ifdef _HCI_NEW_
;;;1585       SndMsgBlk(mblk, Q_2HCI);
000020  2104              MOVS     r1,#4
000022  f7fffffe          BL       SndMsgBlk
;;;1586   #endif
;;;1587   }
000026  bd10              POP      {r4,pc}
;;;1588   
                          ENDP

                  |L36.40|
                          DCD      LE_Event_Mask

                          AREA ||i.HCLL_LE_Set_Host_Ch_Classification||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Host_Ch_Classification PROC
;;;2694   
;;;2695   void HCLL_LE_Set_Host_Ch_Classification(MBLK *pMBlk)      //OGF: LE Controller, 0x08
000000  b5f8              PUSH     {r3-r7,lr}
;;;2696   {
;;;2697   #if MAX_NUM_CONN_MAS_HDL != 0
;;;2698       MBLK *mblk;
;;;2699       Uint8 i;
;;;2700       Uint16 i16;
;;;2701   
;;;2702       if(Knl_MemComp(LL_Ref_ChMap, pMBlk->Para.HCLL_LE_Set_Host_Ch_Classification_Para.HCI_Channel_Map, LEN_LL_CH_MAP) == SUCCESS_)
000002  4601              MOV      r1,r0
000004  4605              MOV      r5,r0                 ;2696
000006  3109              ADDS     r1,r1,#9
000008  2205              MOVS     r2,#5
00000a  460f              MOV      r7,r1
00000c  4818              LDR      r0,|L37.112|
00000e  f7fffffe          BL       Knl_MemComp
000012  2800              CMP      r0,#0
000014  d02b              BEQ      |L37.110|
;;;2703       {
;;;2704           return;
;;;2705       }
;;;2706       Knl_MemCpy(LL_Ref_ChMap, pMBlk->Para.HCLL_LE_Set_Host_Ch_Classification_Para.HCI_Channel_Map, LEN_LL_CH_MAP);
000016  2205              MOVS     r2,#5
000018  4639              MOV      r1,r7
00001a  4815              LDR      r0,|L37.112|
00001c  f7fffffe          BL       Knl_MemCpy
;;;2707       for(i=0; i<MAX_NUM_CONN_MAS_HDL; i++)
;;;2708       {
;;;2709           if(LL_Conn_Para[i].LE_Conn_Para.LL_Conn_ID != LL_CONN_ID_STBY)
000020  4e14              LDR      r6,|L37.116|
000022  2400              MOVS     r4,#0                 ;2707
                  |L37.36|
000024  4620              MOV      r0,r4
000026  2188              MOVS     r1,#0x88
000028  4348              MULS     r0,r1,r0
00002a  5c31              LDRB     r1,[r6,r0]
00002c  2901              CMP      r1,#1
00002e  d00f              BEQ      |L37.80|
;;;2710           {
;;;2711               i16 = LL_Conn_Para[i].LE_Conn_Para.LL_EventCounter+8;
000030  1980              ADDS     r0,r0,r6
000032  8b41              LDRH     r1,[r0,#0x1a]
;;;2712               LL_Conn_Para[i].LE_Conn_Para.LL_EventCounterUpd = i16;
;;;2713               pMBlk->Para.HCLL_LE_Set_Host_Ch_Classification_Para.LL_EventCounterUpd = i16;
;;;2714   
;;;2715               Knl_MemCpy(LL_Conn_Para[i].LE_Conn_Para.LL_ChMapReM, LL_Ref_ChMap, LEN_LL_CH_MAP);
000034  2205              MOVS     r2,#5
000036  3108              ADDS     r1,r1,#8              ;2711
000038  8581              STRH     r1,[r0,#0x2c]         ;2712
00003a  81e9              STRH     r1,[r5,#0xe]          ;2713
00003c  490c              LDR      r1,|L37.112|
00003e  3014              ADDS     r0,r0,#0x14
000040  f7fffffe          BL       Knl_MemCpy
;;;2716               LL_Msg_CTRL_PKT(pMBlk->Para.HCLL_LE_Set_Host_Ch_Classification_Para.HCI_Channel_Map, LL_CHANNEL_MAP_REQ, (LEN_LL_CH_MAP+LEN_LL_INSTANT), i);
000044  4623              MOV      r3,r4
000046  2207              MOVS     r2,#7
000048  2101              MOVS     r1,#1
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       LL_Msg_CTRL_PKT
                  |L37.80|
000050  1c64              ADDS     r4,r4,#1
000052  b2e4              UXTB     r4,r4                 ;2707
000054  2c04              CMP      r4,#4                 ;2707
000056  d3e5              BCC      |L37.36|
;;;2717           }
;;;2718       }
;;;2719       mblk = GetMsgBlk();
000058  f7fffffe          BL       GetMsgBlk
;;;2720       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00005c  2161              MOVS     r1,#0x61
00005e  7101              STRB     r1,[r0,#4]
;;;2721   #ifdef _HCI_HW_
;;;2722       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2723       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Host_Ch_Classification_Para.HCI_Ocf;
;;;2724       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Host_Ch_Classification_Para.HCI_Ogf;
;;;2725   #else
;;;2726       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_HOST_CH_CLASSIFICATION;
000060  21d6              MOVS     r1,#0xd6
000062  7281              STRB     r1,[r0,#0xa]
;;;2727   #endif
;;;2728       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000064  2100              MOVS     r1,#0
000066  72c1              STRB     r1,[r0,#0xb]
;;;2729   #ifdef _HCI_NEW_
;;;2730       SndMsgBlk(mblk, Q_2HCI);
000068  2104              MOVS     r1,#4
00006a  f7fffffe          BL       SndMsgBlk
                  |L37.110|
;;;2731   #endif
;;;2732   #endif
;;;2733   }
00006e  bdf8              POP      {r3-r7,pc}
;;;2734   
                          ENDP

                  |L37.112|
                          DCD      ||.data||+0x40
                  |L37.116|
                          DCD      ||.bss||+0xd0

                          AREA ||i.HCLL_LE_Set_Phy||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Phy PROC
;;;3035   
;;;3036   void HCLL_LE_Set_Phy(MBLK *pMBlk)     //OGF: LE Controller, 0x08, Spec. 5.0
000000  b570              PUSH     {r4-r6,lr}
;;;3037   {
000002  4602              MOV      r2,r0
;;;3038       Uint8 i, j;
;;;3039       LL_Conn *pLL_conn;
;;;3040   
;;;3041       i = pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_Conn_Hdl_L;
000004  7a06              LDRB     r6,[r0,#8]
;;;3042       pLL_conn = &LL_Conn_Para[i];
000006  2088              MOVS     r0,#0x88
000008  4923              LDR      r1,|L38.152|
00000a  4370              MULS     r0,r6,r0
00000c  1844              ADDS     r4,r0,r1
;;;3043       if(i<LL_CONN_ID_ADV_PARA)
00000e  2e05              CMP      r6,#5
000010  d238              BCS      |L38.132|
;;;3044       {
;;;3045           j = HCI_ERR_CODE_SUCCESS;
;;;3046           if((pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_TxPhys&LL_RX_PHYS_TX_NO_SUPPORT)||(pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_RxPhys&LL_RX_PHYS_TX_NO_SUPPORT))
000012  7a90              LDRB     r0,[r2,#0xa]
000014  2500              MOVS     r5,#0                 ;3045
000016  0881              LSRS     r1,r0,#2
000018  d111              BNE      |L38.62|
00001a  7ad1              LDRB     r1,[r2,#0xb]
00001c  088b              LSRS     r3,r1,#2
00001e  d10e              BNE      |L38.62|
;;;3047           {
;;;3048               j = HCI_ERR_CODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE;
;;;3049           }
;;;3050           else
;;;3051           {
;;;3052               switch(pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_AllPhys)
000020  7a52              LDRB     r2,[r2,#9]
000022  2a00              CMP      r2,#0
000024  d009              BEQ      |L38.58|
000026  2a01              CMP      r2,#1
000028  d013              BEQ      |L38.82|
00002a  2a02              CMP      r2,#2
00002c  d00e              BEQ      |L38.76|
;;;3053               {
;;;3054               case LL_ALL_PHYS_PREFER_TX_Y_RX_Y:
;;;3055                   if(pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_TxPhys != pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_RxPhys)
;;;3056                   {
;;;3057                       j = HCI_ERR_CODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE;
;;;3058                   }
;;;3059                   else
;;;3060                   {
;;;3061                       pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd = pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_TxPhys;
;;;3062                       pLL_conn->LE_Conn_Para.LL_Rx_PHYsUpd = pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd;    //symmetric
;;;3063                   }
;;;3064                   break;
;;;3065   
;;;3066               case LL_ALL_PHYS_PREFER_TX_Y_RX_N:
;;;3067                   if(pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_TxPhys)
;;;3068                   {
;;;3069                       pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd = pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_TxPhys;
;;;3070                       pLL_conn->LE_Conn_Para.LL_Rx_PHYsUpd = pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd;    //symmetric
;;;3071                   }
;;;3072                   break;
;;;3073   
;;;3074               case LL_ALL_PHYS_PREFER_TX_N_RX_Y:
;;;3075                   if(pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_RxPhys)
;;;3076                   {
;;;3077                       pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd = pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_RxPhys;
;;;3078                       pLL_conn->LE_Conn_Para.LL_Rx_PHYsUpd = pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd;    //symmetric
;;;3079                   }
;;;3080                   break;
;;;3081   
;;;3082               default:
;;;3083                   pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd = pLL_conn->LE_Conn_Para.LL_Tx_PHYS;
00002e  4620              MOV      r0,r4
000030  3060              ADDS     r0,r0,#0x60
000032  7f41              LDRB     r1,[r0,#0x1d]
000034  7581              STRB     r1,[r0,#0x16]
;;;3084                   pLL_conn->LE_Conn_Para.LL_Rx_PHYsUpd = pLL_conn->LE_Conn_Para.LL_Rx_PHYS;
000036  7f81              LDRB     r1,[r0,#0x1e]
;;;3085                   break;
000038  e010              B        |L38.92|
                  |L38.58|
00003a  4288              CMP      r0,r1                 ;3055
00003c  d001              BEQ      |L38.66|
                  |L38.62|
00003e  2511              MOVS     r5,#0x11              ;3057
000040  e00d              B        |L38.94|
                  |L38.66|
000042  4621              MOV      r1,r4                 ;3061
000044  3160              ADDS     r1,r1,#0x60           ;3061
000046  7588              STRB     r0,[r1,#0x16]         ;3061
000048  75c8              STRB     r0,[r1,#0x17]         ;3062
00004a  e008              B        |L38.94|
                  |L38.76|
00004c  2800              CMP      r0,#0                 ;3067
00004e  d1f8              BNE      |L38.66|
000050  e005              B        |L38.94|
                  |L38.82|
000052  2900              CMP      r1,#0                 ;3075
000054  d003              BEQ      |L38.94|
000056  4620              MOV      r0,r4                 ;3077
000058  3060              ADDS     r0,r0,#0x60           ;3077
00005a  7581              STRB     r1,[r0,#0x16]         ;3077
                  |L38.92|
00005c  75c1              STRB     r1,[r0,#0x17]         ;3084
                  |L38.94|
;;;3086               }
;;;3087           }
;;;3088   #ifdef _HCI_NEW_
;;;3089   #ifdef _HCI_HW_
;;;3090           LL_Msg_Event_Status(j, pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_Ocf, pMBlk->Para.HCLL_Le_Set_Phy_Para.HCI_Ogf);
;;;3091   #else
;;;3092           LL_Msg_Event_Status(j, HCLL_LE_SET_PHY);
00005e  21ed              MOVS     r1,#0xed
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       LL_Msg_Event_Status
;;;3093   #endif
;;;3094   #endif  //(#ifdef _HCI_NEW_)
;;;3095           if(j==HCI_ERR_CODE_SUCCESS)
000066  2d00              CMP      r5,#0
000068  d10c              BNE      |L38.132|
;;;3096           {
;;;3097               if(pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd == pLL_conn->LE_Conn_Para.LL_Tx_PHYS)
00006a  4620              MOV      r0,r4
00006c  3060              ADDS     r0,r0,#0x60
00006e  7d81              LDRB     r1,[r0,#0x16]
000070  7f42              LDRB     r2,[r0,#0x1d]
000072  4291              CMP      r1,r2
000074  d107              BNE      |L38.134|
;;;3098               {
;;;3099                   pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
000076  2100              MOVS     r1,#0
000078  7581              STRB     r1,[r0,#0x16]
;;;3100                   pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
;;;3101                   LL_Msg_Event_Le_PHY_Update_Complete(HCI_ERR_CODE_SUCCESS, i, pLL_conn->LE_Conn_Para.LL_Tx_PHYS);
00007a  b2d2              UXTB     r2,r2
00007c  4631              MOV      r1,r6
00007e  2000              MOVS     r0,#0
000080  f7fffffe          BL       LL_Msg_Event_Le_PHY_Update_Complete
                  |L38.132|
;;;3102               }
;;;3103               else
;;;3104               {
;;;3105                   LL_Msg_CTRL_PKT(&pLL_conn->LE_Conn_Para.LL_Tx_PHYsUpd, LL_PHY_REQ, 2, i);
;;;3106               }
;;;3107           }
;;;3108       }
;;;3109   }
000084  bd70              POP      {r4-r6,pc}
                  |L38.134|
000086  4620              MOV      r0,r4                 ;3105
000088  4633              MOV      r3,r6                 ;3105
00008a  2202              MOVS     r2,#2                 ;3105
00008c  2116              MOVS     r1,#0x16              ;3105
00008e  3076              ADDS     r0,r0,#0x76           ;3105
000090  f7fffffe          BL       LL_Msg_CTRL_PKT
000094  bd70              POP      {r4-r6,pc}
;;;3110   
                          ENDP

000096  0000              DCW      0x0000
                  |L38.152|
                          DCD      ||.bss||+0xd0

                          AREA ||i.HCLL_LE_Set_Random_Address||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Random_Address PROC
;;;1637   
;;;1638   void HCLL_LE_Set_Random_Address(MBLK *pMBlk)              //OGF: LE Controller, 0x08, LL__010
000000  b510              PUSH     {r4,lr}
;;;1639   {
;;;1640       MBLK    *mblk;
;;;1641       Uint8   eventRsp;
;;;1642   
;;;1643       if (LL_Msg_AdvScnConnUpd & (LL_MSG_ADVSCNCONN_ADV_EN |
000002  4c13              LDR      r4,|L39.80|
000004  7aa2              LDRB     r2,[r4,#0xa]  ; LL_Msg_AdvScnConnUpd
000006  0752              LSLS     r2,r2,#29
000008  d001              BEQ      |L39.14|
;;;1644                                   LL_MSG_ADVSCNCONN_SCN_EN |
;;;1645                                   LL_MSG_ADVSCNCONN_INIT_EN))
;;;1646       {
;;;1647           // Command disallowed, if scanning, initiating, or legacy advertising are enabled
;;;1648           eventRsp = HCI_ERR_CODE_COMMAND_DISALLOWED;
00000a  240c              MOVS     r4,#0xc
00000c  e014              B        |L39.56|
                  |L39.14|
;;;1649       }
;;;1650       else
;;;1651       {
;;;1652           InterruptDisable();
00000e  b672              CPSID    i
;;;1653           Knl_MemCpy(BD_Rand_AddrBuf, pMBlk->Para.HCLL_LE_Set_Random_Addr_Para.HCI_Random_Addr, LEN_BD_ADDR);
000010  2206              MOVS     r2,#6
000012  4601              MOV      r1,r0
000014  480e              LDR      r0,|L39.80|
000016  3108              ADDS     r1,r1,#8
000018  304b              ADDS     r0,r0,#0x4b
00001a  f7fffffe          BL       Knl_MemCpy
;;;1654           InterruptDisable();
00001e  b672              CPSID    i
;;;1655           if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_UPD_ADV_PARA))
000020  7ae0              LDRB     r0,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
000022  0680              LSLS     r0,r0,#26
;;;1656           {
;;;1657               LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_UPD_ADV_PARA);
;;;1658           }
;;;1659           else
;;;1660           {
;;;1661               LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_UPD_ADV_PARA;
000024  7aa0              LDRB     r0,[r4,#0xa]  ; LL_Msg_AdvScnConnUpd
000026  d502              BPL      |L39.46|
000028  21df              MOVS     r1,#0xdf              ;1657
00002a  4008              ANDS     r0,r0,r1              ;1657
00002c  e001              B        |L39.50|
                  |L39.46|
00002e  2120              MOVS     r1,#0x20
000030  4308              ORRS     r0,r0,r1
                  |L39.50|
000032  72a0              STRB     r0,[r4,#0xa]
;;;1662           }
;;;1663           InterruptEnable();
000034  b662              CPSIE    i
;;;1664           eventRsp = HCI_ERR_CODE_SUCCESS;
000036  2400              MOVS     r4,#0
                  |L39.56|
;;;1665       }
;;;1666   
;;;1667       // Send command complete event
;;;1668       mblk = GetMsgBlk();
000038  f7fffffe          BL       GetMsgBlk
;;;1669       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00003c  2161              MOVS     r1,#0x61
00003e  7101              STRB     r1,[r0,#4]
;;;1670   #ifdef _HCI_HW_
;;;1671       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1672       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Random_Addr_Para.HCI_Ocf;
;;;1673       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Random_Addr_Para.HCI_Ogf;
;;;1674       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = eventRsp;
;;;1675   #else
;;;1676       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_RANDOM_ADDRESS;
000040  21c7              MOVS     r1,#0xc7
000042  7281              STRB     r1,[r0,#0xa]
;;;1677       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = eventRsp;
000044  72c4              STRB     r4,[r0,#0xb]
;;;1678   #endif
;;;1679   #ifdef _HCI_NEW_
;;;1680       SndMsgBlk(mblk, Q_2HCI);
000046  2104              MOVS     r1,#4
000048  f7fffffe          BL       SndMsgBlk
;;;1681   #endif
;;;1682   }
00004c  bd10              POP      {r4,pc}
;;;1683   
                          ENDP

00004e  0000              DCW      0x0000
                  |L39.80|
                          DCD      ||.data||

                          AREA ||i.HCLL_LE_Set_Scan_Response_Data||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_Scan_Response_Data PROC
;;;1835   
;;;1836   void HCLL_LE_Set_Scan_Response_Data(MBLK *pMBlk)          //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;1837   {
;;;1838       MBLK *mblk;
;;;1839       Uint8 i;
;;;1840   
;;;1841       if(LL_Msg_AdvScnConnUpdSts&LL_MSG_ADVSCNCONN_UPD_ADV_SCN_DATA)
000002  4c14              LDR      r4,|L40.84|
000004  4601              MOV      r1,r0                 ;1837
000006  7ae0              LDRB     r0,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
000008  06c0              LSLS     r0,r0,#27
00000a  d501              BPL      |L40.16|
;;;1842       {
;;;1843           LL_Adv_Data_Buf = (Adv_Data_Buf *)&LL_Adv_Para.Adv_Para.LL_Adv_Data;
00000c  4812              LDR      r0,|L40.88|
00000e  e001              B        |L40.20|
                  |L40.16|
;;;1844       }
;;;1845       else
;;;1846       {
;;;1847           LL_Adv_Data_Buf = (Adv_Data_Buf *)&LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Data;
000010  4811              LDR      r0,|L40.88|
000012  305c              ADDS     r0,r0,#0x5c
                  |L40.20|
000014  301c              ADDS     r0,r0,#0x1c
;;;1848       }
;;;1849       i = pMBlk->Para.HCLL_LE_Set_Scan_Response_Data_Para.HCI_Scan_Rsp_Length;
000016  6120              STR      r0,[r4,#0x10]  ; LL_Adv_Data_Buf
000018  7a0a              LDRB     r2,[r1,#8]
00001a  3020              ADDS     r0,r0,#0x20
;;;1850       LL_Adv_Data_Buf->LL_ScanRsp_Data_Length = i;
00001c  77c2              STRB     r2,[r0,#0x1f]
00001e  3109              ADDS     r1,r1,#9
;;;1851       Knl_MemCpy(LL_Adv_Data_Buf->LL_ScanRsp_Data, pMBlk->Para.HCLL_LE_Set_Scan_Response_Data_Para.HCI_Scan_Rsp, i);
000020  f7fffffe          BL       Knl_MemCpy
;;;1852   
;;;1853       mblk = GetMsgBlk();
000024  f7fffffe          BL       GetMsgBlk
;;;1854       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000028  2161              MOVS     r1,#0x61
00002a  7101              STRB     r1,[r0,#4]
;;;1855   #ifdef _HCI_HW_
;;;1856       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1857       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Scan_Response_Data_Para.HCI_Ocf;
;;;1858       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Scan_Response_Data_Para.HCI_Ogf;
;;;1859   #else
;;;1860       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_SCAN_RESPONSE_DATA;
00002c  21cb              MOVS     r1,#0xcb
00002e  7281              STRB     r1,[r0,#0xa]
;;;1861   #endif
;;;1862       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000030  2100              MOVS     r1,#0
000032  72c1              STRB     r1,[r0,#0xb]
;;;1863   #ifdef _HCI_NEW_
;;;1864       SndMsgBlk(mblk, Q_2HCI);
000034  2104              MOVS     r1,#4
000036  f7fffffe          BL       SndMsgBlk
;;;1865   #endif
;;;1866       InterruptDisable();
00003a  b672              CPSID    i
;;;1867       if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_UPD_ADV_SCN_DATA))
00003c  7ae0              LDRB     r0,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
00003e  06c0              LSLS     r0,r0,#27
;;;1868       {
;;;1869           LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_UPD_ADV_SCN_DATA);
;;;1870       }
;;;1871       else
;;;1872       {
;;;1873           LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_UPD_ADV_SCN_DATA;
000040  7aa0              LDRB     r0,[r4,#0xa]  ; LL_Msg_AdvScnConnUpd
000042  d502              BPL      |L40.74|
000044  21ef              MOVS     r1,#0xef              ;1869
000046  4008              ANDS     r0,r0,r1              ;1869
000048  e001              B        |L40.78|
                  |L40.74|
00004a  2110              MOVS     r1,#0x10
00004c  4308              ORRS     r0,r0,r1
                  |L40.78|
00004e  72a0              STRB     r0,[r4,#0xa]
;;;1874       }
;;;1875       InterruptEnable();
000050  b662              CPSIE    i
;;;1876   }
000052  bd10              POP      {r4,pc}
;;;1877   
                          ENDP

                  |L40.84|
                          DCD      ||.data||
                  |L40.88|
                          DCD      ||.bss||

                          AREA ||i.HCLL_LE_Set_scan_enable||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_scan_enable PROC
;;;2107   
;;;2108   void HCLL_LE_Set_scan_enable(MBLK *pMBlk)                 //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;2109   {
;;;2110       MBLK    *mblk;
;;;2111   #ifdef _HCI_HW_
;;;2112       Uint8   eventRsp = HCI_ERR_CODE_SUCCESS;
;;;2113   #endif
;;;2114   
;;;2115       if((pMBlk->Para.HCLL_LE_Set_Scan_Enable_Para.HCI_LE_Scan_En & 0x01) != 0)
000002  7a00              LDRB     r0,[r0,#8]
;;;2116       {
;;;2117   #ifdef _HCI_HW_
;;;2118           if ((LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_RANDOM) ||
;;;2119                   (LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_RESOLVABLE_PRIVATE_RANDOM))
;;;2120           {
;;;2121               //Uint8   idx;
;;;2122   
;;;2123               // Check if the random address is initialized or not
;;;2124               if(Knl_CodeComp(BD_Rand_Addr, TAB_ZERO_128, LEN_BD_ADDR))
;;;2125               {
;;;2126                   eventRsp = HCI_ERR_CODE_SUCCESS;
;;;2127               }
;;;2128               else
;;;2129               {
;;;2130                   eventRsp = HCI_ERR_CODE_INVALID_HCI_COMMAND_PARAMETERS;
;;;2131               }
;;;2132               /*
;;;2133               for (idx = 0; idx < LEN_BD_ADDR; idx++) {
;;;2134                   if (BD_Rand_Addr[idx] > 0) {
;;;2135                       eventRsp = HCI_ERR_CODE_SUCCESS;
;;;2136                       break;
;;;2137                   }
;;;2138               }
;;;2139               */
;;;2140           }
;;;2141   
;;;2142           if (eventRsp == HCI_ERR_CODE_SUCCESS)
;;;2143   #endif
;;;2144           {
;;;2145               InterruptDisable();
;;;2146               if((LL_Msg_AdvScnConnUpd & LL_MSG_ADVSCNCONN_SCN_EN)==0)
000004  490f              LDR      r1,|L41.68|
000006  07c2              LSLS     r2,r0,#31             ;2115
000008  7a88              LDRB     r0,[r1,#0xa]
;;;2147               {
;;;2148                   LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_AdvMap_ID = CH_ADV_CH_HOP_BY_MAP_TABLE[0x07][0];               //reset
;;;2149                   LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_ScanAccl = LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window; //reset
;;;2150                   LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_SCN_EN;
;;;2151               }
;;;2152               InterruptEnable();
;;;2153           }
;;;2154       }
;;;2155       else
;;;2156       {
;;;2157           InterruptDisable();
00000a  b672              CPSID    i
00000c  d016              BEQ      |L41.60|
00000e  0782              LSLS     r2,r0,#30             ;2146
000010  d407              BMI      |L41.34|
000012  4a0d              LDR      r2,|L41.72|
000014  2301              MOVS     r3,#1                 ;2148
000016  7013              STRB     r3,[r2,#0]            ;2148
000018  8893              LDRH     r3,[r2,#4]            ;2149  ; LL_Scan_Para_UpdBuf
00001a  8113              STRH     r3,[r2,#8]            ;2149
00001c  2202              MOVS     r2,#2                 ;2150
00001e  4310              ORRS     r0,r0,r2              ;2150
                  |L41.32|
;;;2158           LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_SCN_EN);
000020  7288              STRB     r0,[r1,#0xa]
                  |L41.34|
000022  b662              CPSIE    i                     ;2152
;;;2159           InterruptEnable();
;;;2160       }
;;;2161   
;;;2162       // Send command complete event
;;;2163       mblk = GetMsgBlk();
000024  f7fffffe          BL       GetMsgBlk
;;;2164       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000028  2161              MOVS     r1,#0x61
00002a  7101              STRB     r1,[r0,#4]
;;;2165   #ifdef _HCI_HW_
;;;2166       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2167       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Scan_Enable_Para.HCI_Ocf;
;;;2168       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Scan_Enable_Para.HCI_Ogf;
;;;2169       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = eventRsp;
;;;2170   #else
;;;2171       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_SCAN_ENABLE;
00002c  21ce              MOVS     r1,#0xce
00002e  7281              STRB     r1,[r0,#0xa]
;;;2172       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000030  2100              MOVS     r1,#0
000032  72c1              STRB     r1,[r0,#0xb]
;;;2173   #endif
;;;2174   #ifdef _HCI_NEW_
;;;2175       SndMsgBlk(mblk, Q_2HCI);
000034  2104              MOVS     r1,#4
000036  f7fffffe          BL       SndMsgBlk
;;;2176   #endif
;;;2177   
;;;2178   }
00003a  bd10              POP      {r4,pc}
                  |L41.60|
00003c  22fd              MOVS     r2,#0xfd              ;2158
00003e  4010              ANDS     r0,r0,r2              ;2158
000040  e7ee              B        |L41.32|
;;;2179   
                          ENDP

000042  0000              DCW      0x0000
                  |L41.68|
                          DCD      ||.data||
                  |L41.72|
                          DCD      ||.bss||+0xc4

                          AREA ||i.HCLL_LE_Set_scan_param||, CODE, READONLY, ALIGN=2

                  HCLL_LE_Set_scan_param PROC
;;;2033   
;;;2034   void HCLL_LE_Set_scan_param(MBLK *pMBlk)                  //OGF: LE Controller, 0x08
000000  b5f8              PUSH     {r3-r7,lr}
;;;2035   {
000002  4604              MOV      r4,r0
;;;2036       MBLK    *mblk;
;;;2037       Uint8   eventRsp;
;;;2038   
;;;2039       InterruptDisable();
000004  b672              CPSID    i
;;;2040       if (LL_Msg_AdvScnConnUpd & LL_MSG_ADVSCNCONN_SCN_EN)
000006  4f1f              LDR      r7,|L42.132|
000008  7ab8              LDRB     r0,[r7,#0xa]  ; LL_Msg_AdvScnConnUpd
00000a  0780              LSLS     r0,r0,#30
;;;2041       {
;;;2042           InterruptEnable();
;;;2043           // Scanning mechanism is work in progress
;;;2044           eventRsp = HCI_ERR_CODE_COMMAND_DISALLOWED;
;;;2045       }
;;;2046       else
;;;2047       {
;;;2048           InterruptEnable();
00000c  b662              CPSIE    i
00000e  d501              BPL      |L42.20|
000010  260c              MOVS     r6,#0xc               ;2044
000012  e02b              B        |L42.108|
                  |L42.20|
;;;2049           eventRsp = HCI_ERR_CODE_SUCCESS;
;;;2050           Knl_MemCpy((Uint8 *)&LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval, (Uint8 *)&pMBlk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_LE_Scan_Interval, 4);
000014  4d1c              LDR      r5,|L42.136|
000016  4621              MOV      r1,r4
000018  2600              MOVS     r6,#0                 ;2049
00001a  2204              MOVS     r2,#4
00001c  310a              ADDS     r1,r1,#0xa
00001e  1ca8              ADDS     r0,r5,#2
000020  f7fffffe          BL       Knl_MemCpy
;;;2051           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_ScanType = pMBlk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_LEScanType;
000024  7a20              LDRB     r0,[r4,#8]
000026  7068              STRB     r0,[r5,#1]
;;;2052           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_Own_Addr_Type = pMBlk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_Own_Addr_Type;
000028  7ba0              LDRB     r0,[r4,#0xe]
00002a  71a8              STRB     r0,[r5,#6]
;;;2053           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_ScanFilterPolicy = pMBlk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_ScannFilterPolicy;
00002c  7be0              LDRB     r0,[r4,#0xf]
00002e  71e8              STRB     r0,[r5,#7]
;;;2054   
;;;2055   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;2056           if(LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval>0x3333)
000030  8868              LDRH     r0,[r5,#2]  ; LL_Scan_Para_UpdBuf
000032  4a16              LDR      r2,|L42.140|
000034  4290              CMP      r0,r2
000036  d900              BLS      |L42.58|
;;;2057           {
;;;2058               LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval = 0x3333;
000038  806a              STRH     r2,[r5,#2]
                  |L42.58|
;;;2059           }
;;;2060           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval = (LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval*5);
00003a  8868              LDRH     r0,[r5,#2]  ; LL_Scan_Para_UpdBuf
00003c  0081              LSLS     r1,r0,#2
00003e  1840              ADDS     r0,r0,r1
000040  b281              UXTH     r1,r0
000042  8069              STRH     r1,[r5,#2]
;;;2061           if(LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window>0x3333)
000044  88a8              LDRH     r0,[r5,#4]  ; LL_Scan_Para_UpdBuf
000046  4290              CMP      r0,r2
000048  d900              BLS      |L42.76|
;;;2062           {
;;;2063               LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window = 0x3333;
00004a  80aa              STRH     r2,[r5,#4]
                  |L42.76|
;;;2064           }
;;;2065           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window = (LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window*5);
00004c  88a8              LDRH     r0,[r5,#4]  ; LL_Scan_Para_UpdBuf
00004e  0082              LSLS     r2,r0,#2
000050  1880              ADDS     r0,r0,r2
000052  80a8              STRH     r0,[r5,#4]
;;;2066   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;2067           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval = (LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval<<2);
;;;2068           if(LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval==0)
;;;2069           {
;;;2070               LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval = 0xFFFF;
;;;2071           }
;;;2072           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window = (LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window<<2);
;;;2073           if(LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window==0)
;;;2074           {
;;;2075               LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window = 0xFFFF;
;;;2076           }
;;;2077   #endif  //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;2078   
;;;2079           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval = LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Interval - LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_LE_Scan_Window;
000054  1a08              SUBS     r0,r1,r0
000056  8068              STRH     r0,[r5,#2]
;;;2080           if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_UPD_SCN_PARA))
000058  7af8              LDRB     r0,[r7,#0xb]  ; LL_Msg_AdvScnConnUpdSts
00005a  0640              LSLS     r0,r0,#25
;;;2081           {
;;;2082               LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_UPD_SCN_PARA);
;;;2083           }
;;;2084           else
;;;2085           {
;;;2086               LL_Msg_AdvScnConnUpd |= LL_MSG_ADVSCNCONN_UPD_SCN_PARA;
00005c  7ab8              LDRB     r0,[r7,#0xa]  ; LL_Msg_AdvScnConnUpd
00005e  d502              BPL      |L42.102|
000060  21bf              MOVS     r1,#0xbf              ;2082
000062  4008              ANDS     r0,r0,r1              ;2082
000064  e001              B        |L42.106|
                  |L42.102|
000066  2140              MOVS     r1,#0x40
000068  4308              ORRS     r0,r0,r1
                  |L42.106|
00006a  72b8              STRB     r0,[r7,#0xa]          ;2082
                  |L42.108|
;;;2087           }
;;;2088       }
;;;2089   
;;;2090       // Send command complete event
;;;2091       mblk = GetMsgBlk();
00006c  f7fffffe          BL       GetMsgBlk
;;;2092       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000070  2161              MOVS     r1,#0x61
000072  7101              STRB     r1,[r0,#4]
;;;2093   #ifdef _HCI_HW_
;;;2094       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;2095       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_Ocf;
;;;2096       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Set_Scan_Param_Para.HCI_Ogf;
;;;2097       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = eventRsp;
;;;2098   #else
;;;2099       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_SET_SCAN_PARAM;
000074  21cd              MOVS     r1,#0xcd
000076  7281              STRB     r1,[r0,#0xa]
;;;2100       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = eventRsp;
000078  72c6              STRB     r6,[r0,#0xb]
;;;2101   #endif
;;;2102   #ifdef _HCI_NEW_
;;;2103       SndMsgBlk(mblk, Q_2HCI);
00007a  2104              MOVS     r1,#4
00007c  f7fffffe          BL       SndMsgBlk
;;;2104   #endif
;;;2105   }
000080  bdf8              POP      {r3-r7,pc}
;;;2106   
                          ENDP

000082  0000              DCW      0x0000
                  |L42.132|
                          DCD      ||.data||
                  |L42.136|
                          DCD      ||.bss||+0xc4
                  |L42.140|
                          DCD      0x00003333

                          AREA ||i.HCLL_LE_Start_encryption||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Start_encryption PROC
;;;2817   
;;;2818   void HCLL_LE_Start_encryption(MBLK *pMBlk)                //OGF: LE Controller, 0x08
000000  b570              PUSH     {r4-r6,lr}
;;;2819   {
000002  4605              MOV      r5,r0
;;;2820       MBLK *mblk;
;;;2821   
;;;2822       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
000008  4604              MOV      r4,r0
;;;2823       mblk->Primitive = LLEC_LE_START_ENCRYPTION;
00000a  2053              MOVS     r0,#0x53
00000c  7120              STRB     r0,[r4,#4]
;;;2824       Knl_MemCpy(mblk->Para.Data, pMBlk->Para.Data, (SIZE_HCLL_HCI_HW_OPCODE+SIZE_HCI_CONN_HDL+LEN_SMP_RAND+LEN_SMP_EDIV+LEN_AES_KEY));
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  221b              MOVS     r2,#0x1b
000014  3108              ADDS     r1,r1,#8
000016  3008              ADDS     r0,r0,#8
000018  f7fffffe          BL       Knl_MemCpy
;;;2825       SndMsgBlkEC(mblk);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       SndMsgBlkEC
;;;2826   }
000022  bd70              POP      {r4-r6,pc}
;;;2827   
                          ENDP


                          AREA ||i.HCLL_LE_Test_end||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Test_end PROC
;;;2903   
;;;2904   void HCLL_LE_Test_end(MBLK *pMBlk)                        //OGF: LE Controller, 0x08
000000  4770              BX       lr
;;;2905   {
;;;2906       pMBlk = pMBlk;
;;;2907   }
;;;2908   
                          ENDP


                          AREA ||i.HCLL_LE_Transmitter_test||, CODE, READONLY, ALIGN=1

                  HCLL_LE_Transmitter_test PROC
;;;2897   
;;;2898   void HCLL_LE_Transmitter_test(MBLK *pMBlk)                //OGF: LE Controller, 0x08
000000  4770              BX       lr
;;;2899   {
;;;2900       pMBlk = pMBlk;
;;;2901   }
;;;2902   
                          ENDP


                          AREA ||i.HCLL_Read_BD_Addr||, CODE, READONLY, ALIGN=2

                  HCLL_Read_BD_Addr PROC
;;;1516   
;;;1517   void HCLL_Read_BD_Addr(MBLK *pMBlk)                       //OGF: Informational Parameters, 0x04
000000  b510              PUSH     {r4,lr}
;;;1518   {
;;;1519       MBLK *mblk;
;;;1520   
;;;1521       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
000006  4604              MOV      r4,r0
;;;1522   
;;;1523       Knl_MemCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1], ble_device_param.ble_deviceAddr_param.addr, LEN_BD_ADDR);
000008  2206              MOVS     r2,#6
00000a  4907              LDR      r1,|L46.40|
00000c  300c              ADDS     r0,r0,#0xc
00000e  f7fffffe          BL       Knl_MemCpy
;;;1524   
;;;1525       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000012  2061              MOVS     r0,#0x61
000014  7120              STRB     r0,[r4,#4]
;;;1526   #ifdef _HCI_HW_
;;;1527       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (1+LEN_BD_ADDR);
;;;1528       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Read_Bd_Addr_Para.HCI_Ocf;
;;;1529       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Read_Bd_Addr_Para.HCI_Ogf;
;;;1530   #else
;;;1531       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_READ_BD_ADDR;
000016  20c2              MOVS     r0,#0xc2
000018  72a0              STRB     r0,[r4,#0xa]
;;;1532   #endif
;;;1533       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00001a  2000              MOVS     r0,#0
00001c  72e0              STRB     r0,[r4,#0xb]
;;;1534   
;;;1535   #ifdef _HCI_NEW_
;;;1536       SndMsgBlk(mblk, Q_2HCI);
00001e  2104              MOVS     r1,#4
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SndMsgBlk
;;;1537   #endif
;;;1538   }
000026  bd10              POP      {r4,pc}
;;;1539   
                          ENDP

                  |L46.40|
                          DCD      ble_device_param+0x2

                          AREA ||i.HCLL_Read_Le_Host_Support||, CODE, READONLY, ALIGN=1

                  HCLL_Read_Le_Host_Support PROC
;;;1409   
;;;1410   void HCLL_Read_Le_Host_Support(MBLK *pMBlk)               //OGF: Controller & Baseband, 0x03
000000  4770              BX       lr
;;;1411   {
;;;1412       pMBlk = pMBlk;
;;;1413   }
;;;1414   
                          ENDP


                          AREA ||i.HCLL_Read_Local_Supported_Cmd||, CODE, READONLY, ALIGN=2

                  HCLL_Read_Local_Supported_Cmd PROC
;;;1454   
;;;1455   void HCLL_Read_Local_Supported_Cmd(MBLK *pMBlk)           //OGF: Informational Parameters, 0x04, Not Finished
000000  b510              PUSH     {r4,lr}
;;;1456   {
;;;1457       MBLK *mblk;
;;;1458   
;;;1459       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
000006  4604              MOV      r4,r0
;;;1460   #if NUM_FLD_HCI_CFG_PARAMS_SUPP_CMDS < (MAX_MBLK_SIZE-6)
;;;1461       Knl_CodeCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1], TAB_SUPPORTED_COMMANDS_MASK, NUM_FLD_HCI_CFG_PARAMS_SUPP_CMDS);
;;;1462   #else
;;;1463       Knl_CodeCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1], TAB_SUPPORTED_COMMANDS_MASK, (MAX_MBLK_SIZE-6-1));
000008  2225              MOVS     r2,#0x25
00000a  4910              LDR      r1,|L48.76|
00000c  300c              ADDS     r0,r0,#0xc
00000e  f7fffffe          BL       Knl_CodeCpy
;;;1464   #endif
;;;1465       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000012  2061              MOVS     r0,#0x61
000014  7120              STRB     r0,[r4,#4]
;;;1466   #ifdef _HCI_HW_
;;;1467       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (1+NUM_FLD_HCI_CFG_PARAMS_SUPP_CMDS);
;;;1468       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Read_Local_Supported_Cmd_Para.HCI_Ocf;
;;;1469       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Read_Local_Supported_Cmd_Para.HCI_Ogf;
;;;1470   #else
;;;1471       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_READ_LOCAL_SUPPORTED_CMD;
000016  20bf              MOVS     r0,#0xbf
000018  72a0              STRB     r0,[r4,#0xa]
;;;1472   #endif
;;;1473       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00001a  2000              MOVS     r0,#0
00001c  72e0              STRB     r0,[r4,#0xb]
;;;1474   #ifdef _HCI_NEW_
;;;1475       SndMsgBlk(mblk, Q_2HCI);
00001e  2104              MOVS     r1,#4
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SndMsgBlk
;;;1476   #endif  //#ifdef _HCI_NEW_
;;;1477   
;;;1478   #if NUM_FLD_HCI_CFG_PARAMS_SUPP_CMDS > (MAX_MBLK_SIZE-6)       //LL__008
;;;1479       mblk = GetMsgBlk();
000026  f7fffffe          BL       GetMsgBlk
;;;1480       Knl_CodeCpy(mblk->Para.MHC_Event_HCI_Raw_Para.Data, &TAB_SUPPORTED_COMMANDS_MASK[(MAX_MBLK_SIZE-6-1)], (NUM_FLD_HCI_CFG_PARAMS_SUPP_CMDS-(MAX_MBLK_SIZE-6-1)));
00002a  4908              LDR      r1,|L48.76|
00002c  4604              MOV      r4,r0                 ;1479
00002e  221b              MOVS     r2,#0x1b
000030  3125              ADDS     r1,r1,#0x25
000032  3009              ADDS     r0,r0,#9
000034  f7fffffe          BL       Knl_CodeCpy
;;;1481       mblk->Primitive = MHC_EVENT_HCI_RAW;
000038  2072              MOVS     r0,#0x72
00003a  7120              STRB     r0,[r4,#4]
;;;1482       mblk->Para.MHC_Event_HCI_Raw_Para.HCI_Para_Length = (NUM_FLD_HCI_CFG_PARAMS_SUPP_CMDS-(MAX_MBLK_SIZE-6-1));
00003c  201b              MOVS     r0,#0x1b
00003e  7220              STRB     r0,[r4,#8]
;;;1483   #ifdef _HCI_NEW_
;;;1484       SndMsgBlk(mblk, Q_2HCI);
000040  2104              MOVS     r1,#4
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SndMsgBlk
;;;1485   #endif
;;;1486   #endif
;;;1487   }
000048  bd10              POP      {r4,pc}
;;;1488   
                          ENDP

00004a  0000              DCW      0x0000
                  |L48.76|
                          DCD      TAB_SUPPORTED_COMMANDS_MASK

                          AREA ||i.HCLL_Read_Local_Supported_Feat||, CODE, READONLY, ALIGN=2

                  HCLL_Read_Local_Supported_Feat PROC
;;;1489   
;;;1490   void HCLL_Read_Local_Supported_Feat(MBLK *pMBlk)          //OGF: Informational Parameters, 0x04
000000  b510              PUSH     {r4,lr}
;;;1491   {
;;;1492       MBLK *mblk;
;;;1493   
;;;1494       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
000006  4604              MOV      r4,r0
;;;1495       Knl_CodeCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1], TAB_LMP_FEATURES_MASK, sizeof(TAB_LMP_FEATURES_MASK));
000008  2208              MOVS     r2,#8
00000a  4907              LDR      r1,|L49.40|
00000c  300c              ADDS     r0,r0,#0xc
00000e  f7fffffe          BL       Knl_CodeCpy
;;;1496       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000012  2061              MOVS     r0,#0x61
000014  7120              STRB     r0,[r4,#4]
;;;1497   #ifdef _HCI_HW_
;;;1498       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (1+sizeof(TAB_LMP_FEATURES_MASK));
;;;1499       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Read_Local_Supported_Feat_Para.HCI_Ocf;
;;;1500       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Read_Local_Supported_Feat_Para.HCI_Ogf;
;;;1501   #else
;;;1502       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_READ_LOCAL_SUPPORTED_FEAT;
000016  20c0              MOVS     r0,#0xc0
000018  72a0              STRB     r0,[r4,#0xa]
;;;1503   #endif
;;;1504       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00001a  2000              MOVS     r0,#0
00001c  72e0              STRB     r0,[r4,#0xb]
;;;1505   #ifdef _HCI_NEW_
;;;1506       SndMsgBlk(mblk, Q_2HCI);
00001e  2104              MOVS     r1,#4
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SndMsgBlk
;;;1507   #endif
;;;1508   }
000026  bd10              POP      {r4,pc}
;;;1509   
                          ENDP

                  |L49.40|
                          DCD      TAB_LMP_FEATURES_MASK

                          AREA ||i.HCLL_Read_Local_Ver_Info||, CODE, READONLY, ALIGN=2

                  HCLL_Read_Local_Ver_Info PROC
;;;1433   
;;;1434   void HCLL_Read_Local_Ver_Info(MBLK *pMBlk)                //OGF: Informational Parameters, 0x04
000000  b510              PUSH     {r4,lr}
;;;1435   {
;;;1436       MBLK *mblk;
;;;1437   
;;;1438       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
000006  4604              MOV      r4,r0
;;;1439       Knl_CodeCpy(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1], LE_LOCAL_VER_INFO, sizeof(LE_LOCAL_VER_INFO));
000008  2208              MOVS     r2,#8
00000a  4907              LDR      r1,|L50.40|
00000c  300c              ADDS     r0,r0,#0xc
00000e  f7fffffe          BL       Knl_CodeCpy
;;;1440       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000012  2061              MOVS     r0,#0x61
000014  7120              STRB     r0,[r4,#4]
;;;1441   #ifdef _HCI_HW_
;;;1442       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (1+sizeof(LE_LOCAL_VER_INFO));
;;;1443       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Read_Local_Ver_Info_Para.HCI_Ocf;
;;;1444       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Read_Local_Ver_Info_Para.HCI_Ogf;
;;;1445   #else
;;;1446       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_READ_LOCAL_VER_INFO;
000016  20be              MOVS     r0,#0xbe
000018  72a0              STRB     r0,[r4,#0xa]
;;;1447   #endif
;;;1448       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00001a  2000              MOVS     r0,#0
00001c  72e0              STRB     r0,[r4,#0xb]
;;;1449   #ifdef _HCI_NEW_
;;;1450       SndMsgBlk(mblk, Q_2HCI);
00001e  2104              MOVS     r1,#4
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       SndMsgBlk
;;;1451   #endif
;;;1452   }
000026  bd10              POP      {r4,pc}
;;;1453   
                          ENDP

                  |L50.40|
                          DCD      ||.constdata||+0x22

                          AREA ||i.HCLL_Read_Remote_Ver_Info||, CODE, READONLY, ALIGN=2

                  HCLL_Read_Remote_Ver_Info PROC
;;;1284   
;;;1285   void HCLL_Read_Remote_Ver_Info(MBLK *pMBlk)               //OGF: Link Control, 0x01
000000  b570              PUSH     {r4-r6,lr}
;;;1286   {
;;;1287       Uint8 i;
;;;1288       Uint8 *pCtrlPkt_Data;
;;;1289   
;;;1290       i = pMBlk->Para.HCLL_Read_Remote_Ver_Info_Para.HCI_Conn_Hdl_L;
000002  7a04              LDRB     r4,[r0,#8]
000004  4605              MOV      r5,r0                 ;1286
;;;1291       if(i<LL_CONN_ID_ADV_PARA)
000006  2c05              CMP      r4,#5
000008  d20f              BCS      |L51.42|
;;;1292       {
;;;1293   #ifdef _HCI_HW_
;;;1294           LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, pMBlk->Para.HCLL_Read_Remote_Ver_Info_Para.HCI_Ocf, pMBlk->Para.HCLL_Read_Remote_Ver_Info_Para.HCI_Ogf);
;;;1295   #else
;;;1296           LL_Msg_Event_Status(HCI_ERR_CODE_SUCCESS, HCLL_READ_REMOTE_VER_INFO);
00000a  21b2              MOVS     r1,#0xb2
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       LL_Msg_Event_Status
;;;1297   #endif
;;;1298           pCtrlPkt_Data = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data;
;;;1299           Knl_CodeCpy(pCtrlPkt_Data, LL_VERSION, NUM_LL_VERSION);
000012  350c              ADDS     r5,r5,#0xc
000014  2205              MOVS     r2,#5
000016  4905              LDR      r1,|L51.44|
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       Knl_CodeCpy
;;;1300           LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_VERSION_IND, NUM_LL_VERSION, i);
00001e  4623              MOV      r3,r4
000020  2205              MOVS     r2,#5
000022  210c              MOVS     r1,#0xc
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       LL_Msg_CTRL_PKT
                  |L51.42|
;;;1301       }
;;;1302   }
00002a  bd70              POP      {r4-r6,pc}
;;;1303   
                          ENDP

                  |L51.44|
                          DCD      ||.constdata||+0x11

                          AREA ||i.HCLL_Read_Transmit_Pwr_Level||, CODE, READONLY, ALIGN=1

                  HCLL_Read_Transmit_Pwr_Level PROC
;;;1363   
;;;1364   void HCLL_Read_Transmit_Pwr_Level(MBLK *pMBlk)            //OGF: Controller & Baseband, 0x03
000000  4770              BX       lr
;;;1365   {
;;;1366       pMBlk = pMBlk;
;;;1367   }
;;;1368   
                          ENDP


                          AREA ||i.HCLL_Read_authen_payload_timeout||, CODE, READONLY, ALIGN=1

                  HCLL_Read_authen_payload_timeout PROC
;;;1421   
;;;1422   void HCLL_Read_authen_payload_timeout(MBLK *pMBlk)        //OGF: Controller & Baseband, 0x03, Spec. 4.1
000000  4770              BX       lr
;;;1423   {
;;;1424       pMBlk = pMBlk;
;;;1425   }
;;;1426   
                          ENDP


                          AREA ||i.HCLL_Read_buffer_size||, CODE, READONLY, ALIGN=1

                  HCLL_Read_buffer_size PROC
;;;1510   
;;;1511   void HCLL_Read_buffer_size(MBLK *pMBlk)                   //OGF: Informational Parameters, 0x04
000000  4770              BX       lr
;;;1512   {
;;;1513       pMBlk = pMBlk;
;;;1514   }
;;;1515   
                          ENDP


                          AREA ||i.HCLL_Read_rssi||, CODE, READONLY, ALIGN=2

                  HCLL_Read_rssi PROC
;;;1540   
;;;1541   void HCLL_Read_rssi(MBLK *pMBlk)                          //OGF: Status Parameters, 0x05
000000  b510              PUSH     {r4,lr}
;;;1542   {
;;;1543       MBLK *mblk;
;;;1544       Uint8 i;
;;;1545   
;;;1546       i = pMBlk->Para.HCLL_Read_Rssi_Para.HCI_Conn_Hdl_L;
000002  7a04              LDRB     r4,[r0,#8]
;;;1547       mblk = GetMsgBlk();
000004  f7fffffe          BL       GetMsgBlk
;;;1548       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000008  2161              MOVS     r1,#0x61
00000a  7101              STRB     r1,[r0,#4]
;;;1549   #ifdef _HCI_HW_
;;;1550       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 2;
;;;1551       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Read_Rssi_Para.HCI_Ocf;
;;;1552       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Read_Rssi_Para.HCI_Ogf;
;;;1553   #else
;;;1554       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_READ_RSSI;
00000c  21c3              MOVS     r1,#0xc3
00000e  7281              STRB     r1,[r0,#0xa]
;;;1555   #endif
;;;1556       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000010  2100              MOVS     r1,#0
000012  72c1              STRB     r1,[r0,#0xb]
;;;1557       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = i;
000014  7304              STRB     r4,[r0,#0xc]
;;;1558       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = LL_CONN_ID_HDL_H;
000016  2101              MOVS     r1,#1
000018  7341              STRB     r1,[r0,#0xd]
;;;1559       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[3] = LL_Conn_Para[i].LE_Conn_Para.RF_Rssi;
00001a  2188              MOVS     r1,#0x88
00001c  434c              MULS     r4,r1,r4
00001e  4904              LDR      r1,|L55.48|
000020  1861              ADDS     r1,r4,r1
000022  7f49              LDRB     r1,[r1,#0x1d]
000024  7381              STRB     r1,[r0,#0xe]
;;;1560   
;;;1561   #ifdef _HCI_NEW_
;;;1562       SndMsgBlk(mblk, Q_2HCI);
000026  2104              MOVS     r1,#4
000028  f7fffffe          BL       SndMsgBlk
;;;1563   #endif
;;;1564   }
00002c  bd10              POP      {r4,pc}
;;;1565   
                          ENDP

00002e  0000              DCW      0x0000
                  |L55.48|
                          DCD      ||.bss||+0xd0

                          AREA ||i.HCLL_Reset||, CODE, READONLY, ALIGN=1

                  HCLL_Reset PROC
;;;1336   
;;;1337   void HCLL_Reset(MBLK *pMBlk)                              //OGF: Controller & Baseband, 0x03
000000  b510              PUSH     {r4,lr}
;;;1338   {
;;;1339   #ifdef _HW_PRG_RESET_
;;;1340       extern void MCU_WDTmr_En(void);
;;;1341   
;;;1342       MCU_WDTmr_En();
000002  f7fffffe          BL       MCU_WDTmr_En
;;;1343   #else   //(#ifdef _HW_PRG_RESET_)
;;;1344       MBLK *mblk;
;;;1345       mblk = pMBlk;
;;;1346   
;;;1347       mblk = GetMsgBlk();
;;;1348       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
;;;1349   #ifdef _HCI_HW_
;;;1350       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1351       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = HCI_CMD_OGF_RESET;
;;;1352       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = (OGF_HCI_CMD_CONTROLLER_BASEBAND<<2);
;;;1353   #else
;;;1354       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_RESET;
;;;1355   #endif
;;;1356       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
;;;1357   #ifdef _HCI_NEW_
;;;1358       SndMsgBlk(mblk, Q_2HCI);
;;;1359   #endif
;;;1360   #endif  //(#ifdef _HW_PRG_RESET_)
;;;1361   }
000006  bd10              POP      {r4,pc}
;;;1362   
                          ENDP


                          AREA ||i.HCLL_Set_Ctrler_to_Host_Flow_Ctrl||, CODE, READONLY, ALIGN=1

                  HCLL_Set_Ctrler_to_Host_Flow_Ctrl PROC
;;;1369   
;;;1370   void HCLL_Set_Ctrler_to_Host_Flow_Ctrl(MBLK *pMBlk)       //OGF: Controller & Baseband, 0x03
000000  4770              BX       lr
;;;1371   {
;;;1372       pMBlk = pMBlk;
;;;1373   }
;;;1374   
                          ENDP


                          AREA ||i.HCLL_Set_Event_Mask||, CODE, READONLY, ALIGN=2

                  HCLL_Set_Event_Mask PROC
;;;1304   
;;;1305   void HCLL_Set_Event_Mask(MBLK *pMBlk)                     //OGF: Controller & Baseband, 0x03
000000  b510              PUSH     {r4,lr}
;;;1306   {
;;;1307       MBLK *mblk;
;;;1308   
;;;1309       //HCI__012
;;;1310       Event_Mask[0] = pMBlk->Para.HCLL_Set_Event_Mask_Para.HCI_Event_Mask[0];     //10: Disconnection Complete Event, 80: Encryption Change Event
000002  490d              LDR      r1,|L58.56|
000004  7a02              LDRB     r2,[r0,#8]
000006  700a              STRB     r2,[r1,#0]
;;;1311       Event_Mask[1] = pMBlk->Para.HCLL_Set_Event_Mask_Para.HCI_Event_Mask[1];     //08: Read Remote Version Information Complete Event, 80: Hardware Error Event
000008  7a42              LDRB     r2,[r0,#9]
00000a  704a              STRB     r2,[r1,#1]
;;;1312       Event_Mask[2] = pMBlk->Para.HCLL_Set_Event_Mask_Para.HCI_Event_Mask[3];     //02: Data Buffer Overflow Event
00000c  7ac2              LDRB     r2,[r0,#0xb]
00000e  708a              STRB     r2,[r1,#2]
;;;1313       Event_Mask[3] = pMBlk->Para.HCLL_Set_Event_Mask_Para.HCI_Event_Mask[5];     //80: Encryption Key Refresh Complete Event
000010  7b42              LDRB     r2,[r0,#0xd]
000012  70ca              STRB     r2,[r1,#3]
;;;1314       Event_Mask[4] = pMBlk->Para.HCLL_Set_Event_Mask_Para.HCI_Event_Mask[7];     //20: LE Meta-Event
000014  7bc0              LDRB     r0,[r0,#0xf]
000016  7108              STRB     r0,[r1,#4]
;;;1315   
;;;1316       //mblk = GetMsgBlk();
;;;1317       mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HCLL_Set_Event_Mask_Para));
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;1318       if(mblk == (MBLK *)0)
00001e  2800              CMP      r0,#0
000020  d008              BEQ      |L58.52|
;;;1319       {
;;;1320           return;
;;;1321       }
;;;1322       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000022  2161              MOVS     r1,#0x61
000024  7101              STRB     r1,[r0,#4]
;;;1323   #ifdef _HCI_HW_
;;;1324       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1325       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Set_Event_Mask_Para.HCI_Ocf;
;;;1326       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Set_Event_Mask_Para.HCI_Ogf;
;;;1327   #else
;;;1328       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_SET_EVENT_MASK;
000026  21b3              MOVS     r1,#0xb3
000028  7281              STRB     r1,[r0,#0xa]
;;;1329   #endif
;;;1330       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00002a  2100              MOVS     r1,#0
00002c  72c1              STRB     r1,[r0,#0xb]
;;;1331   #ifdef _HCI_NEW_
;;;1332       SndMsgBlk(mblk, Q_2HCI);
00002e  2104              MOVS     r1,#4
000030  f7fffffe          BL       SndMsgBlk
                  |L58.52|
;;;1333   #endif
;;;1334   }
000034  bd10              POP      {r4,pc}
;;;1335   
                          ENDP

000036  0000              DCW      0x0000
                  |L58.56|
                          DCD      Event_Mask

                          AREA ||i.HCLL_Set_Event_Mask_Page_2||, CODE, READONLY, ALIGN=2

                  HCLL_Set_Event_Mask_Page_2 PROC
;;;1387   
;;;1388   void HCLL_Set_Event_Mask_Page_2(MBLK *pMBlk)              //OGF: Controller & Baseband, 0x03, Spec. 4.1
000000  b510              PUSH     {r4,lr}
;;;1389   {
;;;1390       MBLK *mblk;
;;;1391   
;;;1392       //LL__006
;;;1393       Event_Mask2[0] = pMBlk->Para.HCLL_Set_Event_Mask_Page_2_Para.HCI_Event_Mask_Page2[2];
000002  4907              LDR      r1,|L59.32|
000004  7a80              LDRB     r0,[r0,#0xa]
000006  7008              STRB     r0,[r1,#0]
;;;1394       mblk = GetMsgBlk();
000008  f7fffffe          BL       GetMsgBlk
;;;1395       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00000c  2161              MOVS     r1,#0x61
00000e  7101              STRB     r1,[r0,#4]
;;;1396   #ifdef _HCI_HW_
;;;1397       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;1398       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Set_Event_Mask_Page_2_Para.HCI_Ocf;
;;;1399       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Set_Event_Mask_Page_2_Para.HCI_Ogf;
;;;1400   #else
;;;1401       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_SET_EVENT_MASK_PAGE_2;
000010  21b9              MOVS     r1,#0xb9
000012  7281              STRB     r1,[r0,#0xa]
;;;1402   #endif
;;;1403       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000014  2100              MOVS     r1,#0
000016  72c1              STRB     r1,[r0,#0xb]
;;;1404   #ifdef _HCI_NEW_
;;;1405       SndMsgBlk(mblk, Q_2HCI);
000018  2104              MOVS     r1,#4
00001a  f7fffffe          BL       SndMsgBlk
;;;1406   #endif
;;;1407   }
00001e  bd10              POP      {r4,pc}
;;;1408   
                          ENDP

                  |L59.32|
                          DCD      Event_Mask2

                          AREA ||i.HCLL_Write_Le_Host_Support||, CODE, READONLY, ALIGN=1

                  HCLL_Write_Le_Host_Support PROC
;;;1415   
;;;1416   void HCLL_Write_Le_Host_Support(MBLK *pMBlk)              //OGF: Controller & Baseband, 0x03
000000  4770              BX       lr
;;;1417   {
;;;1418       pMBlk = pMBlk;
;;;1419   }
;;;1420   
                          ENDP


                          AREA ||i.HCLL_Write_authen_payload_timeout||, CODE, READONLY, ALIGN=1

                  HCLL_Write_authen_payload_timeout PROC
;;;1427   
;;;1428   void HCLL_Write_authen_payload_timeout(MBLK *pMBlk)       //OGF: Controller & Baseband, 0x03, Spec. 4.1
000000  4770              BX       lr
;;;1429   {
;;;1430       pMBlk = pMBlk;
;;;1431   }
;;;1432   
                          ENDP


                          AREA ||i.LLEC_LE_CCM_Manual||, CODE, READONLY, ALIGN=2

                  LLEC_LE_CCM_Manual PROC
;;;4037   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS
;;;4038   void LLEC_LE_CCM_Manual(MBLK *pMBlk)
000000  b5f0              PUSH     {r4-r7,lr}
;;;4039   {
000002  4606              MOV      r6,r0
;;;4040       MBLK *mblk;
;;;4041   
;;;4042       Uint8 i;
;;;4043       Uint8 length;
;;;4044       Uint8 b[16];
;;;4045       Uint8 y[16];
;;;4046       Uint8 ctr[16];
;;;4047   
;;;4048       mblk = (MBLK *)pMBlk->Para.MLL_LE_CCM_Manual_Para.mblk_LL_ConnDataQ;
;;;4049       i = pMBlk->Para.MLL_LE_CCM_Manual_Para.HCI_Conn_Hdl_L;
000004  7a07              LDRB     r7,[r0,#8]
;;;4050       smpAES_in_key(LL_Conn_Para[i].LE_Conn_Para.LL_SMP_Key);
000006  68c4              LDR      r4,[r0,#0xc]
000008  2088              MOVS     r0,#0x88
00000a  4971              LDR      r1,|L62.464|
00000c  4378              MULS     r0,r7,r0
00000e  1845              ADDS     r5,r0,r1
000010  4628              MOV      r0,r5
000012  b08d              SUB      sp,sp,#0x34           ;4039
000014  3060              ADDS     r0,r0,#0x60
000016  f7fffffe          BL       smpAES_in_key
;;;4051   
;;;4052       Knl_MemCpy_Isr((Uint8 *)&mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT, (Uint8 *)&LL_Conn_Para[i].LE_Conn_Para.LL_SMP_packetCounterT,5);
00001a  4620              MOV      r0,r4
00001c  4629              MOV      r1,r5
00001e  3014              ADDS     r0,r0,#0x14
000020  3170              ADDS     r1,r1,#0x70
000022  2205              MOVS     r2,#5
000024  900c              STR      r0,[sp,#0x30]
000026  f7fffffe          BL       Knl_MemCpy_Isr
00002a  4629              MOV      r1,r5
;;;4053       Knl_MemCpy_Isr(mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_IV, LL_Conn_Para[i].LE_Conn_Para.LL_SMP_IV,8);
00002c  4620              MOV      r0,r4
00002e  3158              ADDS     r1,r1,#0x58           ;4052
000030  2208              MOVS     r2,#8
000032  3019              ADDS     r0,r0,#0x19
000034  f7fffffe          BL       Knl_MemCpy_Isr
;;;4054   #if MAX_NUM_CONN_MAS_HDL != 0
;;;4055       if(i<LL_CONN_ID_MASTER_RSV)         //master
000038  2f04              CMP      r7,#4
00003a  d203              BCS      |L62.68|
;;;4056       {
;;;4057           mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterTd |= 0x80;
00003c  7e20              LDRB     r0,[r4,#0x18]
00003e  2180              MOVS     r1,#0x80
000040  4308              ORRS     r0,r0,r1
000042  7620              STRB     r0,[r4,#0x18]
                  |L62.68|
;;;4058       }
;;;4059   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;4060       length = mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_LthL;
000044  7aa5              LDRB     r5,[r4,#0xa]
;;;4061   
;;;4062       //construct first Block B_0
;;;4063       b[0] = 0x49;                        //b0=0x49, flags in BLE
000046  2049              MOVS     r0,#0x49
000048  4669              MOV      r1,sp
00004a  7008              STRB     r0,[r1,#0]
;;;4064       b[14] = 0;                          //b[14]=MSO byte of payload length
00004c  2000              MOVS     r0,#0
00004e  7388              STRB     r0,[r1,#0xe]
;;;4065       b[15] = length;                     //b[15]=LSO byte of payload length
000050  73cd              STRB     r5,[r1,#0xf]
;;;4066       Knl_MemCpy_Isr(&b[1], (Uint8 *)&mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT, 13);
000052  466f              MOV      r7,sp
000054  220d              MOVS     r2,#0xd
000056  1c78              ADDS     r0,r7,#1
000058  990c              LDR      r1,[sp,#0x30]
00005a  f7fffffe          BL       Knl_MemCpy_Isr
;;;4067   
;;;4068       /* Start CBC-MAC with first block */
;;;4069       for(i=0; i<16; i++)
00005e  2000              MOVS     r0,#0
                  |L62.96|
;;;4070       {
;;;4071           y[i] = TAB_ZERO_128[i] ^ b[i];
000060  495c              LDR      r1,|L62.468|
000062  5c3a              LDRB     r2,[r7,r0]
000064  5c09              LDRB     r1,[r1,r0]
000066  4051              EORS     r1,r1,r2
000068  aa08              ADD      r2,sp,#0x20
00006a  5411              STRB     r1,[r2,r0]
00006c  1c40              ADDS     r0,r0,#1
00006e  b2c0              UXTB     r0,r0                 ;4069
000070  2810              CMP      r0,#0x10              ;4069
000072  d3f5              BCC      |L62.96|
;;;4072       }
;;;4073       smpAES_in_PlainText(y);
000074  4610              MOV      r0,r2
000076  f7fffffe          BL       smpAES_in_PlainText
;;;4074       smpAES_En();
00007a  f7fffffe          BL       smpAES_En
;;;4075   
;;;4076       //construct second Block B_1
;;;4077       Knl_CodeCpy_Isr(b, TAB_ZERO_128, 16);
00007e  2210              MOVS     r2,#0x10
000080  4954              LDR      r1,|L62.468|
000082  4668              MOV      r0,sp
000084  f7fffffe          BL       Knl_CodeCpy_Isr
;;;4078       //b[0] = 0;                                                                         //B_2[0]=0  (MSO of addition data length)
;;;4079       b[1] = 1;                                                                           //B_2[1]=1  (LSO of addition data length)
000088  2001              MOVS     r0,#1
00008a  4669              MOV      r1,sp
00008c  7048              STRB     r0,[r1,#1]
;;;4080       b[2] = pMBlk->Para.MLL_LE_CCM_Manual_Para.HCI_Conn_Hdl_H;                           //B_2[2]=1 byte additional data
00008e  7a70              LDRB     r0,[r6,#9]
000090  7088              STRB     r0,[r1,#2]
;;;4081   
;;;4082       smpAES_out(y);
000092  a808              ADD      r0,sp,#0x20
000094  f7fffffe          BL       smpAES_out
;;;4083       /* UPDATE_CBC_MAC, y=ECB(b^y) */
;;;4084       for(i=0; i<16; i++)
000098  2000              MOVS     r0,#0
00009a  ae08              ADD      r6,sp,#0x20           ;4045
                  |L62.156|
;;;4085       {
;;;4086           y[i] ^= b[i];
00009c  5c31              LDRB     r1,[r6,r0]
00009e  5c3a              LDRB     r2,[r7,r0]
0000a0  4051              EORS     r1,r1,r2
0000a2  5431              STRB     r1,[r6,r0]
0000a4  1c40              ADDS     r0,r0,#1
0000a6  b2c0              UXTB     r0,r0                 ;4084
0000a8  2810              CMP      r0,#0x10              ;4084
0000aa  d3f7              BCC      |L62.156|
;;;4087       }
;;;4088       smpAES_in_PlainText(y);
0000ac  4630              MOV      r0,r6
0000ae  f7fffffe          BL       smpAES_in_PlainText
;;;4089       smpAES_En();
0000b2  f7fffffe          BL       smpAES_En
;;;4090   
;;;4091       //construct counter Block A_1
;;;4092       ctr[0] = 1;                                 //ctr[0]=1  (flags = 0x01)
0000b6  2001              MOVS     r0,#1
0000b8  466a              MOV      r2,sp
0000ba  7410              STRB     r0,[r2,#0x10]
;;;4093       ctr[14] = 0;                                //ctr[14]=0 (MSO of counter)
0000bc  2100              MOVS     r1,#0
0000be  7791              STRB     r1,[r2,#0x1e]
;;;4094       ctr[15] = 1;                                //ctr[15]=1 (LSO of counter)  A_1 block: use to encrypt first 16 byte payload
0000c0  77d0              STRB     r0,[r2,#0x1f]
;;;4095       Knl_MemCpy_Isr(&ctr[1], (Uint8 *)&mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT, 13);
0000c2  a804              ADD      r0,sp,#0x10
0000c4  220d              MOVS     r2,#0xd
0000c6  3001              ADDS     r0,#1
0000c8  990c              LDR      r1,[sp,#0x30]
0000ca  f7fffffe          BL       Knl_MemCpy_Isr
;;;4096   
;;;4097       /* crypt the message */
;;;4098       Knl_CodeCpy_Isr(b, TAB_ZERO_128, 16);
0000ce  2210              MOVS     r2,#0x10
0000d0  4940              LDR      r1,|L62.468|
0000d2  4668              MOV      r0,sp
0000d4  f7fffffe          BL       Knl_CodeCpy_Isr
;;;4099       Knl_MemCpy_Isr(b, mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data, length);
0000d8  4621              MOV      r1,r4
0000da  310b              ADDS     r1,r1,#0xb
0000dc  462a              MOV      r2,r5
0000de  4668              MOV      r0,sp
0000e0  910c              STR      r1,[sp,#0x30]
0000e2  f7fffffe          BL       Knl_MemCpy_Isr
;;;4100   
;;;4101       smpAES_out(y);                              //y: x1
0000e6  a808              ADD      r0,sp,#0x20
0000e8  f7fffffe          BL       smpAES_out
;;;4102   
;;;4103       /* UPDATE_CBC_MAC; y=ECB(b^y) */            //in BLE, y[0]~[3] is MIC (non-encrypted yet)
;;;4104       for(i=0; i<16; i++)
0000ec  2000              MOVS     r0,#0
                  |L62.238|
;;;4105       {
;;;4106           y[i] ^= b[i];
0000ee  5c31              LDRB     r1,[r6,r0]
0000f0  5c3a              LDRB     r2,[r7,r0]
0000f2  4051              EORS     r1,r1,r2
0000f4  5431              STRB     r1,[r6,r0]
0000f6  1c40              ADDS     r0,r0,#1
0000f8  b2c0              UXTB     r0,r0                 ;4104
0000fa  2810              CMP      r0,#0x10              ;4104
0000fc  d3f7              BCC      |L62.238|
;;;4107       }
;;;4108       smpAES_in_PlainText(y);
0000fe  a808              ADD      r0,sp,#0x20
000100  f7fffffe          BL       smpAES_in_PlainText
;;;4109       smpAES_En();
000104  f7fffffe          BL       smpAES_En
;;;4110       smpAES_out(y);                              //y: MIC
000108  a808              ADD      r0,sp,#0x20
00010a  f7fffffe          BL       smpAES_out
;;;4111   
;;;4112       /* CTR_CRYPT; dst=ECB_CTR(src, ctr), encrypt 1st message block */
;;;4113       smpAES_in_PlainText(ctr);
00010e  a804              ADD      r0,sp,#0x10
000110  f7fffffe          BL       smpAES_in_PlainText
;;;4114       smpAES_En();
000114  f7fffffe          BL       smpAES_En
;;;4115       smpAES_out(b);                              //b: block counter 1
000118  4668              MOV      r0,sp
00011a  f7fffffe          BL       smpAES_out
;;;4116   
;;;4117   
;;;4118       // HCI_DataPkt_Data
;;;4119       for(i=0; i<7; i++)
00011e  2000              MOVS     r0,#0
                  |L62.288|
;;;4120       {
;;;4121           mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[i] = mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data[i] ^ b[i];                 //output = dst
000120  1821              ADDS     r1,r4,r0
000122  5c3b              LDRB     r3,[r7,r0]
000124  7aca              LDRB     r2,[r1,#0xb]
000126  3120              ADDS     r1,r1,#0x20
000128  405a              EORS     r2,r2,r3
00012a  1c40              ADDS     r0,r0,#1
00012c  b2c0              UXTB     r0,r0                 ;4119
00012e  708a              STRB     r2,[r1,#2]
000130  2807              CMP      r0,#7                 ;4119
000132  d3f5              BCC      |L62.288|
;;;4122       }
;;;4123   
;;;4124       // LL_SMP_packetCounterT
;;;4125       i = 7;
;;;4126       mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[i] = (mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT | 0xFF) ^ b[i];
000134  6960              LDR      r0,[r4,#0x14]
000136  466f              MOV      r7,sp
000138  22ff              MOVS     r2,#0xff
00013a  4603              MOV      r3,r0
00013c  79f9              LDRB     r1,[r7,#7]
00013e  4313              ORRS     r3,r3,r2
000140  404b              EORS     r3,r3,r1
000142  4621              MOV      r1,r4
000144  3129              ADDS     r1,r1,#0x29
000146  700b              STRB     r3,[r1,#0]
;;;4127       mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[i+1] = ((mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT >> 8)| 0xFF) ^ b[i+1];
000148  0a03              LSRS     r3,r0,#8
00014a  7a3f              LDRB     r7,[r7,#8]
00014c  4313              ORRS     r3,r3,r2
00014e  407b              EORS     r3,r3,r7
000150  704b              STRB     r3,[r1,#1]
;;;4128       mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[i+2] = ((mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT >> 16)| 0xFF) ^ b[i+2];
000152  0c03              LSRS     r3,r0,#16
000154  466f              MOV      r7,sp
000156  7a7f              LDRB     r7,[r7,#9]
000158  4313              ORRS     r3,r3,r2
00015a  407b              EORS     r3,r3,r7
;;;4129       mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[i+3] = ((mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT >> 24)| 0xFF) ^ b[i+3];
00015c  0e00              LSRS     r0,r0,#24
00015e  708b              STRB     r3,[r1,#2]            ;4128
000160  4310              ORRS     r0,r0,r2
000162  466f              MOV      r7,sp
000164  7aba              LDRB     r2,[r7,#0xa]
000166  4050              EORS     r0,r0,r2
000168  70c8              STRB     r0,[r1,#3]
;;;4130   
;;;4131       // LL_SMP_packetCounterTd
;;;4132       i = 11;
;;;4133       mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[i] = mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterTd ^ b[i];
00016a  7e21              LDRB     r1,[r4,#0x18]
00016c  7af8              LDRB     r0,[r7,#0xb]
00016e  4041              EORS     r1,r1,r0
000170  980c              LDR      r0,[sp,#0x30]
000172  3020              ADDS     r0,r0,#0x20
000174  7081              STRB     r1,[r0,#2]
;;;4134   
;;;4135       // LL_SMP_IV
;;;4136       for(i=0; i<4; i++)
000176  2000              MOVS     r0,#0
                  |L62.376|
;;;4137       {
;;;4138           mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[i+12] = mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_IV[i] ^ b[i+12];
000178  1821              ADDS     r1,r4,r0
00017a  183b              ADDS     r3,r7,r0
00017c  7e4a              LDRB     r2,[r1,#0x19]
00017e  7b1b              LDRB     r3,[r3,#0xc]
000180  3120              ADDS     r1,r1,#0x20
000182  405a              EORS     r2,r2,r3
000184  1c40              ADDS     r0,r0,#1
000186  b2c0              UXTB     r0,r0                 ;4136
000188  738a              STRB     r2,[r1,#0xe]
00018a  2804              CMP      r0,#4                 ;4136
00018c  d3f4              BCC      |L62.376|
;;;4139       }
;;;4140   
;;;4141       //construction A_0 block: use to encrypt MIC
;;;4142       ctr[14] = 0;
00018e  2000              MOVS     r0,#0
000190  77b8              STRB     r0,[r7,#0x1e]
;;;4143       ctr[15] = 0;
000192  77f8              STRB     r0,[r7,#0x1f]
;;;4144   
;;;4145       /* CTR_CRYPT; dst=ECB_CTR(src, ctr), encrypt MIC block */
;;;4146       smpAES_in_PlainText(ctr);
000194  a804              ADD      r0,sp,#0x10
000196  f7fffffe          BL       smpAES_in_PlainText
;;;4147       smpAES_En();
00019a  f7fffffe          BL       smpAES_En
;;;4148       smpAES_out(b);                              //b: block counter MIC
00019e  4668              MOV      r0,sp
0001a0  f7fffffe          BL       smpAES_out
;;;4149       for(i=0; i<4; i++)                                                                      //4: MIC length
0001a4  2000              MOVS     r0,#0
                  |L62.422|
;;;4150       {
;;;4151           y[i] ^= b[i];
0001a6  5c31              LDRB     r1,[r6,r0]
0001a8  5c3a              LDRB     r2,[r7,r0]
0001aa  4051              EORS     r1,r1,r2
0001ac  5431              STRB     r1,[r6,r0]
0001ae  1c40              ADDS     r0,r0,#1
0001b0  b2c0              UXTB     r0,r0                 ;4149
0001b2  2804              CMP      r0,#4                 ;4149
0001b4  d3f7              BCC      |L62.422|
;;;4152       }
;;;4153   
;;;4154       Knl_MemCpy_Isr(&mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM[length], y, 4); //4: MIC length
0001b6  1960              ADDS     r0,r4,r5
0001b8  2204              MOVS     r2,#4
0001ba  a908              ADD      r1,sp,#0x20
0001bc  3022              ADDS     r0,r0,#0x22
0001be  f7fffffe          BL       Knl_MemCpy_Isr
;;;4155   
;;;4156       mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Length_CCM = length+4;                   //4: MIC length
0001c2  1d28              ADDS     r0,r5,#4
0001c4  2121              MOVS     r1,#0x21
0001c6  5508              STRB     r0,[r1,r4]
;;;4157       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = length;
0001c8  7265              STRB     r5,[r4,#9]
;;;4158   }
0001ca  b00d              ADD      sp,sp,#0x34
0001cc  bdf0              POP      {r4-r7,pc}
;;;4159   #endif
                          ENDP

0001ce  0000              DCW      0x0000
                  |L62.464|
                          DCD      ||.bss||+0xd0
                  |L62.468|
                          DCD      ||.constdata||+0x1c6

                          AREA ||i.LLEC_LE_Encrypt||, CODE, READONLY, ALIGN=1

                  LLEC_LE_Encrypt PROC
;;;3857   
;;;3858   void LLEC_LE_Encrypt(MBLK *pMBlk)                         //OGF: LE Controller, 0x08
000000  4601              MOV      r1,r0
;;;3859   {
000002  b510              PUSH     {r4,lr}
;;;3860       MBLK *mblk;
;;;3861   
;;;3862       smpAES_inInv(pMBlk->Para.HCLL_LE_Encrypt_Para.HCI_Key, pMBlk->Para.HCLL_LE_Encrypt_Para.HCI_Plain_Data);
000004  3118              ADDS     r1,r1,#0x18
000006  3008              ADDS     r0,r0,#8
000008  f7fffffe          BL       smpAES_inInv
;;;3863       mblk = GetMsgBlk_Isr();
00000c  f7fffffe          BL       GetMsgBlk_Isr
000010  4604              MOV      r4,r0
;;;3864       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000012  2061              MOVS     r0,#0x61
000014  7120              STRB     r0,[r4,#4]
;;;3865   #ifdef _HCI_HW_
;;;3866       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (LEN_AES_KEY+1);
;;;3867       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Encrypt_Para.HCI_Ocf;
;;;3868       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Encrypt_Para.HCI_Ogf;
;;;3869   #else
;;;3870       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_ENCRYPT;
000016  20d9              MOVS     r0,#0xd9
000018  72a0              STRB     r0,[r4,#0xa]
;;;3871   #endif
;;;3872       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00001a  2000              MOVS     r0,#0
00001c  72e0              STRB     r0,[r4,#0xb]
;;;3873       smpAES_outInv(&(mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1]));
00001e  4620              MOV      r0,r4
000020  300c              ADDS     r0,r0,#0xc
000022  f7fffffe          BL       smpAES_outInv
;;;3874   #ifdef _HCI_NEW_
;;;3875       SndMsgBlk_Isr(mblk, Q_2HCI);
000026  2104              MOVS     r1,#4
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SndMsgBlk_Isr
;;;3876   #endif
;;;3877   }
00002e  bd10              POP      {r4,pc}
;;;3878   
                          ENDP


                          AREA ||i.LLEC_LE_Long_term_key_req_reply||, CODE, READONLY, ALIGN=2

                  LLEC_LE_Long_term_key_req_reply PROC
;;;3942   
;;;3943   void LLEC_LE_Long_term_key_req_reply(MBLK *pMBlk)         //OGF: LE Controller, 0x08
000000  b5f8              PUSH     {r3-r7,lr}
;;;3944   {
;;;3945       MBLK *mblk;
;;;3946       Uint8 i;
;;;3947       LL_Conn *pLL_Conn;
;;;3948   
;;;3949       i = pMBlk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_Conn_Hdl_L;
000002  7a06              LDRB     r6,[r0,#8]
;;;3950       pLL_Conn = &LL_Conn_Para[i];
000004  2188              MOVS     r1,#0x88
000006  4a13              LDR      r2,|L64.84|
000008  4371              MULS     r1,r6,r1
00000a  188c              ADDS     r4,r1,r2
;;;3951       smpAES_inInv(pMBlk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_LongTermKey, pLL_Conn->LE_Conn_Para.LL_SMP_Key);
00000c  4621              MOV      r1,r4
00000e  3160              ADDS     r1,r1,#0x60
000010  460d              MOV      r5,r1
000012  3009              ADDS     r0,r0,#9
000014  f7fffffe          BL       smpAES_inInv
;;;3952   
;;;3953       mblk = GetMsgBlk_Isr();
000018  f7fffffe          BL       GetMsgBlk_Isr
;;;3954       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
00001c  2161              MOVS     r1,#0x61
00001e  7101              STRB     r1,[r0,#4]
;;;3955   #ifdef _HCI_HW_
;;;3956       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (1+2);
;;;3957       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_Ocf;
;;;3958       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Long_Term_key_Req_Reply_Para.HCI_Ogf;
;;;3959   #else
;;;3960       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_LONG_TERM_KEY_REQ_REPLY;
000020  21dc              MOVS     r1,#0xdc
000022  7281              STRB     r1,[r0,#0xa]
;;;3961   #endif
;;;3962       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
000024  2700              MOVS     r7,#0
000026  72c7              STRB     r7,[r0,#0xb]
;;;3963       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1] = i;
000028  7306              STRB     r6,[r0,#0xc]
;;;3964   #ifdef _HCI_HW_
;;;3965       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[2] = LL_CONN_ID_HDL_H;
;;;3966   #endif
;;;3967   #ifdef _HCI_NEW_
;;;3968       SndMsgBlk_Isr(mblk, Q_2HCI);
00002a  2104              MOVS     r1,#4
00002c  f7fffffe          BL       SndMsgBlk_Isr
;;;3969   #endif
;;;3970       LL_Msg_CTRL_PKT_Isr(0, LL_START_ENC_REQ, 0, i);
000030  2200              MOVS     r2,#0
000032  4633              MOV      r3,r6
000034  2105              MOVS     r1,#5
000036  4610              MOV      r0,r2
000038  f7fffffe          BL       LL_Msg_CTRL_PKT_Isr
00003c  4628              MOV      r0,r5
;;;3971   
;;;3972       smpAES_out(pLL_Conn->LE_Conn_Para.LL_SMP_Key);
00003e  f7fffffe          BL       smpAES_out
;;;3973   
;;;3974       LL_SMP_DataCh = LL_SMP_DATA_CH_R_CCM;
000042  4805              LDR      r0,|L64.88|
000044  2102              MOVS     r1,#2
000046  7181              STRB     r1,[r0,#6]
;;;3975       pLL_Conn->LE_Conn_Para.LL_SMP_DataCh = LL_SMP_DataCh;
000048  7569              STRB     r1,[r5,#0x15]
;;;3976   
;;;3977       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterT = 0;
;;;3978       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterR = 0;
00004a  6727              STR      r7,[r4,#0x70]
;;;3979       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterTd = 0;
00004c  67a7              STR      r7,[r4,#0x78]
00004e  752f              STRB     r7,[r5,#0x14]
;;;3980       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterRd = 0;
000050  772f              STRB     r7,[r5,#0x1c]
;;;3981   }
000052  bdf8              POP      {r3-r7,pc}
;;;3982   
                          ENDP

                  |L64.84|
                          DCD      ||.bss||+0xd0
                  |L64.88|
                          DCD      ||.data||

                          AREA ||i.LLEC_LE_Rand||, CODE, READONLY, ALIGN=2

                  LLEC_LE_Rand PROC
;;;3879   
;;;3880   void LLEC_LE_Rand(MBLK *pMBlk)                            //OGF: LE Controller, 0x08
000000  b510              PUSH     {r4,lr}
;;;3881   {
;;;3882       MBLK *mblk;
;;;3883   
;;;3884       Knl_CodeCpy_Isr(pMBlk->Para.HCLL_LE_Rand_Para.HCI_ResvMem, &RAND_INI32[(((Uint8 *) &seedR16)[0]&0x0F)], LEN_AES_KEY);
000002  4910              LDR      r1,|L65.68|
000004  3008              ADDS     r0,r0,#8
000006  7809              LDRB     r1,[r1,#0]  ; seedR16
000008  4604              MOV      r4,r0
00000a  070a              LSLS     r2,r1,#28
00000c  490e              LDR      r1,|L65.72|
00000e  0f12              LSRS     r2,r2,#28
000010  1851              ADDS     r1,r2,r1
000012  2210              MOVS     r2,#0x10
000014  f7fffffe          BL       Knl_CodeCpy_Isr
000018  4621              MOV      r1,r4
;;;3885       smpAES_inInv((Uint8 *)&seedR16, pMBlk->Para.HCLL_LE_Rand_Para.HCI_ResvMem);
00001a  480a              LDR      r0,|L65.68|
00001c  f7fffffe          BL       smpAES_inInv
;;;3886   
;;;3887       mblk = GetMsgBlk_Isr();
000020  f7fffffe          BL       GetMsgBlk_Isr
000024  4604              MOV      r4,r0
;;;3888       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000026  2061              MOVS     r0,#0x61
000028  7120              STRB     r0,[r4,#4]
;;;3889   #ifdef _HCI_HW_
;;;3890       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Rand_Para.HCI_Ocf;
;;;3891       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Rand_Para.HCI_Ogf;
;;;3892       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = (1+8);
;;;3893   #else
;;;3894       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = HCLL_LE_RAND;
00002a  20da              MOVS     r0,#0xda
00002c  72a0              STRB     r0,[r4,#0xa]
;;;3895   #endif
;;;3896       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_SUCCESS;
00002e  2000              MOVS     r0,#0
000030  72e0              STRB     r0,[r4,#0xb]
;;;3897       smpAES_out(&mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[1]);
000032  4620              MOV      r0,r4
000034  300c              ADDS     r0,r0,#0xc
000036  f7fffffe          BL       smpAES_out
;;;3898   #ifdef _HCI_NEW_
;;;3899       SndMsgBlk_Isr(mblk, Q_2HCI);
00003a  2104              MOVS     r1,#4
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       SndMsgBlk_Isr
;;;3900   #endif
;;;3901   }
000042  bd10              POP      {r4,pc}
;;;3902   
                          ENDP

                  |L65.68|
                          DCD      ||.data||+0x2c
                  |L65.72|
                          DCD      ||.constdata||+0xfa

                          AREA ||i.LLEC_LE_Start_encryption||, CODE, READONLY, ALIGN=2

                  LLEC_LE_Start_encryption PROC
;;;3903   
;;;3904   void LLEC_LE_Start_encryption(MBLK *pMBlk)                //OGF: LE Controller, 0x08
000000  b5f8              PUSH     {r3-r7,lr}
;;;3905   {
000002  4604              MOV      r4,r0
;;;3906       Uint8 i;
;;;3907       Uint8 *pi;
;;;3908       MBLK *mblk;
;;;3909   
;;;3910       pi = pMBlk->Para.HCLL_LE_Start_Encryption_Para.HCI_LongTermKey;
000004  3013              ADDS     r0,r0,#0x13
;;;3911       mblk = GetMsgBlk_Isr();
000006  9000              STR      r0,[sp,#0]
000008  f7fffffe          BL       GetMsgBlk_Isr
00000c  4606              MOV      r6,r0
;;;3912       Knl_MemCpy_Isr(mblk->Para.MLL_LE_Conn_Para_SMP.LL_SMP_Key, pi, LEN_AES_KEY);
00000e  2210              MOVS     r2,#0x10
000010  3022              ADDS     r0,r0,#0x22
000012  9900              LDR      r1,[sp,#0]
000014  f7fffffe          BL       Knl_MemCpy_Isr
;;;3913       LL_smp_SKD_IV_genIn(pi);
000018  9800              LDR      r0,[sp,#0]
00001a  f7fffffe          BL       LL_smp_SKD_IV_genIn
;;;3914       i = pMBlk->Para.HCLL_LE_Start_Encryption_Para.HCI_Conn_Hdl_L;
00001e  7a25              LDRB     r5,[r4,#8]
;;;3915       mblk_LL_conn_Para[i] = mblk;
000020  4630              MOV      r0,r6
000022  4e16              LDR      r6,|L66.124|
000024  00af              LSLS     r7,r5,#2
000026  51f0              STR      r0,[r6,r7]
;;;3916       mblk = GetMsgBlk_Isr();
000028  f7fffffe          BL       GetMsgBlk_Isr
;;;3917       mblk->Primitive = MHC_EVENT_CMD_STATUS;
00002c  2162              MOVS     r1,#0x62
00002e  7101              STRB     r1,[r0,#4]
;;;3918       mblk->Para.MHC_Cmd_Status_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
000030  2100              MOVS     r1,#0
000032  7241              STRB     r1,[r0,#9]
;;;3919   #ifdef _HCI_HW_
;;;3920       mblk->Para.MHC_Cmd_Status_Para.HCI_Ocf = pMBlk->Para.HCLL_LE_Start_Encryption_Para.HCI_Ocf;
;;;3921       mblk->Para.MHC_Cmd_Status_Para.HCI_Ogf = pMBlk->Para.HCLL_LE_Start_Encryption_Para.HCI_Ogf;
;;;3922   #else
;;;3923       mblk->Para.MHC_Cmd_Status_Para.By_Primitive = HCLL_LE_START_ENCRYPTION;
000034  21db              MOVS     r1,#0xdb
000036  72c1              STRB     r1,[r0,#0xb]
;;;3924   #endif
;;;3925   #ifdef _HCI_NEW_
;;;3926       SndMsgBlk_Isr(mblk, Q_2HCI);
000038  2104              MOVS     r1,#4
00003a  f7fffffe          BL       SndMsgBlk_Isr
;;;3927   #endif
;;;3928   
;;;3929       smpAES_out(pi);
00003e  9800              LDR      r0,[sp,#0]
000040  f7fffffe          BL       smpAES_out
;;;3930       Knl_MemCpy_Isr(mblk_LL_conn_Para[i]->Para.MLL_LE_Conn_Para_SMP.LL_Random_Num, pMBlk->Para.HCLL_LE_Start_Encryption_Para.HCI_Random_Num, (LEN_SMP_RAND+LEN_SMP_EDIV+LEN_SMP_SKDM+LEN_SMP_IVM));
000044  59f0              LDR      r0,[r6,r7]
000046  4621              MOV      r1,r4
000048  3109              ADDS     r1,r1,#9
00004a  2216              MOVS     r2,#0x16
00004c  460c              MOV      r4,r1
00004e  3008              ADDS     r0,r0,#8
000050  f7fffffe          BL       Knl_MemCpy_Isr
;;;3931   
;;;3932       if((LL_Conn_Para[i].LE_Conn_Para.LL_SMP_DataCh&LL_SMP_DATA_CH_MSK) == LL_SMP_DATA_CH_R_T_NORMAL)
000054  2088              MOVS     r0,#0x88
000056  490a              LDR      r1,|L66.128|
000058  4368              MULS     r0,r5,r0
00005a  1840              ADDS     r0,r0,r1
00005c  3060              ADDS     r0,r0,#0x60
00005e  7d40              LDRB     r0,[r0,#0x15]
;;;3933       {
;;;3934           LL_Msg_CTRL_PKT_Isr(pMBlk->Para.HCLL_LE_Start_Encryption_Para.HCI_Random_Num, LL_ENC_REQ, (LEN_SMP_RAND+LEN_SMP_EDIV+LEN_SMP_SKDM+LEN_SMP_IVM), i);
;;;3935       }
;;;3936       else
;;;3937       {
;;;3938           LL_Msg_CTRL_PKT_Isr(0, LL_PAUSE_ENC_REQ, 0, i);
000060  462b              MOV      r3,r5
000062  0780              LSLS     r0,r0,#30             ;3932
000064  d005              BEQ      |L66.114|
000066  2200              MOVS     r2,#0
000068  210a              MOVS     r1,#0xa
00006a  4610              MOV      r0,r2
                  |L66.108|
00006c  f7fffffe          BL       LL_Msg_CTRL_PKT_Isr
;;;3939       }
;;;3940   }
000070  bdf8              POP      {r3-r7,pc}
                  |L66.114|
000072  2216              MOVS     r2,#0x16              ;3934
000074  2103              MOVS     r1,#3                 ;3934
000076  4620              MOV      r0,r4                 ;3934
000078  e7f8              B        |L66.108|
;;;3941   
                          ENDP

00007a  0000              DCW      0x0000
                  |L66.124|
                          DCD      ||.bss||+0x5c4
                  |L66.128|
                          DCD      ||.bss||+0xd0

                          AREA ||i.LLHC_ERR_CODE_Invalid_Lmp_Parameters||, CODE, READONLY, ALIGN=1

                  LLHC_ERR_CODE_Invalid_Lmp_Parameters PROC
;;;3177   
;;;3178   void LLHC_ERR_CODE_Invalid_Lmp_Parameters(MBLK *pMBlk)    //OGF: LE Controller, 0x08, Spec. 4.1
000000  b510              PUSH     {r4,lr}
;;;3179   {
;;;3180       MBLK *mblk;
;;;3181   
;;;3182       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
;;;3183   
;;;3184       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000006  2161              MOVS     r1,#0x61
000008  7101              STRB     r1,[r0,#4]
;;;3185   #ifdef _HCI_HW_
;;;3186       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;3187       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Reset_Para.HCI_Ocf;
;;;3188       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Reset_Para.HCI_Ogf;
;;;3189   #else
;;;3190       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = LLHC_ERR_CODE_INVALID_LMP_PARAMETERS;
00000a  21e5              MOVS     r1,#0xe5
00000c  7281              STRB     r1,[r0,#0xa]
;;;3191   #endif
;;;3192       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_INVALID_LMP_PARAMETERS;
00000e  211e              MOVS     r1,#0x1e
000010  72c1              STRB     r1,[r0,#0xb]
;;;3193   #ifdef _HCI_NEW_
;;;3194       SndMsgBlk(mblk, Q_2HCI);
000012  2104              MOVS     r1,#4
000014  f7fffffe          BL       SndMsgBlk
;;;3195   #endif
;;;3196   }
000018  bd10              POP      {r4,pc}
;;;3197   
                          ENDP


                          AREA ||i.LLHC_ERR_CODE_Unknown_Hci_Command||, CODE, READONLY, ALIGN=1

                  LLHC_ERR_CODE_Unknown_Hci_Command PROC
;;;3156   
;;;3157   void LLHC_ERR_CODE_Unknown_Hci_Command(MBLK *pMBlk)       //OGF: LE Controller, 0x08, Spec. 4.1
000000  b510              PUSH     {r4,lr}
;;;3158   {
;;;3159       MBLK *mblk;
;;;3160   
;;;3161       mblk = GetMsgBlk();
000002  f7fffffe          BL       GetMsgBlk
;;;3162   
;;;3163       mblk->Primitive = MHC_EVENT_CMD_COMPLETE;
000006  2161              MOVS     r1,#0x61
000008  7101              STRB     r1,[r0,#4]
;;;3164   #ifdef _HCI_HW_
;;;3165       mblk->Para.MHC_Cmd_Complete_Para.HCI_Para_Length = 1;
;;;3166       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ocf = pMBlk->Para.HCLL_Reset_Para.HCI_Ocf;
;;;3167       mblk->Para.MHC_Cmd_Complete_Para.HCI_Ogf = pMBlk->Para.HCLL_Reset_Para.HCI_Ogf;
;;;3168   #else
;;;3169       mblk->Para.MHC_Cmd_Complete_Para.By_Primitive = LLHC_ERR_CODE_UNKNOWN_HCI_COMMAND;
00000a  21e4              MOVS     r1,#0xe4
00000c  7281              STRB     r1,[r0,#0xa]
;;;3170   #endif
;;;3171       mblk->Para.MHC_Cmd_Complete_Para.HCI_EventPara[0] = HCI_ERR_CODE_UNKNOWN_HCI_COMMAND;
00000e  2101              MOVS     r1,#1
000010  72c1              STRB     r1,[r0,#0xb]
;;;3172   #ifdef _HCI_NEW_
;;;3173       SndMsgBlk(mblk, Q_2HCI);
000012  2104              MOVS     r1,#4
000014  f7fffffe          BL       SndMsgBlk
;;;3174   #endif
;;;3175   }
000018  bd10              POP      {r4,pc}
;;;3176   
                          ENDP


                          AREA ||i.LLHC_LE_Ctrl_Pkt||, CODE, READONLY, ALIGN=2

                  LLHC_LE_Ctrl_Pkt PROC
;;;3241   
;;;3242   void LLHC_LE_Ctrl_Pkt(MBLK *pMBlk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3243   {
;;;3244       MBLK *mblk;
;;;3245       Uint8 i;
;;;3246       Uint8 mskPhy;
;;;3247       LL_Conn *pLL_Conn;
;;;3248       Uint8 *pCtrlPkt_Data;
;;;3249       Uint16 *pCtrlPkt_Data16;
;;;3250       Uint16 Length16;
;;;3251   
;;;3252       pCtrlPkt_Data = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data;
000002  4605              MOV      r5,r0
000004  4607              MOV      r7,r0                 ;3243
;;;3253       pCtrlPkt_Data16 = (Uint16 *)pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data;
;;;3254       i = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_Conn_Hdl_L;
000006  7a06              LDRB     r6,[r0,#8]
;;;3255       pLL_Conn = &LL_Conn_Para[i];
000008  2088              MOVS     r0,#0x88
00000a  49d7              LDR      r1,|L69.872|
00000c  4370              MULS     r0,r6,r0
00000e  1844              ADDS     r4,r0,r1
;;;3256       switch(pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode)
000010  7af9              LDRB     r1,[r7,#0xb]
;;;3257       {
;;;3258       case LL_CONN_UPDATE_REQ:
;;;3259           if(pLL_Conn->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_PHY_REQ)          //Collision
;;;3260           {
;;;3261               pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_LL_CONN_UPD_REQ_RCVD;
;;;3262               LL_Msg_Event_Le_PHY_Update_Complete(HCI_ERR_CODE_DIFFERENT_TRANSACTION_COLLISION, i, pLL_Conn->LE_Conn_Para.LL_Tx_PHYS);
;;;3263           }
;;;3264   
;;;3265   #ifndef LL_PATCH_CONN_UDATE_FAIL_DUE_TO_USER_DELAY
;;;3266           pLL_Conn->LE_Conn_Para.LL_ConnIntervalOrgUpd = pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd;
;;;3267   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;3268           pLL_Conn->LE_Conn_Para.WinSizeUpd = (pLL_Conn->LE_Conn_Para.WinSizeUpd*10);                        //transfer to 125us base
;;;3269           pLL_Conn->LE_Conn_Para.WinOffsetUpd = (pLL_Conn->LE_Conn_Para.WinOffsetUpd*10);                    //transfer to 125us base
;;;3270           pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd = (pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd*10);        //transfer to 125us base
;;;3271           pLL_Conn->LE_Conn_Para.LL_SvisionTimeoutUpd = (pLL_Conn->LE_Conn_Para.LL_SvisionTimeoutUpd<<3);    //transfer to 1.25ms base
;;;3272   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;3273           pLL_Conn->LE_Conn_Para.WinSizeUpd = (pLL_Conn->LE_Conn_Para.WinSizeUpd<<3);
;;;3274           pLL_Conn->LE_Conn_Para.WinOffsetUpd = (pLL_Conn->LE_Conn_Para.WinOffsetUpd<<3);
;;;3275           pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd = (pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd<<3);
;;;3276           pLL_Conn->LE_Conn_Para.LL_SvisionTimeoutUpd = (pLL_Conn->LE_Conn_Para.LL_SvisionTimeoutUpd<<3);
;;;3277   #endif  ////(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;3278   #endif  //LL_PATCH_CONN_UDATE_FAIL_DUE_TO_USER_DELAY
;;;3279   
;;;3280           if(Knl_MemComp((Uint8 *)&pLL_Conn->LE_Conn_Para.LL_ConnInterval, (Uint8 *)&pLL_Conn->LE_Conn_Para.LL_ConnIntervalUpd, 6))    //update connection parameters: conn_interval, conn_latency, supervision_TO
;;;3281           {
;;;3282               mblk = GetMsgBlk();
;;;3283               mblk->Primitive = MHC_EVENT_LE_CONN_UPDATE_COMPLETE;
;;;3284               mblk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_Conn_Hdl_L = i;
;;;3285               Knl_MemCpy(&mblk->Para.MHC_Le_Conn_Update_Complete_Para.HCI_ConnIntervalL, (pCtrlPkt_Data+3), 6);
;;;3286               SndMsgBlk(mblk, Q_2HCI);
;;;3287           }
;;;3288           break;
;;;3289   
;;;3290       case LL_CHANNEL_MAP_REQ:
;;;3291           if(pLL_Conn->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_PHY_REQ)          //Collision
;;;3292           {
;;;3293               pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_LL_CHN_MAP_REQ_RCVD;
;;;3294               LL_Msg_Event_Le_PHY_Update_Complete(HCI_ERR_CODE_DIFFERENT_TRANSACTION_COLLISION, i, pLL_Conn->LE_Conn_Para.LL_Tx_PHYS);
;;;3295           }
;;;3296           break;
;;;3297   
;;;3298       case LL_TERMINATE_IND:
;;;3299           break;
;;;3300   
;;;3301       case LL_ENC_REQ:
;;;3302       case LL_ENC_RSP:
;;;3303           mblk = GetMsgBlk();
;;;3304           mblk->Primitive = ECHC_LE_CTRL_PKT;
;;;3305           Knl_MemCpy(mblk->Para.Data, pMBlk->Para.Data, (SIZE_HCI_DATA_CONN_HDL+SIZE_HCI_DATA_PKT_LTH_BYTE+1+LEN_SMP_RAND+LEN_SMP_EDIV+LEN_SMP_SKDM+LEN_SMP_IVM));
;;;3306           SndMsgBlkEC(mblk);
;;;3307           break;
;;;3308   
;;;3309       case LL_START_ENC_REQ:
;;;3310           LL_Msg_CTRL_PKT(0, LL_START_ENC_RSP, 0, i);
;;;3311           break;
;;;3312   
;;;3313       case LL_START_ENC_RSP:
;;;3314   #if MAX_NUM_CONN_SLV_HDL != 0
;;;3315   #if MAX_NUM_CONN_MAS_HDL != 0
;;;3316           if(i >= MAX_NUM_CONN_MAS_HDL)
;;;3317   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;3318           {
;;;3319               LL_Msg_CTRL_PKT(0, LL_START_ENC_RSP, 0, i);
;;;3320           }
;;;3321   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;3322           if(pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0] == LL_SMP_GATE_ENC_PAUSE)
;;;3323           {
;;;3324               mblk = GetMsgBlk();
;;;3325               mblk->Primitive = MHC_EVENT_ENCRYPT_KEY_REFRESH_COMPLETE;
;;;3326               mblk->Para.MHC_Encrypt_Key_Refresh_Complete_Para.HCI_Conn_Hdl_L = i;
;;;3327   #ifdef _HCI_NEW_
;;;3328               SndMsgBlk(mblk, Q_2HCI);
;;;3329   #endif
;;;3330           }
;;;3331           else
;;;3332           {
;;;3333               LL_Msg_Event_Encrypt_Change(HCI_ERR_CODE_SUCCESS, i, HCI_ENCRPT_EN_AES_CCM_LE);
;;;3334           }
;;;3335           break;
;;;3336   
;;;3337       case LL_UNKNOWN_RSP:
;;;3338           switch(pLL_Conn->LE_Conn_Para.LL_Conn_ID)
;;;3339           {
;;;3340           case LL_CONN_ID_LL_SLAVE_FEATURE_REQ:
;;;3341               pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;3342               mblk = GetMsgBlk();
;;;3343               mblk->Primitive = MHC_EVENT_LE_READ_REMOTE_USED_FEATURES_COMPLETE;
;;;3344               mblk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Status = HCI_ERR_CODE_UNSUPPORTED_REMOTE_FEATURE_UNSUPPORTED_LMP_FEATURE;
;;;3345               mblk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Conn_Hdl_L = i;
;;;3346               SndMsgBlk(mblk, Q_2HCI);
;;;3347               break;
;;;3348   
;;;3349           case LL_CONN_ID_LL_PHY_REQ:
;;;3350               pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;3351               LL_Msg_Event_Le_PHY_Update_Complete(HCI_ERR_CODE_UNSUPPORTED_REMOTE_FEATURE_UNSUPPORTED_LMP_FEATURE, i, pLL_Conn->LE_Conn_Para.LL_Tx_PHYS);
;;;3352               pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
;;;3353               pLL_Conn->LE_Conn_Para.LL_Rx_PHYsUpd = 0;
;;;3354               break;
;;;3355   
;;;3356           default:
;;;3357               if(*(pCtrlPkt_Data) == LL_PHY_REQ)
;;;3358               {
;;;3359                   LL_Msg_Event_Le_PHY_Update_Complete(HCI_ERR_CODE_UNSUPPORTED_REMOTE_FEATURE_UNSUPPORTED_LMP_FEATURE, i, pLL_Conn->LE_Conn_Para.LL_Tx_PHYS);
;;;3360                   pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
;;;3361                   pLL_Conn->LE_Conn_Para.LL_Rx_PHYsUpd = 0;
;;;3362               }
;;;3363               break;
;;;3364           }
;;;3365   //        pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;3366           break;
;;;3367   
;;;3368       case LL_FEATURE_REQ:
;;;3369       case LL_SLAVE_FEATURE_REQ:
;;;3370           Knl_CodeCpy(pCtrlPkt_Data, LL_FEATURE, sizeof(LL_FEATURE));
;;;3371           if((ble_device_param.ble_deviceChipId&PHY_LIMIT_BY_IC_VERSION) == PHY_LIMIT_1M)
;;;3372           {
;;;3373               *(pCtrlPkt_Data+1) &= (~LL_FEATURE_LE_2M_PHY);
;;;3374           }
;;;3375           LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_FEATURE_RSP, sizeof(LL_FEATURE), i);
;;;3376           break;
;;;3377   
;;;3378       case LL_FEATURE_RSP:
;;;3379           mblk = GetMsgBlk();
;;;3380           mblk->Primitive = MHC_EVENT_LE_READ_REMOTE_USED_FEATURES_COMPLETE;
;;;3381           mblk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
;;;3382           mblk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_Conn_Hdl_L = i;
;;;3383           Knl_MemCpy(mblk->Para.MHC_Le_Read_Remote_Used_Feat_Complete_Para.HCI_LE_Feat, pCtrlPkt_Data, sizeof(LL_FEATURE));
;;;3384           SndMsgBlk(mblk, Q_2HCI);
;;;3385           break;
;;;3386   
;;;3387       case LL_PAUSE_ENC_REQ:
;;;3388           LL_Msg_CTRL_PKT(0, LL_PAUSE_ENC_RSP, 0, i);
;;;3389           break;
;;;3390   
;;;3391       case LL_PAUSE_ENC_RSP:
;;;3392   #if MAX_NUM_CONN_MAS_HDL != 0
;;;3393           if(i<MAX_NUM_CONN_MAS_HDL)
;;;3394           {
;;;3395               LL_Msg_CTRL_PKT(0, LL_PAUSE_ENC_RSP, 0, i);
;;;3396           }
;;;3397   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;3398           break;
;;;3399   
;;;3400       case LL_VERSION_IND:
;;;3401           switch(pLL_Conn->LE_Conn_Para.LL_Conn_ID)
;;;3402           {
;;;3403           case LL_CONN_ID_LL_ENC_REQ:
;;;3404           case LL_CONN_ID_LL_VERSION_IND_RCVD:
;;;3405               Knl_CodeCpy(pCtrlPkt_Data, LL_VERSION, NUM_LL_VERSION);
;;;3406               LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_VERSION_IND, NUM_LL_VERSION, i);
;;;3407               break;
;;;3408   
;;;3409           default:
;;;3410               if((Event_Mask[1] & HCI_EVTMSK_1_RD_RMT_VER_INFO_CMPLT) != 0)
;;;3411               {
;;;3412                   mblk = GetMsgBlk();
;;;3413                   mblk->Primitive = MHC_EVENT_READ_REMOTE_VER_INFO_COMPLETE;
;;;3414                   mblk->Para.MHC_Read_Remote_Ver_Info_Complete_Para.HCI_Conn_Hdl_L = i;
;;;3415                   Knl_MemCpy(&mblk->Para.MHC_Read_Remote_Ver_Info_Complete_Para.HCI_Ver, pCtrlPkt_Data, NUM_LL_VERSION);
;;;3416   #ifdef _HCI_NEW_
;;;3417                   SndMsgBlk(mblk, Q_2HCI);
;;;3418   #endif
;;;3419               }
;;;3420               break;
;;;3421           }
;;;3422           break;
;;;3423   
;;;3424       case LL_REJECT_IND_EXT:
;;;3425           pCtrlPkt_Data += 1;
;;;3426       case LL_REJECT_IND:
;;;3427           switch(pLL_Conn->LE_Conn_Para.LL_Conn_ID)
;;;3428           {
;;;3429           case LL_CONN_ID_LL_ENC_REQ:
;;;3430           case LL_CONN_ID_LL_ENC_RSP:
;;;3431               pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;3432               LL_Msg_Event_Encrypt_Change(*pCtrlPkt_Data, i, HCI_ENCRPT_EN_OFF);
;;;3433               break;
;;;3434           case LL_CONN_ID_LL_PHY_REQ:
;;;3435               pLL_Conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;3436               LL_Msg_Event_Le_PHY_Update_Complete(*pCtrlPkt_Data, i, pLL_Conn->LE_Conn_Para.LL_Tx_PHYS);
;;;3437               break;
;;;3438   
;;;3439           //case LL_CONN_ID_LL_CONN_UPD_REQ_RCVD:      //maybe collision w.LL_ENC_REQ
;;;3440           //case LL_CONN_ID_LL_CHN_MAP_REQ_RCVD:       //maybe collision w.LL_ENC_REQ
;;;3441           default:
;;;3442   #ifdef LL_PATCH_NO_EVENT_DUE_TO_LL_CONN_ID_NOT_MATCH
;;;3443               if(*(pCtrlPkt_Data-1) == LL_PHY_REQ)
;;;3444               {
;;;3445                   LL_Msg_Event_Le_PHY_Update_Complete(*pCtrlPkt_Data, i, pLL_Conn->LE_Conn_Para.LL_Tx_PHYS);
;;;3446               }
;;;3447   #endif
;;;3448               break;
;;;3449           }
;;;3450           break;
;;;3451   
;;;3452       case LL_PHY_REQ:
;;;3453   #if MAX_NUM_CONN_MAS_HDL != 0
;;;3454           if(i >= MAX_NUM_CONN_MAS_HDL)
;;;3455   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;3456           {
;;;3457   #if MAX_NUM_CONN_SLV_HDL != 0
;;;3458               mskPhy = ((pCtrlPkt_Data[0]&pCtrlPkt_Data[1])&(~LL_RX_PHYS_TX_NO_SUPPORT));     //symmetric
;;;3459               if(mskPhy)
;;;3460               {
;;;3461                   mskPhy &= ~(pLL_Conn->LE_Conn_Para.LL_Tx_PHYS);
;;;3462                   mskPhy &= LL_Ref_Default_PHY.Tx_PHYs;
000012  48d6              LDR      r0,|L69.876|
000014  350c              ADDS     r5,r5,#0xc            ;3252
000016  2204              MOVS     r2,#4                 ;3286
000018  7840              LDRB     r0,[r0,#1]
00001a  000b              MOVS     r3,r1                 ;3256
00001c  f7fffffe          BL       __ARM_common_switch8
000020  190e3332          DCB      0x19,0x0e,0x33,0x32
000024  3d3d4d51          DCB      0x3d,0x3d,0x4d,0x51
000028  668497a2          DCB      0x66,0x84,0x97,0xa2
00002c  a7aac984          DCB      0xa7,0xaa,0xc9,0x84
000030  fdfdc8fd          DCB      0xfd,0xfd,0xc8,0xfd
000034  fdfcfbe5          DCB      0xfd,0xfc,0xfb,0xe5
000038  fa32fd00          DCB      0xfa,0x32,0xfd,0x00
00003c  7820              LDRB     r0,[r4,#0]            ;3259
00003e  2856              CMP      r0,#0x56              ;3259
000040  d107              BNE      |L69.82|
000042  2080              MOVS     r0,#0x80              ;3261
000044  7020              STRB     r0,[r4,#0]            ;3261
000046  207d              MOVS     r0,#0x7d              ;3262
000048  5d02              LDRB     r2,[r0,r4]            ;3262
00004a  4631              MOV      r1,r6                 ;3262
00004c  202a              MOVS     r0,#0x2a              ;3262
00004e  f7fffffe          BL       LL_Msg_Event_Le_PHY_Update_Complete
                  |L69.82|
000052  4621              MOV      r1,r4                 ;3280
000054  4620              MOV      r0,r4                 ;3280
000056  2206              MOVS     r2,#6                 ;3280
000058  3126              ADDS     r1,r1,#0x26           ;3280
00005a  300e              ADDS     r0,r0,#0xe            ;3280
00005c  f7fffffe          BL       Knl_MemComp
000060  2800              CMP      r0,#0                 ;3280
000062  d00f              BEQ      |L69.132|
000064  f7fffffe          BL       GetMsgBlk
000068  4604              MOV      r4,r0                 ;3282
00006a  206c              MOVS     r0,#0x6c              ;3283
00006c  7120              STRB     r0,[r4,#4]            ;3283
00006e  2206              MOVS     r2,#6                 ;3285
000070  72e6              STRB     r6,[r4,#0xb]          ;3284
000072  1ce9              ADDS     r1,r5,#3              ;3285
                  |L69.116|
000074  4620              MOV      r0,r4                 ;3383
000076  300c              ADDS     r0,r0,#0xc            ;3383
                  |L69.120|
000078  f7fffffe          BL       Knl_MemCpy
00007c  2104              MOVS     r1,#4                 ;3417
00007e  4620              MOV      r0,r4                 ;3417
                  |L69.128|
000080  f7fffffe          BL       SndMsgBlk
                  |L69.132|
;;;3463               }
;;;3464               if(mskPhy==0)
;;;3465               {
;;;3466                   mskPhy = pLL_Conn->LE_Conn_Para.LL_Tx_PHYS;
;;;3467               }
;;;3468               //mskPhy |= pLL_Conn->LE_Conn_Para.LL_Tx_PHYS;
;;;3469               *pCtrlPkt_Data = mskPhy;
;;;3470               *(pCtrlPkt_Data+1) = mskPhy;                                    //symmetric
;;;3471               LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_PHY_RSP, 2, i);
;;;3472               break;
;;;3473   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;3474           }
;;;3475   #if MAX_NUM_CONN_MAS_HDL != 0
;;;3476           else
;;;3477           {
;;;3478               switch(pLL_Conn->LE_Conn_Para.LL_Conn_ID)
;;;3479               {
;;;3480               case LL_CONN_ID_LL_CONN_UPD_REQ:
;;;3481               case LL_CONN_ID_LL_CHN_MAP_REQ:
;;;3482                   *pCtrlPkt_Data = LL_PHY_REQ;
;;;3483                   *(pCtrlPkt_Data+1) = HCI_ERR_CODE_DIFFERENT_TRANSACTION_COLLISION;
;;;3484                   LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_REJECT_IND_EXT, 2, i);
;;;3485                   i = 0xFF;
;;;3486                   break;
;;;3487   
;;;3488               case LL_CONN_ID_LL_PHY_REQ:
;;;3489                   *pCtrlPkt_Data = LL_PHY_REQ;
;;;3490                   *(pCtrlPkt_Data+1) = HCI_ERR_CODE_LMP_ERROR_TRANSACTION_COLLISION;
;;;3491                   LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_REJECT_IND_EXT, 2, i);
;;;3492                   i = 0xFF;
;;;3493                   break;
;;;3494   
;;;3495               default:
;;;3496                   break;
;;;3497               }
;;;3498               if(i == 0xFF)
;;;3499               {
;;;3500                   break;
;;;3501               }
;;;3502           }
;;;3503   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;3504       case LL_PHY_RSP:
;;;3505           //symmetric
;;;3506           mskPhy = ((pCtrlPkt_Data[0]&pCtrlPkt_Data[1])&(~LL_RX_PHYS_TX_NO_SUPPORT));     //symmetric
;;;3507           if(mskPhy)
;;;3508           {
;;;3509               if(pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd)                        //symmetric, equal to LE_Conn_Para.LL_Rx_PHYsUpd, set with LL_PHY_REQ
;;;3510               {
;;;3511                   mskPhy &= pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd;
;;;3512               }
;;;3513               mskPhy &= LL_Ref_Default_PHY.Tx_PHYs;
;;;3514               mskPhy &= ~pLL_Conn->LE_Conn_Para.LL_Tx_PHYS;
;;;3515               if(mskPhy)
;;;3516               {
;;;3517                   if(mskPhy!=pLL_Conn->LE_Conn_Para.LL_Tx_PHYS)
;;;3518                   {
;;;3519                       if(mskPhy&LL_TX_PHYS_2M_PHY)
;;;3520                       {
;;;3521                           mskPhy = LL_TX_PHYS_2M_PHY;
;;;3522                       }
;;;3523                       else if(mskPhy&LL_TX_PHYS_1M_PHY)
;;;3524                       {
;;;3525                           mskPhy = LL_TX_PHYS_1M_PHY;
;;;3526                       }
;;;3527                       else
;;;3528                       {
;;;3529                           mskPhy = 0;     //LL_TX_PHYS_CODED_PHY? not supportted now
;;;3530                       }
;;;3531                   }
;;;3532                   else
;;;3533                   {
;;;3534                       mskPhy = 0;
;;;3535                   }
;;;3536               }
;;;3537           }
;;;3538           if(mskPhy)
;;;3539           {
;;;3540               *pCtrlPkt_Data = mskPhy;
;;;3541               *(pCtrlPkt_Data+1) = mskPhy;                                    //symmetric
;;;3542               pLL_Conn->LE_Conn_Para.LL_EventCounterUpd = pLL_Conn->LE_Conn_Para.LL_EventCounter+8;
;;;3543               Knl_MemCpy((pCtrlPkt_Data+2), (Uint8 *)&pLL_Conn->LE_Conn_Para.LL_EventCounterUpd, 2);
;;;3544           }
;;;3545           else
;;;3546           {
;;;3547               Knl_MemCpy((pCtrlPkt_Data), (Uint8 *)TAB_ZERO_128, 4);
;;;3548           }
;;;3549           LL_Msg_CTRL_PKT(pCtrlPkt_Data, LL_PHY_UPDATE_IND, 4, i);
;;;3550           pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd = mskPhy;
;;;3551           pLL_Conn->LE_Conn_Para.LL_Rx_PHYsUpd = mskPhy;
;;;3552           break;
;;;3553   
;;;3554       case LL_PHY_UPDATE_IND:
;;;3555   #ifndef LL_PATCH_PHY_UPDATE_FAIL_DUE_TO_USER_DELAY
;;;3556           mskPhy = ((pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0]&pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[1])&(~LL_RX_PHYS_TX_NO_SUPPORT));     //symmetric
;;;3557           if(mskPhy)
;;;3558           {
;;;3559               if(mskPhy!=pLL_Conn->LE_Conn_Para.LL_Tx_PHYS)                       //symmetric
;;;3560               {
;;;3561                   pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[1];   //S_TO_M_PHY
;;;3562                   pLL_Conn->LE_Conn_Para.LL_Rx_PHYsUpd = pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0];   //M_TO_S_PHY
;;;3563                   Knl_MemCpy((Uint8 *)&pLL_Conn->LE_Conn_Para.LL_EventCounterUpd, &pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[2], 2);
;;;3564               }
;;;3565               else
;;;3566               {
;;;3567                   pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
;;;3568                   pLL_Conn->LE_Conn_Para.LL_Rx_PHYsUpd = 0;
;;;3569               }
;;;3570           }
;;;3571           else
;;;3572           {
;;;3573               pLL_Conn->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
;;;3574               pLL_Conn->LE_Conn_Para.LL_Rx_PHYsUpd = 0;
;;;3575           }
;;;3576   #endif  //LL_PATCH_PHY_UPDATE_FAIL_DUE_TO_USER_DELAY
;;;3577           break;
;;;3578   
;;;3579       case LL_LENGTH_REQ:
;;;3580           //Knl_CodeCpy(pCtrlPkt_Data, (Uint8 *)LL_Length_Prefer[i], sizeof(LL_LENGTH));
;;;3581           LL_Msg_CTRL_PKT((Uint8 *)LL_Length_Prefer[i], LL_LENGTH_RSP, sizeof(LL_LENGTH), i);
;;;3582       case LL_LENGTH_RSP:
;;;3583           for(mskPhy=0; mskPhy<SIZE_LL_LENGTH_PREFER; mskPhy++)       //mskPhy as index
;;;3584           {
;;;3585               if(*(pCtrlPkt_Data16+mskPhy) > (LL_LENGTH_DEFAULT[mskPhy]))
;;;3586               {
;;;3587                   *(pCtrlPkt_Data16+mskPhy) = (LL_LENGTH_DEFAULT[mskPhy]);
;;;3588               }
;;;3589               if(*(pCtrlPkt_Data16+mskPhy) > LL_Length_Prefer[i][mskPhy])
;;;3590               {
;;;3591                   *(pCtrlPkt_Data16+mskPhy) = LL_Length_Prefer[i][mskPhy];
;;;3592               }
;;;3593           }
;;;3594           Length16 = *(pCtrlPkt_Data16+1);
;;;3595           Length16 = (Length16>>2)-LEN_CONN_PKT_EXCEPT_DATA_W_CCM;        //2M
;;;3596           if(Length16 < *(pCtrlPkt_Data16+0))
;;;3597           {
;;;3598               pLL_Conn->LE_Conn_Para.LL_Rx_length_2M = Length16;
;;;3599           }
;;;3600           else
;;;3601           {
;;;3602               pLL_Conn->LE_Conn_Para.LL_Rx_length_2M = *(pCtrlPkt_Data16+0);
;;;3603           }
;;;3604   
;;;3605           Length16 = (Length16>>1)-(LEN_CONN_PKT_EXCEPT_DATA_W_CCM/2);    //1M
;;;3606           if(Length16 < *(pCtrlPkt_Data16+0))
;;;3607           {
;;;3608               pLL_Conn->LE_Conn_Para.LL_Rx_length_1M = Length16;
;;;3609           }
;;;3610           else
;;;3611           {
;;;3612               pLL_Conn->LE_Conn_Para.LL_Rx_length_1M = *(pCtrlPkt_Data16+0);
;;;3613           }
;;;3614   
;;;3615           Length16 = *(pCtrlPkt_Data16+3);
;;;3616           Length16 = (Length16>>2)-LEN_CONN_PKT_EXCEPT_DATA_W_CCM;        //2M
;;;3617           if(Length16 < *(pCtrlPkt_Data16+2))
;;;3618           {
;;;3619               pLL_Conn->LE_Conn_Para.LL_Tx_length_2M = Length16;
;;;3620           }
;;;3621           else
;;;3622           {
;;;3623               pLL_Conn->LE_Conn_Para.LL_Tx_length_2M = *(pCtrlPkt_Data16+2);
;;;3624           }
;;;3625   
;;;3626           Length16 = (Length16>>1)-(LEN_CONN_PKT_EXCEPT_DATA_W_CCM/2);    //1M
;;;3627           if(Length16 < *(pCtrlPkt_Data16+2))
;;;3628           {
;;;3629               pLL_Conn->LE_Conn_Para.LL_Tx_length_1M = Length16;
;;;3630           }
;;;3631           else
;;;3632           {
;;;3633               pLL_Conn->LE_Conn_Para.LL_Tx_length_1M = *(pCtrlPkt_Data16+2);
;;;3634           }
;;;3635           LL_Msg_Event_Le_Data_Length_Change(i, pLL_Conn->LE_Conn_Para.LL_Tx_length_1M, pLL_Conn->LE_Conn_Para.LL_Rx_length_1M);
;;;3636           break;
;;;3637   
;;;3638       default:
;;;3639           LL_Msg_CTRL_PKT(&pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode, LL_UNKNOWN_RSP, 1, i);
;;;3640           break;
;;;3641       }
;;;3642   }
000084  bdf8              POP      {r3-r7,pc}
000086  7820              LDRB     r0,[r4,#0]            ;3291
000088  2856              CMP      r0,#0x56              ;3291
00008a  d1fb              BNE      |L69.132|
00008c  2081              MOVS     r0,#0x81              ;3293
00008e  7020              STRB     r0,[r4,#0]            ;3293
000090  3460              ADDS     r4,r4,#0x60           ;3293
000092  7f62              LDRB     r2,[r4,#0x1d]         ;3294
000094  4631              MOV      r1,r6                 ;3294
000096  202a              MOVS     r0,#0x2a              ;3294
000098  e09b              B        |L69.466|
00009a  f7fffffe          BL       GetMsgBlk
00009e  4604              MOV      r4,r0                 ;3303
0000a0  2055              MOVS     r0,#0x55              ;3304
0000a2  7120              STRB     r0,[r4,#4]            ;3304
0000a4  4639              MOV      r1,r7                 ;3305
0000a6  4620              MOV      r0,r4                 ;3305
0000a8  221a              MOVS     r2,#0x1a              ;3305
0000aa  3108              ADDS     r1,r1,#8              ;3305
0000ac  3008              ADDS     r0,r0,#8              ;3305
0000ae  f7fffffe          BL       Knl_MemCpy
0000b2  4620              MOV      r0,r4                 ;3306
0000b4  f7fffffe          BL       SndMsgBlkEC
                  |L69.184|
0000b8  bdf8              POP      {r3-r7,pc}
0000ba  2200              MOVS     r2,#0                 ;3310
0000bc  4633              MOV      r3,r6                 ;3310
0000be  2106              MOVS     r1,#6                 ;3310
0000c0  e053              B        |L69.362|
0000c2  2e04              CMP      r6,#4                 ;3316
0000c4  d305              BCC      |L69.210|
0000c6  2200              MOVS     r2,#0                 ;3319
0000c8  4633              MOV      r3,r6                 ;3319
0000ca  2106              MOVS     r1,#6                 ;3319
0000cc  4610              MOV      r0,r2                 ;3319
0000ce  f7fffffe          BL       LL_Msg_CTRL_PKT
                  |L69.210|
0000d2  7b38              LDRB     r0,[r7,#0xc]          ;3322
0000d4  2802              CMP      r0,#2                 ;3322
0000d6  d003              BEQ      |L69.224|
0000d8  2201              MOVS     r2,#1                 ;3333
0000da  4631              MOV      r1,r6                 ;3333
0000dc  2000              MOVS     r0,#0                 ;3333
0000de  e07f              B        |L69.480|
                  |L69.224|
0000e0  f7fffffe          BL       GetMsgBlk
0000e4  2167              MOVS     r1,#0x67              ;3325
0000e6  7101              STRB     r1,[r0,#4]            ;3325
0000e8  7286              STRB     r6,[r0,#0xa]          ;3326
0000ea  e019              B        |L69.288|
0000ec  7820              LDRB     r0,[r4,#0]            ;3338
0000ee  284e              CMP      r0,#0x4e              ;3338
0000f0  d00e              BEQ      |L69.272|
0000f2  2856              CMP      r0,#0x56              ;3338
0000f4  d016              BEQ      |L69.292|
0000f6  7828              LDRB     r0,[r5,#0]            ;3357
0000f8  2816              CMP      r0,#0x16              ;3357
0000fa  d1dd              BNE      |L69.184|
                  |L69.252|
0000fc  3460              ADDS     r4,r4,#0x60           ;3357
0000fe  7f62              LDRB     r2,[r4,#0x1d]         ;3359
000100  4631              MOV      r1,r6                 ;3359
000102  201a              MOVS     r0,#0x1a              ;3359
000104  f7fffffe          BL       LL_Msg_Event_Le_PHY_Update_Complete
000108  2000              MOVS     r0,#0                 ;3360
00010a  75a0              STRB     r0,[r4,#0x16]         ;3360
00010c  75e0              STRB     r0,[r4,#0x17]         ;3361
00010e  bdf8              POP      {r3-r7,pc}
                  |L69.272|
000110  7022              STRB     r2,[r4,#0]            ;3341
000112  f7fffffe          BL       GetMsgBlk
000116  216d              MOVS     r1,#0x6d              ;3343
000118  7101              STRB     r1,[r0,#4]            ;3343
00011a  211a              MOVS     r1,#0x1a              ;3344
00011c  7281              STRB     r1,[r0,#0xa]          ;3344
00011e  72c6              STRB     r6,[r0,#0xb]          ;3345
                  |L69.288|
000120  2104              MOVS     r1,#4                 ;3346
000122  e7ad              B        |L69.128|
                  |L69.292|
000124  7022              STRB     r2,[r4,#0]            ;3350
000126  e7e9              B        |L69.252|
000128  2208              MOVS     r2,#8                 ;3370
00012a  4991              LDR      r1,|L69.880|
00012c  4628              MOV      r0,r5                 ;3370
00012e  f7fffffe          BL       Knl_CodeCpy
000132  4890              LDR      r0,|L69.884|
000134  7800              LDRB     r0,[r0,#0]            ;3371  ; ble_device_param
000136  0640              LSLS     r0,r0,#25             ;3371
000138  0f40              LSRS     r0,r0,#29             ;3371
00013a  2807              CMP      r0,#7                 ;3371
00013c  d103              BNE      |L69.326|
00013e  7868              LDRB     r0,[r5,#1]            ;3373
000140  0840              LSRS     r0,r0,#1              ;3373
000142  0040              LSLS     r0,r0,#1              ;3373
000144  7068              STRB     r0,[r5,#1]            ;3373
                  |L69.326|
000146  2208              MOVS     r2,#8                 ;3375
000148  4633              MOV      r3,r6                 ;3375
00014a  2109              MOVS     r1,#9                 ;3375
00014c  e093              B        |L69.630|
00014e  f7fffffe          BL       GetMsgBlk
000152  4604              MOV      r4,r0                 ;3379
000154  206d              MOVS     r0,#0x6d              ;3380
000156  7120              STRB     r0,[r4,#4]            ;3380
000158  2000              MOVS     r0,#0                 ;3381
00015a  72a0              STRB     r0,[r4,#0xa]          ;3381
00015c  72e6              STRB     r6,[r4,#0xb]          ;3382
00015e  2208              MOVS     r2,#8                 ;3383
000160  4629              MOV      r1,r5                 ;3383
000162  e787              B        |L69.116|
                  |L69.356|
000164  2200              MOVS     r2,#0                 ;3388
000166  4633              MOV      r3,r6                 ;3388
000168  210b              MOVS     r1,#0xb               ;3388
                  |L69.362|
00016a  2000              MOVS     r0,#0                 ;3395
00016c  e056              B        |L69.540|
00016e  2e04              CMP      r6,#4                 ;3393
000170  d3f8              BCC      |L69.356|
                  |L69.370|
000172  bdf8              POP      {r3-r7,pc}
000174  7820              LDRB     r0,[r4,#0]            ;3401
000176  2843              CMP      r0,#0x43              ;3401
000178  d010              BEQ      |L69.412|
00017a  288c              CMP      r0,#0x8c              ;3401
00017c  d00e              BEQ      |L69.412|
00017e  487e              LDR      r0,|L69.888|
000180  7840              LDRB     r0,[r0,#1]            ;3410  ; Event_Mask
000182  0700              LSLS     r0,r0,#28             ;3410
000184  d5f5              BPL      |L69.370|
000186  f7fffffe          BL       GetMsgBlk
00018a  4604              MOV      r4,r0                 ;3412
00018c  2065              MOVS     r0,#0x65              ;3413
00018e  7120              STRB     r0,[r4,#4]            ;3413
000190  2205              MOVS     r2,#5                 ;3415
000192  4620              MOV      r0,r4                 ;3415
000194  72a6              STRB     r6,[r4,#0xa]          ;3414
000196  4629              MOV      r1,r5                 ;3415
000198  300b              ADDS     r0,r0,#0xb            ;3415
00019a  e76d              B        |L69.120|
                  |L69.412|
00019c  4974              LDR      r1,|L69.880|
00019e  2205              MOVS     r2,#5                 ;3405
0001a0  3919              SUBS     r1,r1,#0x19           ;3405
0001a2  4628              MOV      r0,r5                 ;3405
0001a4  f7fffffe          BL       Knl_CodeCpy
0001a8  2205              MOVS     r2,#5                 ;3406
0001aa  4633              MOV      r3,r6                 ;3406
0001ac  210c              MOVS     r1,#0xc               ;3406
0001ae  e062              B        |L69.630|
0001b0  1c6d              ADDS     r5,r5,#1              ;3407
0001b2  7820              LDRB     r0,[r4,#0]            ;3427
0001b4  2843              CMP      r0,#0x43              ;3427
0001b6  d00f              BEQ      |L69.472|
0001b8  2844              CMP      r0,#0x44              ;3427
0001ba  d00d              BEQ      |L69.472|
0001bc  2856              CMP      r0,#0x56              ;3427
0001be  d012              BEQ      |L69.486|
0001c0  4628              MOV      r0,r5                 ;3443
0001c2  3820              SUBS     r0,r0,#0x20           ;3443
0001c4  7fc0              LDRB     r0,[r0,#0x1f]         ;3443
0001c6  2816              CMP      r0,#0x16              ;3443
0001c8  d1d3              BNE      |L69.370|
                  |L69.458|
0001ca  3460              ADDS     r4,r4,#0x60           ;3443
0001cc  7f62              LDRB     r2,[r4,#0x1d]         ;3445
0001ce  7828              LDRB     r0,[r5,#0]            ;3445
0001d0  4631              MOV      r1,r6                 ;3445
                  |L69.466|
0001d2  f7fffffe          BL       LL_Msg_Event_Le_PHY_Update_Complete
0001d6  bdf8              POP      {r3-r7,pc}
                  |L69.472|
0001d8  7022              STRB     r2,[r4,#0]            ;3431
0001da  7828              LDRB     r0,[r5,#0]            ;3432
0001dc  2200              MOVS     r2,#0                 ;3432
0001de  4631              MOV      r1,r6                 ;3432
                  |L69.480|
0001e0  f7fffffe          BL       LL_Msg_Event_Encrypt_Change
0001e4  bdf8              POP      {r3-r7,pc}
                  |L69.486|
0001e6  7022              STRB     r2,[r4,#0]            ;3435
0001e8  e7ef              B        |L69.458|
0001ea  2e04              CMP      r6,#4                 ;3454
0001ec  d319              BCC      |L69.546|
0001ee  7829              LDRB     r1,[r5,#0]            ;3458
0001f0  786a              LDRB     r2,[r5,#1]            ;3458
0001f2  4011              ANDS     r1,r1,r2              ;3458
0001f4  0789              LSLS     r1,r1,#30             ;3458
0001f6  0f89              LSRS     r1,r1,#30             ;3458
0001f8  d004              BEQ      |L69.516|
0001fa  227d              MOVS     r2,#0x7d              ;3461
0001fc  5d12              LDRB     r2,[r2,r4]            ;3461
0001fe  4391              BICS     r1,r1,r2              ;3461
000200  4008              ANDS     r0,r0,r1              ;3462
000202  d101              BNE      |L69.520|
                  |L69.516|
000204  3460              ADDS     r4,r4,#0x60           ;3462
000206  7f60              LDRB     r0,[r4,#0x1d]         ;3466
                  |L69.520|
000208  7028              STRB     r0,[r5,#0]            ;3469
00020a  2202              MOVS     r2,#2                 ;3471
00020c  7068              STRB     r0,[r5,#1]            ;3470
00020e  4633              MOV      r3,r6                 ;3471
000210  2117              MOVS     r1,#0x17              ;3471
000212  e030              B        |L69.630|
000214  e00f              B        |L69.566|
000216  e055              B        |L69.708|
000218  e04c              B        |L69.692|
00021a  e09e              B        |L69.858|
                  |L69.540|
00021c  f7fffffe          BL       LL_Msg_CTRL_PKT
                  |L69.544|
000220  bdf8              POP      {r3-r7,pc}
                  |L69.546|
000222  7821              LDRB     r1,[r4,#0]            ;3478
000224  2216              MOVS     r2,#0x16              ;3256
000226  2940              CMP      r1,#0x40              ;3478
000228  d01c              BEQ      |L69.612|
00022a  2941              CMP      r1,#0x41              ;3478
00022c  d01a              BEQ      |L69.612|
00022e  2956              CMP      r1,#0x56              ;3478
000230  d01b              BEQ      |L69.618|
000232  2eff              CMP      r6,#0xff              ;3498
000234  d0f4              BEQ      |L69.544|
                  |L69.566|
000236  7829              LDRB     r1,[r5,#0]            ;3506
000238  786a              LDRB     r2,[r5,#1]            ;3506
00023a  4011              ANDS     r1,r1,r2              ;3506
00023c  078f              LSLS     r7,r1,#30             ;3506
00023e  0fbf              LSRS     r7,r7,#30             ;3506
000240  d029              BEQ      |L69.662|
000242  4622              MOV      r2,r4                 ;3509
000244  3260              ADDS     r2,r2,#0x60           ;3509
000246  7d91              LDRB     r1,[r2,#0x16]         ;3509
000248  2900              CMP      r1,#0                 ;3509
00024a  d000              BEQ      |L69.590|
00024c  400f              ANDS     r7,r7,r1              ;3511
                  |L69.590|
00024e  7f51              LDRB     r1,[r2,#0x1d]         ;3514
000250  4038              ANDS     r0,r0,r7              ;3513
000252  4388              BICS     r0,r0,r1              ;3514
000254  0007              MOVS     r7,r0                 ;3514
000256  d01e              BEQ      |L69.662|
000258  42b9              CMP      r1,r7                 ;3517
00025a  d01b              BEQ      |L69.660|
00025c  07b8              LSLS     r0,r7,#30             ;3519
00025e  d50c              BPL      |L69.634|
000260  2702              MOVS     r7,#2                 ;3521
000262  e00d              B        |L69.640|
                  |L69.612|
000264  702a              STRB     r2,[r5,#0]            ;3482
000266  202a              MOVS     r0,#0x2a              ;3483
000268  e001              B        |L69.622|
                  |L69.618|
00026a  702a              STRB     r2,[r5,#0]            ;3489
00026c  2023              MOVS     r0,#0x23              ;3490
                  |L69.622|
00026e  2202              MOVS     r2,#2                 ;3484
000270  7068              STRB     r0,[r5,#1]            ;3483
000272  4633              MOV      r3,r6                 ;3484
000274  2111              MOVS     r1,#0x11              ;3484
                  |L69.630|
000276  4628              MOV      r0,r5                 ;3484
000278  e7d0              B        |L69.540|
                  |L69.634|
00027a  07f8              LSLS     r0,r7,#31             ;3523
00027c  d00a              BEQ      |L69.660|
00027e  2701              MOVS     r7,#1                 ;3525
                  |L69.640|
000280  702f              STRB     r7,[r5,#0]            ;3540
000282  706f              STRB     r7,[r5,#1]            ;3541
000284  8b60              LDRH     r0,[r4,#0x1a]         ;3542
000286  4621              MOV      r1,r4                 ;3543
000288  3008              ADDS     r0,r0,#8              ;3542
00028a  85a0              STRH     r0,[r4,#0x2c]         ;3542
00028c  2202              MOVS     r2,#2                 ;3543
00028e  312c              ADDS     r1,r1,#0x2c           ;3543
000290  1ca8              ADDS     r0,r5,#2              ;3543
000292  e003              B        |L69.668|
                  |L69.660|
000294  2700              MOVS     r7,#0                 ;3529
                  |L69.662|
000296  2204              MOVS     r2,#4                 ;3547
000298  4938              LDR      r1,|L69.892|
00029a  4628              MOV      r0,r5                 ;3547
                  |L69.668|
00029c  f7fffffe          BL       Knl_MemCpy
0002a0  4633              MOV      r3,r6                 ;3549
0002a2  2204              MOVS     r2,#4                 ;3549
0002a4  2118              MOVS     r1,#0x18              ;3549
0002a6  4628              MOV      r0,r5                 ;3549
0002a8  f7fffffe          BL       LL_Msg_CTRL_PKT
0002ac  3460              ADDS     r4,r4,#0x60           ;3549
0002ae  75a7              STRB     r7,[r4,#0x16]         ;3550
0002b0  75e7              STRB     r7,[r4,#0x17]         ;3551
0002b2  bdf8              POP      {r3-r7,pc}
                  |L69.692|
0002b4  4832              LDR      r0,|L69.896|
0002b6  00f1              LSLS     r1,r6,#3              ;3581
0002b8  1808              ADDS     r0,r1,r0              ;3581
0002ba  4633              MOV      r3,r6                 ;3581
0002bc  2208              MOVS     r2,#8                 ;3581
0002be  2115              MOVS     r1,#0x15              ;3581
0002c0  f7fffffe          BL       LL_Msg_CTRL_PKT
                  |L69.708|
0002c4  4a2e              LDR      r2,|L69.896|
0002c6  2100              MOVS     r1,#0                 ;3583
0002c8  00f0              LSLS     r0,r6,#3              ;3581
0002ca  1887              ADDS     r7,r0,r2              ;3581
                  |L69.716|
0002cc  4a28              LDR      r2,|L69.880|
0002ce  0048              LSLS     r0,r1,#1              ;3585
0002d0  3208              ADDS     r2,r2,#8              ;3585
0002d2  5a2b              LDRH     r3,[r5,r0]            ;3585
0002d4  5a12              LDRH     r2,[r2,r0]            ;3585
0002d6  4293              CMP      r3,r2                 ;3585
0002d8  d900              BLS      |L69.732|
0002da  522a              STRH     r2,[r5,r0]            ;3587
                  |L69.732|
0002dc  5a3a              LDRH     r2,[r7,r0]            ;3589
0002de  5a2b              LDRH     r3,[r5,r0]            ;3589
0002e0  429a              CMP      r2,r3                 ;3589
0002e2  d200              BCS      |L69.742|
0002e4  522a              STRH     r2,[r5,r0]            ;3591
                  |L69.742|
0002e6  1c49              ADDS     r1,r1,#1              ;3591
0002e8  b2c9              UXTB     r1,r1                 ;3583
0002ea  2904              CMP      r1,#4                 ;3583
0002ec  d3ee              BCC      |L69.716|
0002ee  8868              LDRH     r0,[r5,#2]            ;3594
0002f0  8829              LDRH     r1,[r5,#0]            ;3596
0002f2  0880              LSRS     r0,r0,#2              ;3595
0002f4  380e              SUBS     r0,r0,#0xe            ;3595
0002f6  b280              UXTH     r0,r0                 ;3595
0002f8  4281              CMP      r1,r0                 ;3596
0002fa  d902              BLS      |L69.770|
0002fc  2180              MOVS     r1,#0x80              ;3598
0002fe  5508              STRB     r0,[r1,r4]            ;3598
000300  e001              B        |L69.774|
                  |L69.770|
000302  2280              MOVS     r2,#0x80              ;3602
000304  5511              STRB     r1,[r2,r4]            ;3602
                  |L69.774|
000306  0840              LSRS     r0,r0,#1              ;3605
000308  1fc0              SUBS     r0,r0,#7              ;3605
00030a  8829              LDRH     r1,[r5,#0]            ;3606
00030c  b280              UXTH     r0,r0                 ;3605
00030e  4281              CMP      r1,r0                 ;3606
000310  d902              BLS      |L69.792|
000312  217f              MOVS     r1,#0x7f              ;3608
000314  5508              STRB     r0,[r1,r4]            ;3608
000316  e001              B        |L69.796|
                  |L69.792|
000318  207f              MOVS     r0,#0x7f              ;3612
00031a  5501              STRB     r1,[r0,r4]            ;3612
                  |L69.796|
00031c  88e8              LDRH     r0,[r5,#6]            ;3615
00031e  88a9              LDRH     r1,[r5,#4]            ;3617
000320  0880              LSRS     r0,r0,#2              ;3616
000322  380e              SUBS     r0,r0,#0xe            ;3616
000324  b280              UXTH     r0,r0                 ;3616
000326  4281              CMP      r1,r0                 ;3617
000328  d902              BLS      |L69.816|
00032a  2182              MOVS     r1,#0x82              ;3619
00032c  5508              STRB     r0,[r1,r4]            ;3619
00032e  e001              B        |L69.820|
                  |L69.816|
000330  2282              MOVS     r2,#0x82              ;3623
000332  5511              STRB     r1,[r2,r4]            ;3623
                  |L69.820|
000334  0840              LSRS     r0,r0,#1              ;3626
000336  1fc0              SUBS     r0,r0,#7              ;3626
000338  88a9              LDRH     r1,[r5,#4]            ;3627
00033a  b280              UXTH     r0,r0                 ;3626
00033c  4281              CMP      r1,r0                 ;3627
00033e  d902              BLS      |L69.838|
000340  2181              MOVS     r1,#0x81              ;3629
000342  5508              STRB     r0,[r1,r4]            ;3629
000344  e001              B        |L69.842|
                  |L69.838|
000346  2081              MOVS     r0,#0x81              ;3633
000348  5501              STRB     r1,[r0,r4]            ;3633
                  |L69.842|
00034a  207f              MOVS     r0,#0x7f              ;3635
00034c  5d02              LDRB     r2,[r0,r4]            ;3635
00034e  3480              ADDS     r4,r4,#0x80           ;3635
000350  7861              LDRB     r1,[r4,#1]            ;3635
000352  4630              MOV      r0,r6                 ;3635
000354  f7fffffe          BL       LL_Msg_Event_Le_Data_Length_Change
000358  bdf8              POP      {r3-r7,pc}
                  |L69.858|
00035a  2201              MOVS     r2,#1                 ;3639
00035c  2107              MOVS     r1,#7                 ;3639
00035e  4638              MOV      r0,r7                 ;3639
000360  4633              MOV      r3,r6                 ;3639
000362  300b              ADDS     r0,r0,#0xb            ;3639
000364  e75a              B        |L69.540|
;;;3643   
                          ENDP

000366  0000              DCW      0x0000
                  |L69.872|
                          DCD      ||.bss||+0xd0
                  |L69.876|
                          DCD      ||.data||+0x14
                  |L69.880|
                          DCD      ||.constdata||+0x2a
                  |L69.884|
                          DCD      ble_device_param
                  |L69.888|
                          DCD      Event_Mask
                  |L69.892|
                          DCD      ||.constdata||+0x1c6
                  |L69.896|
                          DCD      ||.bss||+0x5d8

                          AREA ||i.LLHeaderRdy_Isr||, CODE, READONLY, ALIGN=2

                  LLHeaderRdy_Isr PROC
;;;8815   
;;;8816   void LLHeaderRdy_Isr(void)
000000  4a16              LDR      r2,|L70.92|
;;;8817   {
;;;8818       //extern uint8_t RF_RxFIFO_Count_get(void);
;;;8819   
;;;8820       switch(status_LL_Tmr)
000002  79d0              LDRB     r0,[r2,#7]  ; status_LL_Tmr
000004  2829              CMP      r0,#0x29
000006  d00f              BEQ      |L70.40|
000008  282a              CMP      r0,#0x2a
00000a  d00d              BEQ      |L70.40|
00000c  2832              CMP      r0,#0x32
00000e  d002              BEQ      |L70.22|
000010  2835              CMP      r0,#0x35
000012  d121              BNE      |L70.88|
000014  e008              B        |L70.40|
                  |L70.22|
;;;8821       {
;;;8822       case LL_INT_S50:
;;;8823           LL_DurRxPktAccu = LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
000016  6a10              LDR      r0,[r2,#0x20]  ; LL_conn_pi
000018  89c1              LDRH     r1,[r0,#0xe]
00001a  81d1              STRH     r1,[r2,#0xe]
00001c  3060              ADDS     r0,r0,#0x60
;;;8824           switch(LL_conn_pi->LE_Conn_Para.LL_Rx_PHYS)
00001e  7f80              LDRB     r0,[r0,#0x1e]
000020  2801              CMP      r0,#1
000022  d101              BNE      |L70.40|
000024  1e49              SUBS     r1,r1,#1
;;;8825           {
;;;8826           case LL_RX_PHYS_1M_PHY:
;;;8827               LL_DurRxPktAccu -= (1*DUR_LL_TMR_TICK_BASE);
000026  81d1              STRH     r1,[r2,#0xe]
                  |L70.40|
000028  b570              PUSH     {r4-r6,lr}            ;8817
;;;8828               break;
;;;8829           default:
;;;8830               break;
;;;8831           }
;;;8832       case LL_INT_S41:
;;;8833       case LL_INT_S42:
;;;8834       case LL_INT_S53:
;;;8835           LL_ConnDataTmpGate = 1;
00002a  2001              MOVS     r0,#1
00002c  7090              STRB     r0,[r2,#2]
;;;8836           LL_Para_IntervalR.HeaderLen = 0;
00002e  4c0c              LDR      r4,|L70.96|
000030  2600              MOVS     r6,#0
000032  70e6              STRB     r6,[r4,#3]
;;;8837   
;;;8838           LL_Para_IntervalR.DataIdxF = 0xFF;          //initialization
000034  20ff              MOVS     r0,#0xff
000036  7020              STRB     r0,[r4,#0]
;;;8839           LL_Para_IntervalR.DataIdxN = 0;             //initialization
;;;8840           if(LL_ConnDataInTmp.QIn != (MBLK *)0)
000038  4d0a              LDR      r5,|L70.100|
00003a  7066              STRB     r6,[r4,#1]            ;8839
00003c  6828              LDR      r0,[r5,#0]  ; LL_ConnDataInTmp
00003e  2800              CMP      r0,#0
000040  d004              BEQ      |L70.76|
;;;8841           {
;;;8842               FreeMsgBlks_Isr(LL_ConnDataInTmp.QOut);
000042  6868              LDR      r0,[r5,#4]  ; LL_ConnDataInTmp
000044  f7fffffe          BL       FreeMsgBlks_Isr
;;;8843               LL_ConnDataInTmp.QOut = (MBLK *)0;
;;;8844               LL_ConnDataInTmp.QIn = (MBLK *)0;
000048  606e              STR      r6,[r5,#4]  ; LL_ConnDataInTmp
00004a  602e              STR      r6,[r5,#0]  ; LL_ConnDataInTmp
                  |L70.76|
;;;8845           }
;;;8846           SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t) &LL_Para_IntervalR.HeaderSts, 2);
00004c  2202              MOVS     r2,#2
00004e  1ca1              ADDS     r1,r4,#2
000050  20ff              MOVS     r0,#0xff
000052  f7fffffe          BL       SPI_PDMA_SetRx_Isr
;;;8847           break;
;;;8848   
;;;8849       default:
;;;8850           break;
;;;8851       }
;;;8852   }
000056  bd70              POP      {r4-r6,pc}
                  |L70.88|
000058  4770              BX       lr
;;;8853   
                          ENDP

00005a  0000              DCW      0x0000
                  |L70.92|
                          DCD      ||.data||
                  |L70.96|
                          DCD      ||.bss||+0x460
                  |L70.100|
                          DCD      ||.data||+0x54

                          AREA ||i.LLTimerFIFOGetSend_Isr||, CODE, READONLY, ALIGN=2

                  LLTimerFIFOGetSend_Isr PROC
;;;9096   
;;;9097   void LLTimerFIFOGetSend_Isr(void)
000000  4842              LDR      r0,|L71.268|
;;;9098   {
;;;9099       uint8_t Len, idx;
;;;9100   
;;;9101       if(LL_ConnDataTmpGate != 0)
000002  7881              LDRB     r1,[r0,#2]  ; LL_ConnDataTmpGate
000004  2900              CMP      r1,#0
000006  d07f              BEQ      |L71.264|
000008  b5f8              PUSH     {r3-r7,lr}            ;9098
;;;9102       {
;;;9103           switch(status_LL_Tmr)
00000a  79c0              LDRB     r0,[r0,#7]  ; status_LL_Tmr
00000c  3828              SUBS     r0,r0,#0x28
00000e  280e              CMP      r0,#0xe
000010  d269              BCS      |L71.230|
000012  0001              MOVS     r1,r0
000014  4479              ADD      r1,r1,pc
000016  7909              LDRB     r1,[r1,#4]
000018  1849              ADDS     r1,r1,r1
00001a  448f              ADD      pc,pc,r1
00001c  06666606          DCB      0x06,0x66,0x66,0x06
000020  64646464          DCB      0x64,0x64,0x64,0x64
000024  64646606          DCB      0x64,0x64,0x66,0x06
000028  0666              DCB      0x06,0x66
;;;9104           {
;;;9105           case LL_INT_S40:
;;;9106           case LL_INT_S43:
;;;9107           case LL_INT_S51:
;;;9108           case LL_INT_S52:
;;;9109               if(LL_Para_Interval.HeaderLen != LL_Para_Interval.DataIdxN)
00002a  4e39              LDR      r6,|L71.272|
00002c  78f1              LDRB     r1,[r6,#3]  ; LL_Para_Interval
00002e  7870              LDRB     r0,[r6,#1]  ; LL_Para_Interval
000030  4281              CMP      r1,r0
000032  d058              BEQ      |L71.230|
;;;9110               {
;;;9111                   if(LL_Para_Interval.HeaderLen > LL_Para_Interval.DataIdxN+LEN_LL_DATA_BUF)
000034  4602              MOV      r2,r0
000036  3220              ADDS     r2,r2,#0x20
000038  4291              CMP      r1,r2
00003a  d901              BLS      |L71.64|
;;;9112                   {
;;;9113                       Len = LEN_LL_DATA_BUF;
00003c  2420              MOVS     r4,#0x20
00003e  e003              B        |L71.72|
                  |L71.64|
;;;9114                   }
;;;9115                   else
;;;9116                   {
;;;9117                       Len = LL_Para_Interval.HeaderLen - LL_Para_Interval.DataIdxN;
000040  1a08              SUBS     r0,r1,r0
000042  0604              LSLS     r4,r0,#24
000044  0e24              LSRS     r4,r4,#24
000046  d04e              BEQ      |L71.230|
                  |L71.72|
;;;9118                   }
;;;9119   
;;;9120                   if(Len)
;;;9121                   {
;;;9122                       idx = (LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 - LL_Para_Interval.DataIdxF);
000048  4f32              LDR      r7,|L71.276|
00004a  7831              LDRB     r1,[r6,#0]  ; LL_Para_Interval
00004c  683a              LDR      r2,[r7,#0]  ; LL_ConnBuffPrcs
00004e  7a50              LDRB     r0,[r2,#9]
000050  1a43              SUBS     r3,r0,r1
000052  b2dd              UXTB     r5,r3
;;;9123   
;;;9124                       if(Len > (uint8_t)(idx + (LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL - LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0)))
000054  7a93              LDRB     r3,[r2,#0xa]
000056  1a18              SUBS     r0,r3,r0
000058  1940              ADDS     r0,r0,r5
00005a  b2c3              UXTB     r3,r0
00005c  42a3              CMP      r3,r4
00005e  d226              BCS      |L71.174|
;;;9125                       {
;;;9126                           Knl_MemCpy_Isr(LL_Para_Interval.Data, &LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[LL_Para_Interval.DataIdxF], idx+(LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL - LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0));
000060  1851              ADDS     r1,r2,r1
000062  b2c0              UXTB     r0,r0
000064  4602              MOV      r2,r0
000066  1d30              ADDS     r0,r6,#4
000068  310b              ADDS     r1,r1,#0xb
00006a  f7fffffe          BL       Knl_MemCpy_Isr
;;;9127   
;;;9128                           Len -= idx;
00006e  1b60              SUBS     r0,r4,r5
000070  b2c4              UXTB     r4,r0
;;;9129                           if(LL_ConnBuffPrcs.BufPrcsF != LL_ConnBuffPrcs.BufPrcsN)
000072  6879              LDR      r1,[r7,#4]  ; LL_ConnBuffPrcs
000074  6838              LDR      r0,[r7,#0]  ; LL_ConnBuffPrcs
000076  4288              CMP      r0,r1
000078  d016              BEQ      |L71.168|
;;;9130                           {
;;;9131                               Knl_MemCpy_Isr(&LL_Para_Interval.Data[(uint8_t)(idx+(LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL - LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0))], LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, Len);
00007a  7a82              LDRB     r2,[r0,#0xa]
00007c  7a40              LDRB     r0,[r0,#9]
00007e  310b              ADDS     r1,r1,#0xb
000080  1a10              SUBS     r0,r2,r0
000082  1940              ADDS     r0,r0,r5
000084  b2c0              UXTB     r0,r0
000086  1980              ADDS     r0,r0,r6
000088  4622              MOV      r2,r4
00008a  1d00              ADDS     r0,r0,#4
00008c  f7fffffe          BL       Knl_MemCpy_Isr
;;;9132                               LL_Para_Interval.DataIdxF = Len-(LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL-LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0);
000090  6838              LDR      r0,[r7,#0]  ; LL_ConnBuffPrcs
000092  7a81              LDRB     r1,[r0,#0xa]
000094  7a40              LDRB     r0,[r0,#9]
000096  1a08              SUBS     r0,r1,r0
000098  1a20              SUBS     r0,r4,r0
00009a  7030              STRB     r0,[r6,#0]
;;;9133                               LL_ConnBuffPrcs.BufPrcsF = LL_ConnBuffPrcs.BufPrcsN;
00009c  6878              LDR      r0,[r7,#4]  ; LL_ConnBuffPrcs
;;;9134                               if(LL_ConnBuffPrcs.BufPrcsN->Next !=(MBLK *)0)
00009e  6038              STR      r0,[r7,#0]  ; LL_ConnBuffPrcs
0000a0  6800              LDR      r0,[r0,#0]
0000a2  2800              CMP      r0,#0
0000a4  d000              BEQ      |L71.168|
;;;9135                               {
;;;9136                                   LL_ConnBuffPrcs.BufPrcsN = LL_ConnBuffPrcs.BufPrcsN->Next;
0000a6  6078              STR      r0,[r7,#4]  ; LL_ConnBuffPrcs
                  |L71.168|
;;;9137                               }
;;;9138                           }
;;;9139                           Len += idx;
0000a8  1960              ADDS     r0,r4,r5
0000aa  b2c4              UXTB     r4,r0
0000ac  e012              B        |L71.212|
                  |L71.174|
;;;9140                       }
;;;9141                       else
;;;9142                       {
;;;9143                           Knl_MemCpy_Isr(LL_Para_Interval.Data, &LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[LL_Para_Interval.DataIdxF], Len);
0000ae  1851              ADDS     r1,r2,r1
0000b0  4622              MOV      r2,r4
0000b2  1d30              ADDS     r0,r6,#4
0000b4  310b              ADDS     r1,r1,#0xb
0000b6  f7fffffe          BL       Knl_MemCpy_Isr
;;;9144                           LL_Para_Interval.DataIdxF += Len;
0000ba  7830              LDRB     r0,[r6,#0]  ; LL_Para_Interval
0000bc  1900              ADDS     r0,r0,r4
0000be  7030              STRB     r0,[r6,#0]
;;;9145                           if(Len == idx)
0000c0  42ac              CMP      r4,r5
0000c2  d107              BNE      |L71.212|
;;;9146                           {
;;;9147                               LL_Para_Interval.DataIdxF = 0;
0000c4  2000              MOVS     r0,#0
0000c6  7030              STRB     r0,[r6,#0]
;;;9148                               LL_ConnBuffPrcs.BufPrcsF = LL_ConnBuffPrcs.BufPrcsN;
0000c8  6878              LDR      r0,[r7,#4]  ; LL_ConnBuffPrcs
;;;9149                               if(LL_ConnBuffPrcs.BufPrcsN->Next !=(MBLK *)0)
0000ca  6038              STR      r0,[r7,#0]  ; LL_ConnBuffPrcs
0000cc  6800              LDR      r0,[r0,#0]
0000ce  2800              CMP      r0,#0
0000d0  d000              BEQ      |L71.212|
;;;9150                               {
;;;9151                                   LL_ConnBuffPrcs.BufPrcsN = LL_ConnBuffPrcs.BufPrcsN->Next;
0000d2  6078              STR      r0,[r7,#4]  ; LL_ConnBuffPrcs
                  |L71.212|
;;;9152                               }
;;;9153                           }
;;;9154                       }
;;;9155                       //LL_Para_Interval.DataIdxN += Len;
;;;9156                   }
;;;9157                   if(Len)
0000d4  2c00              CMP      r4,#0
0000d6  d006              BEQ      |L71.230|
;;;9158                   {
;;;9159                       RF_TxFIFO_LeData_wIdx_set(LL_Para_Interval.Data, Len);
0000d8  4621              MOV      r1,r4
0000da  1d30              ADDS     r0,r6,#4
0000dc  f7fffffe          BL       RF_TxFIFO_LeData_wIdx_set
;;;9160                       LL_Para_Interval.DataIdxN += Len;
0000e0  7870              LDRB     r0,[r6,#1]  ; LL_Para_Interval
0000e2  1900              ADDS     r0,r0,r4
0000e4  7070              STRB     r0,[r6,#1]
                  |L71.230|
;;;9161                   }
;;;9162               }
;;;9163               break;
;;;9164   
;;;9165           case LL_INT_S41:
;;;9166           case LL_INT_S42:
;;;9167           case LL_INT_S50:
;;;9168           case LL_INT_S53:
;;;9169   #if 0
;;;9170               Len = RF_RxFIFO_Count_get();
;;;9171               Len = Len & 0x30;
;;;9172               LLWTRFIFOGet_Isr(Len);
;;;9173   #else   //(0)
;;;9174               while(1)
;;;9175               {
;;;9176                   if((LL_Para_IntervalR.HeaderLen - LL_Para_IntervalR.DataIdxN) > 16)
;;;9177                   {
;;;9178                       if(RF_RxFIFO_Count_get() >= 16)
;;;9179                           LLWTRFIFOGet_Isr(16);
;;;9180                       else
;;;9181                           break;
;;;9182                   }
;;;9183                   else
;;;9184                       break;
;;;9185               }
;;;9186   #endif  //(0)
;;;9187               break;
;;;9188   
;;;9189           default:
;;;9190               break;
;;;9191           }
;;;9192       }
;;;9193   }
0000e6  bdf8              POP      {r3-r7,pc}
0000e8  e00e              B        |L71.264|
0000ea  4c0b              LDR      r4,|L71.280|
                  |L71.236|
0000ec  78e0              LDRB     r0,[r4,#3]            ;9176  ; LL_Para_IntervalR
0000ee  7861              LDRB     r1,[r4,#1]            ;9176  ; LL_Para_IntervalR
0000f0  1a40              SUBS     r0,r0,r1              ;9176
0000f2  2810              CMP      r0,#0x10              ;9176
0000f4  ddf7              BLE      |L71.230|
0000f6  206a              MOVS     r0,#0x6a              ;9178
0000f8  f7fffffe          BL       SPI_1BYT_SetRx_Isr
0000fc  2810              CMP      r0,#0x10              ;9178
0000fe  d3f2              BCC      |L71.230|
000100  2010              MOVS     r0,#0x10              ;9179
000102  f7fffffe          BL       LLWTRFIFOGet_Isr
000106  e7f1              B        |L71.236|
                  |L71.264|
000108  4770              BX       lr                    ;9179
;;;9194   
                          ENDP

00010a  0000              DCW      0x0000
                  |L71.268|
                          DCD      ||.data||
                  |L71.272|
                          DCD      ||.bss||+0x43c
                  |L71.276|
                          DCD      ||.data||+0x5c
                  |L71.280|
                          DCD      ||.bss||+0x460

                          AREA ||i.LLTimer_Isr||, CODE, READONLY, ALIGN=2

                  LLTimer_Isr PROC
;;;5331   
;;;5332   void LLTimer_Isr(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;5333   {
;;;5334       extern uint32_t Timeline24;
;;;5335       extern uint32_t Tmr16Interval;
;;;5336   
;;;5337       Uint8 tblk_i, k, idxConnID;
;;;5338       Uint16 j;
;;;5339       Uint32 i16, j16;
;;;5340       //Uint32 *ptAddr;
;;;5341       uint8_t *ptAddr;
;;;5342       //Uint32 ptAddr;
;;;5343   
;;;5344       LL_Conn *pLL_Conn;
;;;5345       MBLK *mblk;
;;;5346   
;;;5347   
;;;5348       if(TBlk_InUse_LL == MAX_TBLK_LL_NO)
000002  49ff              LDR      r1,|L72.1024|
000004  b087              SUB      sp,sp,#0x1c           ;5333
000006  7948              LDRB     r0,[r1,#5]  ; TBlk_InUse_LL
000008  460a              MOV      r2,r1
;;;5349       {
;;;5350           tblk_i = (LL_Msg_AdvScnConnUpdSts^LL_Msg_AdvScnConnUpd);
;;;5351           if((tblk_i & (LL_MSG_ADVSCNCONN_ADV_EN|LL_MSG_ADVSCNCONN_SCN_EN|LL_MSG_ADVSCNCONN_INIT_EN)))    //Current State=ADV/SCN/INIT
;;;5352           {
;;;5353               LL_Msg_AdvScnConnUpdSts ^= tblk_i;
;;;5354               TBlk_InUse_LL = TBlk_Free_LL;
00000a  7917              LDRB     r7,[r2,#4]
00000c  4684              MOV      r12,r0                ;5348
00000e  280c              CMP      r0,#0xc               ;5348
000010  d064              BEQ      |L72.220|
;;;5355   
;;;5356               LL_TmrBlk_Pt_PairRst();
;;;5357   
;;;5358               tblk_LL_pi->TmrId = LL_TMR_S1;                    //state:0 (Start)
;;;5359               tblk_LL_pi->Ticks = LL_Tmr_Ticks_RSV_Wakeup;  //1
;;;5360   
;;;5361               tblk_LL_pi2->TmrId = LL_TMR_S255;                 //state:255 (Stop)
;;;5362               TBlk_Free_LL = tblk_LL_pi2->Next;
;;;5363               tblk_LL_pi2->Next = MAX_TBLK_LL_NO;
;;;5364   
;;;5365               LL_Msg_AdvScnConn = (LL_Msg_AdvScnConnUpdSts & (LL_MSG_ADVSCNCONN_ADV_EN|LL_MSG_ADVSCNCONN_SCN_EN|LL_MSG_ADVSCNCONN_INIT_EN))<<4;
;;;5366               if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_ADV_EN))
;;;5367               {
;;;5368                   Knl_MemCpy_Isr(&LL_Adv_Para.Adv_Para.LL_AdvMap_ID, &LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvMap_ID, LEN_LE_ADV_PARAM);
;;;5369                   Knl_MemCpy_Isr(Ch_ADV_Ch_Hop_Table, Ch_ADV_Ch_Hop_TableBuf, 4);
;;;5370                   //LL_Msg_AdvScnConn |= LL_MSG_ADVSCNCONN_ADV_CONT;
;;;5371                   tblk_LL_pi->ConnId = LL_CONN_ID_ADV_PARA;
;;;5372                   tblk_LL_pi2->ConnId = LL_CONN_ID_ADV_PARA;
;;;5373                   tblk_LL_pi2->Ticks = LL_DUR_RSV[LL_Adv_Para.Adv_Para.LL_Adv_Type&FLD_MSK_LL_ADV_TYPE] + LL_Tmr_Ticks_RSV_Wakeup;
;;;5374               }
;;;5375               else if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_SCN_EN))
;;;5376               {
;;;5377                   Knl_MemCpy_Isr(&LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID, &LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_AdvMap_ID, LEN_LE_SCAN_PARA);
;;;5378                   Knl_MemCpy_Isr(Ch_ADV_Ch_Hop_Table, Ch_ADV_Ch_Hop_TableBuf, 4);
;;;5379                   //LL_Msg_AdvScnConn |= LL_MSG_ADVSCNCONN_SCN_CONT;
;;;5380                   tblk_LL_pi->ConnId = LL_CONN_ID_SCAN_PARA;
;;;5381                   tblk_LL_pi2->ConnId = LL_CONN_ID_SCAN_PARA;
;;;5382                   tblk_LL_pi2->Ticks = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Window;
;;;5383               }
;;;5384   #if MAX_NUM_CONN_MAS_HDL != 0
;;;5385               else if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_INIT_EN))
;;;5386               {
;;;5387                   //LL_Msg_AdvScnConn |= LL_MSG_ADVSCNCONN_INIT_CONT;
;;;5388                   tblk_LL_pi->ConnId = LL_CONN_ID_INIT_PARA;
;;;5389                   tblk_LL_pi2->ConnId = LL_CONN_ID_INIT_PARA;
;;;5390                   tblk_LL_pi2->Ticks = LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window;
;;;5391               }
;;;5392   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;5393               RF_Tmr_Periodic_set_ISR(LL_Tmr_Ticks_RSV_Wakeup);
;;;5394           }
;;;5395           else
;;;5396           {
;;;5397               //RF_Tmr_Periodic_set_ISR(LL_TMR_TICKS_RSV_BASE);
;;;5398               Tmr37 += DUR_LL_WAKEUP_MIN*125;
;;;5399               ((uint8_t *)&Tmr37)[4] &= 0x1F;
;;;5400               Timeline24 += DUR_LL_WAKEUP_MIN;
;;;5401               if(((uint8_t *)&Timeline24)[3] > 0xEF)
;;;5402               {
;;;5403                   //Timeline24 &= 0x0FFFFFFF;
;;;5404                   ((uint8_t *)&Timeline24)[3] &= 0x0F;
;;;5405               }
;;;5406               Ble_EC_Chk_Isr();
;;;5407   //#ifdef _PWR_DOWN_BY_LL_
;;;5408               RF_PowerSaving_En_Isr();
;;;5409   //#endif
;;;5410           }
;;;5411           return;
;;;5412       }
;;;5413       else            //(TBlk_InUse_LL != MAX_TBLK_LL_NO)
;;;5414       {
;;;5415           idxConnID = tblk_LL_pi->ConnId;
000012  698a              LDR      r2,[r1,#0x18]  ; tblk_LL_pi
;;;5416           i16 = tblk_LL_pi->Ticks;      //timeout duration
;;;5417           if(i16 == Tmr16Interval)      //Timer IRQ is timer interval expires!
000014  48fb              LDR      r0,|L72.1028|
000016  7856              LDRB     r6,[r2,#1]            ;5415
000018  9600              STR      r6,[sp,#0]            ;5416
00001a  6855              LDR      r5,[r2,#4]
00001c  6800              LDR      r0,[r0,#0]  ; Tmr16Interval
00001e  4285              CMP      r5,r0
000020  d000              BEQ      |L72.36|
000022  e3f2              B        |L72.2058|
                  |L72.36|
;;;5418           {
;;;5419               //anchor_LL_Tmr += ((Uint8 *) &i16)[1];
;;;5420               anchor_LL_Tmr += ((Uint8 *) &i16)[0];       //Little endian
000024  4608              MOV      r0,r1
000026  7a01              LDRB     r1,[r0,#8]  ; anchor_LL_Tmr
000028  1869              ADDS     r1,r5,r1
00002a  7201              STRB     r1,[r0,#8]
;;;5421               if(tblk_LL_pi->TmrId < LL_TMR_S2)           //if(Timer State = S0 or S1)
00002c  7810              LDRB     r0,[r2,#0]
00002e  2802              CMP      r0,#2
000030  d27e              BCS      |L72.304|
;;;5422               {
;;;5423                   if(tblk_LL_pi->TmrId != LL_TMR_S0)      //case:Timer State = S1 (Start)
000032  4cf3              LDR      r4,|L72.1024|
000034  2800              CMP      r0,#0
000036  d07c              BEQ      |L72.306|
;;;5424                   {
;;;5425                       RF_Tmr_Periodic_set_ISR(LL_Tmr_Ticks_RSV_Wakeup);
000038  4ef3              LDR      r6,|L72.1032|
00003a  7830              LDRB     r0,[r6,#0]  ; LL_Tmr_Ticks_RSV_Wakeup
00003c  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
;;;5426                       tblk_i = (LL_Msg_AdvScnConnUpdSts^LL_Msg_AdvScnConnUpd);
000040  7ae5              LDRB     r5,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
000042  7aa1              LDRB     r1,[r4,#0xa]  ; LL_Msg_AdvScnConnUpd
000044  4628              MOV      r0,r5
000046  404d              EORS     r5,r5,r1
;;;5427                       LL_Msg_AdvScnConnUpdSts ^= tblk_i;
000048  4068              EORS     r0,r0,r5
00004a  72e0              STRB     r0,[r4,#0xb]
;;;5428                       if(LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_ADV_EN)
00004c  07c0              LSLS     r0,r0,#31
00004e  d00b              BEQ      |L72.104|
;;;5429                       {
;;;5430                           if((tblk_i & LL_MSG_ADVSCNCONN_UPD_ADV_PARA))
000050  06a8              LSLS     r0,r5,#26
000052  d509              BPL      |L72.104|
;;;5431                           {
;;;5432                               Knl_MemCpy_Isr(&LL_Adv_Para.Adv_Para.LL_AdvMap_ID, &LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvMap_ID, LEN_LE_ADV_PARAM);
000054  221c              MOVS     r2,#0x1c
000056  49ed              LDR      r1,|L72.1036|
000058  48ed              LDR      r0,|L72.1040|
00005a  f7fffffe          BL       Knl_MemCpy_Isr
;;;5433                               Knl_MemCpy_Isr(Ch_ADV_Ch_Hop_Table, Ch_ADV_Ch_Hop_TableBuf, 4);
00005e  2204              MOVS     r2,#4
000060  49ec              LDR      r1,|L72.1044|
000062  48ed              LDR      r0,|L72.1048|
000064  f7fffffe          BL       Knl_MemCpy_Isr
                  |L72.104|
;;;5434                           }
;;;5435                       }
;;;5436                       if(LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_SCN_EN)
000068  7ae0              LDRB     r0,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
00006a  0780              LSLS     r0,r0,#30
00006c  d50b              BPL      |L72.134|
;;;5437                       {
;;;5438                           if((tblk_i & LL_MSG_ADVSCNCONN_UPD_SCN_PARA))
00006e  0668              LSLS     r0,r5,#25
000070  d509              BPL      |L72.134|
;;;5439                           {
;;;5440                               Knl_MemCpy_Isr(&LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID, &LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_AdvMap_ID, LEN_LE_SCAN_PARA);
000072  220c              MOVS     r2,#0xc
000074  49e9              LDR      r1,|L72.1052|
000076  48ea              LDR      r0,|L72.1056|
000078  f7fffffe          BL       Knl_MemCpy_Isr
;;;5441                               Knl_MemCpy_Isr(Ch_ADV_Ch_Hop_Table, Ch_ADV_Ch_Hop_TableBuf, 4);
00007c  49e5              LDR      r1,|L72.1044|
00007e  2204              MOVS     r2,#4
000080  1f08              SUBS     r0,r1,#4
000082  f7fffffe          BL       Knl_MemCpy_Isr
                  |L72.134|
;;;5442                           }
;;;5443                       }
;;;5444                       LL_Msg_AdvScnConn = (LL_Msg_AdvScnConnUpdSts & (LL_MSG_ADVSCNCONN_ADV_EN|LL_MSG_ADVSCNCONN_SCN_EN|LL_MSG_ADVSCNCONN_INIT_EN))<<4;
000086  7ae0              LDRB     r0,[r4,#0xb]  ; LL_Msg_AdvScnConnUpdSts
000088  0740              LSLS     r0,r0,#29
00008a  0e40              LSRS     r0,r0,#25
00008c  7260              STRB     r0,[r4,#9]
;;;5445                       LL_DurRxPktAccu = LL_DurRxPktAccu - LL_Tmr_Ticks_RSV_Wakeup;
00008e  89e1              LDRH     r1,[r4,#0xe]  ; LL_DurRxPktAccu
000090  7830              LDRB     r0,[r6,#0]  ; LL_Tmr_Ticks_RSV_Wakeup
000092  1a09              SUBS     r1,r1,r0
000094  81e1              STRH     r1,[r4,#0xe]
;;;5446                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - LL_Tmr_Ticks_RSV_Wakeup;
000096  69e1              LDR      r1,[r4,#0x1c]  ; tblk_LL_pi2
000098  684b              LDR      r3,[r1,#4]
00009a  1a18              SUBS     r0,r3,r0
;;;5447                       tblk_LL_pi->TmrId = LL_TMR_S0;
00009c  6048              STR      r0,[r1,#4]
00009e  69a1              LDR      r1,[r4,#0x18]  ; tblk_LL_pi
0000a0  2000              MOVS     r0,#0
0000a2  7008              STRB     r0,[r1,#0]
;;;5448                       tblk_LL_pi->Ticks = LL_Tmr_Ticks_RSV_Wakeup;
0000a4  7830              LDRB     r0,[r6,#0]  ; LL_Tmr_Ticks_RSV_Wakeup
;;;5449                       Tmr37 += (LL_Tmr_Ticks_RSV_Wakeup*125);
0000a6  6048              STR      r0,[r1,#4]
0000a8  217d              MOVS     r1,#0x7d
0000aa  4341              MULS     r1,r0,r1
0000ac  6f23              LDR      r3,[r4,#0x70]  ; Tmr37
0000ae  17ca              ASRS     r2,r1,#31
0000b0  6f65              LDR      r5,[r4,#0x74]  ; Tmr37
0000b2  18c9              ADDS     r1,r1,r3
0000b4  416a              ADCS     r2,r2,r5
;;;5450                       ((uint8_t *)&Tmr37)[4] &= 0x1F;
0000b6  6762              STR      r2,[r4,#0x74]  ; Tmr37
0000b8  6721              STR      r1,[r4,#0x70]  ; Tmr37
0000ba  49da              LDR      r1,|L72.1060|
0000bc  790a              LDRB     r2,[r1,#4]  ; Tmr37
0000be  06d2              LSLS     r2,r2,#27
0000c0  0ed2              LSRS     r2,r2,#27
0000c2  710a              STRB     r2,[r1,#4]
;;;5451                       Timeline24 += LL_Tmr_Ticks_RSV_Wakeup;
0000c4  49d8              LDR      r1,|L72.1064|
0000c6  680b              LDR      r3,[r1,#0]  ; Timeline24
0000c8  1818              ADDS     r0,r3,r0
;;;5452                       if(((uint8_t *)&Timeline24)[3] > 0xEF)
0000ca  6008              STR      r0,[r1,#0]  ; Timeline24
0000cc  78c8              LDRB     r0,[r1,#3]  ; Timeline24
0000ce  28ef              CMP      r0,#0xef
0000d0  d800              BHI      |L72.212|
0000d2  e22f              B        |L72.1332|
                  |L72.212|
;;;5453                       {
;;;5454                           //Timeline24 &= 0x0FFFFFFF;
;;;5455                           ((uint8_t *)&Timeline24)[3] &= 0x0F;
0000d4  0700              LSLS     r0,r0,#28
0000d6  0f00              LSRS     r0,r0,#28
0000d8  70c8              STRB     r0,[r1,#3]
0000da  e22b              B        |L72.1332|
                  |L72.220|
0000dc  7aca              LDRB     r2,[r1,#0xb]          ;5350  ; LL_Msg_AdvScnConnUpdSts
0000de  7a88              LDRB     r0,[r1,#0xa]          ;5350  ; LL_Msg_AdvScnConnUpd
0000e0  4050              EORS     r0,r0,r2              ;5350
0000e2  0743              LSLS     r3,r0,#29             ;5351
0000e4  d057              BEQ      |L72.406|
0000e6  4042              EORS     r2,r2,r0              ;5353
0000e8  72ca              STRB     r2,[r1,#0xb]          ;5353
0000ea  460c              MOV      r4,r1                 ;5353
0000ec  714f              STRB     r7,[r1,#5]            ;5354
0000ee  f7fffffe          BL       LL_TmrBlk_Pt_PairRst
0000f2  69a0              LDR      r0,[r4,#0x18]         ;5358  ; tblk_LL_pi
0000f4  2201              MOVS     r2,#1                 ;5358
0000f6  4dc4              LDR      r5,|L72.1032|
0000f8  7002              STRB     r2,[r0,#0]            ;5358
0000fa  782a              LDRB     r2,[r5,#0]            ;5359  ; LL_Tmr_Ticks_RSV_Wakeup
0000fc  6042              STR      r2,[r0,#4]            ;5361
0000fe  69e0              LDR      r0,[r4,#0x1c]         ;5361  ; tblk_LL_pi2
000100  22ff              MOVS     r2,#0xff              ;5361
000102  7002              STRB     r2,[r0,#0]            ;5361
000104  7881              LDRB     r1,[r0,#2]            ;5362
000106  7121              STRB     r1,[r4,#4]            ;5362
000108  220c              MOVS     r2,#0xc               ;5363
00010a  7082              STRB     r2,[r0,#2]            ;5363
00010c  7ae0              LDRB     r0,[r4,#0xb]          ;5365  ; LL_Msg_AdvScnConnUpdSts
00010e  0741              LSLS     r1,r0,#29             ;5365
000110  0e49              LSRS     r1,r1,#25             ;5365
000112  7261              STRB     r1,[r4,#9]            ;5365
000114  07c1              LSLS     r1,r0,#31             ;5366
000116  d01b              BEQ      |L72.336|
000118  221c              MOVS     r2,#0x1c              ;5368
00011a  49bc              LDR      r1,|L72.1036|
00011c  48bc              LDR      r0,|L72.1040|
00011e  f7fffffe          BL       Knl_MemCpy_Isr
000122  49bc              LDR      r1,|L72.1044|
000124  2204              MOVS     r2,#4                 ;5369
000126  1f08              SUBS     r0,r1,#4              ;5369
000128  f7fffffe          BL       Knl_MemCpy_Isr
00012c  2105              MOVS     r1,#5                 ;5371
00012e  e001              B        |L72.308|
                  |L72.304|
000130  e246              B        |L72.1472|
                  |L72.306|
000132  e04f              B        |L72.468|
                  |L72.308|
000134  69a0              LDR      r0,[r4,#0x18]         ;5371  ; tblk_LL_pi
000136  7041              STRB     r1,[r0,#1]            ;5371
000138  69e0              LDR      r0,[r4,#0x1c]         ;5372  ; tblk_LL_pi2
00013a  7041              STRB     r1,[r0,#1]            ;5372
00013c  49b4              LDR      r1,|L72.1040|
00013e  7a09              LDRB     r1,[r1,#8]            ;5373  ; LL_Adv_Para
000140  070a              LSLS     r2,r1,#28             ;5373
000142  49ba              LDR      r1,|L72.1068|
000144  0f12              LSRS     r2,r2,#28             ;5373
000146  5c89              LDRB     r1,[r1,r2]            ;5373
000148  782a              LDRB     r2,[r5,#0]            ;5373  ; LL_Tmr_Ticks_RSV_Wakeup
00014a  1889              ADDS     r1,r1,r2              ;5373
00014c  6041              STR      r1,[r0,#4]            ;5373
00014e  e01d              B        |L72.396|
                  |L72.336|
000150  0781              LSLS     r1,r0,#30             ;5375
000152  d511              BPL      |L72.376|
000154  49b1              LDR      r1,|L72.1052|
000156  220c              MOVS     r2,#0xc               ;5377
000158  1a88              SUBS     r0,r1,r2              ;5377
00015a  f7fffffe          BL       Knl_MemCpy_Isr
00015e  49ad              LDR      r1,|L72.1044|
000160  2204              MOVS     r2,#4                 ;5378
000162  1f08              SUBS     r0,r1,#4              ;5378
000164  f7fffffe          BL       Knl_MemCpy_Isr
000168  69a0              LDR      r0,[r4,#0x18]         ;5380  ; tblk_LL_pi
00016a  2106              MOVS     r1,#6                 ;5380
00016c  7041              STRB     r1,[r0,#1]            ;5380
00016e  69e0              LDR      r0,[r4,#0x1c]         ;5381  ; tblk_LL_pi2
000170  7041              STRB     r1,[r0,#1]            ;5381
000172  49ab              LDR      r1,|L72.1056|
000174  8889              LDRH     r1,[r1,#4]            ;5382  ; LL_Scan_Para
000176  e008              B        |L72.394|
                  |L72.376|
000178  0740              LSLS     r0,r0,#29             ;5385
00017a  d507              BPL      |L72.396|
00017c  69a0              LDR      r0,[r4,#0x18]         ;5388  ; tblk_LL_pi
00017e  2107              MOVS     r1,#7                 ;5388
000180  7041              STRB     r1,[r0,#1]            ;5388
000182  69e0              LDR      r0,[r4,#0x1c]         ;5389  ; tblk_LL_pi2
000184  7041              STRB     r1,[r0,#1]            ;5389
000186  49aa              LDR      r1,|L72.1072|
000188  88c9              LDRH     r1,[r1,#6]            ;5390  ; LL_Init_Para
                  |L72.394|
00018a  6041              STR      r1,[r0,#4]            ;5390
                  |L72.396|
00018c  7828              LDRB     r0,[r5,#0]            ;5393  ; LL_Tmr_Ticks_RSV_Wakeup
00018e  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
;;;5456                       }
;;;5457                   }
;;;5458                   else      //case: Timer State = S0 (Start)
;;;5459                   {
;;;5460                       RF_Tmr_Periodic_set_ISR(LL_TMR_TICKS_RSV_RF_INIT);
;;;5461   
;;;5462                       rafael_reset_phy_fsm_Isr();
;;;5463                       RF_FIFOrst();
;;;5464                       RF_WTR_intOn();  //enable TX_END/RX_END Interrupt
;;;5465                       //ptAddr = ID_REG;
;;;5466                       tblk_i = tblk_LL_pi->ConnId;
;;;5467   
;;;5468                       if(tblk_i<LL_CONN_ID_ADV_PARA)    // tblk_i<5, means Connection master or slave
;;;5469                       {
;;;5470                           LL_conn_pi = &LL_Conn_Para[tblk_i];
;;;5471                           RF_RxLengthLimit(255);
;;;5472                           //RF_RxLengthLimit((LL_conn_pi->LE_Conn_Para.LL_Rx_length_1M+LEN_CONN_MIC));      //used to delay for the next function "SPI_PDMA_SetRx_Isr"
;;;5473                           //*ptAddr = LL_conn_pi->LE_Conn_Para.LL_AccessAddr;
;;;5474                           switch(status_LL_Tmr)
;;;5475                           {
;;;5476                           case LL_INT_S0:
;;;5477                               RF_Set_TxPowerLevel_Isr(LL_conn_pi->LE_Conn_Para.LL_Tx_PowerLevel);
;;;5478   #if MAX_NUM_CONN_MAS_HDL != 0
;;;5479                               if(tblk_i < MAX_NUM_CONN_MAS_HDL)    //Master: enable TX
;;;5480                               {
;;;5481                                   LL_TxEnter_Isr();
;;;5482                                   status_LL_Tmr = LL_INT_S40;
;;;5483                               }
;;;5484                               else
;;;5485   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;5486                               {
;;;5487   #if MAX_NUM_CONN_SLV_HDL != 0
;;;5488                                   LL_RxEnter_Isr();            //Salve: enable RX
;;;5489                                   status_LL_Tmr = LL_INT_S50;  //change to Slave RX_ISR state
;;;5490   #ifdef _DEBUG_PINS_
;;;5491                                   PA15 = 0;
;;;5492                                   PA15 = 1;
;;;5493   #endif
;;;5494   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;5495                               }
;;;5496                               LL_DurRxPktAccu = LL_DurRxPktAccu - LL_TMR_TICKS_RSV_RF_INIT;
;;;5497                               tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - LL_TMR_TICKS_RSV_RF_INIT;
;;;5498                               tblk_LL_pi->TmrId = LL_TMR_S3;
;;;5499                               tblk_LL_pi->Ticks = LL_TMR_TICKS_RSV_RF_INIT;
;;;5500                               break;
;;;5501   
;;;5502                           default:
;;;5503                               ErrorEntry(1);
;;;5504                               break;
;;;5505                           }
;;;5506   
;;;5507                           SPI_PDMA_SetTx(RFIP_REG_122, (uint32_t)&LL_conn_pi->LE_Conn_Para.LL_AccessAddr, LEN_BD_ACCESS_ADDR);
;;;5508                           LL_SMP_DataCh = LL_conn_pi->LE_Conn_Para.LL_SMP_DataCh;
;;;5509                           //LL_Para_Interval.LL_SMP_DataCh = LL_conn_pi->LE_Conn_Para.LL_SMP_DataCh;
;;;5510   
;;;5511                           //RF_DC_Shift_Set(LL_conn_pi->LE_Conn_Para.RF_DC_Shift);
;;;5512                           setChannel_BLE(LL_conn_pi->LE_Conn_Para.LL_RF_Data_Ch_ReM[LL_conn_pi->LE_Conn_Para.LL_CurrentCH]);
;;;5513   
;;;5514                           RF_PLL_VCO_Bank_set(CH_PLL_bank_Table[LL_conn_pi->LE_Conn_Para.LL_RF_Data_Ch_ReM[LL_conn_pi->LE_Conn_Para.LL_CurrentCH]]);
;;;5515   
;;;5516                           LL_NextConnCh(LL_conn_pi);
;;;5517   
;;;5518                           RF_CRCInit(LL_conn_pi->LE_Conn_Para.LL_CRC_Init);
;;;5519   
;;;5520                           if(LL_conn_pi->LE_Conn_Para.LL_Tx_PHYS==LL_TX_PHYS_2M_PHY)      //RF_SymbolRate_set
;;;5521                           {
;;;5522                               RF_SymbolRate_Patch_1M_2M(1);
;;;5523                           }
;;;5524                           else
;;;5525                           {
;;;5526                               RF_SymbolRate_Patch_1M_2M(0);
;;;5527                           }
;;;5528                           RF_TxAutoAckOn();  //enable Auto TRX switch
;;;5529   
;;;5530                           LL_SvPrToutAccu_Incr();
;;;5531   #if MAX_NUM_CONN_MAS_HDL != 0
;;;5532                           if(idxConnID < MAX_NUM_CONN_MAS_HDL)
;;;5533                           {
;;;5534                               pLL_Conn = &LL_Conn_Para[idxConnID];
;;;5535                               //j = pLL_Conn->LE_Conn_Para.WinSize_DataHdr&(FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN);
;;;5536                               mblk = LL_ConnBuffPt[idxConnID];
;;;5537   
;;;5538                               j = pLL_Conn->LE_Conn_Para.WinSize_DataHdr;
;;;5539                               if(j&LL_ACK_TX_NEW)
;;;5540                               {
;;;5541                                   if(mblk == (MBLK *)0)
;;;5542                                   {
;;;5543                                       mblk = LL_Queue_To_Buffer_Isr(idxConnID);
;;;5544                                   }
;;;5545                               }
;;;5546                               j &= (FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN);
;;;5547                               if(mblk != (MBLK *)0)
;;;5548                               {
;;;5549                                   if(mblk->Primitive==MLL_LE_CTRL_PKT)
;;;5550                                   {
;;;5551                                       switch(mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode)
;;;5552                                       {
;;;5553                                       case LL_CONN_UPDATE_REQ:
;;;5554                                           if((anchor_LL_Tmr&0x07))
;;;5555                                           {
;;;5556                                               LL_conn_pi->LE_Conn_Para.WinOffsetUpd = ((DUR_LL_RSV_CONN_WINOFFSET)-(anchor_LL_Tmr&0x07));
;;;5557                                           }
;;;5558                                           else
;;;5559                                           {
;;;5560                                               LL_conn_pi->LE_Conn_Para.WinOffsetUpd = DUR_LL_RSV_CONN_WINOFFSET;
;;;5561                                           }
;;;5562                                           mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[1] = LL_conn_pi->LE_Conn_Para.WinOffsetUpd;
;;;5563                                           mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[2] = LL_conn_pi->LE_Conn_Para.WinOffsetUpd>>8;
;;;5564                                           i16 = pLL_Conn->LE_Conn_Para.LL_EventCounter+(MAX_NUM_CONN_HDL+3);
;;;5565                                           if(pLL_Conn->LE_Conn_Para.LL_EventCounterUpd > i16)
;;;5566                                           {
;;;5567                                               mblk->Para.HCLL_LE_Ctrl_Pkt_Conn_Update_Para.HCI_CtrlPkt_Instant = i16;
;;;5568                                               pLL_Conn->LE_Conn_Para.LL_EventCounterUpd = i16;
;;;5569   
;;;5570                                           }
;;;5571                                           break;
;;;5572   
;;;5573                                       case LL_CHANNEL_MAP_REQ:
;;;5574                                           i16 = pLL_Conn->LE_Conn_Para.LL_EventCounter+(MAX_NUM_CONN_HDL+3);
;;;5575                                           if(pLL_Conn->LE_Conn_Para.LL_EventCounterUpd > i16)
;;;5576                                           {
;;;5577                                               mblk->Para.HCLL_LE_Ctrl_Pkt_Set_Host_Ch_Para.HCI_CtrlPkt_Instant = i16;
;;;5578                                               pLL_Conn->LE_Conn_Para.LL_EventCounterUpd = i16;
;;;5579                                           }
;;;5580                                           break;
;;;5581   
;;;5582                                       default:
;;;5583                                           break;
;;;5584                                       }
;;;5585                                   }
;;;5586   
;;;5587                                   if((LL_ConnDataQ[idxConnID].QOut!=(MBLK *)0)||(LL_ConnCtrlQ[idxConnID].QOut!=(MBLK *)0))
;;;5588                                   {
;;;5589                                       j |= FLD_MSK_LL_DATA_MD;
;;;5590                                   }
;;;5591                                   LL_Buffer_To_FIFO_Isr(idxConnID, j);
;;;5592                               }
;;;5593                               else
;;;5594                               {
;;;5595                                   LL_Para_Interval.HeaderSts = ((j|LL_DATA_LLID_EMPTY_CONTI)&(~FLD_MSK_LL_DATA_RSV));
;;;5596                                   LL_Para_Interval.HeaderLen = 0;
;;;5597                                   RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;5598                               }
;;;5599                               pLL_Conn->LE_Conn_Para.WinSize_DataHdr = j;
;;;5600                           }
;;;5601   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;5602                       }
;;;5603                       else       // tblk_i>=LL_CONN_ID_ADV_PARA, means ADV/SCAN/INIT
;;;5604                       {
;;;5605                           RF_CRCInit((uint8_t *)&LL_Ref_crc_ini_ADVSCN);
;;;5606                           SPI_PDMA_SetTx(RFIP_REG_122, (uint32_t)&LL_Ref_Acs_Addr_ADVSCN, LEN_BD_ACCESS_ADDR);
;;;5607                           SPI_1BYT_SetTx_Isr(RFIP_REG_155, REG_155_AES_MODE_BYPASS);
;;;5608                           RF_RxLengthLimit(LEN_ADV_PAYLOAD_MAX);
;;;5609   
;;;5610                           switch(tblk_i)
;;;5611                           {
;;;5612                           case LL_CONN_ID_ADV_PARA:   //5:ADV
;;;5613                               LL_conn_pi = &LL_Conn_Para[LL_Adv_Para.Adv_Para.LL_AdvConn_ID];
;;;5614                               if((LL_Msg_AdvScnConn & LL_MSG_ADVSCNCONN_ADV_CONT)==0)     //not continuous adv
;;;5615                               {
;;;5616                                   if(LL_Adv_Para.Adv_Para.LL_AdvConn_ID < LL_CONN_ID_SLAVE_RSV)
;;;5617                                   {
;;;5618                                       LL_MsgBlk_LL_conn_Para_Rls(LL_Adv_Para.Adv_Para.LL_AdvConn_ID);
;;;5619                                       LL_Adv_Para.Adv_Para.LL_AdvConn_ID = LL_CONN_ID_SLAVE_RSV;
;;;5620                                   }
;;;5621                                   RF_WTR_intOff();
;;;5622                                   LL_TmrBlk_Rls_Pair();
;;;5623                                   LL_TmrBlk_Rls_NxtIntvl();
;;;5624                                   return;
;;;5625                               }
;;;5626                               switch(status_LL_Tmr)
;;;5627                               {
;;;5628                               case LL_INT_S0:   //Initial
;;;5629                                   RF_Set_TxPowerLevel_Isr(LL_Adv_Para.Adv_Para.LL_Tx_PowerLevel);
;;;5630                                   LL_TxEnter_Isr();
;;;5631   
;;;5632                                   //RF_TxFIFOrst();
;;;5633                                   setChannel_BLE(CH_ADV_SEL_TABLE[LL_Adv_Para.Adv_Para.LL_AdvMap_ID]);
;;;5634   
;;;5635                                   RF_PLL_VCO_Bank_set(CH_PLL_bank_Table[CH_ADV_SEL_TABLE[LL_Adv_Para.Adv_Para.LL_AdvMap_ID]]);
;;;5636   
;;;5637   
;;;5638                                   LL_Adv_Para.Adv_Para.LL_AdvMap_ID = Ch_ADV_Ch_Hop_Table[LL_Adv_Para.Adv_Para.LL_AdvMap_ID];
;;;5639   
;;;5640                                   LL_Para_Interval.HeaderSts = LL_Adv_Para.Adv_Para.LL_Adv_Type;
;;;5641                                   tblk_i = LL_Adv_Para.Adv_Para.LL_Adv_Type;
;;;5642                                   tblk_i = tblk_i&FLD_MSK_LL_ADV_TYPE;
;;;5643   
;;;5644                                   if(tblk_i == LE_ADV_TYPE_ADV_DIRECT_IND)
;;;5645                                   {
;;;5646                                       ptAddr = (uint8_t *)LL_Adv_Para.Adv_Para.LL_DirectAddr;
;;;5647                                       j = (LEN_BD_ADDR+LEN_BD_ADDR);
;;;5648                                   }
;;;5649                                   else
;;;5650                                   {
;;;5651                                       if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_UPD_ADV_DATA))
;;;5652                                       {
;;;5653                                           ptAddr = (uint8_t *)LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Data;
;;;5654                                           j = LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Data_Length;
;;;5655                                       }
;;;5656                                       else
;;;5657                                       {
;;;5658                                           ptAddr = (uint8_t *)LL_Adv_Para.Adv_Para.LL_Adv_Data;
;;;5659                                           j = LL_Adv_Para.Adv_Para.LL_Adv_Data_Length;
;;;5660                                       }
;;;5661                                   }
;;;5662                                   LL_Para_Interval.HeaderLen = j;
;;;5663                                   RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);  //fill 2 bytes Header (HeaderSts and HeaderLen)
;;;5664   
;;;5665                                   if(LL_Adv_Para.Adv_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_PUBLIC)
;;;5666                                   {
;;;5667                                       RF_TxFIFO_ADVaddr_set(ble_device_param.ble_deviceAddr_param.addr);
;;;5668                                   }
;;;5669                                   else
;;;5670                                   {
;;;5671                                       RF_TxFIFO_ADVaddr_set(BD_Rand_Addr);
;;;5672                                   }
;;;5673   
;;;5674                                   RF_SymbolRate_Patch_1M_2M(0);                               //RF_SymbolRate_set
;;;5675                                   if(tblk_i==LE_ADV_TYPE_ADV_NONCONN_IND)
;;;5676                                   {
;;;5677                                       RF_TxAutoAckOff();     //disable auto TRX switch
;;;5678                                       status_LL_Tmr = LL_INT_S10;
;;;5679                                   }
;;;5680                                   else
;;;5681                                   {
;;;5682                                       RF_TxAutoAckOn();      //enable Auto TRX switch
;;;5683                                       status_LL_Tmr = LL_INT_S11;
;;;5684                                   }
;;;5685                                   RF_TxFIFO_ADVData_set((uint8_t *)ptAddr);
;;;5686   
;;;5687                                   tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - LL_TMR_TICKS_RSV_RF_INIT;
;;;5688                                   tblk_LL_pi->TmrId = LL_TMR_S3;
;;;5689                                   tblk_LL_pi->Ticks = LL_TMR_TICKS_RSV_RF_INIT;
;;;5690                                   break;
;;;5691   
;;;5692                               default:
;;;5693                                   ErrorEntry(2);
;;;5694                                   break;
;;;5695                               }
;;;5696                               break;
;;;5697   
;;;5698                           case LL_CONN_ID_SCAN_PARA:   //6:SCAN
;;;5699                               if((LL_Msg_AdvScnConn & LL_MSG_ADVSCNCONN_SCN_CONT)==0)
;;;5700                               {
;;;5701                                   RF_WTR_intOff();
;;;5702                                   LL_TmrBlk_Rls_Pair();
;;;5703                                   LL_TmrBlk_Rls_NxtIntvl();
;;;5704                                   return;
;;;5705                               }
;;;5706                               switch(status_LL_Tmr)
;;;5707                               {
;;;5708                               case LL_INT_S0:
;;;5709                                   RF_Set_TxPowerLevel_Isr(LL_Scan_Para.LE_Set_Scan_Para.LL_Tx_PowerLevel);
;;;5710                                   LL_RxEnter_Isr();
;;;5711   
;;;5712                                   setChannel_BLE(CH_ADV_SEL_TABLE[LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID]);
;;;5713   
;;;5714                                   RF_PLL_VCO_Bank_set(CH_PLL_bank_Table[CH_ADV_SEL_TABLE[LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID]]);
;;;5715   
;;;5716                                   RF_SymbolRate_Patch_1M_2M(0);                               //RF_SymbolRate_set
;;;5717                                   if(LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanType != 0)
;;;5718                                   {
;;;5719                                       status_LL_Tmr = LL_INT_S20;   //Active Scan
;;;5720                                       LL_Para_Interval.HeaderLen = (LEN_BD_ADDR+LEN_BD_ADDR);
;;;5721                                       RF_TxAutoAckOn();             //enable Auto Switch
;;;5722                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - LL_TMR_TICKS_RSV_RF_INIT;
;;;5723                                       tblk_LL_pi->Ticks = LL_TMR_TICKS_RSV_RF_INIT;
;;;5724                                       tblk_LL_pi->TmrId = LL_TMR_S3;
;;;5725                                   }
;;;5726                                   else       //Passive Scan
;;;5727                                   {
;;;5728                                       status_LL_Tmr = LL_INT_S21;
;;;5729                                       RF_TxAutoAckOff();
;;;5730                                       LL_TmrBlk_Rls();
;;;5731                                   }
;;;5732                                   break;
;;;5733   
;;;5734                               default:
;;;5735                                   ErrorEntry(3);
;;;5736                                   break;
;;;5737                               }
;;;5738                               break;
;;;5739   
;;;5740   #if MAX_NUM_CONN_MAS_HDL != 0
;;;5741                           case LL_CONN_ID_INIT_PARA:  //7:INIT
;;;5742                               LL_conn_pi = &LL_Conn_Para[LL_Init_Para.LE_Init_Para.LL_Conn_ID];
;;;5743                               if((LL_Msg_AdvScnConn & LL_MSG_ADVSCNCONN_INIT_CONT)==0)
;;;5744                               {
;;;5745                                   if(LL_Init_Para.LE_Init_Para.LL_Conn_ID < LL_CONN_ID_RSV)
;;;5746                                   {
;;;5747                                       LL_MsgBlk_LL_conn_Para_Rls(LL_Init_Para.LE_Init_Para.LL_Conn_ID);
;;;5748                                   }
;;;5749                                   RF_WTR_intOff();
;;;5750                                   LL_TmrBlk_Rls_Pair();
;;;5751                                   LL_TmrBlk_Rls_NxtIntvl();
;;;5752                                   return;
;;;5753                               }
;;;5754                               switch(status_LL_Tmr)
;;;5755                               {
;;;5756                               case LL_INT_S0:
;;;5757                                   RF_Set_TxPowerLevel_Isr(LL_Init_Para.LE_Init_Para.LL_Tx_PowerLevel);
;;;5758                                   LL_RxEnter_Isr();
;;;5759                                   setChannel_BLE(CH_ADV_SEL_TABLE[LL_Init_Para.LE_Init_Para.LL_AdvMap_ID]);
;;;5760   
;;;5761                                   RF_PLL_VCO_Bank_set(CH_PLL_bank_Table[CH_ADV_SEL_TABLE[LL_Init_Para.LE_Init_Para.LL_AdvMap_ID]]);
;;;5762   
;;;5763                                   status_LL_Tmr = LL_INT_S30;   //Init
;;;5764                                   LL_Para_Interval.HeaderLen = LEN_LE_CONN_REQ;
;;;5765                                   RF_SymbolRate_Patch_1M_2M(0);                               //RF_SymbolRate_set
;;;5766                                   RF_TxAutoAckOn();             //enable Auto Switch
;;;5767                                   tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - LL_TMR_TICKS_RSV_RF_INIT;
;;;5768                                   tblk_LL_pi->Ticks = LL_TMR_TICKS_RSV_RF_INIT;
;;;5769                                   tblk_LL_pi->TmrId = LL_TMR_S3;
;;;5770                                   break;
;;;5771   
;;;5772                               default:
;;;5773                                   ErrorEntry(4);
;;;5774                                   break;
;;;5775                               }
;;;5776                               break;
;;;5777   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;5778   
;;;5779                           default:
;;;5780                               __NOP();    //error
;;;5781                               break;
;;;5782                           }
;;;5783                       }
;;;5784                   }      //end of if(tblk_LL_pi->TmrId != LL_TMR_S0), else   => end of State S0
;;;5785               }      //end of if(tblk_LL_pi->TmrId < LL_TMR_S2)
;;;5786               else         //case: tblk_LL_pi->TmrId >= LL_TMR_S2
;;;5787               {
;;;5788                   if(tblk_LL_pi->TmrId != LL_TMR_S255)    //State S2: Sleep Enter/Exit
;;;5789                   {
;;;5790                       if(tblk_LL_pi->TmrId == LL_TMR_S3)
;;;5791                       {
;;;5792                           RF_Tmr_Periodic_set_ISR(DUR_LL_TMR_TICK_BASE);
;;;5793                           if(ble_device_param.ble_deviceChipId==MP_A1)
;;;5794                           {
;;;5795                               ((uint8_t *)&Tmr37)[4] |= (RFIP_reg_MEM[RFIP_REG_MEM_119]);                 //disable trigger TRX. if not do this, ADV will TX again.
;;;5796                               SPI_PDMA_SetTx(RFIP_REG_115, (uint32_t)&Tmr37, 5);
;;;5797                           }
;;;5798                           else
;;;5799                           {
;;;5800                               SPI_1BYT_SetTx_Isr(RFIP_REG_119, RFIP_reg_MEM[RFIP_REG_MEM_119] & 0x3F);        //R119[7:6]=0, disable manual TRX & trigger TRX
;;;5801                           }
;;;5802                           tblk_LL_pi->Ticks = DUR_LL_TMR_TICK_BASE;
;;;5803                           tblk_LL_pi->TmrId = LL_TMR_S2;
;;;5804                       }
;;;5805                       tblk_i = tblk_LL_pi->ConnId;
;;;5806                       if(tblk_i<LL_CONN_ID_ADV_PARA)      //Connection
;;;5807                       {
;;;5808   #if MAX_NUM_CONN_MAS_HDL != 0
;;;5809                           if(tblk_i < MAX_NUM_CONN_MAS_HDL)     //Master
;;;5810                           {
;;;5811                               switch(status_LL_Tmr)
;;;5812                               {
;;;5813                               case LL_INT_S40:
;;;5814                               case LL_INT_S43:
;;;5815                                   LL_DurRxPktAccu = LL_DurRxPktAccu - DUR_LL_TMR_TICK_BASE;
;;;5816                                   tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;5817                                   LLTimer_TmrRefUpd_Isr();
;;;5818                                   break;
;;;5819   
;;;5820                               case LL_INT_S41:
;;;5821                               case LL_INT_S42:
;;;5822                                   if(tblk_LL_pi2->Ticks != DUR_LL_TMR_TICK_BASE)
;;;5823                                   {
;;;5824                                       LL_DurRxPktAccu = LL_DurRxPktAccu - DUR_LL_TMR_TICK_BASE;
;;;5825                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;5826                                       LLTimer_TmrRefUpd_Isr();
;;;5827                                       break;
;;;5828                                   }
;;;5829                                   status_LL_Tmr = LL_INT_S44;
;;;5830                                   RF_TxAutoAckOff();  //disable Auto Switch
;;;5831                                   LL_RxExit_Isr();    //stop RF
;;;5832                                   LL_conn_pi->LE_Conn_Para.WinSize_DataHdr &= (FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN);
;;;5833                                   LLWTR_Buffer_nAck_Isr(tblk_LL_pi->ConnId);
;;;5834                               case LL_INT_S44:
;;;5835                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;5836                                   tblk_i = tblk_LL_pi->Next;
;;;5837                                   j = tblk_LL_pi->ConnId;
;;;5838                                   LL_TmrBlk_Rls();
;;;5839                                   i16 = LL_DurRxPktAccu;
;;;5840                                   k = 0;
;;;5841                                   while(1)
;;;5842                                   {
;;;5843                                       if((LL_conn_pi->LE_Conn_Para.LL_SvToutAccu >= LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)\
;;;5844                                               ||LL_conn_pi->LE_Conn_Para.LL_PrToutAccu >= LL_TOUT_LL_CTRL)
;;;5845                                       {
;;;5846                                           break;       //supervision timeout or procedure timeout occur
;;;5847                                       }
;;;5848                                       if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID==LL_CONN_ID_LL_CONN_UPD_REQ)
;;;5849                                       {
;;;5850                                           if(LL_conn_pi->LE_Conn_Para.LL_EventCounter+k==LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd)
;;;5851                                           {
;;;5852                                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_LL_CONN_UPD;
;;;5853                                               LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg = LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrgUpd;
;;;5854   
;;;5855                                               //LL_conn_pi->LE_Conn_Para.WinOffsetUpd = (LL_conn_pi->LE_Conn_Para.WinOffsetUpd)<<3;     //By TUV
;;;5856   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;5857                                               i16 += LL_conn_pi->LE_Conn_Para.WinOffsetUpd*10;
;;;5858   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;5859                                               i16 += LL_conn_pi->LE_Conn_Para.WinOffsetUpd<<3;
;;;5860   #endif  //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;5861   
;;;5862                                               Knl_MemCpy_Isr((Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_ConnInterval, (Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_ConnIntervalUpd, 6);
;;;5863                                           }
;;;5864                                       }
;;;5865                                       if(tblk_i < MAX_TBLK_LL_NO)
;;;5866                                       {
;;;5867                                           tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;5868                                           if(tblk_LL_pi2->Ticks>=i16)
;;;5869                                           {
;;;5870                                               if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;5871                                               {
;;;5872                                                   if(i16)
;;;5873                                                   {
;;;5874                                                       LL_DurRxPktAccu = 0;
;;;5875                                                       if(tblk_LL_pi2->Ticks-i16 > (DUR_LL_RSV_CONN_BASE+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT))
;;;5876                                                       {
;;;5877                                                           break;
;;;5878                                                       }
;;;5879                                                   }
;;;5880                                               }
;;;5881                                               i16 = i16+LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;5882                                               LL_SvPrToutAccu_Incr();
;;;5883                                               LL_NextConnCh(LL_conn_pi);
;;;5884                                               k++;
;;;5885                                           }
;;;5886                                       }
;;;5887                                       else
;;;5888                                       {
;;;5889                                           if(i16==0)
;;;5890                                           {
;;;5891                                               i16 = LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;5892                                               LL_SvPrToutAccu_Incr();
;;;5893                                               LL_NextConnCh(LL_conn_pi);
;;;5894                                               k++;
;;;5895                                           }
;;;5896                                           LL_DurRxPktAccu = 0;
;;;5897                                           k++;
;;;5898                                           break;
;;;5899                                       }
;;;5900                                       tblk_i = tblk_LL_pi2->Next;
;;;5901                                       i16 = i16 - tblk_LL_pi2->Ticks;
;;;5902                                       tblk_LL_pi = tblk_LL_pi2;
;;;5903                                   }      //end of while(1)
;;;5904                                   if(LL_conn_pi->LE_Conn_Para.LL_PrToutAccu >= LL_TOUT_LL_CTRL)
;;;5905                                   {
;;;5906                                       status_LL_Tmr = LL_INT_S45;
;;;5907                                       LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_LMP_RESPONSE_TIMEOUT_LL_RESPONSE_TIMEOUT;
;;;5908                                       break;
;;;5909                                   }
;;;5910                                   if(LL_conn_pi->LE_Conn_Para.LL_SvToutAccu<LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)
;;;5911                                   {
;;;5912                                       LL_conn_pi->LE_Conn_Para.LL_EventCounter += k;
;;;5913                                       tblk_LL_pi->Next = TBlk_Free_LL;
;;;5914                                       tblk_LL_pi = &TmrBlk_LL[TBlk_Free_LL];
;;;5915                                       tblk_LL_pi->TmrId = LL_TMR_S1;
;;;5916                                       tblk_LL_pi->Ticks = i16;
;;;5917                                       tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
;;;5918                                       TBlk_Free_LL = tblk_LL_pi2->Next;
;;;5919   
;;;5920                                       tblk_LL_pi2->Next = tblk_i;
;;;5921                                       tblk_LL_pi2->Ticks = DUR_LL_RSV_CONN_BASE;
;;;5922                                       tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;5923   
;;;5924                                       tblk_LL_pi->ConnId = j;
;;;5925                                       tblk_LL_pi2->ConnId = j;
;;;5926                                       LL_EventCounter_Map_Upd(j);
;;;5927                                       LL_DurRxPktAccu += LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;5928                                   }
;;;5929                                   else      //Timeout
;;;5930                                   {
;;;5931                                       status_LL_Tmr = LL_INT_S45;
;;;5932                                       switch(LL_conn_pi->LE_Conn_Para.LL_Conn_ID)
;;;5933                                       {
;;;5934                                       case LL_CONN_ID_INIT:
;;;5935                                           LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_FAILED_TO_BE_ESTABLISHED;
;;;5936                                           break;
;;;5937   
;;;5938                                       case LL_CONN_ID_LL_TERM_IND:
;;;5939                                           LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_LMP_RESPONSE_TIMEOUT_LL_RESPONSE_TIMEOUT;
;;;5940                                           break;
;;;5941   
;;;5942                                       default:
;;;5943                                           LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TIMEOUT;
;;;5944                                           break;
;;;5945                                       }
;;;5946                                   }
;;;5947                                   LL_TmrBlk_Pt_PairRst();
;;;5948                                   break;
;;;5949   
;;;5950                               case LL_INT_S45:
;;;5951                                   //LL_MsgBlk_LL_conn_Para_Rls(tblk_i);
;;;5952                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;5953                                   LL_TmrBlk_Rls();
;;;5954                                   LL_TmrBlk_Pt_PairRst();
;;;5955                                   break;
;;;5956   
;;;5957                               default:
;;;5958                                   ErrorEntry(5);
;;;5959                                   break;
;;;5960                               }
;;;5961                           }
;;;5962                           else     //Slave
;;;5963   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;5964                           {
;;;5965   #if MAX_NUM_CONN_SLV_HDL != 0
;;;5966                               switch(status_LL_Tmr)
;;;5967                               {
;;;5968                               case LL_INT_S51:  //Slave Receive CRC_ok, MD_need -> S50 enter S51
;;;5969                               case LL_INT_S52:  //Slave Receive CRC_ok, no MD   -> S50 enter S52
;;;5970                                   LL_DurRxPktAccu = LL_DurRxPktAccu - DUR_LL_TMR_TICK_BASE;
;;;5971                                   tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;5972                                   LLTimer_TmrRefUpd_Isr();
;;;5973                                   break;
;;;5974   
;;;5975                               case LL_INT_S50:   //Slave Receive RX, ACK -> S0 enter S50
;;;5976                               case LL_INT_S53:   //Slave MD & duration enough -> S51 enter S53
;;;5977                                   if(tblk_LL_pi2->Ticks == DUR_LL_RSV_MIN_CONN_SLV)
;;;5978                                   {
;;;5979                                       RF_TxAutoAckOff();  //Auto TRX off
;;;5980                                       LL_RxExit_Isr();
;;;5981                                       status_LL_Tmr = LL_INT_S54;  //avoid timeout and receive packet collision.
;;;5982                                   }
;;;5983                                   else
;;;5984                                   {
;;;5985                                       LL_DurRxPktAccu = LL_DurRxPktAccu - DUR_LL_TMR_TICK_BASE;
;;;5986                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;5987                                       LLTimer_TmrRefUpd_Isr();
;;;5988                                       break;
;;;5989                                   }
;;;5990                               case LL_INT_S54:  //Slave end of connection event. set Auto TRX off. S51/S52 or S53 -> S54
;;;5991                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;5992                                   tblk_i = tblk_LL_pi->Next;
;;;5993                                   LL_TmrBlk_Rls();
;;;5994                                   i16 = LL_DurRxPktAccu;
;;;5995                                   j = LL_Slv_Win_Width_Incr();
;;;5996                                   k = 0;
;;;5997                                   while(1)
;;;5998                                   {
;;;5999                                       if((LL_conn_pi->LE_Conn_Para.LL_SvToutAccu >= LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)\
;;;6000                                               ||LL_conn_pi->LE_Conn_Para.LL_PrToutAccu >= LL_TOUT_LL_CTRL)
;;;6001                                       {
;;;6002                                           break;    //supervision timeout or procedure timeout occur
;;;6003                                       }
;;;6004                                       if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID==LL_CONN_ID_LL_CONN_UPD_REQ_RCVD)
;;;6005                                       {
;;;6006                                           if(LL_conn_pi->LE_Conn_Para.LL_EventCounter+k==LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd)
;;;6007                                           {
;;;6008                                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_LL_CONN_UPD;
;;;6009                                               LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg = LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrgUpd;
;;;6010                                               i16 += LL_conn_pi->LE_Conn_Para.WinOffsetUpd;
;;;6011                                               Knl_MemCpy_Isr((Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_ConnInterval, (Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_ConnIntervalUpd, 6);
;;;6012                                               if(i16 < LL_conn_pi->LE_Conn_Para.WinSizeUpd)
;;;6013                                               {
;;;6014                                                   i16 = LL_conn_pi->LE_Conn_Para.WinSizeUpd;
;;;6015                                               }
;;;6016                                           }
;;;6017                                       }
;;;6018                                       if(tblk_i < MAX_TBLK_LL_NO)
;;;6019                                       {
;;;6020                                           tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6021                                           if(tblk_LL_pi2->Ticks>=i16)
;;;6022                                           {
;;;6023                                               if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6024                                               {
;;;6025                                                   if(i16>(j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1)))
;;;6026                                                   {
;;;6027                                                       j16 = i16-(j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1));
;;;6028                                                       LL_DurRxPktAccu = (j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1));
;;;6029                                                       j = (j<<1)+(DUR_LL_RSV_CONN_BASE+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT);
;;;6030                                                       switch(LL_conn_pi->LE_Conn_Para.LL_Conn_ID)
;;;6031                                                       {
;;;6032                                                       case LL_CONN_ID_ADV:
;;;6033                                                           j += LL_conn_pi->LE_Conn_Para.WinSize_DataHdr;
;;;6034                                                           break;
;;;6035   
;;;6036                                                       case LL_CONN_ID_LL_CONN_UPD:
;;;6037                                                           //j += LL_conn_pi->LE_Conn_Para.WinSizeUpd;
;;;6038                                                           break;
;;;6039   
;;;6040                                                       default:
;;;6041                                                           break;
;;;6042                                                       }
;;;6043                                                       if(tblk_LL_pi2->Ticks-i16 > j)
;;;6044                                                       {
;;;6045                                                           break;
;;;6046                                                       }
;;;6047                                                   }
;;;6048                                               }
;;;6049                                               i16 = i16+LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;6050                                               LL_SvPrToutAccu_Incr();
;;;6051                                               LL_NextConnCh(LL_conn_pi);
;;;6052                                               j = LL_Slv_Win_Width_Incr();
;;;6053                                               k++;
;;;6054                                           }
;;;6055                                       }
;;;6056                                       else
;;;6057                                       {
;;;6058                                           //////////avoid rx window > interval///////////////
;;;6059                                           if(j+6+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT >= i16)
;;;6060                                           {
;;;6061                                               j = i16-LL_TMR_TICKS_RSV_RF_INIT-LL_Tmr_Ticks_RSV_Wakeup-6;
;;;6062                                           }
;;;6063                                           ////////////////////////////////////////////////////
;;;6064                                           if(i16<=(j+(1+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT)))
;;;6065                                           {
;;;6066                                               i16 = i16+LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;6067                                               LL_SvPrToutAccu_Incr();
;;;6068                                               LL_NextConnCh(LL_conn_pi);
;;;6069                                               j = LL_Slv_Win_Width_Incr();
;;;6070                                               k++;
;;;6071                                           }
;;;6072                                           j16 = i16-(j+(1+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT));
;;;6073                                           LL_DurRxPktAccu = (j+(1+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT));
;;;6074                                           j = (j<<1)+(DUR_LL_RSV_CONN_BASE+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT);
;;;6075                                           switch(LL_conn_pi->LE_Conn_Para.LL_Conn_ID)
;;;6076                                           {
;;;6077                                           case LL_CONN_ID_ADV:
;;;6078                                               j += LL_conn_pi->LE_Conn_Para.WinSize_DataHdr;
;;;6079                                               break;
;;;6080   
;;;6081                                           case LL_CONN_ID_LL_CONN_UPD:
;;;6082                                               // j += LL_conn_pi->LE_Conn_Para.WinSizeUpd;
;;;6083                                               break;
;;;6084   
;;;6085                                           default:
;;;6086                                               break;
;;;6087                                           }
;;;6088                                           k++;
;;;6089                                           break;
;;;6090                                       }
;;;6091                                       tblk_i = tblk_LL_pi2->Next;
;;;6092                                       i16 = i16 - tblk_LL_pi2->Ticks;
;;;6093                                       tblk_LL_pi = tblk_LL_pi2;
;;;6094                                   }   //end of while(1)
;;;6095                                   if(LL_conn_pi->LE_Conn_Para.LL_PrToutAccu >= LL_TOUT_LL_CTRL)
;;;6096                                   {
;;;6097                                       status_LL_Tmr = LL_INT_S55;
;;;6098                                       LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_LMP_RESPONSE_TIMEOUT_LL_RESPONSE_TIMEOUT;
;;;6099                                       break;
;;;6100                                   }
;;;6101                                   if(LL_conn_pi->LE_Conn_Para.LL_SvToutAccu<LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)
;;;6102                                   {
;;;6103                                       LL_conn_pi->LE_Conn_Para.LL_EventCounter += k;
;;;6104                                       tblk_LL_pi->Next = TBlk_Free_LL;
;;;6105                                       tblk_LL_pi = &TmrBlk_LL[TBlk_Free_LL];
;;;6106                                       tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6107                                       tblk_LL_pi->Ticks = j16;
;;;6108                                       tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
;;;6109                                       TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6110   
;;;6111                                       tblk_LL_pi2->Next = tblk_i;
;;;6112                                       tblk_LL_pi2->Ticks = j;
;;;6113                                       tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6114   
;;;6115                                       tblk_LL_pi->ConnId = idxConnID;
;;;6116                                       tblk_LL_pi2->ConnId = idxConnID;
;;;6117                                       LL_EventCounter_Map_Upd(idxConnID);
;;;6118                                       LL_DurRxPktAccu += LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;6119                                   }
;;;6120                                   else      //timeout
;;;6121                                   {
;;;6122                                       status_LL_Tmr = LL_INT_S55;
;;;6123                                       switch(LL_conn_pi->LE_Conn_Para.LL_Conn_ID)
;;;6124                                       {
;;;6125                                       case LL_CONN_ID_ADV:
;;;6126                                           LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_FAILED_TO_BE_ESTABLISHED;
;;;6127                                           break;
;;;6128   
;;;6129                                       case LL_CONN_ID_LL_TERM_IND:
;;;6130                                           LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_LMP_RESPONSE_TIMEOUT_LL_RESPONSE_TIMEOUT;
;;;6131                                           break;
;;;6132   
;;;6133                                       default:
;;;6134                                           LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TIMEOUT;
;;;6135                                           break;
;;;6136                                       }
;;;6137                                   }
;;;6138                                   LL_TmrBlk_Pt_PairRst();
;;;6139                                   break;
;;;6140   
;;;6141                               case LL_INT_S55:    //Slave, LL Terminate
;;;6142                                   //LL_MsgBlk_LL_conn_Para_Rls(tblk_i);
;;;6143                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;6144                                   LL_TmrBlk_Rls();
;;;6145                                   LL_TmrBlk_Pt_PairRst();
;;;6146                                   break;
;;;6147   
;;;6148                               default:
;;;6149                                   ErrorEntry(6);
;;;6150                                   break;
;;;6151                               }
;;;6152   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;6153                           }
;;;6154                       }
;;;6155                       else     //ADV/SCAN/INIT
;;;6156                       {
;;;6157                           switch(tblk_i)
;;;6158                           {
;;;6159                           case LL_CONN_ID_ADV_PARA:
;;;6160                               switch(status_LL_Tmr)
;;;6161                               {
;;;6162                               case LL_INT_S14:
;;;6163                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;6164                                   tblk_i = tblk_LL_pi->Next;
;;;6165                                   LL_TmrBlk_Rls();
;;;6166                                   i16 = LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu+(8-1);
;;;6167                                   LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu = 0;
;;;6168                                   j = LL_Slv_Win_Width_Incr();
;;;6169                                   k = 0;
;;;6170                                   while(1)
;;;6171                                   {
;;;6172                                       if(LL_conn_pi->LE_Conn_Para.LL_SvToutAccu >= LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)
;;;6173                                       {
;;;6174                                           break;      //Supervision timeout occur
;;;6175                                       }
;;;6176                                       if(tblk_i < MAX_TBLK_LL_NO)
;;;6177                                       {
;;;6178                                           tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6179                                           if(tblk_LL_pi2->Ticks>=i16)
;;;6180                                           {
;;;6181                                               if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6182                                               {
;;;6183                                                   if(i16>(j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1)))
;;;6184                                                   {
;;;6185                                                       j16 = i16-(j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1));
;;;6186                                                       LL_DurRxPktAccu = (j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1));
;;;6187                                                       j = ((j<<1)+LL_conn_pi->LE_Conn_Para.WinSize_DataHdr)+(DUR_LL_RSV_CONN_BASE+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT);
;;;6188                                                       if(tblk_LL_pi2->Ticks-i16 > j)
;;;6189                                                       {
;;;6190                                                           break;
;;;6191                                                       }
;;;6192                                                   }
;;;6193                                               }
;;;6194                                               i16 = i16+LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;6195                                               LL_conn_pi->LE_Conn_Para.LL_SvToutAccu += LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg;
;;;6196                                               LL_NextConnCh(LL_conn_pi);
;;;6197                                               j = LL_Slv_Win_Width_Incr();
;;;6198                                               k++;
;;;6199                                           }
;;;6200                                       }
;;;6201                                       else
;;;6202                                       {
;;;6203                                           if(i16<=(j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1)))
;;;6204                                           {
;;;6205                                               i16 = i16+LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;6206                                               LL_conn_pi->LE_Conn_Para.LL_SvToutAccu += LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg;
;;;6207                                               LL_NextConnCh(LL_conn_pi);
;;;6208                                               j = LL_Slv_Win_Width_Incr();
;;;6209                                               k++;
;;;6210                                           }
;;;6211                                           j16 = i16-(j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1));
;;;6212                                           LL_DurRxPktAccu = (j+(LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT+1));
;;;6213                                           j = ((j<<1)+LL_conn_pi->LE_Conn_Para.WinSize_DataHdr)+(DUR_LL_RSV_CONN_BASE+LL_Tmr_Ticks_RSV_Wakeup+LL_TMR_TICKS_RSV_RF_INIT);
;;;6214                                           k++;
;;;6215                                           break;
;;;6216                                       }
;;;6217                                       tblk_i = tblk_LL_pi2->Next;
;;;6218                                       i16 = i16 - tblk_LL_pi2->Ticks;
;;;6219                                       tblk_LL_pi = tblk_LL_pi2;
;;;6220                                   }    //end of while(1)
;;;6221                                   if(LL_conn_pi->LE_Conn_Para.LL_SvToutAccu<LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)
;;;6222                                   {
;;;6223                                       LL_conn_pi->LE_Conn_Para.LL_EventCounter += k;
;;;6224                                       tblk_LL_pi->Next = TBlk_Free_LL;
;;;6225                                       tblk_LL_pi = &TmrBlk_LL[TBlk_Free_LL];
;;;6226                                       tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6227                                       tblk_LL_pi->Ticks = j16;
;;;6228                                       tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
;;;6229                                       TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6230   
;;;6231                                       tblk_LL_pi2->Next = tblk_i;
;;;6232                                       tblk_LL_pi2->Ticks = j;
;;;6233                                       tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6234   
;;;6235                                       tblk_LL_pi->ConnId = LL_Adv_Para.Adv_Para.LL_AdvConn_ID;
;;;6236                                       tblk_LL_pi2->ConnId = LL_Adv_Para.Adv_Para.LL_AdvConn_ID;
;;;6237                                       LL_Adv_Para.Adv_Para.LL_AdvConn_ID = LL_CONN_ID_SLAVE_RSV;
;;;6238                                       LL_DurRxPktAccu += LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;6239                                   }
;;;6240                                   else        //timeout
;;;6241                                   {
;;;6242                                       LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_STBY;
;;;6243                                   }
;;;6244                                   LL_TmrBlk_Pt_PairRst();
;;;6245                                   status_LL_Tmr = LL_INT_S15;
;;;6246                                   break;
;;;6247   
;;;6248                               case LL_INT_S15:
;;;6249                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;6250                                   LL_TmrBlk_Rls();
;;;6251                                   break;
;;;6252   
;;;6253                               case LL_INT_S12:
;;;6254                                   if(tblk_LL_pi2->Ticks == DUR_LL_TMR_TICK_BASE)
;;;6255                                   {
;;;6256                                       RF_TxAutoAckOff();
;;;6257                                       LL_RxExit_Isr();
;;;6258                                       LL_TmrBlk_Rls();
;;;6259                                   }
;;;6260                                   else
;;;6261                                   {
;;;6262                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;6263                                       LLTimer_TmrRefUpd_Isr();
;;;6264                                   }
;;;6265                                   break;
;;;6266   
;;;6267                               default:
;;;6268                                   if(tblk_LL_pi2->Ticks == DUR_LL_TMR_TICK_BASE)
;;;6269                                   {
;;;6270                                       LL_TmrBlk_Rls();
;;;6271                                   }
;;;6272                                   else
;;;6273                                   {
;;;6274                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;6275                                       LLTimer_TmrRefUpd_Isr();
;;;6276                                   }
;;;6277                                   break;
;;;6278                               }
;;;6279                               break;
;;;6280   
;;;6281                           case LL_CONN_ID_SCAN_PARA:
;;;6282                               switch(status_LL_Tmr)
;;;6283                               {
;;;6284                               case LL_INT_S20:
;;;6285                                   if(tblk_LL_pi2->Ticks == DUR_LL_RSV_MIN_SCAN)
;;;6286                                   {
;;;6287                                       RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;6288                                       RF_TxAutoAckOff();
;;;6289                                       LL_RxExit_Isr();
;;;6290                                       LL_TmrBlk_Rls();
;;;6291                                       status_LL_Tmr = LL_INT_S24;
;;;6292                                   }
;;;6293                                   else
;;;6294                                   {
;;;6295                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;6296                                       LLTimer_TmrRefUpd_Isr();
;;;6297                                   }
;;;6298                               case LL_INT_S21:
;;;6299                                   break;
;;;6300   
;;;6301                               case LL_INT_S22:
;;;6302                               case LL_INT_S23:
;;;6303                               case LL_INT_S24:
;;;6304                                   if(tblk_LL_pi2->Ticks == DUR_LL_RSV_MIN_SCAN)
;;;6305                                   {
;;;6306                                       i16 = 0;
;;;6307                                       RF_Tmr_Periodic_set_ISR(DUR_LL_RSV_MIN_SCAN);
;;;6308                                   }
;;;6309                                   else
;;;6310                                   {
;;;6311                                       i16 = tblk_LL_pi2->Ticks - (DUR_LL_RSV_MIN_SCAN+1);
;;;6312                                       tblk_LL_pi2->Ticks = (DUR_LL_RSV_MIN_SCAN+1);
;;;6313                                       RF_Tmr_Periodic_set_ISR((DUR_LL_RSV_MIN_SCAN+1));
;;;6314                                   }
;;;6315                                   LL_TmrBlk_Rls();
;;;6316                                   if(tblk_LL_pi2 != (TBLK_LLx *)0)
;;;6317                                   {
;;;6318                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks+i16;
;;;6319                                   }
;;;6320                                   LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl += i16;
;;;6321                                   break;
;;;6322   
;;;6323                               default:
;;;6324                                   ErrorEntry(7);
;;;6325                                   break;
;;;6326                               }
;;;6327                               break;
;;;6328   
;;;6329   #if MAX_NUM_CONN_MAS_HDL != 0
;;;6330                           case LL_CONN_ID_INIT_PARA:
;;;6331                               switch(status_LL_Tmr)
;;;6332                               {
;;;6333                               case LL_INT_S32:
;;;6334                                   status_LL_Tmr = LL_INT_S33;
;;;6335                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;6336                                   LL_TmrBlk_Rls();
;;;6337                                   LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu = LL_conn_pi->LE_Conn_Para.LL_ConnLatency;  //Latency, initialization
;;;6338                                   LL_TmrBlk_Pt_PairRst();
;;;6339                                   break;
;;;6340   
;;;6341                               case LL_INT_S31:
;;;6342                                   tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;6343                                   LLTimer_TmrRefUpd_Isr();
;;;6344                                   break;
;;;6345   
;;;6346                               case LL_INT_S30:
;;;6347                                   if(tblk_LL_pi2->Ticks == DUR_LL_RSV_MIN_INIT)
;;;6348                                   {
;;;6349                                       RF_Tmr_Periodic_set_ISR(tblk_LL_pi2->Ticks);
;;;6350                                       RF_TxAutoAckOff();
;;;6351                                       LL_RxExit_Isr();
;;;6352                                       LL_TmrBlk_Rls();
;;;6353                                   }
;;;6354                                   else
;;;6355                                   {
;;;6356                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;6357                                       LLTimer_TmrRefUpd_Isr();
;;;6358                                   }
;;;6359                                   break;
;;;6360   
;;;6361                               case LL_INT_S33:
;;;6362                                   if(tblk_LL_pi2->Ticks == DUR_LL_RSV_MIN_INIT)
;;;6363                                   {
;;;6364                                       i16 = 0;
;;;6365                                       RF_Tmr_Periodic_set_ISR(DUR_LL_RSV_MIN_INIT);
;;;6366                                   }
;;;6367                                   else
;;;6368                                   {
;;;6369                                       i16 = tblk_LL_pi2->Ticks - (DUR_LL_RSV_MIN_INIT+1);
;;;6370                                       tblk_LL_pi2->Ticks = (DUR_LL_RSV_MIN_INIT+1);
;;;6371                                       RF_Tmr_Periodic_set_ISR((DUR_LL_RSV_MIN_INIT+1));
;;;6372                                   }
;;;6373                                   LL_TmrBlk_Rls();
;;;6374                                   if(tblk_LL_pi2 != (TBLK_LLx *)0)
;;;6375                                   {
;;;6376                                       tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks+i16;
;;;6377                                   }
;;;6378                                   LL_Init_Para.LE_Init_Para.LL_LE_ScanAccl += i16;
;;;6379                                   break;
;;;6380   
;;;6381                               default:
;;;6382                                   ErrorEntry(8);
;;;6383                                   break;
;;;6384                               }
;;;6385                               break;
;;;6386   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;6387   
;;;6388                           default:
;;;6389                               ErrorEntry(9);
;;;6390                               break;
;;;6391                           }
;;;6392                       }
;;;6393                   }       //end of if(tblk_LL_pi->TmrId != LL_TMR_S255)       inside outer if(Timer State>S1)    => so it's end of State S2
;;;6394                   else    //case: (tblk_LL_pi->TmrId == LL_TMR_S255), LL_TMR_S255: Stop
;;;6395                   {
;;;6396                       tblk_i = tblk_LL_pi->ConnId;
;;;6397                       if(tblk_i<LL_CONN_ID_ADV_PARA)    //Connection
;;;6398                       {
;;;6399                           switch(status_LL_Tmr)
;;;6400                           {
;;;6401                           case LL_INT_S40:
;;;6402                           case LL_INT_S43:
;;;6403                           case LL_INT_S51:
;;;6404                           case LL_INT_S52:
;;;6405                               ErrorEntry(10);
;;;6406                               break;
;;;6407   
;;;6408                           case LL_INT_S45:
;;;6409                           case LL_INT_S55:
;;;6410                               LL_Msg_Event_Disconn_Complete(LL_conn_pi->LE_Conn_Para.ErrCode_DisConn, tblk_i);
;;;6411                               LL_ReleaseConnID_Isr(tblk_i);
;;;6412                               LL_MsgBlk_LL_conn_Para_Rls(tblk_i);
;;;6413                           default:
;;;6414                               LL_TmrBlk_Rls();
;;;6415                               break;
;;;6416                           }
;;;6417                           LL_TmrBlk_Rls_NxtIntvl();
;;;6418                       }
;;;6419                       else     //ADV/SCAN/INIT
;;;6420                       {
;;;6421                           switch(tblk_i)
;;;6422                           {
;;;6423                           case LL_CONN_ID_ADV_PARA:   //ADV
;;;6424                               switch(status_LL_Tmr)
;;;6425                               {
;;;6426                               case LL_INT_S13:
;;;6427                                   __NOP();
;;;6428                                   break;
;;;6429   
;;;6430                               case LL_INT_S14:    //LL_TMR_S255, received Conn_Req. @slave role, shouldn't occur
;;;6431                                   ErrorEntry(11);
;;;6432                                   break;
;;;6433   
;;;6434                               default:
;;;6435                                   break;
;;;6436                               }
;;;6437                               if((LL_Msg_AdvScnConn & LL_MSG_ADVSCNCONN_ADV_CONT))
;;;6438                               {
;;;6439                                   k = LL_DUR_RSV[(LL_Adv_Para.Adv_Para.LL_Adv_Type&FLD_MSK_LL_ADV_TYPE)]+(LL_Tmr_Ticks_RSV_Wakeup+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_ADV);
;;;6440                                   j = tblk_LL_pi->Next;
;;;6441                                   tblk_i = tblk_LL_pi->Next;
;;;6442                                   while(tblk_i < MAX_TBLK_LL_NO)
;;;6443                                   {
;;;6444                                       tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6445                                       if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6446                                       {
;;;6447                                           //CODE__001
;;;6448                                           if(tblk_LL_pi2->Ticks >= k)
;;;6449                                           {
;;;6450                                               j16 = tblk_LL_pi2->Ticks-k;
;;;6451                                               if(LL_Adv_Para.Adv_Para.LL_AdvMap_ID)
;;;6452                                               {
;;;6453                                                   tblk_LL_pi2->Ticks = j16;
;;;6454                                                   break;
;;;6455                                               }
;;;6456                                               else
;;;6457                                               {
;;;6458                                                   if(LL_Adv_Para.Adv_Para.LL_Adv_Interval_Min < LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max)
;;;6459                                                   {
;;;6460                                                       tblk_LL_pi2->Ticks = j16;
;;;6461                                                       break;
;;;6462                                                   }
;;;6463                                               }
;;;6464                                           }
;;;6465                                       }
;;;6466                                       tblk_i = tblk_LL_pi2->Next;
;;;6467                                       tblk_LL_pi = tblk_LL_pi2;
;;;6468                                       LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max = LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max + tblk_LL_pi2->Ticks;
;;;6469                                   }
;;;6470                                   tblk_LL_pi->Next = TBlk_Free_LL;
;;;6471                                   tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6472                                   tblk_LL_pi2 = &TmrBlk_LL[TBlk_Free_LL];
;;;6473                                   TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6474                                   tblk_LL_pi2->Next = tblk_i;
;;;6475                                   k = k-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_ADV);
;;;6476                                   tblk_LL_pi2->Ticks = k;
;;;6477                                   j16 = k;
;;;6478   
;;;6479                                   tblk_LL_pi2->ConnId = LL_CONN_ID_ADV_PARA;
;;;6480                                   tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6481   
;;;6482                                   if(tblk_i!=MAX_TBLK_LL_NO)
;;;6483                                   {
;;;6484                                       i16 = DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6485                                   }
;;;6486                                   else
;;;6487                                   {
;;;6488                                       if(tblk_i != j)
;;;6489                                       {
;;;6490                                           i16 = DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6491                                       }
;;;6492                                       else
;;;6493                                       {
;;;6494                                           if(LL_Adv_Para.Adv_Para.LL_Adv_Interval_Min == LL_INTERVAL_DIR_ADV_HIGHDUTY)
;;;6495                                           {
;;;6496                                               i16 = (LL_INTERVAL_DIR_ADV_HIGHDUTY/3)-k;
;;;6497                                           }
;;;6498                                           else
;;;6499                                           {
;;;6500                                               if(LL_Adv_Para.Adv_Para.LL_AdvMap_ID)
;;;6501                                               {
;;;6502                                                   if(LL_Adv_Para.Adv_Para.LL_Adv_Interval_Min >= (MAX_INTVL_ADV_CONSTI<<2))
;;;6503                                                   {
;;;6504                                                       i16 = MAX_INTVL_ADV_CONSTI-k;
;;;6505                                                   }
;;;6506                                               }
;;;6507                                               else
;;;6508                                               {
;;;6509                                                   if(LL_Adv_Para.Adv_Para.LL_Adv_Interval_Min>LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max)
;;;6510                                                   {
;;;6511                                                       i16 = (LL_Adv_Para.Adv_Para.LL_Adv_Interval_Min-LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max);
;;;6512                                                   }
;;;6513                                                   else
;;;6514                                                   {
;;;6515                                                       i16 = DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6516                                                   }
;;;6517                                               }
;;;6518                                           }
;;;6519                                       }
;;;6520                                   }
;;;6521                                   tblk_LL_pi->Ticks = i16;
;;;6522                                   LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max = LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max + (i16+j16);
;;;6523                                   if(LL_Adv_Para.Adv_Para.LL_AdvMap_ID == 0)
;;;6524                                   {
;;;6525                                       if(LL_Adv_Para.Adv_Para.LL_Adv_Interval_Min != LL_INTERVAL_DIR_ADV_HIGHDUTY)
;;;6526                                       {
;;;6527                                           LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max = 0;
;;;6528                                       }
;;;6529                                       LL_Adv_Para.Adv_Para.LL_AdvMap_ID = Ch_ADV_Ch_Hop_Table[0];
;;;6530                                   }
;;;6531                                   if(LL_Adv_Para.Adv_Para.LL_Adv_Interval_Max >= MAX_INTVL_ADV_DIRECT_H)
;;;6532                                   {
;;;6533                                       mblk = mblk_LL_conn_Para[LL_Adv_Para.Adv_Para.LL_AdvConn_ID];
;;;6534                                       SndMsgBlk_Isr(mblk, Q_2HCI);
;;;6535                                       mblk_LL_conn_Para[LL_Adv_Para.Adv_Para.LL_AdvConn_ID] = (MBLK *)0;      //reset
;;;6536                                       LL_Msg_AdvScnConn &= (~LL_MSG_ADVSCNCONN_ADV_CONT);
;;;6537                                       LL_Msg_AdvScnConnUpdSts &= (~LL_MSG_ADVSCNCONN_ADV_EN);
;;;6538                                       LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_ADV_EN);
;;;6539                                       //break;
;;;6540                                   }
;;;6541                                   if(j != MAX_TBLK_LL_NO)
;;;6542                                   {
;;;6543                                       if(j != tblk_i)
;;;6544                                       {
;;;6545                                           TBlk_InUse_LL = j;
;;;6546                                           LL_TmrBlk_Pt_PairRst();
;;;6547                                       }
;;;6548                                   }
;;;6549                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi->Ticks);
;;;6550                               }
;;;6551                               else
;;;6552                               {
;;;6553                                   if(LL_Adv_Para.Adv_Para.LL_AdvConn_ID < LL_CONN_ID_SLAVE_RSV)
;;;6554                                   {
;;;6555                                       LL_MsgBlk_LL_conn_Para_Rls(LL_Adv_Para.Adv_Para.LL_AdvConn_ID);
;;;6556                                       LL_Adv_Para.Adv_Para.LL_AdvConn_ID = LL_CONN_ID_SLAVE_RSV;
;;;6557                                   }
;;;6558                                   RF_WTR_intOff();
;;;6559                                   LL_TmrBlk_Rls();
;;;6560                                   LL_TmrBlk_Rls_NxtIntvl();
;;;6561                               }
;;;6562                               break;
;;;6563   
;;;6564                           case LL_CONN_ID_SCAN_PARA:    //SCAN
;;;6565                               switch(status_LL_Tmr)
;;;6566                               {
;;;6567                               case LL_INT_S21:
;;;6568                               case LL_INT_S23:
;;;6569                                   LL_RxExit_Isr();
;;;6570                                   break;
;;;6571   
;;;6572                               default:
;;;6573                                   break;
;;;6574                               }
;;;6575                               if((LL_Msg_AdvScnConn & LL_MSG_ADVSCNCONN_SCN_CONT))
;;;6576                               {
;;;6577                                   if(LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl >= LL_PARA_MIN_SCN_WINDOW)
;;;6578                                   {
;;;6579                                       i16 = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN;
;;;6580                                       j16 = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Interval;
;;;6581                                   }
;;;6582                                   else
;;;6583                                   {
;;;6584                                       i16 = LL_PARA_MIN_SCN_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN;
;;;6585                                       j16 = 0;
;;;6586                                   }
;;;6587                                   j = tblk_LL_pi->Next;
;;;6588                                   tblk_i = tblk_LL_pi->Next;
;;;6589                                   while(tblk_i < MAX_TBLK_LL_NO)
;;;6590                                   {
;;;6591                                       tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6592                                       if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6593                                       {
;;;6594                                           if(j16 >= LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Interval)
;;;6595                                           {
;;;6596                                               if(tblk_LL_pi2->Ticks>=LL_PARA_MIN_SCN_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN)
;;;6597                                               {
;;;6598                                                   if((tblk_LL_pi2->Ticks-i16)>0)
;;;6599                                                   {
;;;6600                                                       tblk_LL_pi2->Ticks = (tblk_LL_pi2->Ticks-i16)+DUR_LL_RSV_MIN_TBLK_LL_SCN;
;;;6601                                                       i16 = i16-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN);
;;;6602                                                   }
;;;6603                                                   else
;;;6604                                                   {
;;;6605                                                       i16 = tblk_LL_pi2->Ticks-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN);
;;;6606                                                       tblk_LL_pi2->Ticks = DUR_LL_RSV_MIN_TBLK_LL_SCN;
;;;6607                                                   }
;;;6608                                                   break;
;;;6609                                               }
;;;6610                                           }
;;;6611                                       }
;;;6612                                       tblk_i = tblk_LL_pi2->Next;
;;;6613                                       if(i16 == LL_PARA_MIN_SCN_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN)
;;;6614                                       {
;;;6615                                           j16 = j16+tblk_LL_pi2->Ticks;
;;;6616                                       }
;;;6617                                       tblk_LL_pi->Next = tblk_LL_pi2->Next;
;;;6618                                       tblk_LL_pi2->Next = TBlk_InUse_LL;
;;;6619                                   }
;;;6620                                   if(tblk_i==MAX_TBLK_LL_NO)
;;;6621                                   {
;;;6622                                       if(j == MAX_TBLK_LL_NO)
;;;6623                                       {
;;;6624                                           i16 = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Window;
;;;6625                                       }
;;;6626                                       else
;;;6627                                       {
;;;6628                                           i16 = LL_PARA_MIN_SCN_WINDOW;
;;;6629                                       }
;;;6630                                   }
;;;6631                                   if(j16 < LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Interval)
;;;6632                                   {
;;;6633                                       j16 = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Interval - j16;
;;;6634                                   }
;;;6635                                   tblk_LL_pi->Next = TBlk_Free_LL;
;;;6636                                   tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6637                                   tblk_LL_pi->Ticks = j16+DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6638   
;;;6639                                   tblk_LL_pi2 = &TmrBlk_LL[TBlk_Free_LL];
;;;6640                                   TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6641                                   tblk_LL_pi2->Next = tblk_i;
;;;6642   
;;;6643                                   tblk_LL_pi2->Ticks = i16;
;;;6644                                   if(LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl > i16)
;;;6645                                   {
;;;6646                                       LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl - i16;
;;;6647                                   }
;;;6648                                   else
;;;6649                                   {
;;;6650                                       LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Window;
;;;6651                                       LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID = CH_ADV_CH_HOP_BY_MAP_TABLE[0x07][LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID];
;;;6652                                       if(LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID == 0)
;;;6653                                       {
;;;6654                                           LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID = CH_ADV_CH_HOP_BY_MAP_TABLE[0x07][0];
;;;6655                                       }
;;;6656                                   }
;;;6657                                   tblk_LL_pi2->ConnId = LL_CONN_ID_SCAN_PARA;
;;;6658                                   tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6659   
;;;6660                                   if(j != MAX_TBLK_LL_NO)
;;;6661                                   {
;;;6662                                       if(j != tblk_i)
;;;6663                                       {
;;;6664                                           TBlk_InUse_LL = j;
;;;6665                                           LL_TmrBlk_Pt_PairRst();
;;;6666                                       }
;;;6667                                   }
;;;6668                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi->Ticks);
;;;6669                               }
;;;6670                               else
;;;6671                               {
;;;6672                                   LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID = 0;
;;;6673                                   LL_TmrBlk_Rls();
;;;6674                                   LL_TmrBlk_Rls_NxtIntvl();
;;;6675                               }
;;;6676                               break;
;;;6677   
;;;6678   #if MAX_NUM_CONN_MAS_HDL != 0
;;;6679                           case LL_CONN_ID_INIT_PARA:    //INIT
;;;6680                               switch(status_LL_Tmr)
;;;6681                               {
;;;6682                               default:
;;;6683                                   break;
;;;6684                               }
;;;6685                               if((LL_Msg_AdvScnConn & LL_MSG_ADVSCNCONN_INIT_CONT))
;;;6686                               {
;;;6687                                   if(LL_Init_Para.LE_Init_Para.LL_LE_ScanAccl >= LL_PARA_MIN_INIT_WINDOW)
;;;6688                                   {
;;;6689                                       i16 = LL_Init_Para.LE_Init_Para.LL_LE_ScanAccl+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT;
;;;6690                                       j16 = LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval;
;;;6691                                   }
;;;6692                                   else
;;;6693                                   {
;;;6694                                       i16 = LL_PARA_MIN_INIT_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT;
;;;6695                                       j16 = 0;
;;;6696                                   }
;;;6697                                   j = tblk_LL_pi->Next;
;;;6698                                   tblk_i = tblk_LL_pi->Next;
;;;6699                                   while(tblk_i < MAX_TBLK_LL_NO)
;;;6700                                   {
;;;6701                                       tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6702                                       if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6703                                       {
;;;6704                                           if(j16 >= LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval)
;;;6705                                           {
;;;6706                                               if(tblk_LL_pi2->Ticks>=LL_PARA_MIN_INIT_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT)
;;;6707                                               {
;;;6708                                                   if((tblk_LL_pi2->Ticks-i16)>0)
;;;6709                                                   {
;;;6710                                                       tblk_LL_pi2->Ticks = (tblk_LL_pi2->Ticks-i16)+DUR_LL_RSV_MIN_TBLK_LL_INIT;
;;;6711                                                       i16 = i16-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT);
;;;6712                                                   }
;;;6713                                                   else
;;;6714                                                   {
;;;6715                                                       i16 = tblk_LL_pi2->Ticks-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT);
;;;6716                                                       tblk_LL_pi2->Ticks = DUR_LL_RSV_MIN_TBLK_LL_INIT;
;;;6717                                                   }
;;;6718                                                   break;
;;;6719                                               }
;;;6720                                           }
;;;6721                                       }
;;;6722                                       tblk_i = tblk_LL_pi2->Next;
;;;6723                                       if(i16 == LL_PARA_MIN_INIT_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT)
;;;6724                                       {
;;;6725                                           j16 = j16+tblk_LL_pi2->Ticks;
;;;6726                                       }
;;;6727                                       tblk_LL_pi->Next = tblk_LL_pi2->Next;
;;;6728                                       tblk_LL_pi2->Next = TBlk_InUse_LL;
;;;6729                                   }
;;;6730                                   if(tblk_i==MAX_TBLK_LL_NO)
;;;6731                                   {
;;;6732                                       if(j == MAX_TBLK_LL_NO)
;;;6733                                       {
;;;6734                                           i16 = LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window;
;;;6735                                       }
;;;6736                                       else
;;;6737                                       {
;;;6738                                           i16 = LL_PARA_MIN_INIT_WINDOW;
;;;6739                                       }
;;;6740                                   }
;;;6741                                   if(j16 < LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval)
;;;6742                                   {
;;;6743                                       j16 = LL_Init_Para.LE_Init_Para.LL_LE_Scan_Interval - j16;
;;;6744                                   }
;;;6745                                   tblk_LL_pi->Next = TBlk_Free_LL;
;;;6746                                   tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6747                                   tblk_LL_pi->Ticks = j16+DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6748   
;;;6749                                   tblk_LL_pi2 = &TmrBlk_LL[TBlk_Free_LL];
;;;6750                                   TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6751                                   tblk_LL_pi2->Next = tblk_i;
;;;6752   
;;;6753                                   tblk_LL_pi2->Ticks = i16;
;;;6754                                   if(LL_Init_Para.LE_Init_Para.LL_LE_ScanAccl > i16)
;;;6755                                   {
;;;6756                                       LL_Init_Para.LE_Init_Para.LL_LE_ScanAccl = LL_Init_Para.LE_Init_Para.LL_LE_ScanAccl - i16;
;;;6757                                   }
;;;6758                                   else
;;;6759                                   {
;;;6760                                       LL_Init_Para.LE_Init_Para.LL_LE_ScanAccl = LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window;
;;;6761                                       LL_Init_Para.LE_Init_Para.LL_AdvMap_ID = CH_ADV_CH_HOP_BY_MAP_TABLE[0x07][LL_Init_Para.LE_Init_Para.LL_AdvMap_ID];
;;;6762                                       if(LL_Init_Para.LE_Init_Para.LL_AdvMap_ID == 0)
;;;6763                                       {
;;;6764                                           LL_Init_Para.LE_Init_Para.LL_AdvMap_ID = CH_ADV_CH_HOP_BY_MAP_TABLE[0x07][0];
;;;6765                                       }
;;;6766                                   }
;;;6767                                   tblk_LL_pi2->ConnId = LL_CONN_ID_INIT_PARA;
;;;6768                                   tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6769   
;;;6770                                   if(j != MAX_TBLK_LL_NO)
;;;6771                                   {
;;;6772                                       if(j != tblk_i)
;;;6773                                       {
;;;6774                                           TBlk_InUse_LL = j;
;;;6775                                           LL_TmrBlk_Pt_PairRst();
;;;6776                                       }
;;;6777                                   }
;;;6778                                   RF_Tmr_Periodic_set_ISR(tblk_LL_pi->Ticks);
;;;6779                               }
;;;6780                               else
;;;6781                               {
;;;6782                                   LL_Init_Para.LE_Init_Para.LL_AdvMap_ID = 0;
;;;6783                                   LL_TmrBlk_Rls();
;;;6784                                   LL_TmrBlk_Rls_NxtIntvl();
;;;6785                               }
;;;6786                               break;
;;;6787   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;6788   
;;;6789                           default:
;;;6790                               ErrorEntry(12);
;;;6791                               break;
;;;6792                           }
;;;6793                       }
;;;6794                       status_LL_Tmr = LL_INT_S0;
;;;6795                       if(RF_WTR_EnChk()==SUCCESS_)
;;;6796                       {
;;;6797                           //StrobeCmd(CMD_STBY);
;;;6798                           rafael_reset_phy_fsm_Isr();
;;;6799                       }
;;;6800                       //inside (tblk_LL_pi->TmrId == LL_TMR_S255) case. Inside this case, tblk_LL_pi->TmrId may update to new value
;;;6801                       //Next CCM of prepare.
;;;6802                       if(tblk_LL_pi->TmrId < LL_TMR_S2)    //S0 or S1
;;;6803                       {
;;;6804                           if(tblk_LL_pi->ConnId < LL_CONN_ID_ADV_PARA)                            //Master or Slave
;;;6805                           {
;;;6806                               j = tblk_LL_pi->ConnId;
;;;6807                               pLL_Conn = &LL_Conn_Para[j];
;;;6808                               LL_SMP_DataCh = pLL_Conn->LE_Conn_Para.LL_SMP_DataCh;
;;;6809                               if(LL_SMP_DataCh&LL_SMP_DATA_CH_MSK)                                //LE_Conn_Para.LL_SMP_DataCh
;;;6810                               {
;;;6811                                   RF_CCM_NonceIV_Key16_set(pLL_Conn->LE_Conn_Para.LL_SMP_IV);
;;;6812   #if MAX_NUM_CONN_MAS_HDL != 0
;;;6813                                   if(tblk_LL_pi->ConnId < LL_CONN_ID_MASTER_RSV)      //Master
;;;6814                                   {
;;;6815                                       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterTd |= MSK_LL_SMP_DATA_CH_MASTER;
;;;6816                                       RF_CCM_NoncePktCnt_set(pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterT);
;;;6817                                       SPI_PDMA_waitFinish();
;;;6818                                       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterTd &= (~MSK_LL_SMP_DATA_CH_MASTER);
;;;6819                                   }
;;;6820                                   else
;;;6821   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;6822                                   {
;;;6823   #if MAX_NUM_CONN_SLV_HDL != 0
;;;6824                                       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterRd |= MSK_LL_SMP_DATA_CH_MASTER;
;;;6825                                       RF_CCM_NoncePktCnt_set(pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterR);
;;;6826                                       SPI_PDMA_waitFinish();
;;;6827                                       pLL_Conn->LE_Conn_Para.LL_SMP_packetCounterRd &= (~MSK_LL_SMP_DATA_CH_MASTER);
;;;6828   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;6829                                   }
;;;6830                               }
;;;6831                               RF_CCM_AES_Mode_set((LL_SMP_DataCh&LL_SMP_DATA_CH_R_T_CCM));
;;;6832                           }
;;;6833                       }
;;;6834   
;;;6835                       if(tblk_LL_pi->Ticks<(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_CMMN))
;;;6836                       {
;;;6837                           return;
;;;6838                       }
;;;6839                       tblk_i = (LL_Msg_AdvScnConnUpdSts^LL_Msg_AdvScnConnUpd);
;;;6840                       if((tblk_i & (LL_MSG_ADVSCNCONN_ADV_EN|LL_MSG_ADVSCNCONN_SCN_EN|LL_MSG_ADVSCNCONN_INIT_EN)))
;;;6841                       {
;;;6842                           LL_Msg_AdvScnConnUpdSts ^= tblk_i;
;;;6843                           LL_Msg_AdvScnConn = (LL_Msg_AdvScnConnUpdSts & (LL_MSG_ADVSCNCONN_ADV_EN|LL_MSG_ADVSCNCONN_SCN_EN|LL_MSG_ADVSCNCONN_INIT_EN))<<4;
;;;6844                           if((tblk_i & LL_MSG_ADVSCNCONN_ADV_EN))
;;;6845                           {
;;;6846                               Knl_MemCpy_Isr(&LL_Adv_Para.Adv_Para.LL_AdvMap_ID, &LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvMap_ID, LEN_LE_ADV_PARAM);
;;;6847                               Knl_MemCpy_Isr(Ch_ADV_Ch_Hop_Table, Ch_ADV_Ch_Hop_TableBuf, 4);
;;;6848                               LL_Msg_AdvScnConn |= LL_MSG_ADVSCNCONN_ADV_CONT;
;;;6849                               i16 = LL_DUR_RSV[(LL_Adv_Para.Adv_Para.LL_Adv_Type&FLD_MSK_LL_ADV_TYPE)]+(LL_Tmr_Ticks_RSV_Wakeup+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_ADV);
;;;6850   
;;;6851                               tblk_i = tblk_LL_pi2->Next;
;;;6852                               while(tblk_i < MAX_TBLK_LL_NO)
;;;6853                               {
;;;6854                                   tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6855                                   if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6856                                   {
;;;6857                                       if(tblk_LL_pi2->Ticks >= i16)
;;;6858                                       {
;;;6859                                           tblk_LL_pi2->Ticks = (tblk_LL_pi2->Ticks-i16)+DUR_LL_RSV_MIN_TBLK_LL_ADV;
;;;6860                                           break;
;;;6861                                       }
;;;6862                                   }
;;;6863                                   tblk_i = tblk_LL_pi2->Next;
;;;6864                                   tblk_LL_pi = tblk_LL_pi2;
;;;6865                               }
;;;6866                               tblk_LL_pi->Next = TBlk_Free_LL;
;;;6867                               tblk_LL_pi = &TmrBlk_LL[TBlk_Free_LL];
;;;6868                               tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6869                               tblk_LL_pi->Ticks = DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6870                               tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
;;;6871                               TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6872   
;;;6873                               tblk_LL_pi2->Next = tblk_i;
;;;6874                               tblk_LL_pi2->Ticks = (i16-DUR_LL_RSV_MIN_TBLK_LL_CONN-DUR_LL_RSV_MIN_TBLK_LL_ADV);
;;;6875                               tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6876   
;;;6877                               tblk_LL_pi->ConnId = LL_CONN_ID_ADV_PARA;
;;;6878                               tblk_LL_pi2->ConnId = LL_CONN_ID_ADV_PARA;
;;;6879   
;;;6880                               LL_TmrBlk_Pt_PairRst();
;;;6881                           }
;;;6882                           else if((tblk_i & LL_MSG_ADVSCNCONN_SCN_EN))
;;;6883                           {
;;;6884                               if((tblk_i & LL_MSG_ADVSCNCONN_UPD_SCN_PARA))
;;;6885                               {
;;;6886                                   Knl_MemCpy_Isr(&LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID, &LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_AdvMap_ID, LEN_LE_SCAN_PARA);
;;;6887                                   Knl_MemCpy_Isr(Ch_ADV_Ch_Hop_Table, Ch_ADV_Ch_Hop_TableBuf, 4);
;;;6888                               }
;;;6889                               LL_Msg_AdvScnConn |= LL_MSG_ADVSCNCONN_SCN_CONT;
;;;6890                               i16 = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_Scan_Window+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN;
;;;6891   
;;;6892                               tblk_i = tblk_LL_pi2->Next;
;;;6893                               while(tblk_i < MAX_TBLK_LL_NO)
;;;6894                               {
;;;6895                                   tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6896                                   if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6897                                   {
;;;6898                                       if(tblk_LL_pi2->Ticks>=LL_PARA_MIN_SCN_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN)
;;;6899                                       {
;;;6900                                           if((tblk_LL_pi2->Ticks-i16)>0)
;;;6901                                           {
;;;6902                                               tblk_LL_pi2->Ticks = (tblk_LL_pi2->Ticks-i16)+DUR_LL_RSV_MIN_TBLK_LL_SCN;
;;;6903                                               i16 = i16-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN);
;;;6904                                           }
;;;6905                                           else
;;;6906                                           {
;;;6907                                               i16 = tblk_LL_pi2->Ticks-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_SCN);
;;;6908                                               tblk_LL_pi2->Ticks = DUR_LL_RSV_MIN_TBLK_LL_SCN;
;;;6909                                           }
;;;6910                                           break;
;;;6911                                       }
;;;6912                                   }
;;;6913                                   tblk_LL_pi = tblk_LL_pi2;
;;;6914                                   tblk_i = tblk_LL_pi2->Next;
;;;6915                               }
;;;6916                               if(tblk_i==MAX_TBLK_LL_NO)
;;;6917                               {
;;;6918                                   i16 = LL_PARA_MIN_SCN_WINDOW;
;;;6919                               }
;;;6920                               tblk_LL_pi->Next = TBlk_Free_LL;
;;;6921                               tblk_LL_pi = &TmrBlk_LL[TBlk_Free_LL];
;;;6922                               tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6923                               tblk_LL_pi->Ticks = DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6924                               tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
;;;6925                               TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6926                               tblk_LL_pi2->Next = tblk_i;
;;;6927                               tblk_LL_pi2->Ticks = i16;
;;;6928                               LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl = LL_Scan_Para.LE_Set_Scan_Para.LL_LE_ScanAccl - i16;
;;;6929                               tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6930   
;;;6931                               tblk_LL_pi->ConnId = LL_CONN_ID_SCAN_PARA;
;;;6932                               tblk_LL_pi2->ConnId = LL_CONN_ID_SCAN_PARA;
;;;6933   
;;;6934                               LL_TmrBlk_Pt_PairRst();
;;;6935                           }
;;;6936   #if MAX_NUM_CONN_MAS_HDL != 0
;;;6937                           else if((tblk_i & LL_MSG_ADVSCNCONN_INIT_EN))
;;;6938                           {
;;;6939                               LL_Msg_AdvScnConn |= LL_MSG_ADVSCNCONN_INIT_CONT;
;;;6940                               i16 = LL_Init_Para.LE_Init_Para.LL_LE_Scan_Window+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT;
;;;6941   
;;;6942                               tblk_i = tblk_LL_pi2->Next;
;;;6943                               while(tblk_i < MAX_TBLK_LL_NO)
;;;6944                               {
;;;6945                                   tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;6946                                   if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;6947                                   {
;;;6948                                       if(tblk_LL_pi2->Ticks>=LL_PARA_MIN_INIT_WINDOW+DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT)
;;;6949                                       {
;;;6950                                           if((tblk_LL_pi2->Ticks-i16)>0)
;;;6951                                           {
;;;6952                                               tblk_LL_pi2->Ticks = (tblk_LL_pi2->Ticks-i16)+DUR_LL_RSV_MIN_TBLK_LL_INIT;
;;;6953                                               i16 = i16-tblk_LL_pi2->Ticks;
;;;6954                                           }
;;;6955                                           else
;;;6956                                           {
;;;6957                                               i16 = tblk_LL_pi2->Ticks-(DUR_LL_RSV_MIN_TBLK_LL_CONN+DUR_LL_RSV_MIN_TBLK_LL_INIT);
;;;6958                                               tblk_LL_pi2->Ticks = DUR_LL_RSV_MIN_TBLK_LL_INIT;
;;;6959                                           }
;;;6960                                           break;
;;;6961                                       }
;;;6962                                   }
;;;6963                                   tblk_LL_pi = tblk_LL_pi2;
;;;6964                                   tblk_i = tblk_LL_pi2->Next;
;;;6965                               }
;;;6966                               if(tblk_i==MAX_TBLK_LL_NO)
;;;6967                               {
;;;6968                                   i16 = LL_PARA_MIN_INIT_WINDOW;
;;;6969                               }
;;;6970                               tblk_LL_pi->Next = TBlk_Free_LL;
;;;6971                               tblk_LL_pi = &TmrBlk_LL[TBlk_Free_LL];
;;;6972                               tblk_LL_pi->TmrId = LL_TMR_S1;
;;;6973                               tblk_LL_pi->Ticks = DUR_LL_RSV_MIN_TBLK_LL_CONN;
;;;6974                               tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
;;;6975                               TBlk_Free_LL = tblk_LL_pi2->Next;
;;;6976                               tblk_LL_pi2->Next = tblk_i;
;;;6977                               tblk_LL_pi2->Ticks = i16;
;;;6978                               tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;6979   
;;;6980                               tblk_LL_pi->ConnId = LL_CONN_ID_INIT_PARA;
;;;6981                               tblk_LL_pi2->ConnId = LL_CONN_ID_INIT_PARA;
;;;6982   
;;;6983                               LL_TmrBlk_Pt_PairRst();
;;;6984                           }
;;;6985   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;6986                       }
;;;6987                       //LL_Msg_AdvScnConnUpd = LL_Msg_AdvScnConn;
;;;6988                   }   //end of if(tblk_LL_pi->TmrId != LL_TMR_S255){}/else{}  => end of LL_TMR_S255
;;;6989               }     //end of if(tblk_LL_pi->TmrId < LL_TMR_S2){},else{}  => In State S2 or S255
;;;6990               if(TBlk_InUse_LL != MAX_TBLK_LL_NO)
;;;6991               {
;;;6992                   if(tblk_LL_pi->Ticks >= DUR_LL_RSV_MIN_AES_CCM)
;;;6993                   {
;;;6994                       Ble_EC_Chk_Isr();
;;;6995                   }
;;;6996   //#ifdef _PWR_DOWN_BY_LL_
;;;6997                   if(tblk_LL_pi->Ticks > DUR_PWR_DOWN_PERIOD_FCTR_125MULT)
;;;6998                   {
;;;6999                       RF_PowerSaving_En_Isr();
;;;7000                   }
;;;7001   //#endif
;;;7002               }
;;;7003           }
;;;7004           else     //(i16 != Tmr16Interval)
;;;7005           {
;;;7006               if(i16 > Tmr16Interval)      //Timer IRQ is something happen earlier than timer interval expires
;;;7007               {
;;;7008                   tblk_LL_pi->Ticks = i16 - Tmr16Interval;
;;;7009                   tblk_i = tblk_LL_pi->ConnId;
;;;7010                   if(tblk_i<LL_CONN_ID_ADV_PARA)        //(tblk_LL_pi->ConnId < LL_CONN_ID_ADV_PARA=5(4+1))
;;;7011                   {
;;;7012   #if MAX_NUM_CONN_MAS_HDL != 0
;;;7013                       if(tblk_i < MAX_NUM_CONN_MAS_HDL)
;;;7014                       {
;;;7015                           __NOP();
;;;7016                       }
;;;7017                       else
;;;7018   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;7019                       {
;;;7020   #if MAX_NUM_CONN_SLV_HDL != 0
;;;7021                           __NOP();
;;;7022   #endif
;;;7023                       }
;;;7024                   }
;;;7025                   else      //tblk_LL_pi->ConnId>=LL_CONN_ID_ADV_PARA
;;;7026                   {
;;;7027                       switch(tblk_i)
;;;7028                       {
;;;7029                       case LL_CONN_ID_ADV_PARA:
;;;7030                           __NOP();
;;;7031                           break;
;;;7032   
;;;7033                       case LL_CONN_ID_SCAN_PARA:
;;;7034                           __NOP();
;;;7035                           break;
;;;7036   
;;;7037   #if MAX_NUM_CONN_MAS_HDL != 0
;;;7038                       case LL_CONN_ID_INIT_PARA:
;;;7039                           __NOP();
;;;7040                           break;
;;;7041   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;7042   
;;;7043                       default:
;;;7044                           __NOP();
;;;7045                           break;
;;;7046                       }
;;;7047                   }
;;;7048                   __NOP();
;;;7049               }
;;;7050               else
;;;7051               {
;;;7052                   __NOP();
;;;7053               }
;;;7054           }
;;;7055       }
;;;7056   }
000192  b007              ADD      sp,sp,#0x1c
000194  bdf0              POP      {r4-r7,pc}
                  |L72.406|
000196  4ca7              LDR      r4,|L72.1076|
000198  6f0a              LDR      r2,[r1,#0x70]         ;5398  ; Tmr37
00019a  6f48              LDR      r0,[r1,#0x74]         ;5398  ; Tmr37
00019c  1912              ADDS     r2,r2,r4              ;5398
00019e  2300              MOVS     r3,#0                 ;5398
0001a0  4158              ADCS     r0,r0,r3              ;5398
0001a2  670a              STR      r2,[r1,#0x70]         ;5399  ; Tmr37
0001a4  6748              STR      r0,[r1,#0x74]         ;5399  ; Tmr37
0001a6  489f              LDR      r0,|L72.1060|
0001a8  2219              MOVS     r2,#0x19              ;5400
0001aa  7901              LDRB     r1,[r0,#4]            ;5399  ; Tmr37
0001ac  0192              LSLS     r2,r2,#6              ;5400
0001ae  06c9              LSLS     r1,r1,#27             ;5399
0001b0  0ec9              LSRS     r1,r1,#27             ;5399
0001b2  7101              STRB     r1,[r0,#4]            ;5399
0001b4  499c              LDR      r1,|L72.1064|
0001b6  6808              LDR      r0,[r1,#0]            ;5400  ; Timeline24
0001b8  1880              ADDS     r0,r0,r2              ;5400
0001ba  6008              STR      r0,[r1,#0]            ;5401  ; Timeline24
0001bc  78c8              LDRB     r0,[r1,#3]            ;5401  ; Timeline24
0001be  28ef              CMP      r0,#0xef              ;5401
0001c0  d902              BLS      |L72.456|
0001c2  0700              LSLS     r0,r0,#28             ;5404
0001c4  0f00              LSRS     r0,r0,#28             ;5404
0001c6  70c8              STRB     r0,[r1,#3]            ;5404
                  |L72.456|
0001c8  f7fffffe          BL       Ble_EC_Chk_Isr
0001cc  f7fffffe          BL       RF_PowerSaving_En_Isr
0001d0  b007              ADD      sp,sp,#0x1c
0001d2  bdf0              POP      {r4-r7,pc}
                  |L72.468|
0001d4  2002              MOVS     r0,#2                 ;5460
0001d6  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
0001da  f7fffffe          BL       rafael_reset_phy_fsm_Isr
0001de  4896              LDR      r0,|L72.1080|
0001e0  7a01              LDRB     r1,[r0,#8]            ;5463  ; RFIP_reg_MEM
0001e2  20c0              MOVS     r0,#0xc0              ;5463
0001e4  4301              ORRS     r1,r1,r0              ;5463
0001e6  206b              MOVS     r0,#0x6b              ;5463
0001e8  f7fffffe          BL       SPI_1BYT_SetTx_Isr
0001ec  f7fffffe          BL       RF_WTR_intOn
0001f0  69a0              LDR      r0,[r4,#0x18]         ;5466  ; tblk_LL_pi
0001f2  4d92              LDR      r5,|L72.1084|
0001f4  7847              LDRB     r7,[r0,#1]            ;5466
0001f6  2f05              CMP      r7,#5                 ;5468
0001f8  d27a              BCS      |L72.752|
0001fa  4638              MOV      r0,r7                 ;5470
0001fc  2188              MOVS     r1,#0x88              ;5470
0001fe  4e90              LDR      r6,|L72.1088|
000200  4348              MULS     r0,r1,r0              ;5470
000202  1980              ADDS     r0,r0,r6              ;5470
000204  6220              STR      r0,[r4,#0x20]         ;5471  ; LL_conn_pi
000206  20ff              MOVS     r0,#0xff              ;5471
000208  f7fffffe          BL       RF_RxLengthLimit
00020c  79e0              LDRB     r0,[r4,#7]            ;5474  ; status_LL_Tmr
00020e  2800              CMP      r0,#0                 ;5474
000210  d040              BEQ      |L72.660|
000212  2001              MOVS     r0,#1                 ;5503
000214  f7fffffe          BL       ErrorEntry
                  |L72.536|
000218  6a21              LDR      r1,[r4,#0x20]         ;5507  ; LL_conn_pi
00021a  2204              MOVS     r2,#4                 ;5507
00021c  207a              MOVS     r0,#0x7a              ;5507
00021e  1d09              ADDS     r1,r1,#4              ;5507
000220  f7fffffe          BL       SPI_PDMA_SetTx
000224  6a20              LDR      r0,[r4,#0x20]         ;5508  ; LL_conn_pi
000226  2175              MOVS     r1,#0x75              ;5508
000228  5c09              LDRB     r1,[r1,r0]            ;5508
00022a  71a1              STRB     r1,[r4,#6]            ;5508
00022c  7f02              LDRB     r2,[r0,#0x1c]         ;5512
00022e  302e              ADDS     r0,r0,#0x2e           ;5512
000230  5c10              LDRB     r0,[r2,r0]            ;5512
000232  f7fffffe          BL       setChannel_BLE
000236  6a20              LDR      r0,[r4,#0x20]         ;5514  ; LL_conn_pi
000238  7f02              LDRB     r2,[r0,#0x1c]         ;5514
00023a  302e              ADDS     r0,r0,#0x2e           ;5514
00023c  5c11              LDRB     r1,[r2,r0]            ;5514
00023e  4881              LDR      r0,|L72.1092|
000240  5c40              LDRB     r0,[r0,r1]            ;5514
000242  f7fffffe          BL       RF_PLL_VCO_Bank_set
000246  6a20              LDR      r0,[r4,#0x20]         ;5514  ; LL_conn_pi
000248  7f02              LDRB     r2,[r0,#0x1c]         ;5514
00024a  7e41              LDRB     r1,[r0,#0x19]         ;5514
00024c  1852              ADDS     r2,r2,r1              ;5514
00024e  497e              LDR      r1,|L72.1096|
000250  5c8a              LDRB     r2,[r1,r2]            ;5514
000252  7702              STRB     r2,[r0,#0x1c]         ;5514
000254  3008              ADDS     r0,r0,#8              ;5514
000256  f7fffffe          BL       RF_CRCInit
00025a  6a20              LDR      r0,[r4,#0x20]         ;5520  ; LL_conn_pi
00025c  3060              ADDS     r0,r0,#0x60           ;5520
00025e  7f40              LDRB     r0,[r0,#0x1d]         ;5520
000260  2802              CMP      r0,#2                 ;5520
000262  d033              BEQ      |L72.716|
000264  2000              MOVS     r0,#0                 ;5526
                  |L72.614|
000266  f7fffffe          BL       RF_SymbolRate_Patch_1M_2M
00026a  f7fffffe          BL       RF_TxAutoAckOn
00026e  f7fffffe          BL       LL_SvPrToutAccu_Incr
000272  9800              LDR      r0,[sp,#0]            ;5532
000274  2804              CMP      r0,#4                 ;5532
000276  d300              BCC      |L72.634|
000278  e15c              B        |L72.1332|
                  |L72.634|
00027a  2188              MOVS     r1,#0x88              ;5534
00027c  4348              MULS     r0,r1,r0              ;5534
00027e  1986              ADDS     r6,r0,r6              ;5534
000280  9800              LDR      r0,[sp,#0]            ;5536
000282  4972              LDR      r1,|L72.1100|
000284  0080              LSLS     r0,r0,#2              ;5536
000286  7af7              LDRB     r7,[r6,#0xb]          ;5538
000288  5808              LDR      r0,[r1,r0]            ;5536
00028a  0639              LSLS     r1,r7,#24             ;5539
00028c  d523              BPL      |L72.726|
00028e  2800              CMP      r0,#0                 ;5541
000290  d01e              BEQ      |L72.720|
000292  e020              B        |L72.726|
                  |L72.660|
000294  6a21              LDR      r1,[r4,#0x20]         ;5477  ; LL_conn_pi
000296  2003              MOVS     r0,#3                 ;5477
000298  5608              LDRSB    r0,[r1,r0]            ;5477
00029a  f7fffffe          BL       RF_Set_TxPowerLevel_Isr
00029e  2f04              CMP      r7,#4                 ;5479
0002a0  d203              BCS      |L72.682|
0002a2  f7fffffe          BL       LL_TxEnter_Isr
0002a6  2028              MOVS     r0,#0x28              ;5482
0002a8  e002              B        |L72.688|
                  |L72.682|
0002aa  f7fffffe          BL       LL_RxEnter_Isr
0002ae  2032              MOVS     r0,#0x32              ;5489
                  |L72.688|
0002b0  71e0              STRB     r0,[r4,#7]            ;5489
0002b2  89e0              LDRH     r0,[r4,#0xe]          ;5496  ; LL_DurRxPktAccu
0002b4  1e80              SUBS     r0,r0,#2              ;5496
0002b6  81e0              STRH     r0,[r4,#0xe]          ;5496
0002b8  69e0              LDR      r0,[r4,#0x1c]         ;5497  ; tblk_LL_pi2
0002ba  6841              LDR      r1,[r0,#4]            ;5497
0002bc  1e89              SUBS     r1,r1,#2              ;5497
0002be  6041              STR      r1,[r0,#4]            ;5498
0002c0  69a0              LDR      r0,[r4,#0x18]         ;5498  ; tblk_LL_pi
0002c2  2103              MOVS     r1,#3                 ;5498
0002c4  7001              STRB     r1,[r0,#0]            ;5498
0002c6  2102              MOVS     r1,#2                 ;5499
0002c8  6041              STR      r1,[r0,#4]            ;5499
0002ca  e7a5              B        |L72.536|
                  |L72.716|
0002cc  2001              MOVS     r0,#1                 ;5522
0002ce  e7ca              B        |L72.614|
                  |L72.720|
0002d0  9800              LDR      r0,[sp,#0]            ;5543
0002d2  f7fffffe          BL       LL_Queue_To_Buffer_Isr
                  |L72.726|
0002d6  210c              MOVS     r1,#0xc               ;5546
0002d8  400f              ANDS     r7,r7,r1              ;5546
0002da  2800              CMP      r0,#0                 ;5547
0002dc  d03d              BEQ      |L72.858|
0002de  7901              LDRB     r1,[r0,#4]            ;5549
0002e0  29ef              CMP      r1,#0xef              ;5549
0002e2  d127              BNE      |L72.820|
0002e4  7ac1              LDRB     r1,[r0,#0xb]          ;5551
0002e6  2900              CMP      r1,#0                 ;5551
0002e8  d003              BEQ      |L72.754|
0002ea  2901              CMP      r1,#1                 ;5551
0002ec  d122              BNE      |L72.820|
0002ee  e01a              B        |L72.806|
                  |L72.752|
0002f0  e03e              B        |L72.880|
                  |L72.754|
0002f2  7a21              LDRB     r1,[r4,#8]            ;5554  ; anchor_LL_Tmr
0002f4  074a              LSLS     r2,r1,#29             ;5554
0002f6  d006              BEQ      |L72.774|
0002f8  074a              LSLS     r2,r1,#29             ;5556
0002fa  0f52              LSRS     r2,r2,#29             ;5556
0002fc  210a              MOVS     r1,#0xa               ;5556
0002fe  1a89              SUBS     r1,r1,r2              ;5556
000300  6a22              LDR      r2,[r4,#0x20]         ;5556  ; LL_conn_pi
000302  8491              STRH     r1,[r2,#0x24]         ;5556
000304  e002              B        |L72.780|
                  |L72.774|
000306  6a22              LDR      r2,[r4,#0x20]         ;5560  ; LL_conn_pi
000308  210a              MOVS     r1,#0xa               ;5560
00030a  8491              STRH     r1,[r2,#0x24]         ;5560
                  |L72.780|
00030c  6a21              LDR      r1,[r4,#0x20]         ;5562  ; LL_conn_pi
00030e  8c8a              LDRH     r2,[r1,#0x24]         ;5562
000310  7342              STRB     r2,[r0,#0xd]          ;5562
000312  8c89              LDRH     r1,[r1,#0x24]         ;5563
000314  0a09              LSRS     r1,r1,#8              ;5563
000316  7381              STRB     r1,[r0,#0xe]          ;5563
000318  8b71              LDRH     r1,[r6,#0x1a]         ;5564
00031a  8db2              LDRH     r2,[r6,#0x2c]         ;5565
00031c  3108              ADDS     r1,r1,#8              ;5565
00031e  428a              CMP      r2,r1                 ;5565
000320  d908              BLS      |L72.820|
000322  82c1              STRH     r1,[r0,#0x16]         ;5567
000324  e005              B        |L72.818|
                  |L72.806|
000326  8b71              LDRH     r1,[r6,#0x1a]         ;5574
000328  8db2              LDRH     r2,[r6,#0x2c]         ;5575
00032a  3108              ADDS     r1,r1,#8              ;5575
00032c  428a              CMP      r2,r1                 ;5575
00032e  d901              BLS      |L72.820|
000330  8241              STRH     r1,[r0,#0x12]         ;5577
                  |L72.818|
000332  85b1              STRH     r1,[r6,#0x2c]         ;5568
                  |L72.820|
000334  9800              LDR      r0,[sp,#0]            ;5587
000336  4946              LDR      r1,|L72.1104|
000338  00c0              LSLS     r0,r0,#3              ;5587
00033a  1841              ADDS     r1,r0,r1              ;5587
00033c  6849              LDR      r1,[r1,#4]            ;5587
00033e  2900              CMP      r1,#0                 ;5587
000340  d104              BNE      |L72.844|
000342  4944              LDR      r1,|L72.1108|
000344  1840              ADDS     r0,r0,r1              ;5587
000346  6840              LDR      r0,[r0,#4]            ;5587
000348  2800              CMP      r0,#0                 ;5587
00034a  d001              BEQ      |L72.848|
                  |L72.844|
00034c  2010              MOVS     r0,#0x10              ;5589
00034e  4307              ORRS     r7,r7,r0              ;5589
                  |L72.848|
000350  4639              MOV      r1,r7                 ;5591
000352  9800              LDR      r0,[sp,#0]            ;5591
000354  f7fffffe          BL       LL_Buffer_To_FIFO_Isr
000358  e008              B        |L72.876|
                  |L72.858|
00035a  4639              MOV      r1,r7                 ;5595
00035c  2001              MOVS     r0,#1                 ;5595
00035e  4301              ORRS     r1,r1,r0              ;5595
000360  70a9              STRB     r1,[r5,#2]            ;5595
000362  2100              MOVS     r1,#0                 ;5596
000364  70e9              STRB     r1,[r5,#3]            ;5596
000366  1ca8              ADDS     r0,r5,#2              ;5597
000368  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
                  |L72.876|
00036c  72f7              STRB     r7,[r6,#0xb]          ;5599
00036e  e0e1              B        |L72.1332|
                  |L72.880|
000370  4839              LDR      r0,|L72.1112|
000372  f7fffffe          BL       RF_CRCInit
000376  2204              MOVS     r2,#4                 ;5606
000378  4938              LDR      r1,|L72.1116|
00037a  207a              MOVS     r0,#0x7a              ;5606
00037c  f7fffffe          BL       SPI_PDMA_SetTx
000380  2100              MOVS     r1,#0                 ;5607
000382  209b              MOVS     r0,#0x9b              ;5607
000384  f7fffffe          BL       SPI_1BYT_SetTx_Isr
000388  2025              MOVS     r0,#0x25              ;5608
00038a  f7fffffe          BL       RF_RxLengthLimit
00038e  4e34              LDR      r6,|L72.1120|
000390  2f05              CMP      r7,#5                 ;5610
000392  d005              BEQ      |L72.928|
000394  2f06              CMP      r7,#6                 ;5610
000396  d06e              BEQ      |L72.1142|
000398  2f07              CMP      r7,#7                 ;5610
00039a  d06d              BEQ      |L72.1144|
00039c  bf00              NOP                            ;5780
00039e  e0c9              B        |L72.1332|
                  |L72.928|
0003a0  4f1b              LDR      r7,|L72.1040|
0003a2  2188              MOVS     r1,#0x88              ;5613
0003a4  7878              LDRB     r0,[r7,#1]            ;5613  ; LL_Adv_Para
0003a6  4a26              LDR      r2,|L72.1088|
0003a8  4341              MULS     r1,r0,r1              ;5613
0003aa  1889              ADDS     r1,r1,r2              ;5613
0003ac  6221              STR      r1,[r4,#0x20]         ;5614  ; LL_conn_pi
0003ae  7a61              LDRB     r1,[r4,#9]            ;5614  ; LL_Msg_AdvScnConn
0003b0  06c9              LSLS     r1,r1,#27             ;5614
0003b2  d406              BMI      |L72.962|
0003b4  2805              CMP      r0,#5                 ;5616
0003b6  d27c              BCS      |L72.1202|
0003b8  f7fffffe          BL       LL_MsgBlk_LL_conn_Para_Rls
0003bc  2005              MOVS     r0,#5                 ;5619
0003be  7078              STRB     r0,[r7,#1]            ;5619
0003c0  e0cc              B        |L72.1372|
                  |L72.962|
0003c2  79e0              LDRB     r0,[r4,#7]            ;5626  ; status_LL_Tmr
0003c4  2800              CMP      r0,#0                 ;5626
0003c6  d001              BEQ      |L72.972|
0003c8  2002              MOVS     r0,#2                 ;5693
0003ca  e0d3              B        |L72.1396|
                  |L72.972|
0003cc  4f10              LDR      r7,|L72.1040|
0003ce  2002              MOVS     r0,#2                 ;5629
0003d0  5638              LDRSB    r0,[r7,r0]            ;5629  ; LL_Adv_Para
0003d2  f7fffffe          BL       RF_Set_TxPowerLevel_Isr
0003d6  f7fffffe          BL       LL_TxEnter_Isr
0003da  7838              LDRB     r0,[r7,#0]            ;5633  ; LL_Adv_Para
0003dc  5c30              LDRB     r0,[r6,r0]            ;5633
0003de  f7fffffe          BL       setChannel_BLE
0003e2  7838              LDRB     r0,[r7,#0]            ;5635  ; LL_Adv_Para
0003e4  5c31              LDRB     r1,[r6,r0]            ;5635
0003e6  4817              LDR      r0,|L72.1092|
0003e8  5c40              LDRB     r0,[r0,r1]            ;5635
0003ea  f7fffffe          BL       RF_PLL_VCO_Bank_set
0003ee  7839              LDRB     r1,[r7,#0]            ;5638  ; LL_Adv_Para
0003f0  4809              LDR      r0,|L72.1048|
0003f2  5c40              LDRB     r0,[r0,r1]            ;5638
0003f4  7038              STRB     r0,[r7,#0]            ;5638
0003f6  7a38              LDRB     r0,[r7,#8]            ;5640  ; LL_Adv_Para
0003f8  70a8              STRB     r0,[r5,#2]            ;5640
0003fa  0707              LSLS     r7,r0,#28             ;5642
0003fc  0f3f              LSRS     r7,r7,#28             ;5642
0003fe  e031              B        |L72.1124|
                  |L72.1024|
                          DCD      ||.data||
                  |L72.1028|
                          DCD      Tmr16Interval
                  |L72.1032|
                          DCD      LL_Tmr_Ticks_RSV_Wakeup
                  |L72.1036|
                          DCD      ||.bss||+0x5c
                  |L72.1040|
                          DCD      ||.bss||
                  |L72.1044|
                          DCD      ||.data||+0x3c
                  |L72.1048|
                          DCD      ||.data||+0x38
                  |L72.1052|
                          DCD      ||.bss||+0xc4
                  |L72.1056|
                          DCD      ||.bss||+0xb8
                  |L72.1060|
                          DCD      ||.data||+0x70
                  |L72.1064|
                          DCD      Timeline24
                  |L72.1068|
                          DCD      ||.constdata||+0x1b
                  |L72.1072|
                          DCD      ||.bss||+0x404
                  |L72.1076|
                          DCD      0x00030d40
                  |L72.1080|
                          DCD      RFIP_reg_MEM
                  |L72.1084|
                          DCD      ||.bss||+0x43c
                  |L72.1088|
                          DCD      ||.bss||+0xd0
                  |L72.1092|
                          DCD      CH_PLL_bank_Table
                  |L72.1096|
                          DCD      ||.constdata||+0x90
                  |L72.1100|
                          DCD      ||.bss||+0x3f0
                  |L72.1104|
                          DCD      ||.bss||+0x378
                  |L72.1108|
                          DCD      ||.bss||+0x3a0
                  |L72.1112|
                          DCD      ||.data||+0x34
                  |L72.1116|
                          DCD      ||.data||+0x30
                  |L72.1120|
                          DCD      ||.constdata||+0x4
                  |L72.1124|
000464  2f01              CMP      r7,#1                 ;5644
000466  d008              BEQ      |L72.1146|
000468  7ae0              LDRB     r0,[r4,#0xb]          ;5651  ; LL_Msg_AdvScnConnUpdSts
00046a  0700              LSLS     r0,r0,#28             ;5651
00046c  d508              BPL      |L72.1152|
00046e  48ff              LDR      r0,|L72.2156|
000470  4efd              LDR      r6,|L72.2152|
000472  7ec0              LDRB     r0,[r0,#0x1b]         ;5654  ; LL_Adv_Para_UpdBuf
000474  e007              B        |L72.1158|
                  |L72.1142|
000476  e02f              B        |L72.1240|
                  |L72.1144|
000478  e062              B        |L72.1344|
                  |L72.1146|
00047a  4efd              LDR      r6,|L72.2160|
00047c  200c              MOVS     r0,#0xc               ;5647
00047e  e002              B        |L72.1158|
                  |L72.1152|
000480  48fd              LDR      r0,|L72.2168|
000482  4efc              LDR      r6,|L72.2164|
000484  7ec0              LDRB     r0,[r0,#0x1b]         ;5659  ; LL_Adv_Para
                  |L72.1158|
000486  70e8              STRB     r0,[r5,#3]            ;5662
000488  1ca8              ADDS     r0,r5,#2              ;5663
00048a  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
00048e  48fb              LDR      r0,|L72.2172|
000490  7a40              LDRB     r0,[r0,#9]            ;5665  ; LL_Adv_Para
000492  2800              CMP      r0,#0                 ;5665
000494  d01a              BEQ      |L72.1228|
000496  48fa              LDR      r0,|L72.2176|
                  |L72.1176|
000498  f7fffffe          BL       RF_TxFIFO_ADVaddr_set
00049c  2000              MOVS     r0,#0                 ;5674
00049e  f7fffffe          BL       RF_SymbolRate_Patch_1M_2M
0004a2  2f02              CMP      r7,#2                 ;5675
0004a4  d014              BEQ      |L72.1232|
0004a6  f7fffffe          BL       RF_TxAutoAckOn
0004aa  200b              MOVS     r0,#0xb               ;5683
                  |L72.1196|
0004ac  71e0              STRB     r0,[r4,#7]            ;5683
0004ae  4630              MOV      r0,r6                 ;5685
0004b0  e000              B        |L72.1204|
                  |L72.1202|
0004b2  e053              B        |L72.1372|
                  |L72.1204|
0004b4  f7fffffe          BL       RF_TxFIFO_ADVData_set
0004b8  69e0              LDR      r0,[r4,#0x1c]         ;5687  ; tblk_LL_pi2
0004ba  6841              LDR      r1,[r0,#4]            ;5687
0004bc  1e89              SUBS     r1,r1,#2              ;5687
0004be  6041              STR      r1,[r0,#4]            ;5688
0004c0  69a0              LDR      r0,[r4,#0x18]         ;5688  ; tblk_LL_pi
0004c2  2103              MOVS     r1,#3                 ;5688
0004c4  7001              STRB     r1,[r0,#0]            ;5688
0004c6  2102              MOVS     r1,#2                 ;5689
0004c8  6041              STR      r1,[r0,#4]            ;5690
0004ca  e033              B        |L72.1332|
                  |L72.1228|
0004cc  48ed              LDR      r0,|L72.2180|
0004ce  e7e3              B        |L72.1176|
                  |L72.1232|
0004d0  f7fffffe          BL       RF_TxAutoAckOff
0004d4  200a              MOVS     r0,#0xa               ;5678
0004d6  e7e9              B        |L72.1196|
                  |L72.1240|
0004d8  7a60              LDRB     r0,[r4,#9]            ;5699  ; LL_Msg_AdvScnConn
0004da  0680              LSLS     r0,r0,#26             ;5699
0004dc  d53e              BPL      |L72.1372|
0004de  79e0              LDRB     r0,[r4,#7]            ;5706  ; status_LL_Tmr
0004e0  2800              CMP      r0,#0                 ;5706
0004e2  d001              BEQ      |L72.1256|
0004e4  2003              MOVS     r0,#3                 ;5735
0004e6  e045              B        |L72.1396|
                  |L72.1256|
0004e8  4fe7              LDR      r7,|L72.2184|
0004ea  200a              MOVS     r0,#0xa               ;5709
0004ec  5638              LDRSB    r0,[r7,r0]            ;5709  ; LL_Scan_Para
0004ee  f7fffffe          BL       RF_Set_TxPowerLevel_Isr
0004f2  f7fffffe          BL       LL_RxEnter_Isr
0004f6  7838              LDRB     r0,[r7,#0]            ;5712  ; LL_Scan_Para
0004f8  5c30              LDRB     r0,[r6,r0]            ;5712
0004fa  f7fffffe          BL       setChannel_BLE
0004fe  7838              LDRB     r0,[r7,#0]            ;5714  ; LL_Scan_Para
000500  5c31              LDRB     r1,[r6,r0]            ;5714
000502  48e2              LDR      r0,|L72.2188|
000504  5c40              LDRB     r0,[r0,r1]            ;5714
000506  f7fffffe          BL       RF_PLL_VCO_Bank_set
00050a  2000              MOVS     r0,#0                 ;5716
00050c  f7fffffe          BL       RF_SymbolRate_Patch_1M_2M
000510  7878              LDRB     r0,[r7,#1]            ;5717  ; LL_Scan_Para
000512  2800              CMP      r0,#0                 ;5717
000514  d00f              BEQ      |L72.1334|
000516  2014              MOVS     r0,#0x14              ;5719
000518  71e0              STRB     r0,[r4,#7]            ;5719
00051a  200c              MOVS     r0,#0xc               ;5720
00051c  70e8              STRB     r0,[r5,#3]            ;5720
00051e  f7fffffe          BL       RF_TxAutoAckOn
000522  69e0              LDR      r0,[r4,#0x1c]         ;5722  ; tblk_LL_pi2
000524  6841              LDR      r1,[r0,#4]            ;5722
000526  1e89              SUBS     r1,r1,#2              ;5722
000528  6041              STR      r1,[r0,#4]            ;5723
00052a  69a0              LDR      r0,[r4,#0x18]         ;5723  ; tblk_LL_pi
00052c  2102              MOVS     r1,#2                 ;5723
00052e  6041              STR      r1,[r0,#4]            ;5724
000530  2103              MOVS     r1,#3                 ;5724
000532  7001              STRB     r1,[r0,#0]            ;5724
                  |L72.1332|
000534  e263              B        |L72.2558|
                  |L72.1334|
000536  2015              MOVS     r0,#0x15              ;5728
000538  71e0              STRB     r0,[r4,#7]            ;5728
00053a  f7fffffe          BL       RF_TxAutoAckOff
00053e  e382              B        |L72.3142|
                  |L72.1344|
000540  4fd3              LDR      r7,|L72.2192|
000542  2188              MOVS     r1,#0x88              ;5742
000544  7838              LDRB     r0,[r7,#0]            ;5742  ; LL_Init_Para
000546  4ad3              LDR      r2,|L72.2196|
000548  4341              MULS     r1,r0,r1              ;5742
00054a  1889              ADDS     r1,r1,r2              ;5742
00054c  6221              STR      r1,[r4,#0x20]         ;5743  ; LL_conn_pi
00054e  7a61              LDRB     r1,[r4,#9]            ;5743  ; LL_Msg_AdvScnConn
000550  0649              LSLS     r1,r1,#25             ;5743
000552  d40b              BMI      |L72.1388|
000554  28ff              CMP      r0,#0xff              ;5745
000556  d201              BCS      |L72.1372|
000558  f7fffffe          BL       LL_MsgBlk_LL_conn_Para_Rls
                  |L72.1372|
00055c  f7fffffe          BL       RF_WTR_intOff
000560  f7fffffe          BL       LL_TmrBlk_Rls_Pair
000564  f7fffffe          BL       LL_TmrBlk_Rls_NxtIntvl
                  |L72.1384|
000568  b007              ADD      sp,sp,#0x1c
00056a  bdf0              POP      {r4-r7,pc}
                  |L72.1388|
00056c  79e0              LDRB     r0,[r4,#7]            ;5754  ; status_LL_Tmr
00056e  2800              CMP      r0,#0                 ;5754
000570  d003              BEQ      |L72.1402|
000572  2004              MOVS     r0,#4                 ;5773
                  |L72.1396|
000574  f7fffffe          BL       ErrorEntry
000578  e241              B        |L72.2558|
                  |L72.1402|
00057a  2011              MOVS     r0,#0x11              ;5757
00057c  5638              LDRSB    r0,[r7,r0]            ;5757  ; LL_Init_Para
00057e  f7fffffe          BL       RF_Set_TxPowerLevel_Isr
000582  f7fffffe          BL       LL_RxEnter_Isr
000586  7878              LDRB     r0,[r7,#1]            ;5759  ; LL_Init_Para
000588  5c30              LDRB     r0,[r6,r0]            ;5759
00058a  f7fffffe          BL       setChannel_BLE
00058e  7878              LDRB     r0,[r7,#1]            ;5761  ; LL_Init_Para
000590  5c31              LDRB     r1,[r6,r0]            ;5761
000592  48be              LDR      r0,|L72.2188|
000594  5c40              LDRB     r0,[r0,r1]            ;5761
000596  f7fffffe          BL       RF_PLL_VCO_Bank_set
00059a  201e              MOVS     r0,#0x1e              ;5763
00059c  71e0              STRB     r0,[r4,#7]            ;5763
00059e  2022              MOVS     r0,#0x22              ;5764
0005a0  70e8              STRB     r0,[r5,#3]            ;5764
0005a2  2000              MOVS     r0,#0                 ;5765
0005a4  f7fffffe          BL       RF_SymbolRate_Patch_1M_2M
0005a8  f7fffffe          BL       RF_TxAutoAckOn
0005ac  69e0              LDR      r0,[r4,#0x1c]         ;5767  ; tblk_LL_pi2
0005ae  6842              LDR      r2,[r0,#4]            ;5767
0005b0  1e92              SUBS     r2,r2,#2              ;5767
0005b2  6042              STR      r2,[r0,#4]            ;5768
0005b4  69a0              LDR      r0,[r4,#0x18]         ;5768  ; tblk_LL_pi
0005b6  2202              MOVS     r2,#2                 ;5768
0005b8  6042              STR      r2,[r0,#4]            ;5769
0005ba  2203              MOVS     r2,#3                 ;5769
0005bc  7002              STRB     r2,[r0,#0]            ;5769
0005be  e21e              B        |L72.2558|
                  |L72.1472|
0005c0  49b5              LDR      r1,|L72.2200|
0005c2  28ff              CMP      r0,#0xff              ;5788
0005c4  d07d              BEQ      |L72.1730|
0005c6  460f              MOV      r7,r1                 ;5790
0005c8  2803              CMP      r0,#3                 ;5790
0005ca  d112              BNE      |L72.1522|
0005cc  2001              MOVS     r0,#1                 ;5792
0005ce  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
0005d2  48b2              LDR      r0,|L72.2204|
0005d4  7800              LDRB     r0,[r0,#0]            ;5793  ; ble_device_param
0005d6  2866              CMP      r0,#0x66              ;5793
0005d8  d01d              BEQ      |L72.1558|
0005da  48b1              LDR      r0,|L72.2208|
0005dc  7a40              LDRB     r0,[r0,#9]            ;5800  ; RFIP_reg_MEM
0005de  0681              LSLS     r1,r0,#26             ;5800
0005e0  0e89              LSRS     r1,r1,#26             ;5800
0005e2  2077              MOVS     r0,#0x77              ;5800
0005e4  f7fffffe          BL       SPI_1BYT_SetTx_Isr
                  |L72.1512|
0005e8  69b8              LDR      r0,[r7,#0x18]         ;5802  ; tblk_LL_pi
0005ea  2101              MOVS     r1,#1                 ;5802
0005ec  6041              STR      r1,[r0,#4]            ;5803
0005ee  2102              MOVS     r1,#2                 ;5803
0005f0  7001              STRB     r1,[r0,#0]            ;5803
                  |L72.1522|
0005f2  69b8              LDR      r0,[r7,#0x18]         ;5805  ; tblk_LL_pi
0005f4  7840              LDRB     r0,[r0,#1]            ;5805
0005f6  2805              CMP      r0,#5                 ;5806
0005f8  d27e              BCS      |L72.1784|
0005fa  2804              CMP      r0,#4                 ;5809
0005fc  79f8              LDRB     r0,[r7,#7]            ;5966  ; status_LL_Tmr
0005fe  d27c              BCS      |L72.1786|
000600  3828              SUBS     r0,r0,#0x28           ;5809
000602  2806              CMP      r0,#6                 ;5811
000604  d27a              BCS      |L72.1788|
000606  0001              MOVS     r1,r0                 ;5811
000608  4479              ADD      r1,r1,pc              ;5811
00060a  7909              LDRB     r1,[r1,#4]            ;5811
00060c  1849              ADDS     r1,r1,r1              ;5811
00060e  448f              ADD      pc,pc,r1              ;5811
000610  0e12120e          DCB      0x0e,0x12,0x12,0x0e
000614  2be7              DCB      0x2b,0xe7
                  |L72.1558|
000616  48a3              LDR      r0,|L72.2212|
000618  4aa1              LDR      r2,|L72.2208|
00061a  7901              LDRB     r1,[r0,#4]            ;5795  ; Tmr37
00061c  7a52              LDRB     r2,[r2,#9]            ;5795  ; RFIP_reg_MEM
00061e  4311              ORRS     r1,r1,r2              ;5795
000620  7101              STRB     r1,[r0,#4]            ;5795
000622  4601              MOV      r1,r0                 ;5796
000624  2205              MOVS     r2,#5                 ;5796
000626  2073              MOVS     r0,#0x73              ;5796
000628  f7fffffe          BL       SPI_PDMA_SetTx
00062c  e7dc              B        |L72.1512|
                  |L72.1582|
00062e  89f8              LDRH     r0,[r7,#0xe]          ;5815  ; LL_DurRxPktAccu
000630  1e40              SUBS     r0,r0,#1              ;5815
000632  81f8              STRH     r0,[r7,#0xe]          ;5815
000634  e36c              B        |L72.3344|
000636  69f9              LDR      r1,[r7,#0x1c]         ;5822  ; tblk_LL_pi2
000638  6848              LDR      r0,[r1,#4]            ;5822
00063a  2801              CMP      r0,#1                 ;5822
00063c  d005              BEQ      |L72.1610|
                  |L72.1598|
00063e  89fa              LDRH     r2,[r7,#0xe]          ;5824  ; LL_DurRxPktAccu
000640  1e52              SUBS     r2,r2,#1              ;5824
000642  81fa              STRH     r2,[r7,#0xe]          ;5824
000644  1e40              SUBS     r0,r0,#1              ;5824
000646  6048              STR      r0,[r1,#4]            ;5827
000648  e36d              B        |L72.3366|
                  |L72.1610|
00064a  202c              MOVS     r0,#0x2c              ;5829
00064c  71f8              STRB     r0,[r7,#7]            ;5829
00064e  f7fffffe          BL       RF_TxAutoAckOff
000652  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000656  6a38              LDR      r0,[r7,#0x20]         ;5832  ; LL_conn_pi
000658  220c              MOVS     r2,#0xc               ;5832
00065a  7ac1              LDRB     r1,[r0,#0xb]          ;5832
00065c  4011              ANDS     r1,r1,r2              ;5832
00065e  72c1              STRB     r1,[r0,#0xb]          ;5832
000660  69b8              LDR      r0,[r7,#0x18]         ;5833  ; tblk_LL_pi
000662  7840              LDRB     r0,[r0,#1]            ;5833
000664  f7fffffe          BL       LLWTR_Buffer_nAck_Isr
000668  69f8              LDR      r0,[r7,#0x1c]         ;5835  ; tblk_LL_pi2
00066a  6840              LDR      r0,[r0,#4]            ;5835
00066c  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000670  69b8              LDR      r0,[r7,#0x18]         ;5836  ; tblk_LL_pi
000672  7886              LDRB     r6,[r0,#2]            ;5836
000674  7840              LDRB     r0,[r0,#1]            ;5837
000676  9000              STR      r0,[sp,#0]            ;5838
000678  f7fffffe          BL       LL_TmrBlk_Rls
00067c  89fc              LDRH     r4,[r7,#0xe]          ;5839  ; LL_DurRxPktAccu
00067e  2500              MOVS     r5,#0                 ;5840
                  |L72.1664|
000680  6a38              LDR      r0,[r7,#0x20]         ;5843  ; LL_conn_pi
000682  4601              MOV      r1,r0                 ;5843
000684  3180              ADDS     r1,r1,#0x80           ;5843
000686  888a              LDRH     r2,[r1,#4]            ;5843
000688  8a43              LDRH     r3,[r0,#0x12]         ;5843
00068a  429a              CMP      r2,r3                 ;5843
00068c  d25d              BCS      |L72.1866|
00068e  88ca              LDRH     r2,[r1,#6]            ;5844
000690  217d              MOVS     r1,#0x7d              ;5844
000692  0209              LSLS     r1,r1,#8              ;5844
000694  428a              CMP      r2,r1                 ;5844
000696  d258              BCS      |L72.1866|
000698  7801              LDRB     r1,[r0,#0]            ;5848
00069a  2940              CMP      r1,#0x40              ;5848
00069c  d114              BNE      |L72.1736|
00069e  8b41              LDRH     r1,[r0,#0x1a]         ;5850
0006a0  8d82              LDRH     r2,[r0,#0x2c]         ;5850
0006a2  1949              ADDS     r1,r1,r5              ;5850
0006a4  4291              CMP      r1,r2                 ;5850
0006a6  d10f              BNE      |L72.1736|
0006a8  2106              MOVS     r1,#6                 ;5852
0006aa  7001              STRB     r1,[r0,#0]            ;5852
0006ac  8c01              LDRH     r1,[r0,#0x20]         ;5853
0006ae  83c1              STRH     r1,[r0,#0x1e]         ;5853
0006b0  8c81              LDRH     r1,[r0,#0x24]         ;5857
0006b2  220a              MOVS     r2,#0xa               ;5857
0006b4  4351              MULS     r1,r2,r1              ;5857
0006b6  190c              ADDS     r4,r1,r4              ;5857
0006b8  4601              MOV      r1,r0                 ;5862
0006ba  2206              MOVS     r2,#6                 ;5862
0006bc  3126              ADDS     r1,r1,#0x26           ;5862
0006be  300e              ADDS     r0,r0,#0xe            ;5862
0006c0  e000              B        |L72.1732|
                  |L72.1730|
0006c2  e354              B        |L72.3438|
                  |L72.1732|
0006c4  f7fffffe          BL       Knl_MemCpy_Isr
                  |L72.1736|
0006c8  2e0c              CMP      r6,#0xc               ;5865
0006ca  d22b              BCS      |L72.1828|
0006cc  4876              LDR      r0,|L72.2216|
0006ce  00f1              LSLS     r1,r6,#3              ;5867
0006d0  1808              ADDS     r0,r1,r0              ;5867
0006d2  61f8              STR      r0,[r7,#0x1c]         ;5868  ; tblk_LL_pi2
0006d4  6841              LDR      r1,[r0,#4]            ;5868
0006d6  42a1              CMP      r1,r4                 ;5868
0006d8  d31e              BCC      |L72.1816|
0006da  7800              LDRB     r0,[r0,#0]            ;5870
0006dc  2802              CMP      r0,#2                 ;5870
0006de  d209              BCS      |L72.1780|
0006e0  2c00              CMP      r4,#0                 ;5872
0006e2  d007              BEQ      |L72.1780|
0006e4  2000              MOVS     r0,#0                 ;5874
0006e6  81f8              STRH     r0,[r7,#0xe]          ;5874
0006e8  4870              LDR      r0,|L72.2220|
0006ea  1b09              SUBS     r1,r1,r4              ;5875
0006ec  7800              LDRB     r0,[r0,#0]            ;5875  ; LL_Tmr_Ticks_RSV_Wakeup
0006ee  3027              ADDS     r0,r0,#0x27           ;5875
0006f0  4281              CMP      r1,r0                 ;5875
0006f2  d82a              BHI      |L72.1866|
                  |L72.1780|
0006f4  6a38              LDR      r0,[r7,#0x20]         ;5881  ; LL_conn_pi
0006f6  e002              B        |L72.1790|
                  |L72.1784|
0006f8  e1b9              B        |L72.2670|
                  |L72.1786|
0006fa  e07a              B        |L72.2034|
                  |L72.1788|
0006fc  e077              B        |L72.2030|
                  |L72.1790|
0006fe  89c0              LDRH     r0,[r0,#0xe]          ;5881
000700  1904              ADDS     r4,r0,r4              ;5881
000702  f7fffffe          BL       LL_SvPrToutAccu_Incr
000706  6a38              LDR      r0,[r7,#0x20]         ;5882  ; LL_conn_pi
000708  7f01              LDRB     r1,[r0,#0x1c]         ;5882
00070a  7e42              LDRB     r2,[r0,#0x19]         ;5882
00070c  188a              ADDS     r2,r1,r2              ;5882
00070e  4968              LDR      r1,|L72.2224|
000710  1c6d              ADDS     r5,r5,#1              ;5882
000712  5c89              LDRB     r1,[r1,r2]            ;5882
000714  7701              STRB     r1,[r0,#0x1c]         ;5882
000716  b2ed              UXTB     r5,r5                 ;5884
                  |L72.1816|
000718  69f8              LDR      r0,[r7,#0x1c]         ;5900  ; tblk_LL_pi2
00071a  6841              LDR      r1,[r0,#4]            ;5901
00071c  7886              LDRB     r6,[r0,#2]            ;5900
00071e  1a64              SUBS     r4,r4,r1              ;5901
000720  61b8              STR      r0,[r7,#0x18]         ;5841  ; tblk_LL_pi
000722  e7ad              B        |L72.1664|
                  |L72.1828|
000724  2c00              CMP      r4,#0                 ;5889
000726  d10c              BNE      |L72.1858|
000728  6a38              LDR      r0,[r7,#0x20]         ;5891  ; LL_conn_pi
00072a  89c4              LDRH     r4,[r0,#0xe]          ;5891
00072c  f7fffffe          BL       LL_SvPrToutAccu_Incr
000730  6a38              LDR      r0,[r7,#0x20]         ;5892  ; LL_conn_pi
000732  7f01              LDRB     r1,[r0,#0x1c]         ;5892
000734  7e42              LDRB     r2,[r0,#0x19]         ;5892
000736  188a              ADDS     r2,r1,r2              ;5892
000738  495d              LDR      r1,|L72.2224|
00073a  1c6d              ADDS     r5,r5,#1              ;5892
00073c  5c89              LDRB     r1,[r1,r2]            ;5892
00073e  7701              STRB     r1,[r0,#0x1c]         ;5892
000740  b2ed              UXTB     r5,r5                 ;5894
                  |L72.1858|
000742  2000              MOVS     r0,#0                 ;5896
000744  1c6d              ADDS     r5,r5,#1              ;5896
000746  81f8              STRH     r0,[r7,#0xe]          ;5896
000748  b2ed              UXTB     r5,r5                 ;5897
                  |L72.1866|
00074a  6a38              LDR      r0,[r7,#0x20]         ;5904  ; LL_conn_pi
00074c  227d              MOVS     r2,#0x7d              ;5904
00074e  4601              MOV      r1,r0                 ;5904
000750  3180              ADDS     r1,r1,#0x80           ;5904
000752  88cb              LDRH     r3,[r1,#6]            ;5904
000754  0212              LSLS     r2,r2,#8              ;5904
000756  4293              CMP      r3,r2                 ;5904
000758  d305              BCC      |L72.1894|
00075a  212d              MOVS     r1,#0x2d              ;5906
00075c  71f9              STRB     r1,[r7,#7]            ;5906
00075e  2122              MOVS     r1,#0x22              ;5907
000760  3020              ADDS     r0,r0,#0x20           ;5907
000762  7081              STRB     r1,[r0,#2]            ;5907
000764  e14b              B        |L72.2558|
                  |L72.1894|
000766  8889              LDRH     r1,[r1,#4]            ;5910
000768  8a42              LDRH     r2,[r0,#0x12]         ;5910
00076a  4291              CMP      r1,r2                 ;5910
00076c  d224              BCS      |L72.1976|
00076e  8b42              LDRH     r2,[r0,#0x1a]         ;5912
000770  2301              MOVS     r3,#1                 ;5915
000772  1952              ADDS     r2,r2,r5              ;5912
000774  8342              STRH     r2,[r0,#0x1a]         ;5912
000776  69b9              LDR      r1,[r7,#0x18]         ;5913  ; tblk_LL_pi
000778  7938              LDRB     r0,[r7,#4]            ;5913  ; TBlk_Free_LL
00077a  7088              STRB     r0,[r1,#2]            ;5913
00077c  4a4a              LDR      r2,|L72.2216|
00077e  00c0              LSLS     r0,r0,#3              ;5914
000780  1880              ADDS     r0,r0,r2              ;5914
000782  61b8              STR      r0,[r7,#0x18]         ;5915  ; tblk_LL_pi
000784  7003              STRB     r3,[r0,#0]            ;5915
000786  6044              STR      r4,[r0,#4]            ;5917
000788  7880              LDRB     r0,[r0,#2]            ;5917
00078a  00c0              LSLS     r0,r0,#3              ;5917
00078c  1880              ADDS     r0,r0,r2              ;5917
00078e  61f8              STR      r0,[r7,#0x1c]         ;5918  ; tblk_LL_pi2
000790  7881              LDRB     r1,[r0,#2]            ;5918
000792  7139              STRB     r1,[r7,#4]            ;5918
000794  7086              STRB     r6,[r0,#2]            ;5920
000796  2225              MOVS     r2,#0x25              ;5921
000798  6042              STR      r2,[r0,#4]            ;5922
00079a  22ff              MOVS     r2,#0xff              ;5922
00079c  7002              STRB     r2,[r0,#0]            ;5922
00079e  69b9              LDR      r1,[r7,#0x18]         ;5924  ; tblk_LL_pi
0007a0  9800              LDR      r0,[sp,#0]            ;5924
0007a2  7048              STRB     r0,[r1,#1]            ;5924
0007a4  69f9              LDR      r1,[r7,#0x1c]         ;5925  ; tblk_LL_pi2
0007a6  7048              STRB     r0,[r1,#1]            ;5925
0007a8  f7fffffe          BL       LL_EventCounter_Map_Upd
0007ac  6a38              LDR      r0,[r7,#0x20]         ;5927  ; LL_conn_pi
0007ae  89c1              LDRH     r1,[r0,#0xe]          ;5927
0007b0  89f8              LDRH     r0,[r7,#0xe]          ;5927  ; LL_DurRxPktAccu
0007b2  1808              ADDS     r0,r1,r0              ;5927
0007b4  81f8              STRH     r0,[r7,#0xe]          ;5927
0007b6  e2aa              B        |L72.3342|
                  |L72.1976|
0007b8  212d              MOVS     r1,#0x2d              ;5931
0007ba  71f9              STRB     r1,[r7,#7]            ;5931
0007bc  7801              LDRB     r1,[r0,#0]            ;5932
0007be  2903              CMP      r1,#3                 ;5932
0007c0  d002              BEQ      |L72.1992|
0007c2  2942              CMP      r1,#0x42              ;5932
0007c4  d108              BNE      |L72.2008|
0007c6  e003              B        |L72.2000|
                  |L72.1992|
0007c8  213e              MOVS     r1,#0x3e              ;5935
0007ca  3020              ADDS     r0,r0,#0x20           ;5935
0007cc  7081              STRB     r1,[r0,#2]            ;5935
0007ce  e29e              B        |L72.3342|
                  |L72.2000|
0007d0  2122              MOVS     r1,#0x22              ;5939
0007d2  3020              ADDS     r0,r0,#0x20           ;5939
0007d4  7081              STRB     r1,[r0,#2]            ;5939
0007d6  e29a              B        |L72.3342|
                  |L72.2008|
0007d8  2108              MOVS     r1,#8                 ;5943
0007da  3020              ADDS     r0,r0,#0x20           ;5943
0007dc  7081              STRB     r1,[r0,#2]            ;5943
0007de  e296              B        |L72.3342|
                  |L72.2016|
0007e0  69f8              LDR      r0,[r7,#0x1c]         ;5952  ; tblk_LL_pi2
0007e2  6840              LDR      r0,[r0,#4]            ;5952
0007e4  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
0007e8  f7fffffe          BL       LL_TmrBlk_Rls
0007ec  e28f              B        |L72.3342|
                  |L72.2030|
0007ee  2005              MOVS     r0,#5                 ;5958
0007f0  e6c0              B        |L72.1396|
                  |L72.2034|
0007f2  3832              SUBS     r0,r0,#0x32           ;5959
0007f4  2806              CMP      r0,#6                 ;5966
0007f6  d27d              BCS      |L72.2292|
0007f8  0001              MOVS     r1,r0                 ;5966
0007fa  4479              ADD      r1,r1,pc              ;5966
0007fc  7909              LDRB     r1,[r1,#4]            ;5966
0007fe  1849              ADDS     r1,r1,r1              ;5966
000800  448f              ADD      pc,pc,r1              ;5966
000802  0504              DCB      0x05,0x04
000804  04051002          DCB      0x04,0x05,0x10,0x02
000808  e7ea              B        |L72.2016|
                  |L72.2058|
00080a  e3fd              B        |L72.4104|
00080c  e70f              B        |L72.1582|
00080e  69f9              LDR      r1,[r7,#0x1c]         ;5977  ; tblk_LL_pi2
000810  6848              LDR      r0,[r1,#4]            ;5977
000812  2803              CMP      r0,#3                 ;5977
000814  d000              BEQ      |L72.2072|
000816  e712              B        |L72.1598|
                  |L72.2072|
000818  f7fffffe          BL       RF_TxAutoAckOff
00081c  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000820  2036              MOVS     r0,#0x36              ;5981
000822  71f8              STRB     r0,[r7,#7]            ;5981
000824  4d1c              LDR      r5,|L72.2200|
000826  69e8              LDR      r0,[r5,#0x1c]         ;5991  ; tblk_LL_pi2
000828  6840              LDR      r0,[r0,#4]            ;5991
00082a  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
00082e  69a8              LDR      r0,[r5,#0x18]         ;5992  ; tblk_LL_pi
000830  7880              LDRB     r0,[r0,#2]            ;5992
000832  9001              STR      r0,[sp,#4]            ;5993
000834  f7fffffe          BL       LL_TmrBlk_Rls
000838  89ed              LDRH     r5,[r5,#0xe]          ;5994  ; LL_DurRxPktAccu
00083a  f7fffffe          BL       LL_Slv_Win_Width_Incr
00083e  4606              MOV      r6,r0                 ;5995
000840  2700              MOVS     r7,#0                 ;5996
                  |L72.2114|
000842  4815              LDR      r0,|L72.2200|
000844  6a00              LDR      r0,[r0,#0x20]         ;5999  ; LL_conn_pi
000846  4601              MOV      r1,r0                 ;5999
000848  3180              ADDS     r1,r1,#0x80           ;5999
00084a  888a              LDRH     r2,[r1,#4]            ;5999
00084c  8a43              LDRH     r3,[r0,#0x12]         ;5999
00084e  429a              CMP      r2,r3                 ;5999
000850  d27e              BCS      |L72.2384|
000852  88cb              LDRH     r3,[r1,#6]            ;6000
000854  217d              MOVS     r1,#0x7d              ;6000
000856  0209              LSLS     r1,r1,#8              ;6000
000858  428b              CMP      r3,r1                 ;6000
00085a  d279              BCS      |L72.2384|
00085c  7801              LDRB     r1,[r0,#0]            ;6004
00085e  2980              CMP      r1,#0x80              ;6004
000860  d13e              BNE      |L72.2272|
000862  8b41              LDRH     r1,[r0,#0x1a]         ;6006
000864  19c9              ADDS     r1,r1,r7              ;6006
000866  e025              B        |L72.2228|
                  |L72.2152|
                          DCD      ||.bss||+0x78
                  |L72.2156|
                          DCD      ||.bss||+0x7c
                  |L72.2160|
                          DCD      ||.bss||+0xb
                  |L72.2164|
                          DCD      ||.bss||+0x1c
                  |L72.2168|
                          DCD      ||.bss||+0x20
                  |L72.2172|
                          DCD      ||.bss||
                  |L72.2176|
                          DCD      ||.data||+0x45
                  |L72.2180|
                          DCD      ble_device_param+0x2
                  |L72.2184|
                          DCD      ||.bss||+0xb8
                  |L72.2188|
                          DCD      CH_PLL_bank_Table
                  |L72.2192|
                          DCD      ||.bss||+0x404
                  |L72.2196|
                          DCD      ||.bss||+0xd0
                  |L72.2200|
                          DCD      ||.data||
                  |L72.2204|
                          DCD      ble_device_param
                  |L72.2208|
                          DCD      RFIP_reg_MEM
                  |L72.2212|
                          DCD      ||.data||+0x70
                  |L72.2216|
                          DCD      ||.bss||+0x564
                  |L72.2220|
                          DCD      LL_Tmr_Ticks_RSV_Wakeup
                  |L72.2224|
                          DCD      ||.constdata||+0x90
                  |L72.2228|
0008b4  8d82              LDRH     r2,[r0,#0x2c]         ;6006
0008b6  4291              CMP      r1,r2                 ;6006
0008b8  d112              BNE      |L72.2272|
0008ba  2106              MOVS     r1,#6                 ;6008
0008bc  7001              STRB     r1,[r0,#0]            ;6008
0008be  8c01              LDRH     r1,[r0,#0x20]         ;6009
0008c0  83c1              STRH     r1,[r0,#0x1e]         ;6009
0008c2  8c81              LDRH     r1,[r0,#0x24]         ;6010
0008c4  2206              MOVS     r2,#6                 ;6011
0008c6  194d              ADDS     r5,r1,r5              ;6010
0008c8  4601              MOV      r1,r0                 ;6011
0008ca  3126              ADDS     r1,r1,#0x26           ;6011
0008cc  300e              ADDS     r0,r0,#0xe            ;6011
0008ce  f7fffffe          BL       Knl_MemCpy_Isr
0008d2  48fa              LDR      r0,|L72.3260|
0008d4  6a00              LDR      r0,[r0,#0x20]         ;6012  ; LL_conn_pi
0008d6  3020              ADDS     r0,r0,#0x20           ;6012
0008d8  78c0              LDRB     r0,[r0,#3]            ;6012
0008da  42a8              CMP      r0,r5                 ;6012
0008dc  d900              BLS      |L72.2272|
0008de  4605              MOV      r5,r0                 ;6014
                  |L72.2272|
0008e0  9801              LDR      r0,[sp,#4]            ;6018
0008e2  280c              CMP      r0,#0xc               ;6018
0008e4  d245              BCS      |L72.2418|
0008e6  00c1              LSLS     r1,r0,#3              ;6020
0008e8  48f5              LDR      r0,|L72.3264|
0008ea  1808              ADDS     r0,r1,r0              ;6020
0008ec  49f3              LDR      r1,|L72.3260|
0008ee  61c8              STR      r0,[r1,#0x1c]         ;6021  ; tblk_LL_pi2
0008f0  6841              LDR      r1,[r0,#4]            ;6021
0008f2  e000              B        |L72.2294|
                  |L72.2292|
0008f4  e0b9              B        |L72.2666|
                  |L72.2294|
0008f6  468c              MOV      r12,r1                ;6021
0008f8  42a9              CMP      r1,r5                 ;6021
0008fa  d332              BCC      |L72.2402|
0008fc  7800              LDRB     r0,[r0,#0]            ;6023
0008fe  2802              CMP      r0,#2                 ;6023
000900  d216              BCS      |L72.2352|
000902  48f0              LDR      r0,|L72.3268|
000904  7801              LDRB     r1,[r0,#0]            ;6025  ; LL_Tmr_Ticks_RSV_Wakeup
000906  1873              ADDS     r3,r6,r1              ;6025
000908  1cd8              ADDS     r0,r3,#3              ;6025
00090a  42a8              CMP      r0,r5                 ;6025
00090c  d210              BCS      |L72.2352|
00090e  4aeb              LDR      r2,|L72.3260|
000910  1aec              SUBS     r4,r5,r3              ;6027
000912  81d0              STRH     r0,[r2,#0xe]          ;6028
000914  0070              LSLS     r0,r6,#1              ;6029
000916  1846              ADDS     r6,r0,r1              ;6029
000918  6a10              LDR      r0,[r2,#0x20]         ;6030  ; LL_conn_pi
00091a  1ee4              SUBS     r4,r4,#3              ;6030
00091c  7801              LDRB     r1,[r0,#0]            ;6030
00091e  3627              ADDS     r6,r6,#0x27           ;6030
000920  2902              CMP      r1,#2                 ;6030
000922  d101              BNE      |L72.2344|
000924  7ac0              LDRB     r0,[r0,#0xb]          ;6033
000926  1986              ADDS     r6,r0,r6              ;6033
                  |L72.2344|
000928  4660              MOV      r0,r12                ;6033
00092a  1b40              SUBS     r0,r0,r5              ;6043
00092c  42b0              CMP      r0,r6                 ;6043
00092e  d858              BHI      |L72.2530|
                  |L72.2352|
000930  4ee2              LDR      r6,|L72.3260|
000932  6a30              LDR      r0,[r6,#0x20]         ;6049  ; LL_conn_pi
000934  89c0              LDRH     r0,[r0,#0xe]          ;6049
000936  1945              ADDS     r5,r0,r5              ;6049
000938  f7fffffe          BL       LL_SvPrToutAccu_Incr
00093c  6a30              LDR      r0,[r6,#0x20]         ;6050  ; LL_conn_pi
00093e  7f01              LDRB     r1,[r0,#0x1c]         ;6050
000940  7e42              LDRB     r2,[r0,#0x19]         ;6050
000942  188a              ADDS     r2,r1,r2              ;6050
000944  49e0              LDR      r1,|L72.3272|
000946  5c89              LDRB     r1,[r1,r2]            ;6050
000948  7701              STRB     r1,[r0,#0x1c]         ;6050
00094a  6a71              LDR      r1,[r6,#0x24]         ;6050  ; LL_Slv_Win_Width
00094c  6ab0              LDR      r0,[r6,#0x28]         ;6050  ; LL_Slv_Win_Width_Base
00094e  e000              B        |L72.2386|
                  |L72.2384|
000950  e047              B        |L72.2530|
                  |L72.2386|
000952  1809              ADDS     r1,r1,r0              ;6050
000954  48dd              LDR      r0,|L72.3276|
000956  6271              STR      r1,[r6,#0x24]         ;6050  ; LL_Slv_Win_Width
000958  78c0              LDRB     r0,[r0,#3]            ;6050  ; LL_Slv_Win_Width
00095a  1c80              ADDS     r0,r0,#2              ;6050
00095c  1c7f              ADDS     r7,r7,#1              ;6050
00095e  b2c6              UXTB     r6,r0                 ;6050
000960  b2ff              UXTB     r7,r7                 ;6053
                  |L72.2402|
000962  49d6              LDR      r1,|L72.3260|
000964  69c8              LDR      r0,[r1,#0x1c]         ;6091  ; tblk_LL_pi2
000966  7883              LDRB     r3,[r0,#2]            ;6091
000968  9301              STR      r3,[sp,#4]            ;6092
00096a  6843              LDR      r3,[r0,#4]            ;6092
00096c  6188              STR      r0,[r1,#0x18]         ;5997  ; tblk_LL_pi
00096e  1aed              SUBS     r5,r5,r3              ;6092
000970  e767              B        |L72.2114|
                  |L72.2418|
000972  4cd4              LDR      r4,|L72.3268|
000974  7820              LDRB     r0,[r4,#0]            ;6059  ; LL_Tmr_Ticks_RSV_Wakeup
000976  1831              ADDS     r1,r6,r0              ;6059
000978  3108              ADDS     r1,r1,#8              ;6059
00097a  42a9              CMP      r1,r5                 ;6059
00097c  d302              BCC      |L72.2436|
00097e  1a29              SUBS     r1,r5,r0              ;6061
000980  3908              SUBS     r1,r1,#8              ;6061
000982  b28e              UXTH     r6,r1                 ;6061
                  |L72.2436|
000984  1830              ADDS     r0,r6,r0              ;6064
000986  1cc0              ADDS     r0,r0,#3              ;6064
000988  42a8              CMP      r0,r5                 ;6064
00098a  d316              BCC      |L72.2490|
00098c  4ecb              LDR      r6,|L72.3260|
00098e  6a30              LDR      r0,[r6,#0x20]         ;6066  ; LL_conn_pi
000990  89c0              LDRH     r0,[r0,#0xe]          ;6066
000992  1945              ADDS     r5,r0,r5              ;6066
000994  f7fffffe          BL       LL_SvPrToutAccu_Incr
000998  6a30              LDR      r0,[r6,#0x20]         ;6067  ; LL_conn_pi
00099a  7f01              LDRB     r1,[r0,#0x1c]         ;6067
00099c  7e42              LDRB     r2,[r0,#0x19]         ;6067
00099e  188a              ADDS     r2,r1,r2              ;6067
0009a0  49c9              LDR      r1,|L72.3272|
0009a2  5c89              LDRB     r1,[r1,r2]            ;6067
0009a4  7701              STRB     r1,[r0,#0x1c]         ;6067
0009a6  6ab1              LDR      r1,[r6,#0x28]         ;6067  ; LL_Slv_Win_Width_Base
0009a8  6a70              LDR      r0,[r6,#0x24]         ;6067  ; LL_Slv_Win_Width
0009aa  1840              ADDS     r0,r0,r1              ;6067
0009ac  6270              STR      r0,[r6,#0x24]         ;6067  ; LL_Slv_Win_Width
0009ae  48c7              LDR      r0,|L72.3276|
0009b0  78c0              LDRB     r0,[r0,#3]            ;6067  ; LL_Slv_Win_Width
0009b2  1c80              ADDS     r0,r0,#2              ;6067
0009b4  1c7f              ADDS     r7,r7,#1              ;6067
0009b6  b2c6              UXTB     r6,r0                 ;6067
0009b8  b2ff              UXTB     r7,r7                 ;6070
                  |L72.2490|
0009ba  7821              LDRB     r1,[r4,#0]            ;6072  ; LL_Tmr_Ticks_RSV_Wakeup
0009bc  4bbf              LDR      r3,|L72.3260|
0009be  1870              ADDS     r0,r6,r1              ;6072
0009c0  1a2c              SUBS     r4,r5,r0              ;6072
0009c2  1cc0              ADDS     r0,r0,#3              ;6073
0009c4  81d8              STRH     r0,[r3,#0xe]          ;6073
0009c6  0070              LSLS     r0,r6,#1              ;6074
0009c8  1840              ADDS     r0,r0,r1              ;6074
0009ca  3027              ADDS     r0,r0,#0x27           ;6074
0009cc  b286              UXTH     r6,r0                 ;6074
0009ce  6a18              LDR      r0,[r3,#0x20]         ;6075  ; LL_conn_pi
0009d0  1ee4              SUBS     r4,r4,#3              ;6075
0009d2  7801              LDRB     r1,[r0,#0]            ;6075
0009d4  2902              CMP      r1,#2                 ;6075
0009d6  d102              BNE      |L72.2526|
0009d8  7ac0              LDRB     r0,[r0,#0xb]          ;6078
0009da  1980              ADDS     r0,r0,r6              ;6078
0009dc  b286              UXTH     r6,r0                 ;6078
                  |L72.2526|
0009de  1c7f              ADDS     r7,r7,#1              ;6078
0009e0  b2ff              UXTB     r7,r7                 ;6088
                  |L72.2530|
0009e2  4db6              LDR      r5,|L72.3260|
0009e4  227d              MOVS     r2,#0x7d              ;6095
0009e6  6a28              LDR      r0,[r5,#0x20]         ;6095  ; LL_conn_pi
0009e8  0212              LSLS     r2,r2,#8              ;6095
0009ea  4601              MOV      r1,r0                 ;6095
0009ec  3180              ADDS     r1,r1,#0x80           ;6095
0009ee  88cb              LDRH     r3,[r1,#6]            ;6095
0009f0  4293              CMP      r3,r2                 ;6095
0009f2  d305              BCC      |L72.2560|
0009f4  2137              MOVS     r1,#0x37              ;6097
0009f6  71e9              STRB     r1,[r5,#7]            ;6097
0009f8  2122              MOVS     r1,#0x22              ;6098
0009fa  3020              ADDS     r0,r0,#0x20           ;6098
0009fc  7081              STRB     r1,[r0,#2]            ;6098
                  |L72.2558|
0009fe  e1b2              B        |L72.3430|
                  |L72.2560|
000a00  8889              LDRH     r1,[r1,#4]            ;6101
000a02  8a42              LDRH     r2,[r0,#0x12]         ;6101
000a04  4291              CMP      r1,r2                 ;6101
000a06  d226              BCS      |L72.2646|
000a08  8b41              LDRH     r1,[r0,#0x1a]         ;6103
000a0a  4aad              LDR      r2,|L72.3264|
000a0c  19c9              ADDS     r1,r1,r7              ;6103
000a0e  8341              STRH     r1,[r0,#0x1a]         ;6103
000a10  69a9              LDR      r1,[r5,#0x18]         ;6104  ; tblk_LL_pi
000a12  7928              LDRB     r0,[r5,#4]            ;6104  ; TBlk_Free_LL
000a14  7088              STRB     r0,[r1,#2]            ;6104
000a16  00c0              LSLS     r0,r0,#3              ;6105
000a18  1880              ADDS     r0,r0,r2              ;6105
000a1a  2101              MOVS     r1,#1                 ;6106
000a1c  61a8              STR      r0,[r5,#0x18]         ;6106  ; tblk_LL_pi
000a1e  7001              STRB     r1,[r0,#0]            ;6106
000a20  6044              STR      r4,[r0,#4]            ;6108
000a22  7880              LDRB     r0,[r0,#2]            ;6108
000a24  00c0              LSLS     r0,r0,#3              ;6108
000a26  1880              ADDS     r0,r0,r2              ;6108
000a28  61e8              STR      r0,[r5,#0x1c]         ;6109  ; tblk_LL_pi2
000a2a  7881              LDRB     r1,[r0,#2]            ;6109
000a2c  7129              STRB     r1,[r5,#4]            ;6109
000a2e  9901              LDR      r1,[sp,#4]            ;6111
000a30  7081              STRB     r1,[r0,#2]            ;6111
000a32  21ff              MOVS     r1,#0xff              ;6113
000a34  6046              STR      r6,[r0,#4]            ;6113
000a36  7001              STRB     r1,[r0,#0]            ;6113
000a38  69a9              LDR      r1,[r5,#0x18]         ;6115  ; tblk_LL_pi
000a3a  9800              LDR      r0,[sp,#0]            ;6115
000a3c  7048              STRB     r0,[r1,#1]            ;6115
000a3e  69e9              LDR      r1,[r5,#0x1c]         ;6116  ; tblk_LL_pi2
000a40  9800              LDR      r0,[sp,#0]            ;6116
000a42  7048              STRB     r0,[r1,#1]            ;6116
000a44  9800              LDR      r0,[sp,#0]            ;6117
000a46  f7fffffe          BL       LL_EventCounter_Map_Upd
000a4a  6a28              LDR      r0,[r5,#0x20]         ;6118  ; LL_conn_pi
000a4c  89e9              LDRH     r1,[r5,#0xe]          ;6118  ; LL_DurRxPktAccu
000a4e  89c0              LDRH     r0,[r0,#0xe]          ;6118
000a50  1840              ADDS     r0,r0,r1              ;6118
000a52  81e8              STRH     r0,[r5,#0xe]          ;6118
000a54  e15b              B        |L72.3342|
                  |L72.2646|
000a56  2137              MOVS     r1,#0x37              ;6122
000a58  71e9              STRB     r1,[r5,#7]            ;6122
000a5a  7801              LDRB     r1,[r0,#0]            ;6123
000a5c  2902              CMP      r1,#2                 ;6123
000a5e  d100              BNE      |L72.2658|
000a60  e6b2              B        |L72.1992|
                  |L72.2658|
000a62  2942              CMP      r1,#0x42              ;6123
000a64  d000              BEQ      |L72.2664|
000a66  e6b7              B        |L72.2008|
                  |L72.2664|
000a68  e6b2              B        |L72.2000|
                  |L72.2666|
000a6a  2006              MOVS     r0,#6                 ;6149
000a6c  e582              B        |L72.1396|
                  |L72.2670|
000a6e  2805              CMP      r0,#5                 ;6157
000a70  d005              BEQ      |L72.2686|
000a72  2806              CMP      r0,#6                 ;6157
000a74  d075              BEQ      |L72.2914|
000a76  2807              CMP      r0,#7                 ;6157
000a78  d074              BEQ      |L72.2916|
000a7a  2009              MOVS     r0,#9                 ;6389
000a7c  e57a              B        |L72.1396|
                  |L72.2686|
000a7e  79f8              LDRB     r0,[r7,#7]            ;6160  ; status_LL_Tmr
000a80  280c              CMP      r0,#0xc               ;6160
000a82  d070              BEQ      |L72.2918|
000a84  280e              CMP      r0,#0xe               ;6160
000a86  d006              BEQ      |L72.2710|
000a88  280f              CMP      r0,#0xf               ;6160
000a8a  d06d              BEQ      |L72.2920|
000a8c  69f9              LDR      r1,[r7,#0x1c]         ;6268  ; tblk_LL_pi2
000a8e  6848              LDR      r0,[r1,#4]            ;6268
000a90  2801              CMP      r0,#1                 ;6268
000a92  d06a              BEQ      |L72.2922|
000a94  e0ea              B        |L72.3180|
                  |L72.2710|
000a96  69f8              LDR      r0,[r7,#0x1c]         ;6163  ; tblk_LL_pi2
000a98  6840              LDR      r0,[r0,#4]            ;6163
000a9a  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000a9e  69b8              LDR      r0,[r7,#0x18]         ;6164  ; tblk_LL_pi
000aa0  7880              LDRB     r0,[r0,#2]            ;6164
000aa2  9001              STR      r0,[sp,#4]            ;6165
000aa4  f7fffffe          BL       LL_TmrBlk_Rls
000aa8  6a38              LDR      r0,[r7,#0x20]         ;6166  ; LL_conn_pi
000aaa  2100              MOVS     r1,#0                 ;6167
000aac  8983              LDRH     r3,[r0,#0xc]          ;6166
000aae  8181              STRH     r1,[r0,#0xc]          ;6167
000ab0  1ddb              ADDS     r3,r3,#7              ;6167
000ab2  f7fffffe          BL       LL_Slv_Win_Width_Incr
000ab6  4983              LDR      r1,|L72.3268|
000ab8  2200              MOVS     r2,#0                 ;6169
000aba  7809              LDRB     r1,[r1,#0]            ;5359
000abc  9100              STR      r1,[sp,#0]            ;5359
000abe  3127              ADDS     r1,r1,#0x27           ;5359
000ac0  9103              STR      r1,[sp,#0xc]          ;5348
000ac2  497e              LDR      r1,|L72.3260|
000ac4  6a89              LDR      r1,[r1,#0x28]         ;5348
000ac6  9102              STR      r1,[sp,#8]            ;5348
000ac8  497c              LDR      r1,|L72.3260|
000aca  6a09              LDR      r1,[r1,#0x20]         ;5348
000acc  460e              MOV      r6,r1                 ;5843
000ace  3680              ADDS     r6,r6,#0x80           ;5843
000ad0  46b4              MOV      r12,r6                ;5843
                  |L72.2770|
000ad2  4665              MOV      r5,r12                ;5843
000ad4  88ad              LDRH     r5,[r5,#4]            ;6172
000ad6  9506              STR      r5,[sp,#0x18]         ;6172
000ad8  8a4e              LDRH     r6,[r1,#0x12]         ;6172
000ada  42b5              CMP      r5,r6                 ;6172
000adc  d272              BCS      |L72.3012|
000ade  9d01              LDR      r5,[sp,#4]            ;6176
000ae0  2d0c              CMP      r5,#0xc               ;6176
000ae2  d243              BCS      |L72.2924|
000ae4  00ee              LSLS     r6,r5,#3              ;6178
000ae6  4d76              LDR      r5,|L72.3264|
000ae8  1975              ADDS     r5,r6,r5              ;6178
000aea  4e74              LDR      r6,|L72.3260|
000aec  61f5              STR      r5,[r6,#0x1c]         ;6179  ; tblk_LL_pi2
000aee  686e              LDR      r6,[r5,#4]            ;6179
000af0  9605              STR      r6,[sp,#0x14]         ;6179
000af2  429e              CMP      r6,r3                 ;6179
000af4  d32e              BCC      |L72.2900|
000af6  782e              LDRB     r6,[r5,#0]            ;6181
000af8  2e02              CMP      r6,#2                 ;6181
000afa  d213              BCS      |L72.2852|
000afc  9e00              LDR      r6,[sp,#0]            ;6183
000afe  1986              ADDS     r6,r0,r6              ;6183
000b00  9604              STR      r6,[sp,#0x10]         ;6183
000b02  1cf6              ADDS     r6,r6,#3              ;6183
000b04  429e              CMP      r6,r3                 ;6183
000b06  d20d              BCS      |L72.2852|
000b08  4f6c              LDR      r7,|L72.3260|
000b0a  9c04              LDR      r4,[sp,#0x10]         ;6185
000b0c  81fe              STRH     r6,[r7,#0xe]          ;6186
000b0e  7ace              LDRB     r6,[r1,#0xb]          ;6187
000b10  0040              LSLS     r0,r0,#1              ;6187
000b12  1830              ADDS     r0,r6,r0              ;6187
000b14  9e03              LDR      r6,[sp,#0xc]          ;6187
000b16  1b1c              SUBS     r4,r3,r4              ;6185
000b18  1980              ADDS     r0,r0,r6              ;6187
000b1a  9e05              LDR      r6,[sp,#0x14]         ;6188
000b1c  1ee4              SUBS     r4,r4,#3              ;6188
000b1e  1af6              SUBS     r6,r6,r3              ;6188
000b20  4286              CMP      r6,r0                 ;6188
000b22  d84f              BHI      |L72.3012|
                  |L72.2852|
000b24  89c8              LDRH     r0,[r1,#0xe]          ;6194
000b26  8bce              LDRH     r6,[r1,#0x1e]         ;6195
000b28  18c3              ADDS     r3,r0,r3              ;6194
000b2a  9806              LDR      r0,[sp,#0x18]         ;6195
000b2c  4f63              LDR      r7,|L72.3260|
000b2e  1980              ADDS     r0,r0,r6              ;6195
000b30  4666              MOV      r6,r12                ;6195
000b32  80b0              STRH     r0,[r6,#4]            ;6195
000b34  7f08              LDRB     r0,[r1,#0x1c]         ;6195
000b36  7e4e              LDRB     r6,[r1,#0x19]         ;6195
000b38  1986              ADDS     r6,r0,r6              ;6195
000b3a  4863              LDR      r0,|L72.3272|
000b3c  5d80              LDRB     r0,[r0,r6]            ;6195
000b3e  7708              STRB     r0,[r1,#0x1c]         ;6195
000b40  6a78              LDR      r0,[r7,#0x24]         ;6195  ; LL_Slv_Win_Width
000b42  9e02              LDR      r6,[sp,#8]            ;6195
000b44  1980              ADDS     r0,r0,r6              ;6195
000b46  6278              STR      r0,[r7,#0x24]         ;6195  ; LL_Slv_Win_Width
000b48  4860              LDR      r0,|L72.3276|
000b4a  78c0              LDRB     r0,[r0,#3]            ;6195  ; LL_Slv_Win_Width
000b4c  1c80              ADDS     r0,r0,#2              ;6195
000b4e  1c52              ADDS     r2,r2,#1              ;6195
000b50  b2c0              UXTB     r0,r0                 ;6195
000b52  b2d2              UXTB     r2,r2                 ;6198
                  |L72.2900|
000b54  78ae              LDRB     r6,[r5,#2]            ;6217
000b56  9601              STR      r6,[sp,#4]            ;6218
000b58  686e              LDR      r6,[r5,#4]            ;6218
000b5a  1b9b              SUBS     r3,r3,r6              ;6218
000b5c  4e57              LDR      r6,|L72.3260|
000b5e  61b5              STR      r5,[r6,#0x18]         ;6170  ; tblk_LL_pi
000b60  e7b7              B        |L72.2770|
                  |L72.2914|
000b62  e073              B        |L72.3148|
                  |L72.2916|
000b64  e0bd              B        |L72.3298|
                  |L72.2918|
000b66  e066              B        |L72.3126|
                  |L72.2920|
000b68  e060              B        |L72.3116|
                  |L72.2922|
000b6a  e06c              B        |L72.3142|
                  |L72.2924|
000b6c  9c00              LDR      r4,[sp,#0]            ;6203
000b6e  1904              ADDS     r4,r0,r4              ;6203
000b70  1ce4              ADDS     r4,r4,#3              ;6203
000b72  429c              CMP      r4,r3                 ;6203
000b74  d318              BCC      |L72.2984|
000b76  89c8              LDRH     r0,[r1,#0xe]          ;6205
000b78  8bcd              LDRH     r5,[r1,#0x1e]         ;6206
000b7a  18c3              ADDS     r3,r0,r3              ;6205
000b7c  4660              MOV      r0,r12                ;6205
000b7e  8880              LDRH     r0,[r0,#4]            ;6206
000b80  4c4e              LDR      r4,|L72.3260|
000b82  1940              ADDS     r0,r0,r5              ;6206
000b84  4665              MOV      r5,r12                ;6206
000b86  80a8              STRH     r0,[r5,#4]            ;6206
000b88  7f08              LDRB     r0,[r1,#0x1c]         ;6206
000b8a  7e4d              LDRB     r5,[r1,#0x19]         ;6206
000b8c  1945              ADDS     r5,r0,r5              ;6206
000b8e  484e              LDR      r0,|L72.3272|
000b90  5d40              LDRB     r0,[r0,r5]            ;6206
000b92  7708              STRB     r0,[r1,#0x1c]         ;6206
000b94  6a60              LDR      r0,[r4,#0x24]         ;6206  ; LL_Slv_Win_Width
000b96  9d02              LDR      r5,[sp,#8]            ;6206
000b98  1940              ADDS     r0,r0,r5              ;6206
000b9a  6260              STR      r0,[r4,#0x24]         ;6206  ; LL_Slv_Win_Width
000b9c  484b              LDR      r0,|L72.3276|
000b9e  78c0              LDRB     r0,[r0,#3]            ;6206  ; LL_Slv_Win_Width
000ba0  1c80              ADDS     r0,r0,#2              ;6206
000ba2  1c52              ADDS     r2,r2,#1              ;6206
000ba4  b2c0              UXTB     r0,r0                 ;6206
000ba6  b2d2              UXTB     r2,r2                 ;6209
                  |L72.2984|
000ba8  9c00              LDR      r4,[sp,#0]            ;6211
000baa  1c52              ADDS     r2,r2,#1              ;6213
000bac  1905              ADDS     r5,r0,r4              ;6211
000bae  1b5c              SUBS     r4,r3,r5              ;6211
000bb0  4b42              LDR      r3,|L72.3260|
000bb2  1ced              ADDS     r5,r5,#3              ;6212
000bb4  81dd              STRH     r5,[r3,#0xe]          ;6212
000bb6  7acd              LDRB     r5,[r1,#0xb]          ;6213
000bb8  0040              LSLS     r0,r0,#1              ;6213
000bba  182d              ADDS     r5,r5,r0              ;6213
000bbc  9803              LDR      r0,[sp,#0xc]          ;6213
000bbe  b2d2              UXTB     r2,r2                 ;6214
000bc0  1828              ADDS     r0,r5,r0              ;6213
000bc2  1ee4              SUBS     r4,r4,#3              ;6214
                  |L72.3012|
000bc4  4665              MOV      r5,r12                ;6221
000bc6  88ad              LDRH     r5,[r5,#4]            ;6221
000bc8  8a4e              LDRH     r6,[r1,#0x12]         ;6221
000bca  4b3c              LDR      r3,|L72.3260|
000bcc  42b5              CMP      r5,r6                 ;6221
000bce  d226              BCS      |L72.3102|
000bd0  8b4d              LDRH     r5,[r1,#0x1a]         ;6223
000bd2  18aa              ADDS     r2,r5,r2              ;6223
000bd4  834a              STRH     r2,[r1,#0x1a]         ;6223
000bd6  699a              LDR      r2,[r3,#0x18]         ;6224  ; tblk_LL_pi
000bd8  7919              LDRB     r1,[r3,#4]            ;6224  ; TBlk_Free_LL
000bda  7091              STRB     r1,[r2,#2]            ;6224
000bdc  4d38              LDR      r5,|L72.3264|
000bde  00c9              LSLS     r1,r1,#3              ;6225
000be0  1949              ADDS     r1,r1,r5              ;6225
000be2  2201              MOVS     r2,#1                 ;6226
000be4  6199              STR      r1,[r3,#0x18]         ;6226  ; tblk_LL_pi
000be6  700a              STRB     r2,[r1,#0]            ;6226
000be8  604c              STR      r4,[r1,#4]            ;6228
000bea  7889              LDRB     r1,[r1,#2]            ;6228
000bec  00c9              LSLS     r1,r1,#3              ;6228
000bee  1949              ADDS     r1,r1,r5              ;6228
000bf0  61d9              STR      r1,[r3,#0x1c]         ;6229  ; tblk_LL_pi2
000bf2  788a              LDRB     r2,[r1,#2]            ;6229
000bf4  711a              STRB     r2,[r3,#4]            ;6229
000bf6  9a01              LDR      r2,[sp,#4]            ;6231
000bf8  708a              STRB     r2,[r1,#2]            ;6231
000bfa  6048              STR      r0,[r1,#4]            ;6233
000bfc  20ff              MOVS     r0,#0xff              ;6233
000bfe  7008              STRB     r0,[r1,#0]            ;6233
000c00  4833              LDR      r0,|L72.3280|
000c02  699a              LDR      r2,[r3,#0x18]         ;6235  ; tblk_LL_pi
000c04  7841              LDRB     r1,[r0,#1]            ;6235  ; LL_Adv_Para
000c06  7051              STRB     r1,[r2,#1]            ;6235
000c08  69da              LDR      r2,[r3,#0x1c]         ;6236  ; tblk_LL_pi2
000c0a  7841              LDRB     r1,[r0,#1]            ;6236  ; LL_Adv_Para
000c0c  7051              STRB     r1,[r2,#1]            ;6236
000c0e  2105              MOVS     r1,#5                 ;6237
000c10  7041              STRB     r1,[r0,#1]            ;6237
000c12  6a18              LDR      r0,[r3,#0x20]         ;6238  ; LL_conn_pi
000c14  89d9              LDRH     r1,[r3,#0xe]          ;6238  ; LL_DurRxPktAccu
000c16  89c0              LDRH     r0,[r0,#0xe]          ;6238
000c18  1840              ADDS     r0,r0,r1              ;6238
000c1a  81d8              STRH     r0,[r3,#0xe]          ;6238
000c1c  e001              B        |L72.3106|
                  |L72.3102|
000c1e  2001              MOVS     r0,#1                 ;6242
000c20  7008              STRB     r0,[r1,#0]            ;6242
                  |L72.3106|
000c22  f7fffffe          BL       LL_TmrBlk_Pt_PairRst
000c26  200f              MOVS     r0,#0xf               ;6245
000c28  71d8              STRB     r0,[r3,#7]            ;6245
000c2a  e3f1              B        |L72.5136|
                  |L72.3116|
000c2c  69f8              LDR      r0,[r7,#0x1c]         ;6249  ; tblk_LL_pi2
000c2e  6840              LDR      r0,[r0,#4]            ;6249
000c30  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000c34  e007              B        |L72.3142|
                  |L72.3126|
000c36  69f9              LDR      r1,[r7,#0x1c]         ;6254  ; tblk_LL_pi2
000c38  6848              LDR      r0,[r1,#4]            ;6254
000c3a  2801              CMP      r0,#1                 ;6254
000c3c  d116              BNE      |L72.3180|
000c3e  f7fffffe          BL       RF_TxAutoAckOff
000c42  f7fffffe          BL       rafael_reset_phy_fsm_Isr
                  |L72.3142|
000c46  f7fffffe          BL       LL_TmrBlk_Rls
000c4a  e3e1              B        |L72.5136|
                  |L72.3148|
000c4c  79f8              LDRB     r0,[r7,#7]            ;6282  ; status_LL_Tmr
000c4e  3814              SUBS     r0,r0,#0x14           ;6282
000c50  2805              CMP      r0,#5                 ;6282
000c52  d244              BCS      |L72.3294|
000c54  0001              MOVS     r1,r0                 ;6282
000c56  4479              ADD      r1,r1,pc              ;6282
000c58  7909              LDRB     r1,[r1,#4]            ;6282
000c5a  1849              ADDS     r1,r1,r1              ;6282
000c5c  448f              ADD      pc,pc,r1              ;6282
000c5e  0283              DCB      0x02,0x83
000c60  16161600          DCB      0x16,0x16,0x16,0x00
000c64  69f9              LDR      r1,[r7,#0x1c]         ;6285  ; tblk_LL_pi2
000c66  6848              LDR      r0,[r1,#4]            ;6285
000c68  2806              CMP      r0,#6                 ;6285
000c6a  d004              BEQ      |L72.3190|
                  |L72.3180|
000c6c  1e40              SUBS     r0,r0,#1              ;6285
000c6e  6048              STR      r0,[r1,#4]            ;6296
000c70  f7fffffe          BL       LLTimer_TmrRefUpd_Isr
000c74  e3cc              B        |L72.5136|
                  |L72.3190|
000c76  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000c7a  f7fffffe          BL       RF_TxAutoAckOff
000c7e  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000c82  f7fffffe          BL       LL_TmrBlk_Rls
000c86  2018              MOVS     r0,#0x18              ;6291
000c88  71f8              STRB     r0,[r7,#7]            ;6291
000c8a  e3c1              B        |L72.5136|
000c8c  69f8              LDR      r0,[r7,#0x1c]         ;6304  ; tblk_LL_pi2
000c8e  6844              LDR      r4,[r0,#4]            ;6304
000c90  2c06              CMP      r4,#6                 ;6304
000c92  d021              BEQ      |L72.3288|
000c94  2107              MOVS     r1,#7                 ;6312
000c96  6041              STR      r1,[r0,#4]            ;6313
000c98  4608              MOV      r0,r1                 ;6313
000c9a  1fe4              SUBS     r4,r4,#7              ;6313
                  |L72.3228|
000c9c  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000ca0  f7fffffe          BL       LL_TmrBlk_Rls
000ca4  69f8              LDR      r0,[r7,#0x1c]         ;6316  ; tblk_LL_pi2
000ca6  2800              CMP      r0,#0                 ;6316
000ca8  d002              BEQ      |L72.3248|
000caa  6841              LDR      r1,[r0,#4]            ;6318
000cac  1909              ADDS     r1,r1,r4              ;6318
000cae  6041              STR      r1,[r0,#4]            ;6318
                  |L72.3248|
000cb0  4808              LDR      r0,|L72.3284|
000cb2  8901              LDRH     r1,[r0,#8]            ;6320  ; LL_Scan_Para
000cb4  1909              ADDS     r1,r1,r4              ;6320
000cb6  8101              STRH     r1,[r0,#8]            ;6320
000cb8  e3aa              B        |L72.5136|
000cba  0000              DCW      0x0000
                  |L72.3260|
                          DCD      ||.data||
                  |L72.3264|
                          DCD      ||.bss||+0x564
                  |L72.3268|
                          DCD      LL_Tmr_Ticks_RSV_Wakeup
                  |L72.3272|
                          DCD      ||.constdata||+0x90
                  |L72.3276|
                          DCD      ||.data||+0x24
                  |L72.3280|
                          DCD      ||.bss||
                  |L72.3284|
                          DCD      ||.bss||+0xb8
                  |L72.3288|
000cd8  2400              MOVS     r4,#0                 ;6306
000cda  2006              MOVS     r0,#6                 ;6307
000cdc  e7de              B        |L72.3228|
                  |L72.3294|
000cde  2007              MOVS     r0,#7                 ;6324
000ce0  e448              B        |L72.1396|
                  |L72.3298|
000ce2  79f8              LDRB     r0,[r7,#7]            ;6331  ; status_LL_Tmr
000ce4  281e              CMP      r0,#0x1e              ;6331
000ce6  d018              BEQ      |L72.3354|
000ce8  281f              CMP      r0,#0x1f              ;6331
000cea  d011              BEQ      |L72.3344|
000cec  2820              CMP      r0,#0x20              ;6331
000cee  d003              BEQ      |L72.3320|
000cf0  2821              CMP      r0,#0x21              ;6331
000cf2  d022              BEQ      |L72.3386|
000cf4  2008              MOVS     r0,#8                 ;6382
000cf6  e43d              B        |L72.1396|
                  |L72.3320|
000cf8  2021              MOVS     r0,#0x21              ;6334
000cfa  71f8              STRB     r0,[r7,#7]            ;6334
000cfc  69f8              LDR      r0,[r7,#0x1c]         ;6335  ; tblk_LL_pi2
000cfe  6840              LDR      r0,[r0,#4]            ;6335
000d00  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000d04  f7fffffe          BL       LL_TmrBlk_Rls
000d08  6a38              LDR      r0,[r7,#0x20]         ;6337  ; LL_conn_pi
000d0a  8a01              LDRH     r1,[r0,#0x10]         ;6337
000d0c  8181              STRH     r1,[r0,#0xc]          ;6337
                  |L72.3342|
000d0e  e2e6              B        |L72.4830|
                  |L72.3344|
000d10  69f8              LDR      r0,[r7,#0x1c]         ;6342  ; tblk_LL_pi2
000d12  6841              LDR      r1,[r0,#4]            ;6342
000d14  1e49              SUBS     r1,r1,#1              ;6342
000d16  6041              STR      r1,[r0,#4]            ;6344
000d18  e005              B        |L72.3366|
                  |L72.3354|
000d1a  69f9              LDR      r1,[r7,#0x1c]         ;6347  ; tblk_LL_pi2
000d1c  6848              LDR      r0,[r1,#4]            ;6347
000d1e  2805              CMP      r0,#5                 ;6347
000d20  d004              BEQ      |L72.3372|
000d22  1e40              SUBS     r0,r0,#1              ;6347
000d24  6048              STR      r0,[r1,#4]            ;6356
                  |L72.3366|
000d26  f7fffffe          BL       LLTimer_TmrRefUpd_Isr
000d2a  e371              B        |L72.5136|
                  |L72.3372|
000d2c  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000d30  f7fffffe          BL       RF_TxAutoAckOff
000d34  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000d38  e785              B        |L72.3142|
                  |L72.3386|
000d3a  69f8              LDR      r0,[r7,#0x1c]         ;6362  ; tblk_LL_pi2
000d3c  6844              LDR      r4,[r0,#4]            ;6362
000d3e  2c05              CMP      r4,#5                 ;6362
000d40  d012              BEQ      |L72.3432|
000d42  2106              MOVS     r1,#6                 ;6370
000d44  6041              STR      r1,[r0,#4]            ;6371
000d46  4608              MOV      r0,r1                 ;6371
000d48  1fa4              SUBS     r4,r4,#6              ;6371
                  |L72.3402|
000d4a  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000d4e  f7fffffe          BL       LL_TmrBlk_Rls
000d52  69f8              LDR      r0,[r7,#0x1c]         ;6374  ; tblk_LL_pi2
000d54  2800              CMP      r0,#0                 ;6374
000d56  d002              BEQ      |L72.3422|
000d58  6841              LDR      r1,[r0,#4]            ;6376
000d5a  1909              ADDS     r1,r1,r4              ;6376
000d5c  6041              STR      r1,[r0,#4]            ;6376
                  |L72.3422|
000d5e  48f7              LDR      r0,|L72.4412|
000d60  8841              LDRH     r1,[r0,#2]            ;6378  ; LL_Init_Para
000d62  1909              ADDS     r1,r1,r4              ;6378
000d64  8041              STRH     r1,[r0,#2]            ;6378
                  |L72.3430|
000d66  e353              B        |L72.5136|
                  |L72.3432|
000d68  2400              MOVS     r4,#0                 ;6364
000d6a  2005              MOVS     r0,#5                 ;6365
000d6c  e7ed              B        |L72.3402|
                  |L72.3438|
000d6e  48f4              LDR      r0,|L72.4416|
000d70  2e05              CMP      r6,#5                 ;6397
000d72  79c0              LDRB     r0,[r0,#7]            ;5474
000d74  d22a              BCS      |L72.3532|
000d76  49f2              LDR      r1,|L72.4416|
000d78  2833              CMP      r0,#0x33              ;6399
000d7a  d00c              BEQ      |L72.3478|
000d7c  dc06              BGT      |L72.3468|
000d7e  2828              CMP      r0,#0x28              ;6399
000d80  d009              BEQ      |L72.3478|
000d82  282b              CMP      r0,#0x2b              ;6399
000d84  d007              BEQ      |L72.3478|
000d86  282d              CMP      r0,#0x2d              ;6399
000d88  d11b              BNE      |L72.3522|
000d8a  e008              B        |L72.3486|
                  |L72.3468|
000d8c  2834              CMP      r0,#0x34              ;6399
000d8e  d002              BEQ      |L72.3478|
000d90  2837              CMP      r0,#0x37              ;6399
000d92  d116              BNE      |L72.3522|
000d94  e003              B        |L72.3486|
                  |L72.3478|
000d96  200a              MOVS     r0,#0xa               ;6405
000d98  f7fffffe          BL       ErrorEntry
000d9c  e013              B        |L72.3526|
                  |L72.3486|
000d9e  6a08              LDR      r0,[r1,#0x20]         ;6410  ; LL_conn_pi
000da0  3020              ADDS     r0,r0,#0x20           ;6410
000da2  7884              LDRB     r4,[r0,#2]            ;6410
000da4  f7fffffe          BL       GetMsgBlk_Isr
000da8  72c4              STRB     r4,[r0,#0xb]          ;6410
000daa  7286              STRB     r6,[r0,#0xa]          ;6410
000dac  2163              MOVS     r1,#0x63              ;6410
000dae  7101              STRB     r1,[r0,#4]            ;6410
000db0  2104              MOVS     r1,#4                 ;6410
000db2  f7fffffe          BL       SndMsgBlk_Isr
000db6  4630              MOV      r0,r6                 ;6411
000db8  f7fffffe          BL       LL_ReleaseConnID_Isr
000dbc  4630              MOV      r0,r6                 ;6412
000dbe  f7fffffe          BL       LL_MsgBlk_LL_conn_Para_Rls
                  |L72.3522|
000dc2  f7fffffe          BL       LL_TmrBlk_Rls
                  |L72.3526|
000dc6  f7fffffe          BL       LL_TmrBlk_Rls_NxtIntvl
000dca  e00a              B        |L72.3554|
                  |L72.3532|
000dcc  2e05              CMP      r6,#5                 ;6421
000dce  d010              BEQ      |L72.3570|
000dd0  49dc              LDR      r1,|L72.4420|
000dd2  9100              STR      r1,[sp,#0]            ;6421
000dd4  2e06              CMP      r6,#6                 ;6421
000dd6  d075              BEQ      |L72.3780|
000dd8  2e07              CMP      r6,#7                 ;6421
000dda  d074              BEQ      |L72.3782|
000ddc  200c              MOVS     r0,#0xc               ;6790
000dde  f7fffffe          BL       ErrorEntry
                  |L72.3554|
000de2  4cd7              LDR      r4,|L72.4416|
000de4  2000              MOVS     r0,#0                 ;6794
000de6  71e0              STRB     r0,[r4,#7]            ;6794
000de8  f7fffffe          BL       RF_WTR_EnChk
000dec  2800              CMP      r0,#0                 ;6795
000dee  d06b              BEQ      |L72.3784|
000df0  e1d9              B        |L72.4518|
                  |L72.3570|
000df2  4cd3              LDR      r4,|L72.4416|
000df4  280d              CMP      r0,#0xd               ;6424
000df6  d002              BEQ      |L72.3582|
000df8  280e              CMP      r0,#0xe               ;6424
000dfa  d105              BNE      |L72.3592|
000dfc  e001              B        |L72.3586|
                  |L72.3582|
000dfe  bf00              NOP                            ;6427
000e00  e002              B        |L72.3592|
                  |L72.3586|
000e02  200b              MOVS     r0,#0xb               ;6431
000e04  f7fffffe          BL       ErrorEntry
                  |L72.3592|
000e08  7a60              LDRB     r0,[r4,#9]            ;6437  ; LL_Msg_AdvScnConn
000e0a  06c0              LSLS     r0,r0,#27             ;6437
000e0c  d57e              BPL      |L72.3852|
000e0e  4fce              LDR      r7,|L72.4424|
000e10  7a38              LDRB     r0,[r7,#8]            ;6439  ; LL_Adv_Para
000e12  0701              LSLS     r1,r0,#28             ;6439
000e14  48cd              LDR      r0,|L72.4428|
000e16  0f09              LSRS     r1,r1,#28             ;6439
000e18  5c41              LDRB     r1,[r0,r1]            ;6439
000e1a  48cd              LDR      r0,|L72.4432|
000e1c  7800              LDRB     r0,[r0,#0]            ;6439  ; LL_Tmr_Ticks_RSV_Wakeup
000e1e  1c80              ADDS     r0,r0,#2              ;6439
000e20  1808              ADDS     r0,r1,r0              ;6439
000e22  b2c1              UXTB     r1,r0                 ;6439
000e24  48c6              LDR      r0,|L72.4416|
000e26  6980              LDR      r0,[r0,#0x18]         ;6440  ; tblk_LL_pi
000e28  7884              LDRB     r4,[r0,#2]            ;6440
000e2a  9400              STR      r4,[sp,#0]            ;6442
000e2c  2c0c              CMP      r4,#0xc               ;6442
000e2e  d221              BCS      |L72.3700|
000e30  7838              LDRB     r0,[r7,#0]            ;5633
000e32  697e              LDR      r6,[r7,#0x14]         ;6458
000e34  4684              MOV      r12,r0                ;5633
                  |L72.3638|
000e36  48c7              LDR      r0,|L72.4436|
000e38  00e2              LSLS     r2,r4,#3              ;6444
000e3a  1810              ADDS     r0,r2,r0              ;6444
000e3c  4ac0              LDR      r2,|L72.4416|
000e3e  61d0              STR      r0,[r2,#0x1c]         ;6445  ; tblk_LL_pi2
000e40  7802              LDRB     r2,[r0,#0]            ;6445
000e42  2a02              CMP      r2,#2                 ;6445
000e44  d20d              BCS      |L72.3682|
000e46  6842              LDR      r2,[r0,#4]            ;6448
000e48  428a              CMP      r2,r1                 ;6448
000e4a  d30a              BCC      |L72.3682|
000e4c  1a52              SUBS     r2,r2,r1              ;6450
000e4e  4663              MOV      r3,r12                ;6450
000e50  2b00              CMP      r3,#0                 ;6451
000e52  d003              BEQ      |L72.3676|
                  |L72.3668|
000e54  48ba              LDR      r0,|L72.4416|
000e56  69c0              LDR      r0,[r0,#0x1c]         ;6453  ; tblk_LL_pi2
000e58  6042              STR      r2,[r0,#4]            ;6454
000e5a  e00b              B        |L72.3700|
                  |L72.3676|
000e5c  69bb              LDR      r3,[r7,#0x18]         ;6458  ; LL_Adv_Para
000e5e  429e              CMP      r6,r3                 ;6458
000e60  d3f8              BCC      |L72.3668|
                  |L72.3682|
000e62  4ab7              LDR      r2,|L72.4416|
000e64  7884              LDRB     r4,[r0,#2]            ;6466
000e66  6190              STR      r0,[r2,#0x18]         ;6468  ; tblk_LL_pi
000e68  69ba              LDR      r2,[r7,#0x18]         ;6468  ; LL_Adv_Para
000e6a  6840              LDR      r0,[r0,#4]            ;6468
000e6c  1810              ADDS     r0,r2,r0              ;6468
000e6e  61b8              STR      r0,[r7,#0x18]         ;6442  ; LL_Adv_Para
000e70  2c0c              CMP      r4,#0xc               ;6442
000e72  d3e0              BCC      |L72.3638|
                  |L72.3700|
000e74  4eb2              LDR      r6,|L72.4416|
000e76  1e89              SUBS     r1,r1,#2              ;6474
000e78  69b0              LDR      r0,[r6,#0x18]         ;6470  ; tblk_LL_pi
000e7a  7933              LDRB     r3,[r6,#4]            ;6470  ; TBlk_Free_LL
000e7c  7083              STRB     r3,[r0,#2]            ;6470
000e7e  2301              MOVS     r3,#1                 ;6471
000e80  7003              STRB     r3,[r0,#0]            ;6471
000e82  7930              LDRB     r0,[r6,#4]            ;6472  ; TBlk_Free_LL
000e84  b2c9              UXTB     r1,r1                 ;6475
000e86  00c2              LSLS     r2,r0,#3              ;6472
000e88  48b2              LDR      r0,|L72.4436|
000e8a  1810              ADDS     r0,r2,r0              ;6472
000e8c  61f0              STR      r0,[r6,#0x1c]         ;6473  ; tblk_LL_pi2
000e8e  7882              LDRB     r2,[r0,#2]            ;6473
000e90  7132              STRB     r2,[r6,#4]            ;6473
000e92  7084              STRB     r4,[r0,#2]            ;6474
000e94  2205              MOVS     r2,#5                 ;6479
000e96  6041              STR      r1,[r0,#4]            ;6479
000e98  7042              STRB     r2,[r0,#1]            ;6479
000e9a  22ff              MOVS     r2,#0xff              ;6480
000e9c  7002              STRB     r2,[r0,#0]            ;6480
000e9e  2c0c              CMP      r4,#0xc               ;6482
000ea0  d11a              BNE      |L72.3800|
000ea2  9800              LDR      r0,[sp,#0]            ;6488
000ea4  280c              CMP      r0,#0xc               ;6488
000ea6  d117              BNE      |L72.3800|
000ea8  6978              LDR      r0,[r7,#0x14]         ;6494  ; LL_Adv_Para
000eaa  463a              MOV      r2,r7                 ;6494
000eac  2833              CMP      r0,#0x33              ;6494
000eae  d00c              BEQ      |L72.3786|
000eb0  7813              LDRB     r3,[r2,#0]            ;6500  ; LL_Adv_Para
000eb2  2b00              CMP      r3,#0                 ;6500
000eb4  d00b              BEQ      |L72.3790|
000eb6  22ff              MOVS     r2,#0xff              ;6502
000eb8  3241              ADDS     r2,r2,#0x41           ;6502
000eba  4290              CMP      r0,r2                 ;6502
000ebc  d30d              BCC      |L72.3802|
000ebe  2250              MOVS     r2,#0x50              ;6504
                  |L72.3776|
000ec0  1a55              SUBS     r5,r2,r1              ;6504
000ec2  e00a              B        |L72.3802|
                  |L72.3780|
000ec4  e054              B        |L72.3952|
                  |L72.3782|
000ec6  e0d8              B        |L72.4218|
                  |L72.3784|
000ec8  e16b              B        |L72.4514|
                  |L72.3786|
000eca  2211              MOVS     r2,#0x11              ;6496
000ecc  e7f8              B        |L72.3776|
                  |L72.3790|
000ece  69ba              LDR      r2,[r7,#0x18]         ;6509  ; LL_Adv_Para
000ed0  4290              CMP      r0,r2                 ;6509
000ed2  d901              BLS      |L72.3800|
000ed4  1a85              SUBS     r5,r0,r2              ;6511
000ed6  e000              B        |L72.3802|
                  |L72.3800|
000ed8  2501              MOVS     r5,#1                 ;6515
                  |L72.3802|
000eda  69b0              LDR      r0,[r6,#0x18]         ;6521  ; tblk_LL_pi
000edc  1869              ADDS     r1,r5,r1              ;6522
000ede  6045              STR      r5,[r0,#4]            ;6522
000ee0  69b8              LDR      r0,[r7,#0x18]         ;6522  ; LL_Adv_Para
000ee2  1840              ADDS     r0,r0,r1              ;6522
000ee4  61b8              STR      r0,[r7,#0x18]         ;6523  ; LL_Adv_Para
000ee6  7838              LDRB     r0,[r7,#0]            ;6523  ; LL_Adv_Para
000ee8  2800              CMP      r0,#0                 ;6523
000eea  d107              BNE      |L72.3836|
000eec  6978              LDR      r0,[r7,#0x14]         ;6525  ; LL_Adv_Para
000eee  2833              CMP      r0,#0x33              ;6525
000ef0  d001              BEQ      |L72.3830|
000ef2  2000              MOVS     r0,#0                 ;6527
000ef4  61b8              STR      r0,[r7,#0x18]         ;6527  ; LL_Adv_Para
                  |L72.3830|
000ef6  4898              LDR      r0,|L72.4440|
000ef8  7800              LDRB     r0,[r0,#0]            ;6529  ; Ch_ADV_Ch_Hop_Table
000efa  7038              STRB     r0,[r7,#0]            ;6529
                  |L72.3836|
000efc  2105              MOVS     r1,#5                 ;6531
000efe  69b8              LDR      r0,[r7,#0x18]         ;6531  ; LL_Adv_Para
000f00  02c9              LSLS     r1,r1,#11             ;6531
000f02  4288              CMP      r0,r1                 ;6531
000f04  d318              BCC      |L72.3896|
000f06  7878              LDRB     r0,[r7,#1]            ;6533  ; LL_Adv_Para
000f08  0080              LSLS     r0,r0,#2              ;6533
000f0a  e000              B        |L72.3854|
                  |L72.3852|
000f0c  e021              B        |L72.3922|
                  |L72.3854|
000f0e  4d93              LDR      r5,|L72.4444|
000f10  2104              MOVS     r1,#4                 ;6534
000f12  5828              LDR      r0,[r5,r0]            ;6533
000f14  f7fffffe          BL       SndMsgBlk_Isr
000f18  7879              LDRB     r1,[r7,#1]            ;6535  ; LL_Adv_Para
000f1a  2000              MOVS     r0,#0                 ;6535
000f1c  0089              LSLS     r1,r1,#2              ;6535
000f1e  5068              STR      r0,[r5,r1]            ;6535
000f20  7a70              LDRB     r0,[r6,#9]            ;6536  ; LL_Msg_AdvScnConn
000f22  21ef              MOVS     r1,#0xef              ;6536
000f24  4008              ANDS     r0,r0,r1              ;6536
000f26  7270              STRB     r0,[r6,#9]            ;6536
000f28  7af0              LDRB     r0,[r6,#0xb]          ;6537  ; LL_Msg_AdvScnConnUpdSts
000f2a  0840              LSRS     r0,r0,#1              ;6537
000f2c  0040              LSLS     r0,r0,#1              ;6537
000f2e  72f0              STRB     r0,[r6,#0xb]          ;6537
000f30  7ab0              LDRB     r0,[r6,#0xa]          ;6538  ; LL_Msg_AdvScnConnUpd
000f32  0840              LSRS     r0,r0,#1              ;6538
000f34  0040              LSLS     r0,r0,#1              ;6538
000f36  72b0              STRB     r0,[r6,#0xa]          ;6538
                  |L72.3896|
000f38  9800              LDR      r0,[sp,#0]            ;6541
000f3a  280c              CMP      r0,#0xc               ;6541
000f3c  d004              BEQ      |L72.3912|
000f3e  42a0              CMP      r0,r4                 ;6543
000f40  d002              BEQ      |L72.3912|
000f42  7170              STRB     r0,[r6,#5]            ;6545
000f44  f7fffffe          BL       LL_TmrBlk_Pt_PairRst
                  |L72.3912|
000f48  69b0              LDR      r0,[r6,#0x18]         ;6549  ; tblk_LL_pi
000f4a  6840              LDR      r0,[r0,#4]            ;6549
000f4c  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
000f50  e747              B        |L72.3554|
                  |L72.3922|
000f52  4c7d              LDR      r4,|L72.4424|
000f54  7860              LDRB     r0,[r4,#1]            ;6553  ; LL_Adv_Para
000f56  2805              CMP      r0,#5                 ;6553
000f58  d203              BCS      |L72.3938|
000f5a  f7fffffe          BL       LL_MsgBlk_LL_conn_Para_Rls
000f5e  2005              MOVS     r0,#5                 ;6556
000f60  7060              STRB     r0,[r4,#1]            ;6556
                  |L72.3938|
000f62  f7fffffe          BL       RF_WTR_intOff
000f66  f7fffffe          BL       LL_TmrBlk_Rls
000f6a  f7fffffe          BL       LL_TmrBlk_Rls_NxtIntvl
000f6e  e738              B        |L72.3554|
                  |L72.3952|
000f70  4c73              LDR      r4,|L72.4416|
000f72  2815              CMP      r0,#0x15              ;6565
000f74  d001              BEQ      |L72.3962|
000f76  2817              CMP      r0,#0x17              ;6565
000f78  d101              BNE      |L72.3966|
                  |L72.3962|
000f7a  f7fffffe          BL       rafael_reset_phy_fsm_Isr
                  |L72.3966|
000f7e  7a60              LDRB     r0,[r4,#9]            ;6575  ; LL_Msg_AdvScnConn
000f80  0680              LSLS     r0,r0,#26             ;6575
000f82  d572              BPL      |L72.4202|
000f84  4876              LDR      r0,|L72.4448|
000f86  8900              LDRH     r0,[r0,#8]            ;6577  ; LL_Scan_Para
000f88  2812              CMP      r0,#0x12              ;6577
000f8a  d303              BCC      |L72.3988|
000f8c  4974              LDR      r1,|L72.4448|
000f8e  1c80              ADDS     r0,r0,#2              ;6580
000f90  8849              LDRH     r1,[r1,#2]            ;6580  ; LL_Scan_Para
000f92  e001              B        |L72.3992|
                  |L72.3988|
000f94  2014              MOVS     r0,#0x14              ;6584
000f96  2100              MOVS     r1,#0                 ;6585
                  |L72.3992|
000f98  69a2              LDR      r2,[r4,#0x18]         ;6587  ; tblk_LL_pi
000f9a  4626              MOV      r6,r4                 ;6587
000f9c  7894              LDRB     r4,[r2,#2]            ;6587
000f9e  4622              MOV      r2,r4                 ;6588
000fa0  2c0c              CMP      r4,#0xc               ;6589
000fa2  d225              BCS      |L72.4080|
000fa4  7977              LDRB     r7,[r6,#5]            ;5348
                  |L72.4006|
000fa6  4b6b              LDR      r3,|L72.4436|
000fa8  00d5              LSLS     r5,r2,#3              ;6591
000faa  18eb              ADDS     r3,r5,r3              ;6591
000fac  61f3              STR      r3,[r6,#0x1c]         ;6592  ; tblk_LL_pi2
000fae  781d              LDRB     r5,[r3,#0]            ;6592
000fb0  2d02              CMP      r5,#2                 ;6592
000fb2  d212              BCS      |L72.4058|
000fb4  4d6a              LDR      r5,|L72.4448|
000fb6  886d              LDRH     r5,[r5,#2]            ;6594  ; LL_Scan_Para
000fb8  428d              CMP      r5,r1                 ;6594
000fba  d80e              BHI      |L72.4058|
000fbc  685d              LDR      r5,[r3,#4]            ;6596
000fbe  2d14              CMP      r5,#0x14              ;6596
000fc0  d30b              BCC      |L72.4058|
000fc2  685d              LDR      r5,[r3,#4]            ;6598
000fc4  4285              CMP      r5,r0                 ;6598
000fc6  d004              BEQ      |L72.4050|
000fc8  1a2d              SUBS     r5,r5,r0              ;6600
000fca  1c6d              ADDS     r5,r5,#1              ;6600
000fcc  1e80              SUBS     r0,r0,#2              ;6600
000fce  605d              STR      r5,[r3,#4]            ;6601
000fd0  e00e              B        |L72.4080|
                  |L72.4050|
000fd2  1ea8              SUBS     r0,r5,#2              ;6605
000fd4  2501              MOVS     r5,#1                 ;6606
000fd6  605d              STR      r5,[r3,#4]            ;6606
000fd8  e00a              B        |L72.4080|
                  |L72.4058|
000fda  789a              LDRB     r2,[r3,#2]            ;6612
000fdc  2814              CMP      r0,#0x14              ;6613
000fde  d101              BNE      |L72.4068|
000fe0  685b              LDR      r3,[r3,#4]            ;6615
000fe2  1859              ADDS     r1,r3,r1              ;6615
                  |L72.4068|
000fe4  69b5              LDR      r5,[r6,#0x18]         ;6617  ; tblk_LL_pi
000fe6  2a0c              CMP      r2,#0xc               ;6589
000fe8  70aa              STRB     r2,[r5,#2]            ;6617
000fea  69f3              LDR      r3,[r6,#0x1c]         ;6618  ; tblk_LL_pi2
000fec  709f              STRB     r7,[r3,#2]            ;6618
000fee  d3da              BCC      |L72.4006|
                  |L72.4080|
000ff0  2a0c              CMP      r2,#0xc               ;6620
000ff2  d102              BNE      |L72.4090|
000ff4  2c0c              CMP      r4,#0xc               ;6622
000ff6  d01e              BEQ      |L72.4150|
000ff8  2012              MOVS     r0,#0x12              ;6628
                  |L72.4090|
000ffa  4f59              LDR      r7,|L72.4448|
000ffc  887b              LDRH     r3,[r7,#2]            ;6631  ; LL_Scan_Para
000ffe  428b              CMP      r3,r1                 ;6631
001000  d900              BLS      |L72.4100|
001002  1a59              SUBS     r1,r3,r1              ;6633
                  |L72.4100|
001004  4633              MOV      r3,r6                 ;6635
001006  e000              B        |L72.4106|
                  |L72.4104|
001008  e215              B        |L72.5174|
                  |L72.4106|
00100a  699d              LDR      r5,[r3,#0x18]         ;6635  ; tblk_LL_pi
00100c  7936              LDRB     r6,[r6,#4]            ;6635  ; TBlk_Free_LL
00100e  70ae              STRB     r6,[r5,#2]            ;6635
001010  2601              MOVS     r6,#1                 ;6636
001012  702e              STRB     r6,[r5,#0]            ;6636
001014  1c49              ADDS     r1,r1,#1              ;6636
001016  6069              STR      r1,[r5,#4]            ;6639
001018  7919              LDRB     r1,[r3,#4]            ;6639  ; TBlk_Free_LL
00101a  00cd              LSLS     r5,r1,#3              ;6639
00101c  494d              LDR      r1,|L72.4436|
00101e  1869              ADDS     r1,r5,r1              ;6639
001020  61d9              STR      r1,[r3,#0x1c]         ;6640  ; tblk_LL_pi2
001022  788d              LDRB     r5,[r1,#2]            ;6640
001024  711d              STRB     r5,[r3,#4]            ;6640
001026  708a              STRB     r2,[r1,#2]            ;6641
001028  6048              STR      r0,[r1,#4]            ;6644
00102a  893d              LDRH     r5,[r7,#8]            ;6644  ; LL_Scan_Para
00102c  4285              CMP      r5,r0                 ;6644
00102e  d905              BLS      |L72.4156|
001030  1a28              SUBS     r0,r5,r0              ;6646
001032  8138              STRH     r0,[r7,#8]            ;6646
001034  e00b              B        |L72.4174|
                  |L72.4150|
001036  484a              LDR      r0,|L72.4448|
001038  8880              LDRH     r0,[r0,#4]            ;6624  ; LL_Scan_Para
00103a  e7de              B        |L72.4090|
                  |L72.4156|
00103c  88b8              LDRH     r0,[r7,#4]            ;6650  ; LL_Scan_Para
00103e  8138              STRH     r0,[r7,#8]            ;6650
001040  783d              LDRB     r5,[r7,#0]            ;6651  ; LL_Scan_Para
001042  9800              LDR      r0,[sp,#0]            ;6651
001044  5c2d              LDRB     r5,[r5,r0]            ;6651
001046  703d              STRB     r5,[r7,#0]            ;6651
001048  2d00              CMP      r5,#0                 ;6652
00104a  d100              BNE      |L72.4174|
00104c  703e              STRB     r6,[r7,#0]            ;6654
                  |L72.4174|
00104e  2006              MOVS     r0,#6                 ;6657
001050  7048              STRB     r0,[r1,#1]            ;6657
001052  20ff              MOVS     r0,#0xff              ;6658
001054  7008              STRB     r0,[r1,#0]            ;6658
001056  2c0c              CMP      r4,#0xc               ;6660
001058  d001              BEQ      |L72.4190|
00105a  4294              CMP      r4,r2                 ;6662
00105c  d16c              BNE      |L72.4408|
                  |L72.4190|
00105e  6998              LDR      r0,[r3,#0x18]         ;6668  ; tblk_LL_pi
001060  6840              LDR      r0,[r0,#4]            ;6668
001062  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
001066  e6bc              B        |L72.3554|
001068  e7ff              B        |L72.4202|
                  |L72.4202|
00106a  493d              LDR      r1,|L72.4448|
00106c  2000              MOVS     r0,#0                 ;6672
00106e  7008              STRB     r0,[r1,#0]            ;6672
001070  f7fffffe          BL       LL_TmrBlk_Rls
001074  f7fffffe          BL       LL_TmrBlk_Rls_NxtIntvl
001078  e6b3              B        |L72.3554|
                  |L72.4218|
00107a  4b31              LDR      r3,|L72.4416|
00107c  7a58              LDRB     r0,[r3,#9]            ;6685  ; LL_Msg_AdvScnConn
00107e  0640              LSLS     r0,r0,#25             ;6685
001080  d55b              BPL      |L72.4410|
001082  482e              LDR      r0,|L72.4412|
001084  8840              LDRH     r0,[r0,#2]            ;6687  ; LL_Init_Para
001086  2812              CMP      r0,#0x12              ;6687
001088  d303              BCC      |L72.4242|
00108a  492c              LDR      r1,|L72.4412|
00108c  1c80              ADDS     r0,r0,#2              ;6690
00108e  8889              LDRH     r1,[r1,#4]            ;6690  ; LL_Init_Para
001090  e001              B        |L72.4246|
                  |L72.4242|
001092  2014              MOVS     r0,#0x14              ;6694
001094  2100              MOVS     r1,#0                 ;6695
                  |L72.4246|
001096  7894              LDRB     r4,[r2,#2]            ;6697
001098  461e              MOV      r6,r3                 ;6697
00109a  4622              MOV      r2,r4                 ;6698
00109c  2c0c              CMP      r4,#0xc               ;6699
00109e  d225              BCS      |L72.4332|
                  |L72.4256|
0010a0  4b2c              LDR      r3,|L72.4436|
0010a2  00d5              LSLS     r5,r2,#3              ;6701
0010a4  18eb              ADDS     r3,r5,r3              ;6701
0010a6  61f3              STR      r3,[r6,#0x1c]         ;6702  ; tblk_LL_pi2
0010a8  781d              LDRB     r5,[r3,#0]            ;6702
0010aa  2d02              CMP      r5,#2                 ;6702
0010ac  d212              BCS      |L72.4308|
0010ae  4d23              LDR      r5,|L72.4412|
0010b0  88ad              LDRH     r5,[r5,#4]            ;6704  ; LL_Init_Para
0010b2  428d              CMP      r5,r1                 ;6704
0010b4  d80e              BHI      |L72.4308|
0010b6  685d              LDR      r5,[r3,#4]            ;6706
0010b8  2d14              CMP      r5,#0x14              ;6706
0010ba  d30b              BCC      |L72.4308|
0010bc  685d              LDR      r5,[r3,#4]            ;6708
0010be  4285              CMP      r5,r0                 ;6708
0010c0  d004              BEQ      |L72.4300|
0010c2  1a2d              SUBS     r5,r5,r0              ;6710
0010c4  1c6d              ADDS     r5,r5,#1              ;6710
0010c6  1e80              SUBS     r0,r0,#2              ;6710
0010c8  605d              STR      r5,[r3,#4]            ;6711
0010ca  e00f              B        |L72.4332|
                  |L72.4300|
0010cc  1ea8              SUBS     r0,r5,#2              ;6715
0010ce  2501              MOVS     r5,#1                 ;6716
0010d0  605d              STR      r5,[r3,#4]            ;6716
0010d2  e00b              B        |L72.4332|
                  |L72.4308|
0010d4  789a              LDRB     r2,[r3,#2]            ;6722
0010d6  2814              CMP      r0,#0x14              ;6723
0010d8  d101              BNE      |L72.4318|
0010da  685b              LDR      r3,[r3,#4]            ;6725
0010dc  1859              ADDS     r1,r3,r1              ;6725
                  |L72.4318|
0010de  69b5              LDR      r5,[r6,#0x18]         ;6727  ; tblk_LL_pi
0010e0  4663              MOV      r3,r12                ;6727
0010e2  70aa              STRB     r2,[r5,#2]            ;6727
0010e4  69f5              LDR      r5,[r6,#0x1c]         ;6728  ; tblk_LL_pi2
0010e6  2a0c              CMP      r2,#0xc               ;6699
0010e8  70ab              STRB     r3,[r5,#2]            ;6728
0010ea  d3d9              BCC      |L72.4256|
                  |L72.4332|
0010ec  2a0c              CMP      r2,#0xc               ;6730
0010ee  d102              BNE      |L72.4342|
0010f0  2c0c              CMP      r4,#0xc               ;6732
0010f2  d01e              BEQ      |L72.4402|
0010f4  2012              MOVS     r0,#0x12              ;6738
                  |L72.4342|
0010f6  4b11              LDR      r3,|L72.4412|
0010f8  889b              LDRH     r3,[r3,#4]            ;6741  ; LL_Init_Para
0010fa  428b              CMP      r3,r1                 ;6741
0010fc  d900              BLS      |L72.4352|
0010fe  1a59              SUBS     r1,r3,r1              ;6743
                  |L72.4352|
001100  4b0f              LDR      r3,|L72.4416|
001102  2501              MOVS     r5,#1                 ;6746
001104  699b              LDR      r3,[r3,#0x18]         ;6745  ; tblk_LL_pi
001106  1c49              ADDS     r1,r1,#1              ;6746
001108  709f              STRB     r7,[r3,#2]            ;6745
00110a  701d              STRB     r5,[r3,#0]            ;6746
00110c  6059              STR      r1,[r3,#4]            ;6749
00110e  490c              LDR      r1,|L72.4416|
001110  7909              LDRB     r1,[r1,#4]            ;6749  ; TBlk_Free_LL
001112  00cb              LSLS     r3,r1,#3              ;6749
001114  490f              LDR      r1,|L72.4436|
001116  1859              ADDS     r1,r3,r1              ;6749
001118  4b09              LDR      r3,|L72.4416|
00111a  61d9              STR      r1,[r3,#0x1c]         ;6750  ; tblk_LL_pi2
00111c  788e              LDRB     r6,[r1,#2]            ;6750
00111e  711e              STRB     r6,[r3,#4]            ;6750
001120  708a              STRB     r2,[r1,#2]            ;6751
001122  4e06              LDR      r6,|L72.4412|
001124  6048              STR      r0,[r1,#4]            ;6754
001126  8873              LDRH     r3,[r6,#2]            ;6754  ; LL_Init_Para
001128  4283              CMP      r3,r0                 ;6754
00112a  d91b              BLS      |L72.4452|
00112c  1a18              SUBS     r0,r3,r0              ;6756
00112e  8070              STRH     r0,[r6,#2]            ;6756
001130  e021              B        |L72.4470|
                  |L72.4402|
001132  4802              LDR      r0,|L72.4412|
001134  88c0              LDRH     r0,[r0,#6]            ;6734  ; LL_Init_Para
001136  e7de              B        |L72.4342|
                  |L72.4408|
001138  e027              B        |L72.4490|
                  |L72.4410|
00113a  e02a              B        |L72.4498|
                  |L72.4412|
                          DCD      ||.bss||+0x404
                  |L72.4416|
                          DCD      ||.data||
                  |L72.4420|
                          DCD      ||.constdata||+0xf6
                  |L72.4424|
                          DCD      ||.bss||
                  |L72.4428|
                          DCD      ||.constdata||+0x1b
                  |L72.4432|
                          DCD      LL_Tmr_Ticks_RSV_Wakeup
                  |L72.4436|
                          DCD      ||.bss||+0x564
                  |L72.4440|
                          DCD      ||.data||+0x38
                  |L72.4444|
                          DCD      ||.bss||+0x5c4
                  |L72.4448|
                          DCD      ||.bss||+0xb8
                  |L72.4452|
001164  88f0              LDRH     r0,[r6,#6]            ;6760  ; LL_Init_Para
001166  8070              STRH     r0,[r6,#2]            ;6760
001168  7870              LDRB     r0,[r6,#1]            ;6761  ; LL_Init_Para
00116a  9b00              LDR      r3,[sp,#0]            ;6761
00116c  5cc0              LDRB     r0,[r0,r3]            ;6761
00116e  7070              STRB     r0,[r6,#1]            ;6761
001170  2800              CMP      r0,#0                 ;6762
001172  d100              BNE      |L72.4470|
001174  7075              STRB     r5,[r6,#1]            ;6764
                  |L72.4470|
001176  2007              MOVS     r0,#7                 ;6767
001178  7048              STRB     r0,[r1,#1]            ;6767
00117a  20ff              MOVS     r0,#0xff              ;6768
00117c  4bb2              LDR      r3,|L72.5192|
00117e  7008              STRB     r0,[r1,#0]            ;6768
001180  2c0c              CMP      r4,#0xc               ;6770
001182  d100              BNE      |L72.4486|
                  |L72.4484|
001184  e76b              B        |L72.4190|
                  |L72.4486|
001186  4294              CMP      r4,r2                 ;6772
001188  d0fc              BEQ      |L72.4484|
                  |L72.4490|
00118a  715c              STRB     r4,[r3,#5]            ;6774
00118c  f7fffffe          BL       LL_TmrBlk_Pt_PairRst
001190  e765              B        |L72.4190|
                  |L72.4498|
001192  49ae              LDR      r1,|L72.5196|
001194  2000              MOVS     r0,#0                 ;6782
001196  7048              STRB     r0,[r1,#1]            ;6782
001198  f7fffffe          BL       LL_TmrBlk_Rls
00119c  f7fffffe          BL       LL_TmrBlk_Rls_NxtIntvl
0011a0  e61f              B        |L72.3554|
                  |L72.4514|
0011a2  f7fffffe          BL       rafael_reset_phy_fsm_Isr
                  |L72.4518|
0011a6  69a0              LDR      r0,[r4,#0x18]         ;6802  ; tblk_LL_pi
0011a8  7801              LDRB     r1,[r0,#0]            ;6802
0011aa  2902              CMP      r1,#2                 ;6802
0011ac  d23b              BCS      |L72.4646|
0011ae  7840              LDRB     r0,[r0,#1]            ;6804
0011b0  2805              CMP      r0,#5                 ;6804
0011b2  d238              BCS      |L72.4646|
0011b4  2188              MOVS     r1,#0x88              ;6807
0011b6  4348              MULS     r0,r1,r0              ;6807
0011b8  49a5              LDR      r1,|L72.5200|
0011ba  1846              ADDS     r6,r0,r1              ;6807
0011bc  4635              MOV      r5,r6                 ;6808
0011be  3560              ADDS     r5,r5,#0x60           ;6808
0011c0  7d68              LDRB     r0,[r5,#0x15]         ;6808
0011c2  71a0              STRB     r0,[r4,#6]            ;6808
0011c4  0780              LSLS     r0,r0,#30             ;6809
0011c6  d029              BEQ      |L72.4636|
0011c8  4631              MOV      r1,r6                 ;6811
0011ca  2218              MOVS     r2,#0x18              ;6811
0011cc  3158              ADDS     r1,r1,#0x58           ;6811
0011ce  2083              MOVS     r0,#0x83              ;6811
0011d0  f7fffffe          BL       SPI_PDMA_SetTx
0011d4  69a0              LDR      r0,[r4,#0x18]         ;6813  ; tblk_LL_pi
0011d6  7841              LDRB     r1,[r0,#1]            ;6813
0011d8  2080              MOVS     r0,#0x80              ;5848
0011da  2904              CMP      r1,#4                 ;6813
0011dc  d20f              BCS      |L72.4606|
0011de  7d29              LDRB     r1,[r5,#0x14]         ;6815
0011e0  2205              MOVS     r2,#5                 ;6816
0011e2  4301              ORRS     r1,r1,r0              ;6815
0011e4  7529              STRB     r1,[r5,#0x14]         ;6815
0011e6  4631              MOV      r1,r6                 ;6816
0011e8  3170              ADDS     r1,r1,#0x70           ;6816
0011ea  207e              MOVS     r0,#0x7e              ;6816
0011ec  f7fffffe          BL       SPI_PDMA_SetTx
0011f0  f7fffffe          BL       SPI_PDMA_waitFinish
0011f4  7d28              LDRB     r0,[r5,#0x14]         ;6818
0011f6  0640              LSLS     r0,r0,#25             ;6818
0011f8  0e40              LSRS     r0,r0,#25             ;6818
0011fa  7528              STRB     r0,[r5,#0x14]         ;6818
0011fc  e00e              B        |L72.4636|
                  |L72.4606|
0011fe  7f29              LDRB     r1,[r5,#0x1c]         ;6824
001200  2205              MOVS     r2,#5                 ;6825
001202  4301              ORRS     r1,r1,r0              ;6824
001204  7729              STRB     r1,[r5,#0x1c]         ;6824
001206  4631              MOV      r1,r6                 ;6825
001208  3178              ADDS     r1,r1,#0x78           ;6825
00120a  207e              MOVS     r0,#0x7e              ;6825
00120c  f7fffffe          BL       SPI_PDMA_SetTx
001210  f7fffffe          BL       SPI_PDMA_waitFinish
001214  7f28              LDRB     r0,[r5,#0x1c]         ;6827
001216  0640              LSLS     r0,r0,#25             ;6827
001218  0e40              LSRS     r0,r0,#25             ;6827
00121a  7728              STRB     r0,[r5,#0x1c]         ;6827
                  |L72.4636|
00121c  79a0              LDRB     r0,[r4,#6]            ;6831  ; LL_SMP_DataCh
00121e  0780              LSLS     r0,r0,#30             ;6831
001220  0f80              LSRS     r0,r0,#30             ;6831
001222  f7fffffe          BL       RF_CCM_AES_Mode_set
                  |L72.4646|
001226  69a0              LDR      r0,[r4,#0x18]         ;6835  ; tblk_LL_pi
001228  6840              LDR      r0,[r0,#4]            ;6835
00122a  2802              CMP      r0,#2                 ;6835
00122c  d201              BCS      |L72.4658|
                  |L72.4654|
00122e  f7fff99b          BL       |L72.1384|
                  |L72.4658|
001232  7ae0              LDRB     r0,[r4,#0xb]          ;6839  ; LL_Msg_AdvScnConnUpdSts
001234  7aa2              LDRB     r2,[r4,#0xa]          ;6839  ; LL_Msg_AdvScnConnUpd
001236  4601              MOV      r1,r0                 ;6839
001238  4050              EORS     r0,r0,r2              ;6839
00123a  0742              LSLS     r2,r0,#29             ;6840
00123c  d051              BEQ      |L72.4834|
00123e  4041              EORS     r1,r1,r0              ;6842
001240  72e1              STRB     r1,[r4,#0xb]          ;6842
001242  0749              LSLS     r1,r1,#29             ;6843
001244  0e49              LSRS     r1,r1,#25             ;6843
001246  7261              STRB     r1,[r4,#9]            ;6843
001248  07c2              LSLS     r2,r0,#31             ;6844
00124a  d04b              BEQ      |L72.4836|
00124c  221c              MOVS     r2,#0x1c              ;6846
00124e  4981              LDR      r1,|L72.5204|
001250  4881              LDR      r0,|L72.5208|
001252  f7fffffe          BL       Knl_MemCpy_Isr
001256  2204              MOVS     r2,#4                 ;6847
001258  4980              LDR      r1,|L72.5212|
00125a  4881              LDR      r0,|L72.5216|
00125c  f7fffffe          BL       Knl_MemCpy_Isr
001260  7a60              LDRB     r0,[r4,#9]            ;6848  ; LL_Msg_AdvScnConn
001262  2110              MOVS     r1,#0x10              ;6848
001264  4308              ORRS     r0,r0,r1              ;6848
001266  7260              STRB     r0,[r4,#9]            ;6848
001268  487b              LDR      r0,|L72.5208|
00126a  7a00              LDRB     r0,[r0,#8]            ;6849  ; LL_Adv_Para
00126c  0701              LSLS     r1,r0,#28             ;6849
00126e  487d              LDR      r0,|L72.5220|
001270  0f09              LSRS     r1,r1,#28             ;6849
001272  5c41              LDRB     r1,[r0,r1]            ;6849
001274  487c              LDR      r0,|L72.5224|
001276  7800              LDRB     r0,[r0,#0]            ;6849  ; LL_Tmr_Ticks_RSV_Wakeup
001278  1c80              ADDS     r0,r0,#2              ;6849
00127a  180a              ADDS     r2,r1,r0              ;6849
00127c  69e0              LDR      r0,[r4,#0x1c]         ;6851  ; tblk_LL_pi2
00127e  7881              LDRB     r1,[r0,#2]            ;6851
001280  290c              CMP      r1,#0xc               ;6852
001282  d212              BCS      |L72.4778|
001284  4d79              LDR      r5,|L72.5228|
                  |L72.4742|
001286  00c8              LSLS     r0,r1,#3              ;6854
001288  1940              ADDS     r0,r0,r5              ;6854
00128a  61e0              STR      r0,[r4,#0x1c]         ;6855  ; tblk_LL_pi2
00128c  7803              LDRB     r3,[r0,#0]            ;6855
00128e  2b02              CMP      r3,#2                 ;6855
001290  d207              BCS      |L72.4770|
001292  6843              LDR      r3,[r0,#4]            ;6857
001294  4293              CMP      r3,r2                 ;6857
001296  d304              BCC      |L72.4770|
001298  6843              LDR      r3,[r0,#4]            ;6859
00129a  1a9b              SUBS     r3,r3,r2              ;6859
00129c  1c5b              ADDS     r3,r3,#1              ;6859
00129e  6043              STR      r3,[r0,#4]            ;6860
0012a0  e003              B        |L72.4778|
                  |L72.4770|
0012a2  7881              LDRB     r1,[r0,#2]            ;6863
0012a4  61a0              STR      r0,[r4,#0x18]         ;6852  ; tblk_LL_pi
0012a6  290c              CMP      r1,#0xc               ;6852
0012a8  d3ed              BCC      |L72.4742|
                  |L72.4778|
0012aa  69a3              LDR      r3,[r4,#0x18]         ;6866  ; tblk_LL_pi
0012ac  7920              LDRB     r0,[r4,#4]            ;6866  ; TBlk_Free_LL
0012ae  7098              STRB     r0,[r3,#2]            ;6866
0012b0  4d6e              LDR      r5,|L72.5228|
0012b2  00c0              LSLS     r0,r0,#3              ;6867
0012b4  1940              ADDS     r0,r0,r5              ;6867
0012b6  2301              MOVS     r3,#1                 ;6868
0012b8  61a0              STR      r0,[r4,#0x18]         ;6868  ; tblk_LL_pi
0012ba  7003              STRB     r3,[r0,#0]            ;6868
0012bc  6043              STR      r3,[r0,#4]            ;6870
0012be  7880              LDRB     r0,[r0,#2]            ;6870
0012c0  1e92              SUBS     r2,r2,#2              ;6873
0012c2  00c0              LSLS     r0,r0,#3              ;6870
0012c4  1940              ADDS     r0,r0,r5              ;6870
0012c6  61e0              STR      r0,[r4,#0x1c]         ;6871  ; tblk_LL_pi2
0012c8  7883              LDRB     r3,[r0,#2]            ;6871
0012ca  7123              STRB     r3,[r4,#4]            ;6871
0012cc  7081              STRB     r1,[r0,#2]            ;6873
0012ce  21ff              MOVS     r1,#0xff              ;6875
0012d0  6042              STR      r2,[r0,#4]            ;6875
0012d2  7001              STRB     r1,[r0,#0]            ;6875
0012d4  69a1              LDR      r1,[r4,#0x18]         ;6877  ; tblk_LL_pi
0012d6  2005              MOVS     r0,#5                 ;6877
0012d8  7048              STRB     r0,[r1,#1]            ;6877
0012da  69e1              LDR      r1,[r4,#0x1c]         ;6878  ; tblk_LL_pi2
0012dc  7048              STRB     r0,[r1,#1]            ;6878
                  |L72.4830|
0012de  f7fffffe          BL       LL_TmrBlk_Pt_PairRst
                  |L72.4834|
0012e2  e095              B        |L72.5136|
                  |L72.4836|
0012e4  0782              LSLS     r2,r0,#30             ;6882
0012e6  d550              BPL      |L72.5002|
0012e8  0640              LSLS     r0,r0,#25             ;6884
0012ea  d509              BPL      |L72.4864|
0012ec  220c              MOVS     r2,#0xc               ;6886
0012ee  4960              LDR      r1,|L72.5232|
0012f0  4860              LDR      r0,|L72.5236|
0012f2  f7fffffe          BL       Knl_MemCpy_Isr
0012f6  4959              LDR      r1,|L72.5212|
0012f8  2204              MOVS     r2,#4                 ;6887
0012fa  1f08              SUBS     r0,r1,#4              ;6887
0012fc  f7fffffe          BL       Knl_MemCpy_Isr
                  |L72.4864|
001300  7a60              LDRB     r0,[r4,#9]            ;6889  ; LL_Msg_AdvScnConn
001302  2120              MOVS     r1,#0x20              ;6889
001304  4308              ORRS     r0,r0,r1              ;6889
001306  7260              STRB     r0,[r4,#9]            ;6889
001308  4d5a              LDR      r5,|L72.5236|
00130a  69e0              LDR      r0,[r4,#0x1c]         ;6892  ; tblk_LL_pi2
00130c  88aa              LDRH     r2,[r5,#4]            ;6890  ; LL_Scan_Para
00130e  7881              LDRB     r1,[r0,#2]            ;6892
001310  1c92              ADDS     r2,r2,#2              ;6892
001312  290c              CMP      r1,#0xc               ;6893
001314  d219              BCS      |L72.4938|
001316  4e55              LDR      r6,|L72.5228|
                  |L72.4888|
001318  00c8              LSLS     r0,r1,#3              ;6895
00131a  1980              ADDS     r0,r0,r6              ;6895
00131c  61e0              STR      r0,[r4,#0x1c]         ;6896  ; tblk_LL_pi2
00131e  7803              LDRB     r3,[r0,#0]            ;6896
001320  2b02              CMP      r3,#2                 ;6896
001322  d20e              BCS      |L72.4930|
001324  6843              LDR      r3,[r0,#4]            ;6898
001326  2b14              CMP      r3,#0x14              ;6898
001328  d30b              BCC      |L72.4930|
00132a  6843              LDR      r3,[r0,#4]            ;6900
00132c  4293              CMP      r3,r2                 ;6900
00132e  d004              BEQ      |L72.4922|
001330  1a9b              SUBS     r3,r3,r2              ;6902
001332  1c5b              ADDS     r3,r3,#1              ;6902
001334  1e92              SUBS     r2,r2,#2              ;6902
001336  6043              STR      r3,[r0,#4]            ;6903
001338  e007              B        |L72.4938|
                  |L72.4922|
00133a  1e9a              SUBS     r2,r3,#2              ;6907
00133c  2301              MOVS     r3,#1                 ;6908
00133e  6043              STR      r3,[r0,#4]            ;6908
001340  e003              B        |L72.4938|
                  |L72.4930|
001342  61a0              STR      r0,[r4,#0x18]         ;6914  ; tblk_LL_pi
001344  7881              LDRB     r1,[r0,#2]            ;6914
001346  290c              CMP      r1,#0xc               ;6893
001348  d3e6              BCC      |L72.4888|
                  |L72.4938|
00134a  290c              CMP      r1,#0xc               ;6916
00134c  d100              BNE      |L72.4944|
00134e  2212              MOVS     r2,#0x12              ;6918
                  |L72.4944|
001350  69a3              LDR      r3,[r4,#0x18]         ;6920  ; tblk_LL_pi
001352  7920              LDRB     r0,[r4,#4]            ;6920  ; TBlk_Free_LL
001354  7098              STRB     r0,[r3,#2]            ;6920
001356  4e45              LDR      r6,|L72.5228|
001358  00c0              LSLS     r0,r0,#3              ;6921
00135a  1980              ADDS     r0,r0,r6              ;6921
00135c  2301              MOVS     r3,#1                 ;6922
00135e  61a0              STR      r0,[r4,#0x18]         ;6922  ; tblk_LL_pi
001360  7003              STRB     r3,[r0,#0]            ;6922
001362  6043              STR      r3,[r0,#4]            ;6924
001364  7880              LDRB     r0,[r0,#2]            ;6924
001366  00c0              LSLS     r0,r0,#3              ;6924
001368  1980              ADDS     r0,r0,r6              ;6924
00136a  61e0              STR      r0,[r4,#0x1c]         ;6925  ; tblk_LL_pi2
00136c  7883              LDRB     r3,[r0,#2]            ;6925
00136e  7123              STRB     r3,[r4,#4]            ;6925
001370  7081              STRB     r1,[r0,#2]            ;6926
001372  6042              STR      r2,[r0,#4]            ;6928
001374  8929              LDRH     r1,[r5,#8]            ;6928  ; LL_Scan_Para
001376  1a89              SUBS     r1,r1,r2              ;6928
001378  8129              STRH     r1,[r5,#8]            ;6928
00137a  21ff              MOVS     r1,#0xff              ;6929
00137c  7001              STRB     r1,[r0,#0]            ;6929
00137e  69a1              LDR      r1,[r4,#0x18]         ;6931  ; tblk_LL_pi
001380  2006              MOVS     r0,#6                 ;6931
001382  7048              STRB     r0,[r1,#1]            ;6931
001384  69e1              LDR      r1,[r4,#0x1c]         ;6932  ; tblk_LL_pi2
001386  7048              STRB     r0,[r1,#1]            ;6932
001388  e7a9              B        |L72.4830|
                  |L72.5002|
00138a  0740              LSLS     r0,r0,#29             ;6937
00138c  d540              BPL      |L72.5136|
00138e  2040              MOVS     r0,#0x40              ;6939
001390  4301              ORRS     r1,r1,r0              ;6939
001392  482e              LDR      r0,|L72.5196|
001394  7261              STRB     r1,[r4,#9]            ;6939
001396  88c2              LDRH     r2,[r0,#6]            ;6940  ; LL_Init_Para
001398  69e0              LDR      r0,[r4,#0x1c]         ;6942  ; tblk_LL_pi2
00139a  1c92              ADDS     r2,r2,#2              ;6942
00139c  7881              LDRB     r1,[r0,#2]            ;6942
00139e  290c              CMP      r1,#0xc               ;6943
0013a0  d219              BCS      |L72.5078|
0013a2  4b32              LDR      r3,|L72.5228|
                  |L72.5028|
0013a4  00c8              LSLS     r0,r1,#3              ;6945
0013a6  18c0              ADDS     r0,r0,r3              ;6945
0013a8  61e0              STR      r0,[r4,#0x1c]         ;6946  ; tblk_LL_pi2
0013aa  7805              LDRB     r5,[r0,#0]            ;6946
0013ac  2d02              CMP      r5,#2                 ;6946
0013ae  d20e              BCS      |L72.5070|
0013b0  6845              LDR      r5,[r0,#4]            ;6948
0013b2  2d14              CMP      r5,#0x14              ;6948
0013b4  d30b              BCC      |L72.5070|
0013b6  6843              LDR      r3,[r0,#4]            ;6950
0013b8  4293              CMP      r3,r2                 ;6950
0013ba  d004              BEQ      |L72.5062|
0013bc  1a9b              SUBS     r3,r3,r2              ;6952
0013be  1c5b              ADDS     r3,r3,#1              ;6952
0013c0  1ad2              SUBS     r2,r2,r3              ;6953
0013c2  6043              STR      r3,[r0,#4]            ;6953
0013c4  e007              B        |L72.5078|
                  |L72.5062|
0013c6  1e9a              SUBS     r2,r3,#2              ;6957
0013c8  2301              MOVS     r3,#1                 ;6958
0013ca  6043              STR      r3,[r0,#4]            ;6958
0013cc  e003              B        |L72.5078|
                  |L72.5070|
0013ce  61a0              STR      r0,[r4,#0x18]         ;6964  ; tblk_LL_pi
0013d0  7881              LDRB     r1,[r0,#2]            ;6964
0013d2  290c              CMP      r1,#0xc               ;6943
0013d4  d3e6              BCC      |L72.5028|
                  |L72.5078|
0013d6  290c              CMP      r1,#0xc               ;6966
0013d8  d100              BNE      |L72.5084|
0013da  2212              MOVS     r2,#0x12              ;6968
                  |L72.5084|
0013dc  69a3              LDR      r3,[r4,#0x18]         ;6970  ; tblk_LL_pi
0013de  7920              LDRB     r0,[r4,#4]            ;6970  ; TBlk_Free_LL
0013e0  7098              STRB     r0,[r3,#2]            ;6970
0013e2  4d22              LDR      r5,|L72.5228|
0013e4  00c0              LSLS     r0,r0,#3              ;6971
0013e6  1940              ADDS     r0,r0,r5              ;6971
0013e8  2301              MOVS     r3,#1                 ;6972
0013ea  61a0              STR      r0,[r4,#0x18]         ;6972  ; tblk_LL_pi
0013ec  7003              STRB     r3,[r0,#0]            ;6972
0013ee  6043              STR      r3,[r0,#4]            ;6974
0013f0  7880              LDRB     r0,[r0,#2]            ;6974
0013f2  00c0              LSLS     r0,r0,#3              ;6974
0013f4  1940              ADDS     r0,r0,r5              ;6974
0013f6  61e0              STR      r0,[r4,#0x1c]         ;6975  ; tblk_LL_pi2
0013f8  7883              LDRB     r3,[r0,#2]            ;6975
0013fa  7123              STRB     r3,[r4,#4]            ;6975
0013fc  7081              STRB     r1,[r0,#2]            ;6976
0013fe  21ff              MOVS     r1,#0xff              ;6978
001400  6042              STR      r2,[r0,#4]            ;6978
001402  7001              STRB     r1,[r0,#0]            ;6978
001404  69a1              LDR      r1,[r4,#0x18]         ;6980  ; tblk_LL_pi
001406  2007              MOVS     r0,#7                 ;6980
001408  7048              STRB     r0,[r1,#1]            ;6980
00140a  69e1              LDR      r1,[r4,#0x1c]         ;6981  ; tblk_LL_pi2
00140c  7048              STRB     r0,[r1,#1]            ;6981
00140e  e766              B        |L72.4830|
                  |L72.5136|
001410  4c0d              LDR      r4,|L72.5192|
001412  7960              LDRB     r0,[r4,#5]            ;6990  ; TBlk_InUse_LL
001414  280c              CMP      r0,#0xc               ;6990
001416  d100              BNE      |L72.5146|
                  |L72.5144|
001418  e709              B        |L72.4654|
                  |L72.5146|
00141a  69a0              LDR      r0,[r4,#0x18]         ;6992  ; tblk_LL_pi
00141c  6840              LDR      r0,[r0,#4]            ;6992
00141e  2803              CMP      r0,#3                 ;6992
001420  d301              BCC      |L72.5158|
001422  f7fffffe          BL       Ble_EC_Chk_Isr
                  |L72.5158|
001426  69a0              LDR      r0,[r4,#0x18]         ;6997  ; tblk_LL_pi
001428  6840              LDR      r0,[r0,#4]            ;6997
00142a  2850              CMP      r0,#0x50              ;6997
00142c  d9f4              BLS      |L72.5144|
00142e  f7fffffe          BL       RF_PowerSaving_En_Isr
001432  b007              ADD      sp,sp,#0x1c
001434  bdf0              POP      {r4-r7,pc}
                  |L72.5174|
001436  4285              CMP      r5,r0                 ;7006
001438  d902              BLS      |L72.5184|
00143a  1a28              SUBS     r0,r5,r0              ;7008
00143c  6050              STR      r0,[r2,#4]            ;7044
00143e  bf00              NOP                            ;7044
                  |L72.5184|
001440  bf00              NOP                            ;7052
001442  b007              ADD      sp,sp,#0x1c
001444  bdf0              POP      {r4-r7,pc}
;;;7057   
                          ENDP

001446  0000              DCW      0x0000
                  |L72.5192|
                          DCD      ||.data||
                  |L72.5196|
                          DCD      ||.bss||+0x404
                  |L72.5200|
                          DCD      ||.bss||+0xd0
                  |L72.5204|
                          DCD      ||.bss||+0x5c
                  |L72.5208|
                          DCD      ||.bss||
                  |L72.5212|
                          DCD      ||.data||+0x3c
                  |L72.5216|
                          DCD      ||.data||+0x38
                  |L72.5220|
                          DCD      ||.constdata||+0x1b
                  |L72.5224|
                          DCD      LL_Tmr_Ticks_RSV_Wakeup
                  |L72.5228|
                          DCD      ||.bss||+0x564
                  |L72.5232|
                          DCD      ||.bss||+0xc4
                  |L72.5236|
                          DCD      ||.bss||+0xb8

                          AREA ||i.LLTimer_TmrRefUpd_Isr||, CODE, READONLY, ALIGN=2

                  LLTimer_TmrRefUpd_Isr PROC
;;;4916   
;;;4917   void LLTimer_TmrRefUpd_Isr(void)
000000  b410              PUSH     {r4}
;;;4918   {
;;;4919       extern uint32_t Timeline24;
;;;4920   
;;;4921       Tmr37 += DUR_LL_TMR_TICK_BASE*125;
000002  480d              LDR      r0,|L73.56|
000004  247d              MOVS     r4,#0x7d
000006  6f02              LDR      r2,[r0,#0x70]  ; Tmr37
000008  6f41              LDR      r1,[r0,#0x74]  ; Tmr37
00000a  1912              ADDS     r2,r2,r4
00000c  2300              MOVS     r3,#0
00000e  4159              ADCS     r1,r1,r3
;;;4922       ((uint8_t *)&Tmr37)[4] &= 0x1F;
000010  6702              STR      r2,[r0,#0x70]  ; Tmr37
000012  6741              STR      r1,[r0,#0x74]  ; Tmr37
000014  4809              LDR      r0,|L73.60|
000016  7901              LDRB     r1,[r0,#4]  ; Tmr37
000018  06c9              LSLS     r1,r1,#27
00001a  0ec9              LSRS     r1,r1,#27
00001c  7101              STRB     r1,[r0,#4]
;;;4923   
;;;4924       Timeline24 += DUR_LL_TMR_TICK_BASE;
00001e  4908              LDR      r1,|L73.64|
000020  6808              LDR      r0,[r1,#0]  ; Timeline24
000022  1c40              ADDS     r0,r0,#1
;;;4925       if(((uint8_t *)&Timeline24)[3] > 0xEF)
000024  6008              STR      r0,[r1,#0]  ; Timeline24
000026  78c8              LDRB     r0,[r1,#3]  ; Timeline24
000028  28ef              CMP      r0,#0xef
00002a  d902              BLS      |L73.50|
;;;4926       {
;;;4927           //Timeline24 &= 0x0FFFFFFF;
;;;4928           ((uint8_t *)&Timeline24)[3] &= 0x0F;
00002c  0700              LSLS     r0,r0,#28
00002e  0f00              LSRS     r0,r0,#28
000030  70c8              STRB     r0,[r1,#3]
                  |L73.50|
;;;4929       }
;;;4930   }
000032  bc10              POP      {r4}
000034  4770              BX       lr
;;;4931   
                          ENDP

000036  0000              DCW      0x0000
                  |L73.56|
                          DCD      ||.data||
                  |L73.60|
                          DCD      ||.data||+0x70
                  |L73.64|
                          DCD      Timeline24

                          AREA ||i.LLWTRFIFOGet_Isr||, CODE, READONLY, ALIGN=2

                  LLWTRFIFOGet_Isr PROC
;;;8854   
;;;8855   void LLWTRFIFOGet_Isr(Uint8 len)
000000  2800              CMP      r0,#0
;;;8856   {
;;;8857       Uint8 i, idx, Len2;
;;;8858       MBLK *mblk;
;;;8859       MQUEUE *pqueue;
;;;8860   
;;;8861       if(len == 0)
000002  d071              BEQ      |L74.232|
000004  b5f8              PUSH     {r3-r7,lr}            ;8856
000006  4604              MOV      r4,r0                 ;8856
;;;8862       {
;;;8863           return;
;;;8864       }
;;;8865   
;;;8866   //    Len = 0;
;;;8867       pqueue = &LL_ConnDataInTmp;
;;;8868       if(LL_Para_IntervalR.DataIdxF == 0xFF)
000008  4890              LDR      r0,|L74.588|
00000a  4f8f              LDR      r7,|L74.584|
00000c  7805              LDRB     r5,[r0,#0]  ; LL_Para_IntervalR
00000e  4638              MOV      r0,r7                 ;8867
000010  6803              LDR      r3,[r0,#0]
000012  488e              LDR      r0,|L74.588|
;;;8869       {
;;;8870           if(LL_Para_IntervalR.HeaderLen)
;;;8871           {
;;;8872               if(LL_Para_IntervalR.DataIdxN==0)
;;;8873               {
;;;8874                   i = LL_Para_IntervalR.HeaderLen;
;;;8875   //                Len = RF_RxFIFO_Count_get();
;;;8876   
;;;8877   
;;;8878                   //LL_Para_IntervalR.DataIdxN = Len;
;;;8879                   mblk = GetMsgBlk_L1_wSize_Isr(LL_Para_IntervalR.HeaderLen);
;;;8880   
;;;8881                   pqueue->QOut = mblk;
;;;8882   
;;;8883                   if(mblk==(MBLK *)0)
;;;8884                   {
;;;8885                       LL_Para_IntervalR.DataIdxN = LL_Para_IntervalR.HeaderLen;
;;;8886                       pqueue->QIn = (MBLK *)0;
;;;8887                       len = 0;
;;;8888                   }
;;;8889                   else
;;;8890                   {
;;;8891                       SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)&LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], len);
000014  1d06              ADDS     r6,r0,#4
000016  7842              LDRB     r2,[r0,#1]            ;8872
000018  78c0              LDRB     r0,[r0,#3]            ;8870
00001a  1991              ADDS     r1,r2,r6
00001c  2dff              CMP      r5,#0xff              ;8868
00001e  d004              BEQ      |L74.42|
;;;8892   
;;;8893                       while(1)
;;;8894                       {
;;;8895                           pqueue->QIn = mblk;
;;;8896                           mblk->Primitive = MHC_LE_ACL_DATA_PKT_EXTEND;
;;;8897                           mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = 0;
;;;8898                           mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
;;;8899   
;;;8900                           if(i)
;;;8901                           {
;;;8902                               if(i>SIZE_MBLK_ACL_DATA_UNIT)
;;;8903                               {
;;;8904                                   mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = SIZE_MBLK_ACL_DATA_UNIT;
;;;8905                                   i -= SIZE_MBLK_ACL_DATA_UNIT;
;;;8906                               }
;;;8907                               else
;;;8908                               {
;;;8909                                   mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = i;
;;;8910                                   pqueue->QIn = mblk;
;;;8911                                   mblk->Next = (MBLK *)0;
;;;8912                                   //i = 0;
;;;8913                               }
;;;8914                           }
;;;8915                           if(mblk->Next != (MBLK *)0)
;;;8916                           {
;;;8917                               mblk = mblk->Next;
;;;8918                           }
;;;8919                           else
;;;8920                               break;
;;;8921                       }
;;;8922                       if((LL_Para_IntervalR.HeaderSts&FLD_MSK_LL_DATA_LLID)==LL_DATA_LLID_EMPTY_CONTI)
;;;8923                       {
;;;8924                           LL_ConnBuffPrcsR.BufPrcsF = pqueue->QIn;
;;;8925                           LL_ConnBuffPrcsR.BufPrcsN = pqueue->QOut;
;;;8926                       }
;;;8927                       else
;;;8928                       {
;;;8929                           LL_ConnBuffPrcsR.BufPrcsF = pqueue->QOut;
;;;8930                           if((pqueue->QOut)->Next !=(MBLK *)0)
;;;8931                           {
;;;8932                               LL_ConnBuffPrcsR.BufPrcsN = (pqueue->QOut)->Next;
;;;8933                           }
;;;8934                           else
;;;8935                           {
;;;8936                               LL_ConnBuffPrcsR.BufPrcsN = LL_ConnBuffPrcsR.BufPrcsF;
;;;8937                           }
;;;8938                           LL_Para_IntervalR.DataIdxF = 0;
;;;8939                       }
;;;8940                   }
;;;8941               }
;;;8942               else
;;;8943               {
;;;8944                   if(LL_Para_IntervalR.HeaderLen > LL_Para_IntervalR.DataIdxN)
;;;8945                   {
;;;8946                       if(len)
;;;8947                       {
;;;8948                           if(pqueue->QIn != (MBLK *)0)
;;;8949                           {
;;;8950                               SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)&LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], len);
;;;8951                               //LL_Para_IntervalR.DataIdxN += Len;
;;;8952                           }
;;;8953                           else
;;;8954                           {
;;;8955                               len = 0;
;;;8956                           }
;;;8957                       }
;;;8958                   }
;;;8959                   else
;;;8960                   {
;;;8961                       len = 0;
;;;8962                   }
;;;8963               }
;;;8964           }
;;;8965           else
;;;8966           {
;;;8967               if(LL_Para_IntervalR.DataIdxN==0)
;;;8968               {
;;;8969                   pqueue->QOut = (MBLK *)0;
;;;8970                   pqueue->QIn = (MBLK *)0;
;;;8971                   len = 0;
;;;8972               }
;;;8973           }
;;;8974       }
;;;8975       else
;;;8976       {
;;;8977           if(LL_Para_IntervalR.HeaderLen > LL_Para_IntervalR.DataIdxN)
000020  4290              CMP      r0,r2
000022  d901              BLS      |L74.40|
;;;8978           {
;;;8979               if(len)
;;;8980               {
;;;8981                   if(pqueue->QIn != (MBLK *)0)
000024  2b00              CMP      r3,#0
000026  d108              BNE      |L74.58|
                  |L74.40|
;;;8982                   {
;;;8983                       SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)&LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], len);
;;;8984                       //LL_Para_IntervalR.DataIdxN += Len;
;;;8985                   }
;;;8986                   else
;;;8987                   {
;;;8988                       len = 0;
;;;8989                   }
;;;8990               }
;;;8991           }
;;;8992           else
;;;8993           {
;;;8994               len = 0;
;;;8995           }
;;;8996       }
;;;8997       if(len)
;;;8998       {
;;;8999           SPI_PDMA_waitFinish();
;;;9000           Len2 = len;
;;;9001           while(Len2 != 0)
;;;9002           {
;;;9003   
;;;9004               if(len > SIZE_MBLK_ACL_DATA_UNIT)
;;;9005               {
;;;9006                   len = (SIZE_MBLK_ACL_DATA_UNIT-1);
;;;9007                   Len2 -= (SIZE_MBLK_ACL_DATA_UNIT-1);
;;;9008               }
;;;9009               else
;;;9010               {
;;;9011                   len = Len2;
;;;9012                   Len2 -= len;
;;;9013               }
;;;9014   
;;;9015               if(LL_Para_IntervalR.DataIdxF == 0xFF)
;;;9016               {
;;;9017                   if(LL_ConnDataInQ[tblk_LL_pi->ConnId].QOut != (MBLK *)0)
;;;9018                   {
;;;9019                       idx = (LL_ConnDataInQ[tblk_LL_pi->ConnId].QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL + LL_Para_IntervalR.DataIdxN;
;;;9020   
;;;9021                       if((idx+len)<SIZE_MBLK_ACL_DATA_UNIT)
;;;9022                       {
;;;9023                           Knl_MemCpy_Isr(&LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[idx], &LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], len);
;;;9024                       }
;;;9025                       else
;;;9026                       {
;;;9027                           if(idx<SIZE_MBLK_ACL_DATA_UNIT)
;;;9028                           {
;;;9029                               Knl_MemCpy_Isr(&LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[idx], &LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], (SIZE_MBLK_ACL_DATA_UNIT-idx));
;;;9030                               i = len-(SIZE_MBLK_ACL_DATA_UNIT-idx);
;;;9031                               Knl_MemCpy_Isr(LL_ConnBuffPrcsR.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, &LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN+(SIZE_MBLK_ACL_DATA_UNIT-idx)], i);
;;;9032                               LL_ConnBuffPrcsR.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = i;
;;;9033                           }
;;;9034                           else
;;;9035                           {
;;;9036                               i = len-(idx-SIZE_MBLK_ACL_DATA_UNIT);
;;;9037                               Knl_MemCpy_Isr(LL_ConnBuffPrcsR.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, &LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], i);
;;;9038                               LL_ConnBuffPrcsR.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = i;
;;;9039                           }
;;;9040                           if(LL_ConnBuffPrcsR.BufPrcsN != (MBLK *)0)
;;;9041                           {
;;;9042                               LL_ConnBuffPrcsR.BufPrcsF = LL_ConnBuffPrcsR.BufPrcsN;
;;;9043                               //                    if(LL_ConnBuffPrcsR.BufPrcsN->Next !=(MBLK *)0)
;;;9044                               //                    {
;;;9045                               LL_ConnBuffPrcsR.BufPrcsN = LL_ConnBuffPrcsR.BufPrcsN->Next;
;;;9046                               //                    }
;;;9047                           }
;;;9048                           LL_Para_IntervalR.DataIdxF = 0;
;;;9049                       }
;;;9050                       LL_Para_IntervalR.DataIdxN += len;
;;;9051                   }
;;;9052                   else
;;;9053                   {
;;;9054                       FreeMsgBlks_Isr(LL_ConnDataInTmp.QOut);
;;;9055                       LL_ConnDataInTmp.QOut = (MBLK *)0;
;;;9056                       LL_ConnDataInTmp.QIn = (MBLK *)0;
;;;9057                   }
;;;9058               }
;;;9059               else
;;;9060               {
;;;9061                   if(LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL != LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0)
;;;9062                   {
;;;9063                       i = LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL-LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0;
;;;9064                       idx = LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0;
;;;9065                       if((idx+len)>SIZE_MBLK_ACL_DATA_UNIT)
;;;9066                       {
;;;9067                           Knl_MemCpy_Isr(&LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[idx], &LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], i);
;;;9068                           LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 += i;
;;;9069                           if(LL_ConnBuffPrcsR.BufPrcsF != LL_ConnBuffPrcsR.BufPrcsN)
;;;9070                           {
;;;9071                               Knl_MemCpy_Isr(LL_ConnBuffPrcsR.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, &LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN+i], (len-i));
;;;9072                               LL_ConnBuffPrcsR.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 += (len-i);
;;;9073                           }
;;;9074                       }
;;;9075                       else
;;;9076                       {
;;;9077                           Knl_MemCpy_Isr(&LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[idx], &LL_Para_IntervalR.Data[LL_Para_IntervalR.DataIdxN], len);
;;;9078                           LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 += len;
;;;9079                       }
;;;9080                       if(LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL == LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0)
;;;9081                       {
;;;9082                           if(LL_ConnBuffPrcsR.BufPrcsN !=(MBLK *)0)
;;;9083                           {
;;;9084                               LL_ConnBuffPrcsR.BufPrcsF = LL_ConnBuffPrcsR.BufPrcsN;
;;;9085                               //                    if(LL_ConnBuffPrcsR.BufPrcsN->Next !=(MBLK *)0)
;;;9086                               //                    {
;;;9087                               LL_ConnBuffPrcsR.BufPrcsN = LL_ConnBuffPrcsR.BufPrcsN->Next;
;;;9088                           }
;;;9089                       }
;;;9090                       LL_Para_IntervalR.DataIdxN += len;
;;;9091                   }
;;;9092               }
;;;9093           }
;;;9094       }
;;;9095   }
000028  bdf8              POP      {r3-r7,pc}
                  |L74.42|
00002a  2800              CMP      r0,#0                 ;8870
00002c  d056              BEQ      |L74.220|
00002e  2a00              CMP      r2,#0                 ;8872
000030  d008              BEQ      |L74.68|
000032  4290              CMP      r0,r2                 ;8944
000034  d9f8              BLS      |L74.40|
000036  2b00              CMP      r3,#0                 ;8948
000038  d0f6              BEQ      |L74.40|
                  |L74.58|
00003a  4622              MOV      r2,r4                 ;8950
00003c  20ff              MOVS     r0,#0xff              ;8950
00003e  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000042  e042              B        |L74.202|
                  |L74.68|
000044  9000              STR      r0,[sp,#0]            ;8879
000046  f7fffffe          BL       GetMsgBlk_L1_wSize_Isr
00004a  4605              MOV      r5,r0                 ;8879
00004c  6078              STR      r0,[r7,#4]            ;8883
00004e  0028              MOVS     r0,r5                 ;8883
000050  487e              LDR      r0,|L74.588|
000052  d028              BEQ      |L74.166|
000054  7840              LDRB     r0,[r0,#1]            ;8891  ; LL_Para_IntervalR
000056  4622              MOV      r2,r4                 ;8891
000058  1981              ADDS     r1,r0,r6              ;8891
00005a  20ff              MOVS     r0,#0xff              ;8891
00005c  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000060  2278              MOVS     r2,#0x78              ;8896
000062  2129              MOVS     r1,#0x29              ;8904
000064  2000              MOVS     r0,#0                 ;8904
                  |L74.102|
000066  603d              STR      r5,[r7,#0]            ;8896
000068  712a              STRB     r2,[r5,#4]            ;8896
00006a  7268              STRB     r0,[r5,#9]            ;8897
00006c  7228              STRB     r0,[r5,#8]            ;8898
00006e  9b00              LDR      r3,[sp,#0]            ;8900
000070  2b00              CMP      r3,#0                 ;8900
000072  d006              BEQ      |L74.130|
000074  2b29              CMP      r3,#0x29              ;8902
000076  d91a              BLS      |L74.174|
000078  72a9              STRB     r1,[r5,#0xa]          ;8904
00007a  9b00              LDR      r3,[sp,#0]            ;8905
00007c  3b29              SUBS     r3,r3,#0x29           ;8905
00007e  b2db              UXTB     r3,r3                 ;8905
000080  9300              STR      r3,[sp,#0]            ;8905
                  |L74.130|
000082  682d              LDR      r5,[r5,#0]            ;8915
000084  2d00              CMP      r5,#0                 ;8915
000086  d1ee              BNE      |L74.102|
                  |L74.136|
000088  4d70              LDR      r5,|L74.588|
00008a  78a9              LDRB     r1,[r5,#2]            ;8922  ; LL_Para_IntervalR
00008c  0789              LSLS     r1,r1,#30             ;8922
00008e  0f89              LSRS     r1,r1,#30             ;8922
000090  2901              CMP      r1,#1                 ;8922
000092  d010              BEQ      |L74.182|
000094  4b6e              LDR      r3,|L74.592|
000096  687a              LDR      r2,[r7,#4]            ;8929
000098  601a              STR      r2,[r3,#0]            ;8930  ; LL_ConnBuffPrcsR
00009a  6879              LDR      r1,[r7,#4]            ;8930
00009c  6809              LDR      r1,[r1,#0]            ;8930
00009e  2900              CMP      r1,#0                 ;8930
0000a0  d00f              BEQ      |L74.194|
0000a2  6059              STR      r1,[r3,#4]            ;8932  ; LL_ConnBuffPrcsR
0000a4  e00e              B        |L74.196|
                  |L74.166|
0000a6  78c1              LDRB     r1,[r0,#3]            ;8885  ; LL_Para_IntervalR
0000a8  7041              STRB     r1,[r0,#1]            ;8885
0000aa  2000              MOVS     r0,#0                 ;8886
0000ac  e01a              B        |L74.228|
                  |L74.174|
0000ae  72ab              STRB     r3,[r5,#0xa]          ;8909
0000b0  603d              STR      r5,[r7,#0]            ;8911
0000b2  6028              STR      r0,[r5,#0]            ;8911
0000b4  e7e8              B        |L74.136|
                  |L74.182|
0000b6  4866              LDR      r0,|L74.592|
0000b8  6839              LDR      r1,[r7,#0]            ;8924
0000ba  6001              STR      r1,[r0,#0]            ;8925  ; LL_ConnBuffPrcsR
0000bc  6879              LDR      r1,[r7,#4]            ;8925
0000be  6041              STR      r1,[r0,#4]            ;8925  ; LL_ConnBuffPrcsR
0000c0  e001              B        |L74.198|
                  |L74.194|
0000c2  605a              STR      r2,[r3,#4]            ;8936  ; LL_ConnBuffPrcsR
                  |L74.196|
0000c4  7028              STRB     r0,[r5,#0]            ;8938
                  |L74.198|
0000c6  2c00              CMP      r4,#0                 ;8997
0000c8  d0ae              BEQ      |L74.40|
                  |L74.202|
0000ca  f7fffffe          BL       SPI_PDMA_waitFinish
0000ce  4625              MOV      r5,r4                 ;9000
                  |L74.208|
0000d0  2c29              CMP      r4,#0x29              ;9004
0000d2  d90a              BLS      |L74.234|
0000d4  2428              MOVS     r4,#0x28              ;9006
0000d6  3d28              SUBS     r5,r5,#0x28           ;9006
0000d8  b2ed              UXTB     r5,r5                 ;9007
0000da  e008              B        |L74.238|
                  |L74.220|
0000dc  2a00              CMP      r2,#0                 ;8967
0000de  d1f4              BNE      |L74.202|
0000e0  2000              MOVS     r0,#0                 ;8969
0000e2  6078              STR      r0,[r7,#4]            ;8969
                  |L74.228|
0000e4  6038              STR      r0,[r7,#0]            ;8970
0000e6  bdf8              POP      {r3-r7,pc}
                  |L74.232|
0000e8  e0ac              B        |L74.580|
                  |L74.234|
0000ea  462c              MOV      r4,r5                 ;9011
0000ec  2500              MOVS     r5,#0                 ;9012
                  |L74.238|
0000ee  4857              LDR      r0,|L74.588|
0000f0  7800              LDRB     r0,[r0,#0]            ;9015  ; LL_Para_IntervalR
0000f2  28ff              CMP      r0,#0xff              ;9015
0000f4  d03f              BEQ      |L74.374|
0000f6  4b56              LDR      r3,|L74.592|
0000f8  681a              LDR      r2,[r3,#0]            ;9061  ; LL_ConnBuffPrcsR
0000fa  7a91              LDRB     r1,[r2,#0xa]          ;9061
0000fc  7a50              LDRB     r0,[r2,#9]            ;9061
0000fe  4281              CMP      r1,r0                 ;9061
000100  d036              BEQ      |L74.368|
000102  1a09              SUBS     r1,r1,r0              ;9063
000104  b2cf              UXTB     r7,r1                 ;9063
000106  1901              ADDS     r1,r0,r4              ;9065
000108  2929              CMP      r1,#0x29              ;9065
00010a  4950              LDR      r1,|L74.588|
00010c  7849              LDRB     r1,[r1,#1]            ;9077  ; LL_Para_IntervalR
00010e  d97d              BLS      |L74.524|
000110  300b              ADDS     r0,r0,#0xb            ;9067
000112  1810              ADDS     r0,r2,r0              ;9067
000114  1989              ADDS     r1,r1,r6              ;9067
000116  463a              MOV      r2,r7                 ;9067
000118  f7fffffe          BL       Knl_MemCpy_Isr
00011c  484c              LDR      r0,|L74.592|
00011e  6801              LDR      r1,[r0,#0]            ;9068  ; LL_ConnBuffPrcsR
000120  7a48              LDRB     r0,[r1,#9]            ;9068
000122  19c0              ADDS     r0,r0,r7              ;9068
000124  7248              STRB     r0,[r1,#9]            ;9068
000126  484a              LDR      r0,|L74.592|
000128  6840              LDR      r0,[r0,#4]            ;9069  ; LL_ConnBuffPrcsR
00012a  4281              CMP      r1,r0                 ;9069
00012c  d010              BEQ      |L74.336|
00012e  1be1              SUBS     r1,r4,r7              ;9071
000130  b2ca              UXTB     r2,r1                 ;9071
000132  9100              STR      r1,[sp,#0]            ;9071
000134  4945              LDR      r1,|L74.588|
000136  1d3f              ADDS     r7,r7,#4              ;9071
000138  784b              LDRB     r3,[r1,#1]            ;9071  ; LL_Para_IntervalR
00013a  300b              ADDS     r0,r0,#0xb            ;9071
00013c  1859              ADDS     r1,r3,r1              ;9071
00013e  19c9              ADDS     r1,r1,r7              ;9071
000140  4f43              LDR      r7,|L74.592|
000142  f7fffffe          BL       Knl_MemCpy_Isr
000146  6878              LDR      r0,[r7,#4]            ;9072  ; LL_ConnBuffPrcsR
000148  9900              LDR      r1,[sp,#0]            ;9072
00014a  7a42              LDRB     r2,[r0,#9]            ;9072
00014c  1851              ADDS     r1,r2,r1              ;9072
                  |L74.334|
00014e  7241              STRB     r1,[r0,#9]            ;9072
                  |L74.336|
000150  493f              LDR      r1,|L74.592|
000152  6808              LDR      r0,[r1,#0]            ;9080  ; LL_ConnBuffPrcsR
000154  7a82              LDRB     r2,[r0,#0xa]          ;9080
000156  7a40              LDRB     r0,[r0,#9]            ;9080
000158  4282              CMP      r2,r0                 ;9080
00015a  d105              BNE      |L74.360|
00015c  6848              LDR      r0,[r1,#4]            ;9082  ; LL_ConnBuffPrcsR
00015e  2800              CMP      r0,#0                 ;9082
000160  d002              BEQ      |L74.360|
000162  6008              STR      r0,[r1,#0]            ;9087  ; LL_ConnBuffPrcsR
000164  6800              LDR      r0,[r0,#0]            ;9087
000166  6048              STR      r0,[r1,#4]            ;9087  ; LL_ConnBuffPrcsR
                  |L74.360|
000168  4838              LDR      r0,|L74.588|
00016a  7841              LDRB     r1,[r0,#1]            ;9090  ; LL_Para_IntervalR
00016c  1909              ADDS     r1,r1,r4              ;9090
00016e  7041              STRB     r1,[r0,#1]            ;9090
                  |L74.368|
000170  2d00              CMP      r5,#0                 ;9001
000172  d1ad              BNE      |L74.208|
000174  bdf8              POP      {r3-r7,pc}
                  |L74.374|
000176  4837              LDR      r0,|L74.596|
000178  4937              LDR      r1,|L74.600|
00017a  6980              LDR      r0,[r0,#0x18]         ;9017  ; tblk_LL_pi
00017c  7840              LDRB     r0,[r0,#1]            ;9017
00017e  00c0              LSLS     r0,r0,#3              ;9017
000180  1842              ADDS     r2,r0,r1              ;9017
000182  6852              LDR      r2,[r2,#4]            ;9017
000184  2a00              CMP      r2,#0                 ;9017
000186  d04a              BEQ      |L74.542|
000188  5808              LDR      r0,[r1,r0]            ;9019
00018a  7a82              LDRB     r2,[r0,#0xa]          ;9019
00018c  482f              LDR      r0,|L74.588|
00018e  7841              LDRB     r1,[r0,#1]            ;9019  ; LL_Para_IntervalR
000190  1850              ADDS     r0,r2,r1              ;9019
000192  b2c0              UXTB     r0,r0                 ;9019
000194  1902              ADDS     r2,r0,r4              ;9021
000196  2a29              CMP      r2,#0x29              ;9021
000198  d208              BCS      |L74.428|
00019a  4a2d              LDR      r2,|L74.592|
00019c  300b              ADDS     r0,r0,#0xb            ;9023
00019e  6812              LDR      r2,[r2,#0]            ;9023  ; LL_ConnBuffPrcsR
0001a0  1989              ADDS     r1,r1,r6              ;9023
0001a2  1810              ADDS     r0,r2,r0              ;9023
0001a4  4622              MOV      r2,r4                 ;9023
0001a6  f7fffffe          BL       Knl_MemCpy_Isr
0001aa  e7dd              B        |L74.360|
                  |L74.428|
0001ac  2829              CMP      r0,#0x29              ;9027
0001ae  d21c              BCS      |L74.490|
0001b0  2229              MOVS     r2,#0x29              ;9029
0001b2  4b27              LDR      r3,|L74.592|
0001b4  1a17              SUBS     r7,r2,r0              ;9029
0001b6  681b              LDR      r3,[r3,#0]            ;9029  ; LL_ConnBuffPrcsR
0001b8  300b              ADDS     r0,r0,#0xb            ;9029
0001ba  b2fa              UXTB     r2,r7                 ;9029
0001bc  1989              ADDS     r1,r1,r6              ;9029
0001be  1818              ADDS     r0,r3,r0              ;9029
0001c0  f7fffffe          BL       Knl_MemCpy_Isr
0001c4  1be0              SUBS     r0,r4,r7              ;9030
0001c6  b2c0              UXTB     r0,r0                 ;9030
0001c8  9000              STR      r0,[sp,#0]            ;9031
0001ca  4820              LDR      r0,|L74.588|
0001cc  1d3f              ADDS     r7,r7,#4              ;9031
0001ce  7841              LDRB     r1,[r0,#1]            ;9031  ; LL_Para_IntervalR
0001d0  9a00              LDR      r2,[sp,#0]            ;9031
0001d2  1808              ADDS     r0,r1,r0              ;9031
0001d4  19c1              ADDS     r1,r0,r7              ;9031
0001d6  481e              LDR      r0,|L74.592|
0001d8  6840              LDR      r0,[r0,#4]            ;9031  ; LL_ConnBuffPrcsR
0001da  300b              ADDS     r0,r0,#0xb            ;9031
0001dc  f7fffffe          BL       Knl_MemCpy_Isr
0001e0  491b              LDR      r1,|L74.592|
0001e2  9800              LDR      r0,[sp,#0]            ;9032
0001e4  6849              LDR      r1,[r1,#4]            ;9032  ; LL_ConnBuffPrcsR
0001e6  7248              STRB     r0,[r1,#9]            ;9032
0001e8  e00c              B        |L74.516|
                  |L74.490|
0001ea  1a20              SUBS     r0,r4,r0              ;9036
0001ec  3029              ADDS     r0,r0,#0x29           ;9036
0001ee  b2c7              UXTB     r7,r0                 ;9036
0001f0  4817              LDR      r0,|L74.592|
0001f2  1989              ADDS     r1,r1,r6              ;9037
0001f4  6840              LDR      r0,[r0,#4]            ;9037  ; LL_ConnBuffPrcsR
0001f6  463a              MOV      r2,r7                 ;9037
0001f8  300b              ADDS     r0,r0,#0xb            ;9037
0001fa  f7fffffe          BL       Knl_MemCpy_Isr
0001fe  4814              LDR      r0,|L74.592|
000200  6840              LDR      r0,[r0,#4]            ;9038  ; LL_ConnBuffPrcsR
000202  7247              STRB     r7,[r0,#9]            ;9038
                  |L74.516|
000204  4912              LDR      r1,|L74.592|
000206  6848              LDR      r0,[r1,#4]            ;9040  ; LL_ConnBuffPrcsR
000208  2800              CMP      r0,#0                 ;9040
00020a  e000              B        |L74.526|
                  |L74.524|
00020c  e00f              B        |L74.558|
                  |L74.526|
00020e  d002              BEQ      |L74.534|
000210  6008              STR      r0,[r1,#0]            ;9045  ; LL_ConnBuffPrcsR
000212  6800              LDR      r0,[r0,#0]            ;9045
000214  6048              STR      r0,[r1,#4]            ;9045  ; LL_ConnBuffPrcsR
                  |L74.534|
000216  480d              LDR      r0,|L74.588|
000218  2100              MOVS     r1,#0                 ;9048
00021a  7001              STRB     r1,[r0,#0]            ;9048
00021c  e7a4              B        |L74.360|
                  |L74.542|
00021e  4f0a              LDR      r7,|L74.584|
000220  6878              LDR      r0,[r7,#4]            ;9054  ; LL_ConnDataInTmp
000222  f7fffffe          BL       FreeMsgBlks_Isr
000226  2000              MOVS     r0,#0                 ;9055
000228  6078              STR      r0,[r7,#4]            ;9056  ; LL_ConnDataInTmp
00022a  6038              STR      r0,[r7,#0]            ;9056  ; LL_ConnDataInTmp
00022c  e7a0              B        |L74.368|
                  |L74.558|
00022e  300b              ADDS     r0,r0,#0xb            ;9077
000230  1810              ADDS     r0,r2,r0              ;9077
000232  1989              ADDS     r1,r1,r6              ;9077
000234  4f06              LDR      r7,|L74.592|
000236  4622              MOV      r2,r4                 ;9077
000238  f7fffffe          BL       Knl_MemCpy_Isr
00023c  6838              LDR      r0,[r7,#0]            ;9078  ; LL_ConnBuffPrcsR
00023e  7a41              LDRB     r1,[r0,#9]            ;9078
000240  1909              ADDS     r1,r1,r4              ;9078
000242  e784              B        |L74.334|
                  |L74.580|
000244  4770              BX       lr                    ;9078
;;;9096   
                          ENDP

000246  0000              DCW      0x0000
                  |L74.584|
                          DCD      ||.data||+0x54
                  |L74.588|
                          DCD      ||.bss||+0x460
                  |L74.592|
                          DCD      ||.data||+0x64
                  |L74.596|
                          DCD      ||.data||
                  |L74.600|
                          DCD      ||.bss||+0x3c8

                          AREA ||i.LLWTR_Buffer_nAck_Isr||, CODE, READONLY, ALIGN=2

                  LLWTR_Buffer_nAck_Isr PROC
;;;5306   
;;;5307   MBLK* LLWTR_Buffer_nAck_Isr(Uint8 LL_Conn_ID)
000000  b410              PUSH     {r4}
;;;5308   {
;;;5309       MBLK *mblk;
;;;5310   
;;;5311       mblk = LL_ConnBuffPt[LL_Conn_ID];
000002  4b07              LDR      r3,|L75.32|
000004  0082              LSLS     r2,r0,#2
000006  5898              LDR      r0,[r3,r2]
000008  2100              MOVS     r1,#0
                  |L75.10|
;;;5312       while(1)
;;;5313       {
;;;5314           if(mblk != (MBLK *)0)
00000a  2800              CMP      r0,#0
00000c  d005              BEQ      |L75.26|
;;;5315           {
;;;5316               if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1)
00000e  7a04              LDRB     r4,[r0,#8]
000010  2c00              CMP      r4,#0
000012  d002              BEQ      |L75.26|
;;;5317               {
;;;5318                   mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
000014  7201              STRB     r1,[r0,#8]
;;;5319                   mblk = mblk->Next;
000016  6800              LDR      r0,[r0,#0]
000018  e7f7              B        |L75.10|
                  |L75.26|
;;;5320               }
;;;5321               else
;;;5322                   break;
;;;5323           }
;;;5324           else
;;;5325               break;
;;;5326       }
;;;5327   
;;;5328       return LL_ConnBuffPt[LL_Conn_ID];
00001a  5898              LDR      r0,[r3,r2]
;;;5329   }
00001c  bc10              POP      {r4}
00001e  4770              BX       lr
;;;5330   
                          ENDP

                  |L75.32|
                          DCD      ||.bss||+0x3f0

                          AREA ||i.LLWTR_Buffer_wAck_Isr||, CODE, READONLY, ALIGN=2

                  LLWTR_Buffer_wAck_Isr PROC
;;;5216   
;;;5217   MBLK* LLWTR_Buffer_wAck_Isr(Uint8 LL_Conn_ID)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5218   {
;;;5219       MBLK *mblk;
;;;5220       Uint8 end;
;;;5221   
;;;5222       end = 0;
000002  2600              MOVS     r6,#0
;;;5223       mblk = LL_ConnBuffPt[LL_Conn_ID];
000004  4d16              LDR      r5,|L76.96|
000006  0084              LSLS     r4,r0,#2
000008  5928              LDR      r0,[r5,r4]
00000a  4637              MOV      r7,r6
                  |L76.12|
;;;5224       while(1)
;;;5225       {
;;;5226           if(mblk != (MBLK *)0)
00000c  2800              CMP      r0,#0
00000e  d017              BEQ      |L76.64|
;;;5227           {
;;;5228               if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1)
000010  7a01              LDRB     r1,[r0,#8]
000012  2900              CMP      r1,#0
000014  d01f              BEQ      |L76.86|
;;;5229               {
;;;5230                   if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 > mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1)
000016  7a42              LDRB     r2,[r0,#9]
000018  428a              CMP      r2,r1
00001a  d905              BLS      |L76.40|
;;;5231                   {
;;;5232                       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 -= mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1;
00001c  b2d1              UXTB     r1,r2
00001e  7a02              LDRB     r2,[r0,#8]
000020  1a89              SUBS     r1,r1,r2
000022  7241              STRB     r1,[r0,#9]
;;;5233                       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
000024  7207              STRB     r7,[r0,#8]
;;;5234                       break;
000026  e00b              B        |L76.64|
                  |L76.40|
;;;5235                   }
;;;5236                   else
;;;5237                   {
;;;5238                       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = 0;
000028  7247              STRB     r7,[r0,#9]
;;;5239                       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
00002a  7207              STRB     r7,[r0,#8]
;;;5240                       LL_ConnBuffPt[LL_Conn_ID] = mblk->Next;
00002c  6801              LDR      r1,[r0,#0]
00002e  5129              STR      r1,[r5,r4]
;;;5241                   }
;;;5242               }
;;;5243               else
;;;5244               {
;;;5245                   mblk = (MBLK *)0;
;;;5246                   break;
;;;5247               }
;;;5248               //if(mblk->Next != (MBLK *)0)
;;;5249               if(LL_ConnBuffPt[LL_Conn_ID] != (MBLK *)0)
000030  2900              CMP      r1,#0
000032  d007              BEQ      |L76.68|
;;;5250               {
;;;5251                   FreeMsgBlk_Isr(mblk);
000034  f7fffffe          BL       FreeMsgBlk_Isr
;;;5252                   mblk = LL_ConnBuffPt[LL_Conn_ID];
000038  5928              LDR      r0,[r5,r4]
;;;5253                   if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 == 0)
00003a  7a01              LDRB     r1,[r0,#8]
00003c  2900              CMP      r1,#0
00003e  d1e5              BNE      |L76.12|
                  |L76.64|
;;;5254                   {
;;;5255                       break;
;;;5256                   }
;;;5257               }
;;;5258               else
;;;5259               {
;;;5260                   end = 1;
;;;5261                   break;
;;;5262               }
;;;5263           }
;;;5264           else
;;;5265               break;
;;;5266       }
;;;5267       if(end)
000040  2e00              CMP      r6,#0
000042  d00c              BEQ      |L76.94|
                  |L76.68|
;;;5268       {
;;;5269           //if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0==0)
;;;5270           {
;;;5271               //if(mblk->Next == (MBLK *)0)
;;;5272               {
;;;5273                   switch(mblk->Primitive)
000044  7901              LDRB     r1,[r0,#4]
000046  29e6              CMP      r1,#0xe6
000048  d003              BEQ      |L76.82|
00004a  29ef              CMP      r1,#0xef
00004c  d005              BEQ      |L76.90|
00004e  29f0              CMP      r1,#0xf0
000050  d105              BNE      |L76.94|
                  |L76.82|
;;;5274                   {
;;;5275                   case HCLL_LE_ACL_DATA_PKT:
;;;5276                   case HCLL_LE_ACL_DATA_PKT_EXTEND:
;;;5277                       mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_H = (LL_DATA_LLID_START_COMPLETE|LL_PKT_TX_EI);
000052  2142              MOVS     r1,#0x42
;;;5278                       break;
000054  e002              B        |L76.92|
                  |L76.86|
000056  2000              MOVS     r0,#0                 ;5245
000058  e7f2              B        |L76.64|
                  |L76.90|
;;;5279   
;;;5280                   case MLL_LE_CTRL_PKT:
;;;5281                       mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_Conn_Hdl_H = LL_DATA_LLID_CONTROL;
00005a  2103              MOVS     r1,#3
                  |L76.92|
00005c  7241              STRB     r1,[r0,#9]            ;5277
                  |L76.94|
;;;5282                       break;
;;;5283   
;;;5284                   default:
;;;5285                       break;
;;;5286                   }
;;;5287               }
;;;5288               /*
;;;5289                           else
;;;5290                           {
;;;5291                               LL_ConnBuffPt[LL_Conn_ID] = mblk->Next;
;;;5292   
;;;5293                               FreeMsgBlk_Isr(mblk);
;;;5294                               //mblk->Next = (MBLK *)0;
;;;5295                               //mblk = (MBLK *)0;
;;;5296                           }
;;;5297               */
;;;5298           }
;;;5299           //else
;;;5300           //mblk = (MBLK *)0;
;;;5301       }
;;;5302   
;;;5303       return mblk;
;;;5304   }
00005e  bdf8              POP      {r3-r7,pc}
;;;5305   
                          ENDP

                  |L76.96|
                          DCD      ||.bss||+0x3f0

                          AREA ||i.LLWTR_Isr||, CODE, READONLY, ALIGN=2

                  LLWTR_Isr PROC
;;;7545   
;;;7546   void LLWTR_Isr(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;7547   {
;;;7548       Uint8 tblk_i, j;
;;;7549       Uint8 k, len;
;;;7550       uint8_t *ptAddr;
;;;7551       Uint32 i16;
;;;7552       MBLK *mblk;
;;;7553       LL_Para_Header HeaderR;
;;;7554       struct Conn_Req_Para * connReqRx;
;;;7555   #if MAX_NUM_CONN_MAS_HDL != 0
;;;7556       Uint16 j16, *pi16;
;;;7557       struct Conn_Req_Para_Alt * connReqTx;
;;;7558       Uint32 u32i;
;;;7559   #endif
;;;7560       extern uint32_t Timeline24;
;;;7561       extern const uint8_t TIMELINE24_3750US_IDX[];
;;;7562       extern void LLWTRFIFOGet_Isr(Uint8 len);
;;;7563   
;;;7564       tblk_i = tblk_LL_pi->ConnId;
000002  4df8              LDR      r5,|L77.996|
000004  b089              SUB      sp,sp,#0x24           ;7547
000006  69a8              LDR      r0,[r5,#0x18]  ; tblk_LL_pi
000008  7846              LDRB     r6,[r0,#1]
00000a  4628              MOV      r0,r5
;;;7565       if(tblk_i<LL_CONN_ID_ADV_PARA)       //Connection
;;;7566       {
;;;7567           LL_ConnDataTmpGate = 0;
;;;7568   #if MAX_NUM_CONN_MAS_HDL != 0
;;;7569           if(tblk_i<MAX_NUM_CONN_MAS_HDL)      //Master ISR
;;;7570           {
;;;7571               switch(status_LL_Tmr)
00000c  79c1              LDRB     r1,[r0,#7]
00000e  2e05              CMP      r6,#5                 ;7565
000010  d300              BCC      |L77.20|
000012  e3eb              B        |L77.2028|
                  |L77.20|
000014  2400              MOVS     r4,#0                 ;7567
000016  7084              STRB     r4,[r0,#2]            ;7567
;;;7572               {
;;;7573               case LL_INT_S40:
;;;7574               case LL_INT_S43:
;;;7575                   if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_TERM_IND_RCVD)
;;;7576                   {
;;;7577                       rafael_reset_phy_fsm_Isr();     //avoid auto Rx by RF
;;;7578                       status_LL_Tmr = LL_INT_S45;
;;;7579                       break;
;;;7580                   }
;;;7581                   status_LL_Tmr = LL_INT_S42;
;;;7582                   if(LL_conn_pi->LE_Conn_Para.LL_SMP_Gate != LL_SMP_GATE_OFF)
;;;7583                   {
;;;7584                       RF_TxAutoAckOff();
;;;7585                       LL_RxExit_Isr();    //stop RF
;;;7586                       status_LL_Tmr = LL_INT_S44;
;;;7587                   }
;;;7588                   if(LLWTR_MDset(tblk_LL_pi2, DUR_LL_RSV_CONN_MD_SMS))
;;;7589                   {
;;;7590                       RF_TxAutoAckOff();
;;;7591                       LL_RxExit_Isr();    //stop RF
;;;7592                       status_LL_Tmr = LL_INT_S44;
;;;7593                   }
;;;7594                   if((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM))
;;;7595                   {
;;;7596                       RF_CCM_NoncePktCnt_set(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterR);
;;;7597                   }
;;;7598                   RF_CCM_AES_Mode_set((LL_SMP_DataCh&LL_SMP_DATA_CH_R_T_CCM));
;;;7599                   break;
;;;7600   
;;;7601               case LL_INT_S41:
;;;7602               case LL_INT_S42:
;;;7603                   HeaderR.HeaderSts = LL_Para_IntervalR.HeaderSts;
000018  4af3              LDR      r2,|L77.1000|
00001a  6a00              LDR      r0,[r0,#0x20]         ;7575
00001c  7895              LDRB     r5,[r2,#2]
;;;7604                   HeaderR.HeaderLen = LL_Para_IntervalR.HeaderLen;
00001e  78d2              LDRB     r2,[r2,#3]
000020  4603              MOV      r3,r0                 ;7582
000022  4694              MOV      r12,r2
;;;7605                   tblk_i = LL_conn_pi->LE_Conn_Para.WinSize_DataHdr&(FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN);
;;;7606                   if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_INIT)
;;;7607                   {
;;;7608                       LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7609                       LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = 0;
000024  4602              MOV      r2,r0
000026  3340              ADDS     r3,r3,#0x40           ;7582
000028  3280              ADDS     r2,r2,#0x80
00002a  2e04              CMP      r6,#4                 ;7569
00002c  d27d              BCS      |L77.298|
00002e  272c              MOVS     r7,#0x2c              ;7571
000030  3928              SUBS     r1,r1,#0x28           ;7571
000032  2905              CMP      r1,#5                 ;7571
000034  d22e              BCS      |L77.148|
000036  000e              MOVS     r6,r1                 ;7571
000038  447e              ADD      r6,r6,pc              ;7571
00003a  7936              LDRB     r6,[r6,#4]            ;7571
00003c  19b6              ADDS     r6,r6,r6              ;7571
00003e  44b7              ADD      pc,pc,r6              ;7571
000040  022f2f02          DCB      0x02,0x2f,0x2f,0x02
000044  f800              DCB      0xf8,0x00
000046  7800              LDRB     r0,[r0,#0]            ;7575
000048  4ce6              LDR      r4,|L77.996|
00004a  2882              CMP      r0,#0x82              ;7575
00004c  d024              BEQ      |L77.152|
00004e  202a              MOVS     r0,#0x2a              ;7581
000050  71e0              STRB     r0,[r4,#7]            ;7581
000052  7cd8              LDRB     r0,[r3,#0x13]         ;7582
000054  2800              CMP      r0,#0                 ;7582
000056  d004              BEQ      |L77.98|
000058  f7fffffe          BL       RF_TxAutoAckOff
00005c  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000060  71e7              STRB     r7,[r4,#7]            ;7586
                  |L77.98|
000062  2138              MOVS     r1,#0x38              ;7588
000064  69e0              LDR      r0,[r4,#0x1c]         ;7588  ; tblk_LL_pi2
000066  f7fffffe          BL       LLWTR_MDset
00006a  2800              CMP      r0,#0                 ;7588
00006c  d004              BEQ      |L77.120|
00006e  f7fffffe          BL       RF_TxAutoAckOff
000072  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000076  71e7              STRB     r7,[r4,#7]            ;7592
                  |L77.120|
000078  79a0              LDRB     r0,[r4,#6]            ;7594  ; LL_SMP_DataCh
00007a  0780              LSLS     r0,r0,#30             ;7594
00007c  d505              BPL      |L77.138|
00007e  6a21              LDR      r1,[r4,#0x20]         ;7596  ; LL_conn_pi
000080  2205              MOVS     r2,#5                 ;7596
000082  207e              MOVS     r0,#0x7e              ;7596
000084  3178              ADDS     r1,r1,#0x78           ;7596
000086  f7fffffe          BL       SPI_PDMA_SetTx
                  |L77.138|
00008a  79a0              LDRB     r0,[r4,#6]            ;7598  ; LL_SMP_DataCh
00008c  0780              LSLS     r0,r0,#30             ;7598
00008e  0f80              LSRS     r0,r0,#30             ;7598
000090  f7fffffe          BL       RF_CCM_AES_Mode_set
                  |L77.148|
;;;7610                       LL_conn_pi->LE_Conn_Para.LL_PrToutAccu = 0;
;;;7611                       tblk_i = 0;
;;;7612                       LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout = LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd;  //1.25ms base
;;;7613                   }
;;;7614                   status_LL_Tmr = LL_INT_S44;
;;;7615                   if(RF_CRCchk() == FALSE)
;;;7616                   {
;;;7617                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7618                       if(LL_ConnDataInTmp.QIn != (MBLK *)0)
;;;7619                       {
;;;7620                           FreeMsgBlks_Isr(LL_ConnDataInTmp.QOut);
;;;7621                           LL_ConnDataInTmp.QOut = (MBLK *)0;
;;;7622                           LL_ConnDataInTmp.QIn = (MBLK *)0;
;;;7623                       }
;;;7624                       LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = tblk_i;
;;;7625                       LLWTR_Buffer_nAck_Isr(tblk_LL_pi->ConnId);
;;;7626                       break;
;;;7627                   }
;;;7628                   RF_Get_LastRssiRaw();
;;;7629                   //k = HeaderR.HeaderSts;
;;;7630                   //k = (k>>2)&((FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN)>>2);
;;;7631                   k = (HeaderR.HeaderSts&(FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN))>>2;
;;;7632                   if(LL_ACK_FLOW[(tblk_i|k)]&LL_ACK_RX_NEW)
;;;7633                   {
;;;7634                       if(HeaderR.HeaderLen)
;;;7635                       {
;;;7636                           len = RF_RxFIFO_Count_get();
;;;7637                           LLWTRFIFOGet_Isr(len);
;;;7638                           if(LL_ConnDataInTmp.QOut==(MBLK *)0)
;;;7639                           {
;;;7640                               HeaderR.HeaderSts &= (~FLD_MSK_LL_DATA_MD);
;;;7641                               k = LL_ACK_FLOW_RE_TO[k];
;;;7642                           }
;;;7643                       }
;;;7644                       tblk_i = LL_ACK_FLOW[(tblk_i|k)];
;;;7645                   }
;;;7646                   else
;;;7647                   {
;;;7648                       tblk_i = LL_ACK_FLOW[(tblk_i|k)];
;;;7649                   }
;;;7650                   if(tblk_i&LL_ACK_RX_NEW)
;;;7651                   {
;;;7652                       if(HeaderR.HeaderLen)
;;;7653                       {
;;;7654                           if((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM))
;;;7655                           {
;;;7656                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterR++;
;;;7657                               if(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterR==0)
;;;7658                               {
;;;7659                                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterRd++;
;;;7660                                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterRd &= (~MSK_LL_SMP_DATA_CH_MASTER);
;;;7661                               }
;;;7662                           }
;;;7663                       }
;;;7664                   }
;;;7665                   if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_CONN_UPD)
;;;7666                   {
;;;7667                       LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7668                       LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout = LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd;    //1.25ms base
;;;7669                   }
;;;7670   
;;;7671                   j = 0;
;;;7672                   if(tblk_i&LL_ACK_TX_NEW)
;;;7673                   {
;;;7674                       mblk = LLWTR_Buffer_wAck_Isr(tblk_LL_pi->ConnId);
;;;7675                       if((LL_ConnBuffPt[tblk_LL_pi->ConnId] != (MBLK *)0)||(mblk != (MBLK *)0))
;;;7676                       {
;;;7677                           if(LL_ConnBuffPt[tblk_LL_pi->ConnId] == (MBLK *)0)
;;;7678                           {
;;;7679                               j = (mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_H)|LL_ACK_TX_NEW_N_EPT;
;;;7680                               k = mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode;
;;;7681                               //mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_H = 0;
;;;7682                               FreeMsgBlk_Isr(mblk);
;;;7683                           }
;;;7684                           if((LL_SMP_DataCh&LL_SMP_DATA_CH_T_CCM)&&(mblk != (MBLK *)0))
;;;7685                           {
;;;7686                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT++;
;;;7687                               if(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT==0)
;;;7688                               {
;;;7689                                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd++;
;;;7690                                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd &= (~MSK_LL_SMP_DATA_CH_MASTER);
;;;7691                               }
;;;7692                           }
;;;7693                       }
;;;7694                       mblk = LL_Queue_To_Buffer_Isr(tblk_LL_pi->ConnId);
;;;7695                       if(LL_conn_pi->LE_Conn_Para.LL_SMP_Gate == LL_SMP_GATE_OFF)
;;;7696                       {
;;;7697                           if((HeaderR.HeaderSts&FLD_MSK_LL_DATA_MD))
;;;7698                           {
;;;7699                               status_LL_Tmr = LL_INT_S43;
;;;7700                           }
;;;7701                           else
;;;7702                           {
;;;7703                               if(LL_conn_pi->LE_Conn_Para.WinSize_DataHdr & FLD_MSK_LL_DATA_MD)
;;;7704                               {
;;;7705                                   status_LL_Tmr = LL_INT_S43;
;;;7706                               }
;;;7707                           }
;;;7708                       }
;;;7709                       if(status_LL_Tmr == LL_INT_S44)
;;;7710                       {
;;;7711                           rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7712                       }
;;;7713                       else
;;;7714                       {
;;;7715                           if(LLWTR_MDset(tblk_LL_pi2, DUR_LL_RSV_CONN_MD))
;;;7716                           {
;;;7717                               rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7718                               status_LL_Tmr = LL_INT_S44;
;;;7719                           }
;;;7720                           else
;;;7721                           {
;;;7722                               if(mblk == (MBLK *)0)
;;;7723                               {
;;;7724                                   LL_Para_Interval.HeaderSts = ((tblk_i|LL_DATA_LLID_EMPTY_CONTI)&(~FLD_MSK_LL_DATA_RSV));
;;;7725                                   LL_Para_Interval.HeaderLen = 0;
;;;7726                                   RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;7727                               }
;;;7728                               else
;;;7729                               {
;;;7730                                   if((LL_ConnDataQ[tblk_LL_pi->ConnId].QOut!=(MBLK *)0)||(LL_ConnCtrlQ[tblk_LL_pi->ConnId].QOut!=(MBLK *)0))
;;;7731                                   {
;;;7732                                       tblk_i |= FLD_MSK_LL_DATA_MD;
;;;7733                                   }
;;;7734                                   //LL_Buffer_To_FIFO_Isr(tblk_LL_pi->ConnId, tblk_i);
;;;7735                                   if((LL_Buffer_To_FIFO_Isr(tblk_LL_pi->ConnId, tblk_i) == (MBLK *)0) && (LL_ConnBuffPt[tblk_LL_pi->ConnId] != (MBLK *)0))
;;;7736                                   {
;;;7737                                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7738                                       status_LL_Tmr = LL_INT_S44;
;;;7739                                   }
;;;7740                               }
;;;7741                           }
;;;7742                       }
;;;7743                   }
;;;7744                   else
;;;7745                   {
;;;7746                       mblk = LLWTR_Buffer_nAck_Isr(tblk_LL_pi->ConnId);
;;;7747                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7748                   }
;;;7749                   LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = tblk_i;
;;;7750                   if((j&LL_ACK_TX_NEW_N_EPT))
;;;7751                   {
;;;7752                       if((j&FLD_MSK_LL_DATA_LLID) != LL_DATA_LLID_CONTROL)
;;;7753                       {
;;;7754                           if(j&LL_PKT_TX_EI)
;;;7755                           {
;;;7756                               LLWTR_TxEndRpt(tblk_LL_pi->ConnId);
;;;7757                           }
;;;7758                       }
;;;7759                       else
;;;7760                       {
;;;7761                           if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_CONN)
;;;7762                           {
;;;7763                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_TX_CONN_ID_INIT[k];
;;;7764                               LL_conn_pi->LE_Conn_Para.LL_PrToutAccu = 0;
;;;7765                           }
;;;7766                           switch(k)
;;;7767                           {
;;;7768                           case LL_TERMINATE_IND:
;;;7769                               rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7770                               status_LL_Tmr = LL_INT_S45;
;;;7771                               LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TERMINATED_BY_LOCAL_HOST;
;;;7772                               break;
;;;7773   
;;;7774                           case LL_PAUSE_ENC_RSP:
;;;7775                               LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_ENC_PAUSE;
;;;7776                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT = 0;
;;;7777                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd = 0;
;;;7778   
;;;7779                               mblk = GetMsgBlk_Isr();
;;;7780                               mblk->Primitive = MLL_LL_ENC_REQ;
;;;7781                               mblk->Para.MLL_LL_Enc_Req_Para.LL_Conn_No = tblk_LL_pi->ConnId;
;;;7782                               SndMsgBlk_Isr(mblk, Q_2LL);
;;;7783                               break;
;;;7784   
;;;7785                           case LL_ENC_REQ:
;;;7786                               LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_ENC_WAIT;
;;;7787                               break;
;;;7788   
;;;7789                           case LL_VERSION_IND:
;;;7790                               if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_VERSION_IND_RCVD)
;;;7791                               {
;;;7792                                   LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7793                               }
;;;7794                               break;
;;;7795   
;;;7796                           case LL_CONN_UPDATE_REQ:
;;;7797                               mblk = mblk_LL_conn_Para[tblk_LL_pi->ConnId];
;;;7798                               mblk_LL_conn_Para[tblk_LL_pi->ConnId] = (MBLK *)0;
;;;7799                               SndMsgBlk_Isr(mblk, Q_2HCI);
;;;7800                               break;
;;;7801   
;;;7802                           default:
;;;7803                               break;
;;;7804                           }
;;;7805                           if(status_LL_Tmr == LL_INT_S45)
;;;7806                           {
;;;7807                               break;
;;;7808                           }
;;;7809                       }
;;;7810                   }
;;;7811                   if(tblk_i&LL_ACK_RX_NEW)
;;;7812                   {
;;;7813                       if(HeaderR.HeaderLen)
;;;7814                       {
;;;7815                           if((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM))
;;;7816                           {
;;;7817                               //while(RF_CCM_RxDecrEndChk() == 0);
;;;7818                               if((RF_CCM_RxDecrResultChk()==NO_)||((HeaderR.HeaderSts&FLD_MSK_LL_DATA_LLID)==LL_DATA_LLID_RESERVE))
;;;7819                               {
;;;7820                                   rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7821                                   LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE;
;;;7822                                   status_LL_Tmr = LL_INT_S45;
;;;7823                                   break;
;;;7824                               }
;;;7825                           }
;;;7826                       }
;;;7827                       if(LLWTR_Rx2Hc(tblk_LL_pi->ConnId, HeaderR) == MLL_HCI_NULL)
;;;7828                       {
;;;7829                           if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID != LL_CONN_ID_LL_TERM_IND_RCVD)
;;;7830                           {
;;;7831                               rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7832                               status_LL_Tmr = LL_INT_S45;
;;;7833                           }
;;;7834                       }
;;;7835                   }
;;;7836                   LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = 0;             //based on CRC ok.
;;;7837                   LL_conn_pi->LE_Conn_Para.RF_Rssi = RF_Get_LastRssi();
;;;7838                   break;
;;;7839   
;;;7840               case LL_INT_S44:
;;;7841                   rafael_reset_phy_fsm_Isr();     //avoid Auto Tx, need???
;;;7842                   break;
;;;7843   
;;;7844               default:
;;;7845                   break;
;;;7846               }
;;;7847           }
;;;7848           else             //Slave ISR
;;;7849   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;7850           {
;;;7851   #if MAX_NUM_CONN_SLV_HDL != 0
;;;7852               tblk_i = 1u;
;;;7853               switch(status_LL_Tmr)
;;;7854               {
;;;7855               case LL_INT_S50:   //Slave RX_ISR
;;;7856                   HeaderR.HeaderSts = LL_Para_IntervalR.HeaderSts;
;;;7857                   HeaderR.HeaderLen = LL_Para_IntervalR.HeaderLen;
;;;7858                   LL_Slv_Win_Width_Reset();
;;;7859                   tblk_i = 0;    //be careful no "break" here
;;;7860               case LL_INT_S53:   //Slave RX_ISR and MD
;;;7861                   if(LLWTR_MDset(tblk_LL_pi2, DUR_LL_RSV_CONN_TXACK))  // check TX ACK time (MAX Length)
;;;7862                   {
;;;7863                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;7864                       status_LL_Tmr = LL_INT_S54;   //S50 or S53 -> S54 (end of this connection event)
;;;7865                       break;
;;;7866                   }
;;;7867                   if(tblk_i)
;;;7868                   {
;;;7869                       HeaderR.HeaderSts = LL_Para_IntervalR.HeaderSts;
;;;7870                       HeaderR.HeaderLen = LL_Para_IntervalR.HeaderLen;
;;;7871                   }
;;;7872                   tblk_i = LL_conn_pi->LE_Conn_Para.WinSize_DataHdr&(FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN);
;;;7873                   if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_ADV)
;;;7874                   {
;;;7875                       LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7876                       LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = 0;
;;;7877                       LL_conn_pi->LE_Conn_Para.LL_PrToutAccu = 0;
;;;7878                       tblk_i = 0;
;;;7879                       LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout = LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd;    //1.25ms base
;;;7880                   }
;;;7881                   RX_CRC_valid_flag = RF_CRCchk();
;;;7882                   if(RX_CRC_valid_flag == FALSE)   //CRC fail
;;;7883                   {
;;;7884                       j = 0;
;;;7885                       /////////Avoid slow tx data writing speed. So pre-write Max Length.////////////////
;;;7886                       LL_Para_Interval.HeaderSts = tblk_i;
;;;7887                       LL_Para_Interval.HeaderLen = SIZE_PACKET_MAX;
;;;7888                       RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;7889                       ///////////////////////////////////////////////////////////////////////////////////
;;;7890                       mblk = LLWTR_Buffer_nAck_Isr(tblk_LL_pi->ConnId);
;;;7891                       LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = tblk_i;
;;;7892                       status_LL_Tmr = LL_INT_S52;   //S50 or S53 -> S52 (Slave TX_ISR, no MD)
;;;7893                       if(LL_ConnDataInTmp.QIn != (MBLK *)0)
;;;7894                       {
;;;7895                           FreeMsgBlks_Isr(LL_ConnDataInTmp.QOut);
;;;7896                           LL_ConnDataInTmp.QOut = (MBLK *)0;
;;;7897                           LL_ConnDataInTmp.QIn = (MBLK *)0;
;;;7898                       }
;;;7899                   }
;;;7900                   else     //CRC ok
;;;7901                   {
;;;7902                       RF_Get_LastRssiRaw();
;;;7903                       //j = HeaderR.HeaderSts;
;;;7904                       // tblk_i = tblk_i|((j>>2)&((FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN)>>2));
;;;7905                       //j = HeaderR.HeaderSts;
;;;7906                       //j = (j>>2)&((FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN)>>2);
;;;7907                       j = (HeaderR.HeaderSts&(FLD_MSK_LL_DATA_SN|FLD_MSK_LL_DATA_NESN))>>2;
;;;7908                       if(LL_ACK_FLOW[(tblk_i|j)]&LL_ACK_RX_NEW)
;;;7909                       {
;;;7910                           if(HeaderR.HeaderLen)
;;;7911                           {
;;;7912                               len = RF_RxFIFO_Count_get();
;;;7913                               LLWTRFIFOGet_Isr(len);
;;;7914                               if(LL_ConnDataInTmp.QOut==(MBLK *)0)
;;;7915                               {
;;;7916                                   HeaderR.HeaderSts &= (~FLD_MSK_LL_DATA_MD);
;;;7917                                   j = LL_ACK_FLOW_RE_TO[j];
;;;7918                               }
;;;7919                           }
;;;7920                           tblk_i = LL_ACK_FLOW[(tblk_i|j)];
;;;7921                       }
;;;7922                       else
;;;7923                       {
;;;7924                           tblk_i = LL_ACK_FLOW[(tblk_i|j)];
;;;7925                       }
;;;7926                       LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = tblk_i;
;;;7927                       status_LL_Tmr = LL_INT_S52;  //S50 or S53 -> S52 (Slave TX_ISR, no MD)
;;;7928                       if(HeaderR.HeaderSts&FLD_MSK_LL_DATA_MD)     //check if MD
;;;7929                       {
;;;7930                           status_LL_Tmr = LL_INT_S51;  //S52->S51 (change to TX_ISR, MD)
;;;7931                       }
;;;7932                       if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_CONN_UPD)
;;;7933                       {
;;;7934                           LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7935                           LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout = LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd;    //1.25ms base
;;;7936                       }
;;;7937                       j = 0;
;;;7938                       /////////Avoid slow tx data writing speed. So pre-write Max Length.////////////////
;;;7939                       LL_Para_Interval.HeaderSts = tblk_i;
;;;7940                       LL_Para_Interval.HeaderLen = SIZE_PACKET_MAX;
;;;7941                       RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;7942                       ///////////////////////////////////////////////////////////////////////////////////
;;;7943                       if(tblk_i&LL_ACK_TX_NEW)
;;;7944                       {
;;;7945                           mblk = LLWTR_Buffer_wAck_Isr(tblk_LL_pi->ConnId);
;;;7946                           if((LL_ConnBuffPt[tblk_LL_pi->ConnId] != (MBLK *)0)||(mblk != (MBLK *)0))
;;;7947                           {
;;;7948                               if(LL_ConnBuffPt[tblk_LL_pi->ConnId] == (MBLK *)0)
;;;7949                               {
;;;7950                                   j = (mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_H)|LL_ACK_TX_NEW_N_EPT;
;;;7951                                   k = mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode;
;;;7952                                   //mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_H = 0;
;;;7953                                   FreeMsgBlk_Isr(mblk);
;;;7954                               }
;;;7955                               if((LL_SMP_DataCh&LL_SMP_DATA_CH_T_CCM)&&(mblk != (MBLK *)0))
;;;7956                               {
;;;7957                                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT++;
;;;7958                                   if(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT==0)
;;;7959                                   {
;;;7960                                       LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd++;
;;;7961                                       LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd &= (~MSK_LL_SMP_DATA_CH_MASTER);
;;;7962                                   }
;;;7963                               }
;;;7964                           }
;;;7965                           mblk = LL_Queue_To_Buffer_Isr(tblk_LL_pi->ConnId);
;;;7966                       }
;;;7967                       else
;;;7968                       {
;;;7969                           mblk = LLWTR_Buffer_nAck_Isr(tblk_LL_pi->ConnId);
;;;7970                       }
;;;7971                       if(tblk_i&LL_ACK_RX_NEW)
;;;7972                       {
;;;7973                           if(HeaderR.HeaderLen)
;;;7974                           {
;;;7975                               if((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM))
;;;7976                               {
;;;7977                                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterR++;
;;;7978                                   if(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterR==0)
;;;7979                                   {
;;;7980                                       LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterRd++;
;;;7981                                       LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterRd &= (~MSK_LL_SMP_DATA_CH_MASTER);
;;;7982                                   }
;;;7983                               }
;;;7984                           }
;;;7985                       }
;;;7986                   }  //end of CRC check
;;;7987                   if(mblk != (MBLK *)0)
;;;7988                   {
;;;7989                       //if(status_LL_Tmr != LL_INT_S54)       //state is S51,S52 or S54 in above code, so it is S51 or S52 enter here
;;;7990                       if(RX_CRC_valid_flag != FALSE)   //CRC fail
;;;7991                       {
;;;7992                           if((LL_ConnDataQ[tblk_LL_pi->ConnId].QOut!=(MBLK *)0)||(LL_ConnCtrlQ[tblk_LL_pi->ConnId].QOut!=(MBLK *)0))
;;;7993                           {
;;;7994                               tblk_i |= FLD_MSK_LL_DATA_MD;
;;;7995                               status_LL_Tmr = LL_INT_S51;   //Slave TX_end ISR, MD
;;;7996                           }
;;;7997                       }
;;;7998                       if((LL_Buffer_To_FIFO_Isr(tblk_LL_pi->ConnId, tblk_i) == (MBLK *)0) && (LL_ConnBuffPt[tblk_LL_pi->ConnId] != (MBLK *)0))
;;;7999                       {
;;;8000                           status_LL_Tmr = LL_INT_S52;   //Slave TX_end ISR, no MD
;;;8001                       }
;;;8002                   }
;;;8003                   else
;;;8004                   {
;;;8005                       LL_Para_Interval.HeaderSts = ((tblk_i|LL_DATA_LLID_EMPTY_CONTI)&(~FLD_MSK_LL_DATA_RSV));
;;;8006                       LL_Para_Interval.HeaderLen = 0;
;;;8007                       RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;8008                       if(LL_conn_pi->LE_Conn_Para.LL_ConnLatency)
;;;8009                       {
;;;8010                           if(LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu < LL_conn_pi->LE_Conn_Para.LL_ConnLatency)
;;;8011                           {
;;;8012                               if(tblk_i&LL_ACK_RX_NEW)
;;;8013                               {
;;;8014                                   if((HeaderR.HeaderLen) == 0)
;;;8015                                   {
;;;8016                                       if((tblk_i&LL_ACK_TX_NEW))
;;;8017                                       {
;;;8018                                           rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8019                                           LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu++;         //Latency
;;;8020                                           LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = 0;            //reset
;;;8021                                           status_LL_Tmr = LL_INT_S54;
;;;8022                                       }
;;;8023                                       else
;;;8024                                       {
;;;8025                                           if(LL_conn_pi->LE_Conn_Para.LL_SvToutAccu)
;;;8026                                           {
;;;8027                                               rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8028                                               LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu++;     //Latency
;;;8029                                               LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = 0;        //reset
;;;8030                                               status_LL_Tmr = LL_INT_S54;
;;;8031                                           }
;;;8032                                           else
;;;8033                                           {
;;;8034                                               LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu = 0;   //Latency
;;;8035                                           }
;;;8036                                       }
;;;8037                                   }
;;;8038                                   else
;;;8039                                   {
;;;8040                                       LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu = 0;           //Latency
;;;8041                                   }
;;;8042                               }
;;;8043                               else
;;;8044                               {
;;;8045                                   if(LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu)
;;;8046                                   {
;;;8047                                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8048                                       LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu++;             //Latency
;;;8049                                       LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = 0;                //reset
;;;8050                                       status_LL_Tmr = LL_INT_S54;
;;;8051                                   }
;;;8052                               }
;;;8053                           }
;;;8054                           else
;;;8055                           {
;;;8056                               LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu = 0;                   //Latency
;;;8057                           }
;;;8058                       }
;;;8059                   }
;;;8060                   if((j&LL_ACK_TX_NEW_N_EPT))
;;;8061                   {
;;;8062                       if((j&FLD_MSK_LL_DATA_LLID) != LL_DATA_LLID_CONTROL)
;;;8063                       {
;;;8064                           if(j&LL_PKT_TX_EI)
;;;8065                           {
;;;8066                               LLWTR_TxEndRpt(tblk_LL_pi->ConnId);
;;;8067                           }
;;;8068                       }
;;;8069                       else
;;;8070                       {
;;;8071                           if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_CONN)
;;;8072                           {
;;;8073                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_TX_CONN_ID_INIT[k];
;;;8074                               LL_conn_pi->LE_Conn_Para.LL_PrToutAccu = 0;
;;;8075                           }
;;;8076                           switch(k)
;;;8077                           {
;;;8078                           case LL_TERMINATE_IND:
;;;8079                               rafael_reset_phy_fsm_Isr(); //avoid Auto Tx
;;;8080                               LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TERMINATED_BY_LOCAL_HOST;
;;;8081                               status_LL_Tmr = LL_INT_S55; //Slave Terminate State
;;;8082                               break;
;;;8083   
;;;8084                           case LL_START_ENC_RSP:
;;;8085                               LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_OFF;
;;;8086                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;8087                               break;
;;;8088   
;;;8089                           case LL_PAUSE_ENC_RSP:
;;;8090                               LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_ENC_PAUSE;
;;;8091                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT = 0;
;;;8092                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd = 0;
;;;8093                               break;
;;;8094   
;;;8095                           case LL_VERSION_IND:
;;;8096                               if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_VERSION_IND_RCVD)
;;;8097                               {
;;;8098                                   LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;8099                               }
;;;8100                               break;
;;;8101   
;;;8102                           default:
;;;8103                               break;
;;;8104                           }
;;;8105                           if(status_LL_Tmr == LL_INT_S55)     //if(Slave Terminate)
;;;8106                           {
;;;8107                               break;
;;;8108                           }
;;;8109                       }
;;;8110                   }
;;;8111                   if(RX_CRC_valid_flag != FALSE)
;;;8112                   {
;;;8113                       if(tblk_i&LL_ACK_RX_NEW)
;;;8114                       {
;;;8115                           if(HeaderR.HeaderLen)
;;;8116                           {
;;;8117                               if((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM))
;;;8118                               {
;;;8119                                   if((RF_CCM_RxDecrResultChk()==NO_)||((HeaderR.HeaderSts&FLD_MSK_LL_DATA_LLID)==LL_DATA_LLID_RESERVE))
;;;8120                                   {
;;;8121                                       LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE;
;;;8122                                       status_LL_Tmr = LL_INT_S55;     //Slave Terminate
;;;8123                                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8124                                       break;
;;;8125                                   }
;;;8126                               }
;;;8127                           }
;;;8128                           if(LLWTR_Rx2Hc(tblk_LL_pi->ConnId, HeaderR) == MLL_HCI_NULL)
;;;8129                           {
;;;8130                               rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8131                               status_LL_Tmr = LL_INT_S55;
;;;8132                           }
;;;8133                       }
;;;8134                       LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = 0;
;;;8135                       LL_conn_pi->LE_Conn_Para.RF_Rssi = RF_Get_LastRssi();
;;;8136                   }
;;;8137                   break;
;;;8138   
;;;8139               case LL_INT_S51:  //Slave TX_ISR and MD_need
;;;8140                   if(LL_conn_pi->LE_Conn_Para.LL_SMP_Gate == LL_SMP_GATE_OFF)     //encryptionn off
;;;8141                   {
;;;8142                       if(LLWTR_MDset(tblk_LL_pi2, DUR_LL_RSV_CONN_MD))
;;;8143                       {
;;;8144                           rafael_reset_phy_fsm_Isr();
;;;8145                           status_LL_Tmr = LL_INT_S54;  //S51->S54
;;;8146                       }
;;;8147                       else
;;;8148                       {
;;;8149                           status_LL_Tmr = LL_INT_S53;  //S51->S53
;;;8150                           if((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM))
;;;8151                           {
;;;8152                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterRd |= MSK_LL_SMP_DATA_CH_MASTER;
;;;8153                               RF_CCM_NoncePktCnt_set(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterR);
;;;8154                               SPI_PDMA_waitFinish();
;;;8155                               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterRd &= (~MSK_LL_SMP_DATA_CH_MASTER);
;;;8156                           }
;;;8157                           RF_CCM_AES_Mode_set((LL_SMP_DataCh&LL_SMP_DATA_CH_R_T_CCM));
;;;8158                       }
;;;8159                   }
;;;8160                   else
;;;8161                   {
;;;8162                       rafael_reset_phy_fsm_Isr();
;;;8163                       status_LL_Tmr = LL_INT_S54;     //S51->S54
;;;8164                   }
;;;8165                   break;
;;;8166   
;;;8167               case LL_INT_S52:   //Slave TX_ISR, no MD
;;;8168                   rafael_reset_phy_fsm_Isr();        //avoid Auto Rx
;;;8169                   status_LL_Tmr = LL_INT_S54;        //S52->S54(End of connection event)
;;;8170                   break;
;;;8171   
;;;8172               default:
;;;8173                   rafael_reset_phy_fsm_Isr();     //avoid Auto Rx, Tx
;;;8174                   break;
;;;8175               }
;;;8176   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;8177           }
;;;8178       }
;;;8179       else        //ADV/SCAN/INIT
;;;8180       {
;;;8181           switch(tblk_i)
;;;8182           {
;;;8183           case LL_CONN_ID_ADV_PARA:
;;;8184               switch(status_LL_Tmr)
;;;8185               {
;;;8186               case LL_INT_S11:
;;;8187                   status_LL_Tmr = LL_INT_S12;
;;;8188                   break;
;;;8189   
;;;8190               case LL_INT_S12:
;;;8191                   status_LL_Tmr = LL_INT_S15;
;;;8192                   if(RF_CRCchk() == FALSE)
;;;8193                   {
;;;8194                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8195                       break;
;;;8196                   }
;;;8197                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t) &HeaderR.HeaderSts, 2);
;;;8198                   tblk_i = LL_Adv_Para.Adv_Para.LL_Adv_Type& FLD_MSK_LL_ADV_TYPE;
;;;8199                   mblk = GetMsgBlk_Isr();
;;;8200                   connReqRx = (struct Conn_Req_Para *)mblk->Para.Data;
;;;8201                   mblk->Primitive = MLL_HCI_NULL;
;;;8202   
;;;8203                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)mblk->Para.Data, LEN_LE_CONN_REQ);
;;;8204                   switch((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TYPE))
;;;8205                   {
;;;8206                   case LE_ADV_TYPE_CONNECT_REQ:
;;;8207                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8208   
;;;8209                       if((tblk_i) == LE_ADV_TYPE_ADV_IND)
;;;8210                       {
;;;8211                           if((LL_Adv_Para.Adv_Para.LL_Adv_Filter_Policy == LL_ADV_FLTR_POLICY_SCAN_CONN_WHT_LST)||(LL_Adv_Para.Adv_Para.LL_Adv_Filter_Policy == LL_ADV_FLTR_POLICY_CONN_WHT_LST))
;;;8212                           {
;;;8213                               if(RF_cmpFIFO_WhiteList(HeaderR.HeaderSts, mblk)!=SUCCESS_)
;;;8214                                   break;
;;;8215                           }
;;;8216                       }
;;;8217                       else if((tblk_i) == LE_ADV_TYPE_ADV_DIRECT_IND)
;;;8218                       {
;;;8219                           if((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TXADDR_TYPE) == 0)
;;;8220                           {
;;;8221                               if(LL_Adv_Para.Adv_Para.LL_Adv_Type&FLD_MSK_LL_ADV_RXADDR_TYPE)
;;;8222                               {
;;;8223                                   break;
;;;8224                               }
;;;8225                           }
;;;8226                           else
;;;8227                           {
;;;8228                               if((LL_Adv_Para.Adv_Para.LL_Adv_Type&FLD_MSK_LL_ADV_RXADDR_TYPE) == 0)
;;;8229                               {
;;;8230                                   break;
;;;8231                               }
;;;8232                           }
;;;8233                           if(Knl_MemComp_Isr(connReqRx->IniAddr, LL_Adv_Para.Adv_Para.LL_DirectAddr, LEN_BD_ADDR) != SUCCESS_)
;;;8234                           {
;;;8235                               break;
;;;8236                           }
;;;8237                       }
;;;8238                       else
;;;8239                       {
;;;8240                           break;
;;;8241                       }
;;;8242                       if(RF_cmpFIFO_BDAddr(HeaderR.HeaderSts, mblk) == SUCCESS_)
;;;8243                       {
;;;8244                           tblk_i = LL_Adv_Para.Adv_Para.LL_AdvConn_ID;
;;;8245                           if((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TXADDR_TYPE))
;;;8246                           {
;;;8247                               mblk_LL_conn_Para[tblk_i]->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddrType = HCI_ADDR_TYPE_RANDOM;
;;;8248                           }
;;;8249                           else
;;;8250                           {
;;;8251                               mblk_LL_conn_Para[tblk_i]->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddrType = HCI_ADDR_TYPE_PUBLIC;
;;;8252                           }
;;;8253                           Knl_MemCpy_Isr(&mblk_LL_conn_Para[tblk_i]->Para.MHC_Le_Conn_Complete_Para.HCI_Conn_IntervalL, (Uint8 *)&connReqRx->ConnInterval, 6);
;;;8254                           mblk_LL_conn_Para[tblk_i]->Para.MHC_Le_Conn_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
;;;8255                           mblk_LL_conn_Para[tblk_i]->Para.MHC_Le_Conn_Complete_Para.HCI_Master_Clk_Accuracy = connReqRx->mSCA;
;;;8256                           LL_conn_pi->LE_Conn_Para.LL_SCA = connReqRx->mSCA;
;;;8257                           Knl_MemCpy_Isr(mblk_LL_conn_Para[tblk_i]->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr, (Uint8 *)&connReqRx->IniAddr, LEN_BD_ADDR);
;;;8258   
;;;8259                           SndMsgBlk_Isr(mblk_LL_conn_Para[tblk_i], Q_2HCI);
;;;8260                           mblk_LL_conn_Para[tblk_i] = (MBLK *)0;
;;;8261                           if(LL_ConnID_Remaining!=0)
;;;8262                           {
;;;8263                               LL_ConnID_Remaining--;
;;;8264                           }
;;;8265                           Knl_MemCpy_Isr((Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_AccessAddr, (uint8_t *)&connReqRx->AccessAddr, 21);  //copy connection parameters
;;;8266   
;;;8267                           Knl_CodeCpy_Isr(LL_conn_pi->LE_Conn_Para.LL_RF_Data_Ch_ReM, LL_RF_DATA_CH, NUM_LL_DATA_CH);
;;;8268                           LL_Slv_Win_Width_Reset();
;;;8269   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;8270                           LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = connReqRx->trWinSize*10;
;;;8271   #else
;;;8272                           LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = connReqRx->trWinSize<<3;
;;;8273   #endif
;;;8274                           LL_conn_pi->LE_Conn_Para.LL_HopIncrement = connReqRx->Hop;
;;;8275                           LL_conn_pi->LE_Conn_Para.LL_CurrentCH = connReqRx->Hop;
;;;8276                           LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_ADV;
;;;8277   
;;;8278   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;8279                           i16 = LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu;
;;;8280                           LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu = (i16*10);
;;;8281   
;;;8282                           i16 = LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout;           //10ms base. This value should be original value in connection_parameter
;;;8283                           LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd = (i16<<3);   //LL_SvisionTimeoutUpd transfer to 1.25ms base
;;;8284   
;;;8285                           i16 = LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;8286                           LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg = i16;      //1.25ms base
;;;8287                           LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = (i16*4);       //(3)start accumulate SupervisionTO. It is 4*ConnInterval, Due to (10-4)=6 ConnInterval is SupervisionTO at connection established
;;;8288                           LL_conn_pi->LE_Conn_Para.LL_ConnInterval = (i16*10);    //(1)transfer to 125us base. 125us*10=1.25ms
;;;8289                           LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout = (i16*10);  //(2)To reduce execute timing, LL_SvisionTimeout assign a same value. But it's meaning is 10*ConnInterval
;;;8290   
;;;8291   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;8292                           i16 = LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu;
;;;8293                           LL_conn_pi->LE_Conn_Para.WinOffset_LtcyAccu = (i16<<3);
;;;8294   
;;;8295                           i16 = LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;8296                           LL_conn_pi->LE_Conn_Para.LL_ConnInterval = (i16<<3);
;;;8297   
;;;8298                           i16 = LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout;
;;;8299                           LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout = (i16<<3);
;;;8300                           LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd = LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout;
;;;8301                           i16 = LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;8302                           LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout = i16;
;;;8303                           LL_conn_pi->LE_Conn_Para.LL_SvToutAccu = i16>>2;
;;;8304                           LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg = i16>>3;
;;;8305   #endif  //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;8306   
;;;8307                           if(LL_conn_pi->LE_Conn_Para.LL_ConnInterval==LL_conn_pi->LE_Conn_Para.WinSize_DataHdr+(0x01<<3))
;;;8308                           {
;;;8309                               LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = LL_conn_pi->LE_Conn_Para.WinSize_DataHdr-(DUR_LL_RSV_CONN_BASE+(2*2)+1-(0x01<<3));
;;;8310                           }
;;;8311                           LL_Msg_Map_Upd(tblk_i);
;;;8312                           LL_conn_pi->LE_Conn_Para.LL_Tx_PowerLevel = LL_Adv_Para.Adv_Para.LL_Tx_PowerLevel;           //initialization
;;;8313                           LL_Msg_AdvScnConn &= (~LL_MSG_ADVSCNCONN_ADV_CONT);
;;;8314                           LL_Msg_AdvScnConnUpdSts &= (~LL_MSG_ADVSCNCONN_ADV_EN);
;;;8315                           LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_ADV_EN);
;;;8316                           status_LL_Tmr = LL_INT_S14;
;;;8317                       }
;;;8318                       break;
;;;8319   
;;;8320                   case LE_ADV_TYPE_SCAN_REQ:
;;;8321                       switch(tblk_i)
;;;8322                       {
;;;8323                       case LE_ADV_TYPE_ADV_IND:
;;;8324                       case LE_ADV_TYPE_ADV_SCAN_IND:
;;;8325                           SPI_PDMA_waitFinish();
;;;8326                           switch(LL_Adv_Para.Adv_Para.LL_Adv_Filter_Policy)
;;;8327                           {
;;;8328                           case LL_ADV_FLTR_POLICY_SCAN_CONN_WHT_LST:
;;;8329                           case LL_ADV_FLTR_POLICY_SCAN_WHT_LST:
;;;8330                               if(RF_cmpFIFO_WhiteList(HeaderR.HeaderSts, mblk)!=SUCCESS_)
;;;8331                                   break;
;;;8332                           default:
;;;8333                               if(RF_cmpFIFO_BDAddr(HeaderR.HeaderSts, mblk) == SUCCESS_)
;;;8334                               {
;;;8335                                   LL_Para_Interval.HeaderSts = ((LL_Adv_Para.Adv_Para.LL_Adv_Type&~FLD_MSK_LL_ADV_TYPE)|LE_ADV_TYPE_SCAN_RSP);
;;;8336                                   if((LL_Msg_AdvScnConnUpdSts & LL_MSG_ADVSCNCONN_UPD_ADV_SCN_DATA))
;;;8337                                   {
;;;8338                                       LL_Para_Interval.HeaderLen = LL_Adv_Para_UpdBuf.Adv_Para.LL_ScanRsp_Data_Length+LEN_BD_ADDR;
;;;8339                                       ptAddr = LL_Adv_Para_UpdBuf.Adv_Para.LL_ScanRsp_Data;
;;;8340                                   }
;;;8341                                   else
;;;8342                                   {
;;;8343                                       LL_Para_Interval.HeaderLen = LL_Adv_Para.Adv_Para.LL_ScanRsp_Data_Length+LEN_BD_ADDR;
;;;8344                                       ptAddr = LL_Adv_Para.Adv_Para.LL_ScanRsp_Data;
;;;8345                                   }
;;;8346                                   RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;8347                                   if(LL_Adv_Para.Adv_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_PUBLIC)
;;;8348                                   {
;;;8349                                       RF_TxFIFO_ADVaddr_set(ble_device_param.ble_deviceAddr_param.addr);
;;;8350                                   }
;;;8351                                   else
;;;8352                                   {
;;;8353                                       RF_TxFIFO_ADVaddr_set(BD_Rand_Addr);
;;;8354                                   }
;;;8355                                   RF_TxFIFO_ADVData_set(ptAddr);
;;;8356                                   status_LL_Tmr = LL_INT_S13;
;;;8357                               }
;;;8358                               break;
;;;8359                           }
;;;8360                           break;
;;;8361   
;;;8362                       default:
;;;8363                           break;
;;;8364                       }
;;;8365                       break;
;;;8366   
;;;8367                   default:
;;;8368                       break;
;;;8369                   }
;;;8370                   SndMsgBlk_Isr(mblk, Q_2LL);
;;;8371                   if(status_LL_Tmr == LL_INT_S15)
;;;8372                   {
;;;8373                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8374                   }
;;;8375                   break;
;;;8376   
;;;8377               case LL_INT_S13:
;;;8378                   rafael_reset_phy_fsm_Isr();         //avoid Auto Rx
;;;8379               case LL_INT_S10:
;;;8380                   status_LL_Tmr = LL_INT_S15;
;;;8381               default:
;;;8382                   break;
;;;8383               }
;;;8384               break;  //end of case (LL_CONN_ID_ADV_PARA)
;;;8385   
;;;8386           case LL_CONN_ID_SCAN_PARA:
;;;8387               switch(status_LL_Tmr)
;;;8388               {
;;;8389               case LL_INT_S20:    //Activ Scan, RX_ISR, Receive ADV packet
;;;8390                   status_LL_Tmr = LL_INT_S24;
;;;8391                   if((RF_CRCchk() == FALSE)||(CheckMsgBlk_L2_wSizeUsed_Isr((2*sizeof(mblk->Para.MHC_Le_Adv_Report_Para)))!=SUCCESS_))
;;;8392                   {
;;;8393                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8394                       break;
;;;8395                   }
;;;8396                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t) &HeaderR.HeaderSts, 2);
;;;8397   
;;;8398                   mblk = GetMsgBlk_Isr();
;;;8399                   mblk->Primitive = MLL_HCI_NULL;     //do nothing in correspond function
;;;8400   
;;;8401                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)mblk->Para.Data, LEN_ADV_PAYLOAD_MAX);
;;;8402   
;;;8403                   if(LL_Scan_Para.LE_Set_Scan_Para.LL_ScanFilterPolicy)
;;;8404                   {
;;;8405                       SPI_PDMA_waitFinish();
;;;8406                       if(RF_cmpFIFO_WhiteList(HeaderR.HeaderSts, mblk)!=SUCCESS_)
;;;8407                       {
;;;8408                           rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8409                           SndMsgBlk_Isr(mblk, Q_2LL);
;;;8410                           break;
;;;8411                       }
;;;8412                   }
;;;8413                   tblk_i = 0;
;;;8414                   switch((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TYPE))
;;;8415                   {
;;;8416                   case LE_ADV_TYPE_ADV_DIRECT_IND:
;;;8417                   case LE_ADV_TYPE_ADV_NONCONN_IND:
;;;8418                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8419                       tblk_i++;           //just let tblk_i=1
;;;8420                   case LE_ADV_TYPE_ADV_IND:
;;;8421                   case LE_ADV_TYPE_ADV_SCAN_IND:
;;;8422                       if(tblk_i == 0)
;;;8423                       {
;;;8424                           if((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TXADDR_TYPE))
;;;8425                           {
;;;8426                               tblk_i = FLD_MSK_LL_ADV_RXADDR_TYPE;
;;;8427                           }
;;;8428                           if(LL_Scan_Para.LE_Set_Scan_Para.LL_Own_Addr_Type)
;;;8429                           {
;;;8430                               tblk_i |= FLD_MSK_LL_ADV_TXADDR_TYPE;
;;;8431                           }
;;;8432                           LL_Para_Interval.HeaderSts = (tblk_i|LE_ADV_TYPE_SCAN_REQ);
;;;8433                           RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;8434                           if(LL_Scan_Para.LE_Set_Scan_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_PUBLIC)
;;;8435                           {
;;;8436                               RF_TxFIFO_ADVaddr_set( ble_device_param.ble_deviceAddr_param.addr);
;;;8437                           }
;;;8438                           else
;;;8439                           {
;;;8440                               RF_TxFIFO_ADVaddr_set(BD_Rand_Addr);
;;;8441                           }
;;;8442                           status_LL_Tmr = LL_INT_S22;
;;;8443                           RF_TxFIFO_ADVData_set(mblk->Para.Data);
;;;8444                       }
;;;8445                       LL_Tmr_FIFO_ADVrpt(HeaderR, mblk);         //send MsgBlk with MHC_EVENT_LE_ADV_REPORT to Q_HCI
;;;8446                       break;
;;;8447   
;;;8448                   default:
;;;8449                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8450                       break;
;;;8451                   }
;;;8452                   SndMsgBlk_Isr(mblk, Q_2LL);        //send MsgBlk with MLL_HCI_NULL to Q_LL
;;;8453                   break;
;;;8454   
;;;8455               case LL_INT_S21:      //Passive Scan
;;;8456                   status_LL_Tmr = LL_INT_S24;
;;;8457                   rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8458                   if((RF_CRCchk() == FALSE)||(CheckMsgBlk_L2_wSizeUsed_Isr((2*sizeof(mblk->Para.MHC_Le_Adv_Report_Para)))!=SUCCESS_))
;;;8459                   {
;;;8460                       //rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8461                       break;
;;;8462                   }
;;;8463                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t) &HeaderR.HeaderSts, 2);
;;;8464                   mblk = GetMsgBlk_Isr();
;;;8465                   mblk->Primitive = MLL_HCI_NULL;
;;;8466   
;;;8467                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)mblk->Para.Data, LEN_ADV_PAYLOAD_MAX);
;;;8468                   if(LL_Scan_Para.LE_Set_Scan_Para.LL_ScanFilterPolicy)
;;;8469                   {
;;;8470                       SPI_PDMA_waitFinish();
;;;8471                       if(RF_cmpFIFO_WhiteList(HeaderR.HeaderSts, mblk)!=SUCCESS_)
;;;8472                       {
;;;8473                           SndMsgBlk_Isr(mblk, Q_2LL);
;;;8474                           break;
;;;8475                       }
;;;8476                   }
;;;8477                   switch((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TYPE))
;;;8478                   {
;;;8479                   case LE_ADV_TYPE_ADV_IND:
;;;8480                   case LE_ADV_TYPE_ADV_DIRECT_IND:
;;;8481                   case LE_ADV_TYPE_ADV_NONCONN_IND:
;;;8482                   case LE_ADV_TYPE_ADV_SCAN_IND:
;;;8483                       LL_Tmr_FIFO_ADVrpt(HeaderR, mblk);
;;;8484                       break;
;;;8485   
;;;8486                   default:
;;;8487                       break;
;;;8488                   }
;;;8489                   SndMsgBlk_Isr(mblk, Q_2LL);
;;;8490                   break;
;;;8491   
;;;8492               case LL_INT_S23:   //Active Scan, RX_ISR, Receive SCAN_RSP
;;;8493                   status_LL_Tmr = LL_INT_S24;
;;;8494                   rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8495                   if((RF_CRCchk() == FALSE)||(CheckMsgBlk_L2_wSizeUsed_Isr((2*sizeof(mblk->Para.MHC_Le_Adv_Report_Para)))!=SUCCESS_))
;;;8496                   {
;;;8497                       //rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8498                       break;
;;;8499                   }
;;;8500                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t) &HeaderR.HeaderSts, 2);
;;;8501                   mblk = GetMsgBlk_Isr();
;;;8502                   mblk->Primitive = MLL_HCI_NULL;
;;;8503   
;;;8504                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)mblk->Para.Data, LEN_ADV_PAYLOAD_MAX);
;;;8505   
;;;8506                   switch((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TYPE))
;;;8507                   {
;;;8508                   case LE_ADV_TYPE_SCAN_RSP:
;;;8509                       LL_Tmr_FIFO_ADVrpt(HeaderR, mblk);
;;;8510                       break;
;;;8511   
;;;8512                   default:
;;;8513                       break;
;;;8514                   }
;;;8515                   SndMsgBlk_Isr(mblk, Q_2LL);
;;;8516                   break;
;;;8517   
;;;8518               case LL_INT_S22:   //Active Scan, TX_ISR, send SCAN_REQ
;;;8519                   RF_TxAutoAckOff();
;;;8520                   status_LL_Tmr = LL_INT_S23;
;;;8521                   break;
;;;8522   
;;;8523               default:
;;;8524                   break;
;;;8525               }
;;;8526               break;   //end of case (LL_CONN_ID_SCAN_PARA)
;;;8527   
;;;8528   #if MAX_NUM_CONN_MAS_HDL != 0
;;;8529           case LL_CONN_ID_INIT_PARA:
;;;8530               switch(status_LL_Tmr)
;;;8531               {
;;;8532               case LL_INT_S30:
;;;8533                   status_LL_Tmr = LL_INT_S33;
;;;8534                   if(RF_CRCchk() == FALSE)
;;;8535                   {
;;;8536                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8537                       break;
;;;8538                   }
;;;8539                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t) &HeaderR.HeaderSts, 2);
;;;8540   
;;;8541                   mblk = GetMsgBlk_Isr();
;;;8542                   mblk->Primitive = MLL_HCI_NULL;
;;;8543                   connReqTx = (struct Conn_Req_Para_Alt *)mblk->Para.Data;
;;;8544   
;;;8545                   //SPI_PDMA_waitFinish();
;;;8546                   SPI_PDMA_SetRx_Isr(RX_BUFFER_READ_PORT, (uint32_t)mblk->Para.Data, (LEN_BD_ADDR+LEN_BD_ADDR));
;;;8547   
;;;8548                   //j = RF_LE_HeaderSts_Rx();
;;;8549                   j = HeaderR.HeaderSts;
;;;8550                   switch((j&FLD_MSK_LL_ADV_TYPE))
;;;8551                   {
;;;8552                   case LE_ADV_TYPE_ADV_IND:
;;;8553                   case LE_ADV_TYPE_ADV_DIRECT_IND:
;;;8554                       SPI_PDMA_waitFinish();
;;;8555                       if(LL_Init_Para.LE_Init_Para.LL_InitFilterPolicy)
;;;8556                       {
;;;8557                           if(RF_cmpFIFO_WhiteList(HeaderR.HeaderSts, mblk)==SUCCESS_)
;;;8558                           {
;;;8559                               // connection complete event should be updated based on ADV in white list
;;;8560                               if((HeaderR.HeaderSts&FLD_MSK_LL_ADV_TXADDR_TYPE))
;;;8561                               {
;;;8562                                   // update address type and address
;;;8563                                   mblk_LL_conn_Para[LL_Init_Para.LE_Init_Para.LL_Conn_ID]->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddrType = HCI_ADDR_TYPE_RANDOM;
;;;8564                               }
;;;8565                               else
;;;8566                               {
;;;8567                                   mblk_LL_conn_Para[LL_Init_Para.LE_Init_Para.LL_Conn_ID]->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddrType = HCI_ADDR_TYPE_PUBLIC;
;;;8568                               }
;;;8569                               Knl_MemCpy_Isr(mblk_LL_conn_Para[LL_Init_Para.LE_Init_Para.LL_Conn_ID]->Para.MHC_Le_Conn_Complete_Para.HCI_PeerAddr, mblk->Para.Data, LEN_BD_ADDR);
;;;8570                               tblk_i = LEN_BD_ADDR;
;;;8571                           }
;;;8572                       }
;;;8573                       else
;;;8574                       {
;;;8575                           if((j&FLD_MSK_LL_ADV_TXADDR_TYPE))
;;;8576                           {
;;;8577                               tblk_i = HCI_ADDR_TYPE_RANDOM;
;;;8578                           }
;;;8579                           else
;;;8580                           {
;;;8581                               tblk_i= HCI_ADDR_TYPE_PUBLIC;
;;;8582                           }
;;;8583                           if(LL_Init_Para.LE_Init_Para.LL_PeerAddrType == tblk_i)
;;;8584                           {
;;;8585                               if(Knl_MemComp_Isr(LL_Init_Para.LE_Init_Para.LL_PeerAddr, mblk->Para.Data, LEN_BD_ADDR)==SUCCESS_)
;;;8586                               {
;;;8587                                   tblk_i = LEN_BD_ADDR;
;;;8588                               }
;;;8589                           }
;;;8590                       }
;;;8591                       if(tblk_i == LEN_BD_ADDR)
;;;8592                       {
;;;8593                           LL_Msg_AdvScnConn &= (~LL_MSG_ADVSCNCONN_INIT_CONT);
;;;8594                           LL_Msg_AdvScnConnUpdSts &= (~LL_MSG_ADVSCNCONN_INIT_EN);
;;;8595                           LL_Msg_AdvScnConnUpd &= (~LL_MSG_ADVSCNCONN_INIT_EN);
;;;8596   
;;;8597                           status_LL_Tmr = LL_INT_S31;
;;;8598                           if((j&FLD_MSK_LL_ADV_TXADDR_TYPE))
;;;8599                           {
;;;8600                               j = (FLD_MSK_LL_ADV_RXADDR_TYPE|LE_ADV_TYPE_CONNECT_REQ);
;;;8601                           }
;;;8602                           else
;;;8603                           {
;;;8604                               j = LE_ADV_TYPE_CONNECT_REQ;
;;;8605                           }
;;;8606                           if(LL_Init_Para.LE_Init_Para.LL_Own_Addr_Type)
;;;8607                           {
;;;8608                               j = j | FLD_MSK_LL_ADV_TXADDR_TYPE;
;;;8609                           }
;;;8610                           LL_Para_Interval.HeaderSts = j;
;;;8611                           RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;8612   
;;;8613                           if(LL_Init_Para.LE_Init_Para.LL_Own_Addr_Type == HCI_ADDR_TYPE_PUBLIC)
;;;8614                           {
;;;8615                               RF_TxFIFO_ADVaddr_set(ble_device_param.ble_deviceAddr_param.addr);
;;;8616                           }
;;;8617                           else
;;;8618                           {
;;;8619                               RF_TxFIFO_ADVaddr_set(BD_Rand_Addr);
;;;8620                           }
;;;8621                           Knl_MemCpy_Isr(&mblk->Para.Data[LEN_BD_ADDR], mblk->Para.Data, LEN_BD_ADDR);
;;;8622   
;;;8623                           u32i = ((Timeline24+DUR_LL_RSV_INIT_ADVEND_2_WINDELAY)>>1);
;;;8624                           i16 = ((Uint8 *)&u32i)[3] + ((Uint8 *)&u32i)[2] + ((Uint8 *)&u32i)[1] + ((Uint8 *)&u32i)[0];
;;;8625                           j = ((Uint8 *)&i16)[0]+((Uint8 *)&i16)[1];
;;;8626                           k = j>>4;
;;;8627                           if(j)
;;;8628                           {
;;;8629                               if(j > TIMELINE24_3750US_IDX[k])
;;;8630                               {
;;;8631                                   k = TIMELINE24_3750US_IDX[k+1];
;;;8632                               }
;;;8633                               else
;;;8634                               {
;;;8635                                   k = TIMELINE24_3750US_IDX[k];
;;;8636                               }
;;;8637                           }
;;;8638                           k = k - j;
;;;8639                           k = (k<<1);
;;;8640   
;;;8641                           //if((Timeline24+DUR_LL_RSV_INIT_ADVEND_2_WINDELAY)&0x00000001) {
;;;8642                           if((((Uint8 *)&Timeline24)[0]+DUR_LL_RSV_INIT_ADVEND_2_WINDELAY)&0x01)
;;;8643                           {
;;;8644                               if(k)
;;;8645                               {
;;;8646                                   k = k - 1;
;;;8647                               }
;;;8648                               else
;;;8649                               {
;;;8650                                   //k = (0x1E-0x01);  //some compiler show error
;;;8651                                   k = (30-1);
;;;8652                               }
;;;8653                           }
;;;8654   
;;;8655                           i16 = k+DUR_LL_RSV_INIT_ADVEND_2_WINDELAY;
;;;8656                           j16 = 0;
;;;8657                           if(k<10)
;;;8658                           {
;;;8659                               j = 0;
;;;8660                           }
;;;8661                           else if(k<(10*2))
;;;8662                           {
;;;8663                               j = 1;
;;;8664                           }
;;;8665                           else
;;;8666                           {
;;;8667                               j = 2;
;;;8668                           }
;;;8669   
;;;8670                           pi16 = &connReqTx->trWinOffset;
;;;8671                           *pi16 = j;
;;;8672                           connReqTx->trWinSize = LL_conn_pi->LE_Conn_Para.WinSize_DataHdr+1;
;;;8673                           LL_conn_pi->LE_Conn_Para.WinSize_DataHdr = 0;       //initialization
;;;8674                           tblk_i = tblk_LL_pi->Next;
;;;8675                           k = 0;
;;;8676                           while(1)
;;;8677                           {
;;;8678                               if(LL_conn_pi->LE_Conn_Para.LL_SvToutAccu >= LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)    //supervision timeout in INIT
;;;8679                               {
;;;8680                                   break;
;;;8681                               }
;;;8682                               if(tblk_i < MAX_TBLK_LL_NO)
;;;8683                               {
;;;8684                                   tblk_LL_pi2 = &TmrBlk_LL[tblk_i];
;;;8685                                   if(tblk_LL_pi2->Ticks>=i16)
;;;8686                                   {
;;;8687                                       if(tblk_LL_pi2->TmrId < LL_TMR_S2)
;;;8688                                       {
;;;8689                                           if(i16)
;;;8690                                           {
;;;8691                                               LL_DurRxPktAccu = 0;
;;;8692                                               if(tblk_LL_pi2->Ticks-i16 > DUR_LL_RSV_CONN_BASE)
;;;8693                                               {
;;;8694                                                   break;
;;;8695                                               }
;;;8696                                           }
;;;8697                                       }
;;;8698                                       j16 += (10*3);
;;;8699                                       if(j16>=LL_conn_pi->LE_Conn_Para.LL_ConnInterval)
;;;8700                                       {
;;;8701                                           j16-=LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;8702                                           i16 += j16;
;;;8703                                           LL_conn_pi->LE_Conn_Para.LL_SvToutAccu += LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg;
;;;8704                                           LL_NextConnCh(LL_conn_pi);
;;;8705                                           //j = connReqTx->trWinOffset;
;;;8706                                           j = *pi16;
;;;8707                                           k++;
;;;8708                                       }
;;;8709                                       else
;;;8710                                       {
;;;8711                                           i16 += (10*3);
;;;8712                                           j += 3;
;;;8713                                       }
;;;8714                                   }
;;;8715                               }
;;;8716                               else
;;;8717                               {
;;;8718                                   if(i16==0)
;;;8719                                   {
;;;8720                                       j16 += (10*3);
;;;8721                                       if(j16>=LL_conn_pi->LE_Conn_Para.LL_ConnInterval)
;;;8722                                       {
;;;8723                                           j16-=LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;8724                                           i16 += j16;
;;;8725                                           LL_conn_pi->LE_Conn_Para.LL_SvToutAccu += LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg;
;;;8726                                           LL_NextConnCh(LL_conn_pi);
;;;8727                                           //j = connReqTx->trWinOffset;
;;;8728                                           j = *pi16;
;;;8729                                           k++;
;;;8730                                       }
;;;8731                                       else
;;;8732                                       {
;;;8733                                           i16 += (10*3);
;;;8734                                           j += 3;
;;;8735                                       }
;;;8736                                   }
;;;8737                                   LL_DurRxPktAccu = 0;
;;;8738                                   k++;
;;;8739                                   break;
;;;8740                               }
;;;8741                               tblk_i = tblk_LL_pi2->Next;
;;;8742                               i16 = i16 - tblk_LL_pi2->Ticks;
;;;8743                               tblk_LL_pi = tblk_LL_pi2;
;;;8744                           }     //end of while(1)
;;;8745                           *pi16 = j;
;;;8746                           if(LL_conn_pi->LE_Conn_Para.LL_SvToutAccu<LL_conn_pi->LE_Conn_Para.LL_SvisionTimeout)
;;;8747                           {
;;;8748                               LL_conn_pi->LE_Conn_Para.LL_EventCounter += k;
;;;8749                               tblk_LL_pi->Next = TBlk_Free_LL;
;;;8750                               tblk_LL_pi = &TmrBlk_LL[TBlk_Free_LL];
;;;8751                               tblk_LL_pi->TmrId = LL_TMR_S1;
;;;8752                               tblk_LL_pi->Ticks = i16;
;;;8753                               tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
;;;8754                               TBlk_Free_LL = tblk_LL_pi2->Next;
;;;8755   
;;;8756                               tblk_LL_pi2->Next = tblk_i;
;;;8757                               tblk_LL_pi2->Ticks = DUR_LL_RSV_CONN_BASE;
;;;8758                               tblk_LL_pi2->TmrId = LL_TMR_S255;
;;;8759   
;;;8760                               tblk_LL_pi->ConnId = LL_Init_Para.LE_Init_Para.LL_Conn_ID;
;;;8761                               tblk_LL_pi2->ConnId = LL_Init_Para.LE_Init_Para.LL_Conn_ID;
;;;8762                               LL_DurRxPktAccu += LL_conn_pi->LE_Conn_Para.LL_ConnInterval;
;;;8763                           }
;;;8764                           else
;;;8765                           {
;;;8766                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_STBY;
;;;8767                           }
;;;8768                           LL_TmrBlk_Pt_PairRst();
;;;8769   
;;;8770                           //Knl_MemCpy_Isr((TXDATA_REG+LEN_BD_ADDR+LEN_BD_ADDR), (Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_AccessAddr, 21);
;;;8771   
;;;8772                           //Knl_MemCpy_Isr(&mblk->Para.Data[(LEN_BD_ADDR+LEN_BD_ADDR)], (Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_AccessAddr, 21);
;;;8773                           Knl_MemCpy_Isr(&mblk->Para.Data[(LEN_BD_ADDR+LEN_BD_ADDR)], (Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_AccessAddr, 7);
;;;8774                           Knl_MemCpy_Isr((Uint8 *)connReqTx->ChMap, (Uint8 *)LL_conn_pi->LE_Conn_Para.LL_ChMapReM, LEN_LL_CH_MAP);
;;;8775   
;;;8776                           Knl_MemCpy_Isr((Uint8 *)&connReqTx->ConnInterval, (Uint8 *)&LL_Init_Para.LE_Init_Para.LL_ConnInterval, 6);
;;;8777                           connReqTx->Hop_mSCA = (LL_conn_pi->LE_Conn_Para.LL_HopIncrement|(LE_LL_SCA<<5));
;;;8778                           RF_TxFIFO_ADVData_set(&mblk->Para.Data[LEN_BD_ADDR]);
;;;8779                           LL_conn_pi->LE_Conn_Para.LL_Tx_PowerLevel = LL_Init_Para.LE_Init_Para.LL_Tx_PowerLevel;     //initialization
;;;8780                           k = LL_Init_Para.LE_Init_Para.LL_Conn_ID;
;;;8781                           SndMsgBlk_Isr(mblk_LL_conn_Para[k], Q_2HCI);
;;;8782                           mblk_LL_conn_Para[k] = (MBLK *)0;
;;;8783                           if(LL_ConnID_Remaining!=0)
;;;8784                           {
;;;8785                               LL_ConnID_Remaining--;
;;;8786                           }
;;;8787                           break;
;;;8788                       }
;;;8789                   default:  //non (ADV_IND, ADV_DIRECT_IND) case
;;;8790                       rafael_reset_phy_fsm_Isr();     //avoid Auto Tx
;;;8791                       //status_LL_Tmr = LL_INT_S33;
;;;8792                       break;
;;;8793                   }       //end of switch(ADV_TYPE)
;;;8794                   SndMsgBlk_Isr(mblk, Q_2LL);
;;;8795                   break;  //end of case (LL_INT_S30) inside case (LL_CONN_ID_INIT_PARA)
;;;8796   
;;;8797               case LL_INT_S31:
;;;8798                   status_LL_Tmr = LL_INT_S32;
;;;8799                   rafael_reset_phy_fsm_Isr();     //avoid Auto Rx
;;;8800                   break;
;;;8801   
;;;8802               default:
;;;8803                   break;
;;;8804               }
;;;8805               break;  //end of case (LL_CONN_ID_INIT_PARA)
;;;8806   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;8807   
;;;8808           default:
;;;8809               __NOP();
;;;8810               break;
;;;8811           }
;;;8812       }
;;;8813   }
000094  b009              ADD      sp,sp,#0x24
000096  bdf0              POP      {r4-r7,pc}
                  |L77.152|
000098  f7fffffe          BL       rafael_reset_phy_fsm_Isr
00009c  202d              MOVS     r0,#0x2d              ;7578
00009e  e374              B        |L77.1930|
0000a0  4669              MOV      r1,sp                 ;7603
0000a2  700d              STRB     r5,[r1,#0]            ;7603
0000a4  4663              MOV      r3,r12                ;7603
0000a6  704b              STRB     r3,[r1,#1]            ;7604
0000a8  7ac5              LDRB     r5,[r0,#0xb]          ;7605
0000aa  210c              MOVS     r1,#0xc               ;7605
0000ac  400d              ANDS     r5,r5,r1              ;7605
0000ae  7801              LDRB     r1,[r0,#0]            ;7606
0000b0  4ecc              LDR      r6,|L77.996|
0000b2  2903              CMP      r1,#3                 ;7606
0000b4  d106              BNE      |L77.196|
0000b6  2104              MOVS     r1,#4                 ;7608
0000b8  7001              STRB     r1,[r0,#0]            ;7608
0000ba  8094              STRH     r4,[r2,#4]            ;7609
0000bc  80d4              STRH     r4,[r2,#6]            ;7610
0000be  8d41              LDRH     r1,[r0,#0x2a]         ;7612
0000c0  2500              MOVS     r5,#0                 ;7611
0000c2  8241              STRH     r1,[r0,#0x12]         ;7612
                  |L77.196|
0000c4  202c              MOVS     r0,#0x2c              ;7614
0000c6  71f0              STRB     r0,[r6,#7]            ;7614
0000c8  f7fffffe          BL       RF_CRCchk
0000cc  2800              CMP      r0,#0                 ;7615
0000ce  d01c              BEQ      |L77.266|
0000d0  2203              MOVS     r2,#3                 ;7628
0000d2  49c6              LDR      r1,|L77.1004|
0000d4  20a6              MOVS     r0,#0xa6              ;7628
0000d6  f7fffffe          BL       SPI_PDMA_SetRx_Isr
0000da  4668              MOV      r0,sp                 ;7631
0000dc  7800              LDRB     r0,[r0,#0]            ;7631
0000de  49c4              LDR      r1,|L77.1008|
0000e0  0700              LSLS     r0,r0,#28             ;7631
0000e2  0f87              LSRS     r7,r0,#30             ;7631
0000e4  4628              MOV      r0,r5                 ;7631
0000e6  4338              ORRS     r0,r0,r7              ;7632
0000e8  5c08              LDRB     r0,[r1,r0]            ;7632
0000ea  0641              LSLS     r1,r0,#25             ;7632
0000ec  d52e              BPL      |L77.332|
0000ee  4668              MOV      r0,sp                 ;7634
0000f0  7840              LDRB     r0,[r0,#1]            ;7634
0000f2  2800              CMP      r0,#0                 ;7634
0000f4  d026              BEQ      |L77.324|
0000f6  206a              MOVS     r0,#0x6a              ;7636
0000f8  f7fffffe          BL       SPI_1BYT_SetRx_Isr
0000fc  f7fffffe          BL       LLWTRFIFOGet_Isr
000100  48bc              LDR      r0,|L77.1012|
000102  6840              LDR      r0,[r0,#4]            ;7638  ; LL_ConnDataInTmp
000104  2800              CMP      r0,#0                 ;7638
000106  d015              BEQ      |L77.308|
000108  e01c              B        |L77.324|
                  |L77.266|
00010a  f7fffffe          BL       rafael_reset_phy_fsm_Isr
00010e  4fb9              LDR      r7,|L77.1012|
000110  6838              LDR      r0,[r7,#0]            ;7618  ; LL_ConnDataInTmp
000112  2800              CMP      r0,#0                 ;7618
000114  d004              BEQ      |L77.288|
000116  6878              LDR      r0,[r7,#4]            ;7620  ; LL_ConnDataInTmp
000118  f7fffffe          BL       FreeMsgBlks_Isr
00011c  607c              STR      r4,[r7,#4]            ;7622  ; LL_ConnDataInTmp
00011e  603c              STR      r4,[r7,#0]            ;7622  ; LL_ConnDataInTmp
                  |L77.288|
000120  6a30              LDR      r0,[r6,#0x20]         ;7624  ; LL_conn_pi
000122  72c5              STRB     r5,[r0,#0xb]          ;7624
000124  69b0              LDR      r0,[r6,#0x18]         ;7625  ; tblk_LL_pi
000126  7840              LDRB     r0,[r0,#1]            ;7625
000128  e000              B        |L77.300|
                  |L77.298|
00012a  e14e              B        |L77.970|
                  |L77.300|
00012c  f7fffffe          BL       LLWTR_Buffer_nAck_Isr
000130  b009              ADD      sp,sp,#0x24
000132  bdf0              POP      {r4-r7,pc}
                  |L77.308|
000134  4669              MOV      r1,sp                 ;7640
000136  7808              LDRB     r0,[r1,#0]            ;7640
000138  21ef              MOVS     r1,#0xef              ;7640
00013a  4008              ANDS     r0,r0,r1              ;7640
00013c  4669              MOV      r1,sp                 ;7640
00013e  7008              STRB     r0,[r1,#0]            ;7640
000140  48ad              LDR      r0,|L77.1016|
000142  5dc7              LDRB     r7,[r0,r7]            ;7641
                  |L77.324|
000144  48aa              LDR      r0,|L77.1008|
000146  433d              ORRS     r5,r5,r7              ;7644
000148  5d45              LDRB     r5,[r0,r5]            ;7644
00014a  e000              B        |L77.334|
                  |L77.332|
00014c  4605              MOV      r5,r0                 ;7648
                  |L77.334|
00014e  0668              LSLS     r0,r5,#25             ;7650
000150  d511              BPL      |L77.374|
000152  4668              MOV      r0,sp                 ;7652
000154  7840              LDRB     r0,[r0,#1]            ;7652
000156  2800              CMP      r0,#0                 ;7652
000158  d00d              BEQ      |L77.374|
00015a  79b0              LDRB     r0,[r6,#6]            ;7654  ; LL_SMP_DataCh
00015c  0780              LSLS     r0,r0,#30             ;7654
00015e  d50a              BPL      |L77.374|
000160  6a30              LDR      r0,[r6,#0x20]         ;7656  ; LL_conn_pi
000162  6f81              LDR      r1,[r0,#0x78]         ;7656
000164  1c49              ADDS     r1,r1,#1              ;7656
000166  6781              STR      r1,[r0,#0x78]         ;7657
000168  d105              BNE      |L77.374|
00016a  3060              ADDS     r0,r0,#0x60           ;7657
00016c  7f01              LDRB     r1,[r0,#0x1c]         ;7659
00016e  1c49              ADDS     r1,r1,#1              ;7659
000170  0649              LSLS     r1,r1,#25             ;7660
000172  0e49              LSRS     r1,r1,#25             ;7660
000174  7701              STRB     r1,[r0,#0x1c]         ;7660
                  |L77.374|
000176  489b              LDR      r0,|L77.996|
000178  6a00              LDR      r0,[r0,#0x20]         ;7665  ; LL_conn_pi
00017a  7801              LDRB     r1,[r0,#0]            ;7665
00017c  2906              CMP      r1,#6                 ;7665
00017e  d103              BNE      |L77.392|
000180  2104              MOVS     r1,#4                 ;7667
000182  7001              STRB     r1,[r0,#0]            ;7667
000184  8d41              LDRH     r1,[r0,#0x2a]         ;7668
000186  8241              STRH     r1,[r0,#0x12]         ;7668
                  |L77.392|
000188  2600              MOVS     r6,#0                 ;7671
00018a  0628              LSLS     r0,r5,#24             ;7672
00018c  4895              LDR      r0,|L77.996|
00018e  6980              LDR      r0,[r0,#0x18]         ;7746  ; tblk_LL_pi
000190  7840              LDRB     r0,[r0,#1]            ;7746
000192  d57d              BPL      |L77.656|
000194  f7fffffe          BL       LLWTR_Buffer_wAck_Isr
000198  9001              STR      r0,[sp,#4]            ;7675
00019a  4892              LDR      r0,|L77.996|
00019c  6980              LDR      r0,[r0,#0x18]         ;7675  ; tblk_LL_pi
00019e  7840              LDRB     r0,[r0,#1]            ;7675
0001a0  0081              LSLS     r1,r0,#2              ;7675
0001a2  4896              LDR      r0,|L77.1020|
0001a4  5841              LDR      r1,[r0,r1]            ;7675
0001a6  9801              LDR      r0,[sp,#4]            ;7675
0001a8  4308              ORRS     r0,r0,r1              ;7675
0001aa  d01b              BEQ      |L77.484|
0001ac  2900              CMP      r1,#0                 ;7677
0001ae  d107              BNE      |L77.448|
0001b0  9801              LDR      r0,[sp,#4]            ;7679
0001b2  7a46              LDRB     r6,[r0,#9]            ;7679
0001b4  2020              MOVS     r0,#0x20              ;7679
0001b6  4306              ORRS     r6,r6,r0              ;7679
0001b8  9801              LDR      r0,[sp,#4]            ;7680
0001ba  7ac7              LDRB     r7,[r0,#0xb]          ;7680
0001bc  f7fffffe          BL       FreeMsgBlk_Isr
                  |L77.448|
0001c0  4888              LDR      r0,|L77.996|
0001c2  7981              LDRB     r1,[r0,#6]            ;7684  ; LL_SMP_DataCh
0001c4  07c9              LSLS     r1,r1,#31             ;7684
0001c6  d00d              BEQ      |L77.484|
0001c8  9901              LDR      r1,[sp,#4]            ;7684
0001ca  2900              CMP      r1,#0                 ;7684
0001cc  d00a              BEQ      |L77.484|
0001ce  6a00              LDR      r0,[r0,#0x20]         ;7686  ; LL_conn_pi
0001d0  6f01              LDR      r1,[r0,#0x70]         ;7686
0001d2  1c49              ADDS     r1,r1,#1              ;7686
0001d4  6701              STR      r1,[r0,#0x70]         ;7687
0001d6  d105              BNE      |L77.484|
0001d8  3060              ADDS     r0,r0,#0x60           ;7687
0001da  7d01              LDRB     r1,[r0,#0x14]         ;7689
0001dc  1c49              ADDS     r1,r1,#1              ;7689
0001de  0649              LSLS     r1,r1,#25             ;7690
0001e0  0e49              LSRS     r1,r1,#25             ;7690
0001e2  7501              STRB     r1,[r0,#0x14]         ;7690
                  |L77.484|
0001e4  487f              LDR      r0,|L77.996|
0001e6  6980              LDR      r0,[r0,#0x18]         ;7694  ; tblk_LL_pi
0001e8  7840              LDRB     r0,[r0,#1]            ;7694
0001ea  f7fffffe          BL       LL_Queue_To_Buffer_Isr
0001ee  9001              STR      r0,[sp,#4]            ;7695
0001f0  487c              LDR      r0,|L77.996|
0001f2  2153              MOVS     r1,#0x53              ;7695
0001f4  6a00              LDR      r0,[r0,#0x20]         ;7695  ; LL_conn_pi
0001f6  5c09              LDRB     r1,[r1,r0]            ;7695
0001f8  2900              CMP      r1,#0                 ;7695
0001fa  d10e              BNE      |L77.538|
0001fc  4669              MOV      r1,sp                 ;7697
0001fe  7809              LDRB     r1,[r1,#0]            ;7697
000200  06ca              LSLS     r2,r1,#27             ;7697
000202  212b              MOVS     r1,#0x2b              ;7699
000204  2a00              CMP      r2,#0                 ;7697
000206  da02              BGE      |L77.526|
000208  4876              LDR      r0,|L77.996|
00020a  71c1              STRB     r1,[r0,#7]            ;7699
00020c  e009              B        |L77.546|
                  |L77.526|
00020e  7ac0              LDRB     r0,[r0,#0xb]          ;7703
000210  4a74              LDR      r2,|L77.996|
000212  06c0              LSLS     r0,r0,#27             ;7703
000214  d501              BPL      |L77.538|
000216  71d1              STRB     r1,[r2,#7]            ;7705
000218  e003              B        |L77.546|
                  |L77.538|
00021a  4872              LDR      r0,|L77.996|
00021c  79c0              LDRB     r0,[r0,#7]            ;7709  ; status_LL_Tmr
00021e  282c              CMP      r0,#0x2c              ;7709
000220  d008              BEQ      |L77.564|
                  |L77.546|
000222  4870              LDR      r0,|L77.996|
000224  2126              MOVS     r1,#0x26              ;7715
000226  69c0              LDR      r0,[r0,#0x1c]         ;7715  ; tblk_LL_pi2
000228  f7fffffe          BL       LLWTR_MDset
00022c  2800              CMP      r0,#0                 ;7715
00022e  d133              BNE      |L77.664|
000230  e003              B        |L77.570|
000232  e149              B        |L77.1224|
                  |L77.564|
000234  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000238  e038              B        |L77.684|
                  |L77.570|
00023a  9801              LDR      r0,[sp,#4]            ;7722
00023c  2800              CMP      r0,#0                 ;7722
00023e  d009              BEQ      |L77.596|
000240  4968              LDR      r1,|L77.996|
000242  4b6f              LDR      r3,|L77.1024|
000244  6988              LDR      r0,[r1,#0x18]         ;7730  ; tblk_LL_pi
000246  7842              LDRB     r2,[r0,#1]            ;7730
000248  00d0              LSLS     r0,r2,#3              ;7730
00024a  18c3              ADDS     r3,r0,r3              ;7730
00024c  685b              LDR      r3,[r3,#4]            ;7730
00024e  2b00              CMP      r3,#0                 ;7730
000250  d110              BNE      |L77.628|
000252  e00a              B        |L77.618|
                  |L77.596|
000254  2001              MOVS     r0,#1                 ;7724
000256  4328              ORRS     r0,r0,r5              ;7724
000258  06c1              LSLS     r1,r0,#27             ;7724
00025a  486a              LDR      r0,|L77.1028|
00025c  0ec9              LSRS     r1,r1,#27             ;7724
00025e  7081              STRB     r1,[r0,#2]            ;7724
000260  70c4              STRB     r4,[r0,#3]            ;7725
000262  1c80              ADDS     r0,r0,#2              ;7725
000264  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
000268  e020              B        |L77.684|
                  |L77.618|
00026a  4b67              LDR      r3,|L77.1032|
00026c  18c0              ADDS     r0,r0,r3              ;7730
00026e  6840              LDR      r0,[r0,#4]            ;7730
000270  2800              CMP      r0,#0                 ;7730
000272  d001              BEQ      |L77.632|
                  |L77.628|
000274  2010              MOVS     r0,#0x10              ;7732
000276  4305              ORRS     r5,r5,r0              ;7732
                  |L77.632|
000278  4629              MOV      r1,r5                 ;7735
00027a  4610              MOV      r0,r2                 ;7735
00027c  f7fffffe          BL       LL_Buffer_To_FIFO_Isr
000280  2800              CMP      r0,#0                 ;7735
000282  d113              BNE      |L77.684|
000284  4857              LDR      r0,|L77.996|
000286  6980              LDR      r0,[r0,#0x18]         ;7735  ; tblk_LL_pi
000288  7840              LDRB     r0,[r0,#1]            ;7735
00028a  0081              LSLS     r1,r0,#2              ;7735
00028c  485b              LDR      r0,|L77.1020|
00028e  e000              B        |L77.658|
                  |L77.656|
000290  e008              B        |L77.676|
                  |L77.658|
000292  5840              LDR      r0,[r0,r1]            ;7735
000294  2800              CMP      r0,#0                 ;7735
000296  d009              BEQ      |L77.684|
                  |L77.664|
000298  f7fffffe          BL       rafael_reset_phy_fsm_Isr
00029c  4951              LDR      r1,|L77.996|
00029e  202c              MOVS     r0,#0x2c              ;7738
0002a0  71c8              STRB     r0,[r1,#7]            ;7738
0002a2  e003              B        |L77.684|
                  |L77.676|
0002a4  f7fffffe          BL       LLWTR_Buffer_nAck_Isr
0002a8  f7fffffe          BL       rafael_reset_phy_fsm_Isr
                  |L77.684|
0002ac  484d              LDR      r0,|L77.996|
0002ae  06b1              LSLS     r1,r6,#26             ;7750
0002b0  6a00              LDR      r0,[r0,#0x20]         ;7749  ; LL_conn_pi
0002b2  72c5              STRB     r5,[r0,#0xb]          ;7749
0002b4  d555              BPL      |L77.866|
0002b6  43f1              MVNS     r1,r6                 ;7752
0002b8  0789              LSLS     r1,r1,#30             ;7752
0002ba  d00d              BEQ      |L77.728|
0002bc  0670              LSLS     r0,r6,#25             ;7754
0002be  d550              BPL      |L77.866|
0002c0  4848              LDR      r0,|L77.996|
0002c2  6980              LDR      r0,[r0,#0x18]         ;7756  ; tblk_LL_pi
0002c4  7846              LDRB     r6,[r0,#1]            ;7756
0002c6  f7fffffe          BL       GetMsgBlk_Isr
0002ca  2164              MOVS     r1,#0x64              ;7756
0002cc  7101              STRB     r1,[r0,#4]            ;7756
0002ce  7286              STRB     r6,[r0,#0xa]          ;7756
0002d0  2104              MOVS     r1,#4                 ;7756
0002d2  f7fffffe          BL       SndMsgBlk_Isr
0002d6  e044              B        |L77.866|
                  |L77.728|
0002d8  7801              LDRB     r1,[r0,#0]            ;7761
0002da  4e42              LDR      r6,|L77.996|
0002dc  2904              CMP      r1,#4                 ;7761
0002de  d104              BNE      |L77.746|
0002e0  494a              LDR      r1,|L77.1036|
0002e2  5dc9              LDRB     r1,[r1,r7]            ;7763
0002e4  7001              STRB     r1,[r0,#0]            ;7763
0002e6  2186              MOVS     r1,#0x86              ;7764
0002e8  520c              STRH     r4,[r1,r0]            ;7764
                  |L77.746|
0002ea  2f03              CMP      r7,#3                 ;7766
0002ec  d023              BEQ      |L77.822|
0002ee  dc04              BGT      |L77.762|
0002f0  2f00              CMP      r7,#0                 ;7766
0002f2  d02a              BEQ      |L77.842|
0002f4  2f02              CMP      r7,#2                 ;7766
0002f6  d131              BNE      |L77.860|
0002f8  e004              B        |L77.772|
                  |L77.762|
0002fa  2f0b              CMP      r7,#0xb               ;7766
0002fc  d00c              BEQ      |L77.792|
0002fe  2f0c              CMP      r7,#0xc               ;7766
000300  d12c              BNE      |L77.860|
000302  e01c              B        |L77.830|
                  |L77.772|
000304  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000308  202d              MOVS     r0,#0x2d              ;7770
00030a  71f0              STRB     r0,[r6,#7]            ;7770
00030c  6a31              LDR      r1,[r6,#0x20]         ;7771  ; LL_conn_pi
00030e  2016              MOVS     r0,#0x16              ;7771
000310  3120              ADDS     r1,r1,#0x20           ;7771
000312  7088              STRB     r0,[r1,#2]            ;7771
                  |L77.788|
000314  b009              ADD      sp,sp,#0x24
000316  bdf0              POP      {r4-r7,pc}
                  |L77.792|
000318  2102              MOVS     r1,#2                 ;7775
00031a  2253              MOVS     r2,#0x53              ;7775
00031c  5411              STRB     r1,[r2,r0]            ;7775
00031e  6704              STR      r4,[r0,#0x70]         ;7776
000320  3060              ADDS     r0,r0,#0x60           ;7776
000322  7504              STRB     r4,[r0,#0x14]         ;7777
000324  f7fffffe          BL       GetMsgBlk_Isr
000328  21ea              MOVS     r1,#0xea              ;7780
00032a  7101              STRB     r1,[r0,#4]            ;7780
00032c  69b1              LDR      r1,[r6,#0x18]         ;7781  ; tblk_LL_pi
00032e  7849              LDRB     r1,[r1,#1]            ;7781
000330  7201              STRB     r1,[r0,#8]            ;7781
000332  2100              MOVS     r1,#0                 ;7782
000334  e010              B        |L77.856|
                  |L77.822|
000336  2101              MOVS     r1,#1                 ;7786
000338  3040              ADDS     r0,r0,#0x40           ;7786
00033a  74c1              STRB     r1,[r0,#0x13]         ;7786
00033c  e00e              B        |L77.860|
                  |L77.830|
00033e  7801              LDRB     r1,[r0,#0]            ;7790
000340  298c              CMP      r1,#0x8c              ;7790
000342  d10b              BNE      |L77.860|
000344  2104              MOVS     r1,#4                 ;7792
000346  7001              STRB     r1,[r0,#0]            ;7792
000348  e008              B        |L77.860|
                  |L77.842|
00034a  69b0              LDR      r0,[r6,#0x18]         ;7797  ; tblk_LL_pi
00034c  4a30              LDR      r2,|L77.1040|
00034e  7840              LDRB     r0,[r0,#1]            ;7797
000350  0081              LSLS     r1,r0,#2              ;7797
000352  5850              LDR      r0,[r2,r1]            ;7797
000354  5054              STR      r4,[r2,r1]            ;7798
000356  2104              MOVS     r1,#4                 ;7799
                  |L77.856|
000358  f7fffffe          BL       SndMsgBlk_Isr
                  |L77.860|
00035c  79f0              LDRB     r0,[r6,#7]            ;7805  ; status_LL_Tmr
00035e  282d              CMP      r0,#0x2d              ;7805
000360  d0d8              BEQ      |L77.788|
                  |L77.866|
000362  0668              LSLS     r0,r5,#25             ;7811
000364  d529              BPL      |L77.954|
000366  4668              MOV      r0,sp                 ;7813
000368  7840              LDRB     r0,[r0,#1]            ;7813
00036a  2800              CMP      r0,#0                 ;7813
00036c  d00c              BEQ      |L77.904|
00036e  4d1d              LDR      r5,|L77.996|
000370  79a8              LDRB     r0,[r5,#6]            ;7815  ; LL_SMP_DataCh
000372  0780              LSLS     r0,r0,#30             ;7815
000374  d508              BPL      |L77.904|
000376  209b              MOVS     r0,#0x9b              ;7818
000378  f7fffffe          BL       SPI_1BYT_SetRx_Isr
00037c  06c0              LSLS     r0,r0,#27             ;7818
00037e  d50c              BPL      |L77.922|
000380  4668              MOV      r0,sp                 ;7818
000382  7800              LDRB     r0,[r0,#0]            ;7818
000384  0780              LSLS     r0,r0,#30             ;7818
000386  d008              BEQ      |L77.922|
                  |L77.904|
000388  4d16              LDR      r5,|L77.996|
00038a  9900              LDR      r1,[sp,#0]            ;7827
00038c  69a8              LDR      r0,[r5,#0x18]         ;7827  ; tblk_LL_pi
00038e  7840              LDRB     r0,[r0,#1]            ;7827
000390  f7fffffe          BL       LLWTR_Rx2Hc
000394  28b0              CMP      r0,#0xb0              ;7827
000396  d008              BEQ      |L77.938|
000398  e00f              B        |L77.954|
                  |L77.922|
00039a  f7fffffe          BL       rafael_reset_phy_fsm_Isr
00039e  6a29              LDR      r1,[r5,#0x20]         ;7821  ; LL_conn_pi
0003a0  203d              MOVS     r0,#0x3d              ;7821
0003a2  3120              ADDS     r1,r1,#0x20           ;7821
0003a4  7088              STRB     r0,[r1,#2]            ;7821
0003a6  202d              MOVS     r0,#0x2d              ;7822
0003a8  e3fe              B        |L77.2984|
                  |L77.938|
0003aa  6a28              LDR      r0,[r5,#0x20]         ;7829  ; LL_conn_pi
0003ac  7800              LDRB     r0,[r0,#0]            ;7829
0003ae  2882              CMP      r0,#0x82              ;7829
0003b0  d003              BEQ      |L77.954|
0003b2  f7fffffe          BL       rafael_reset_phy_fsm_Isr
0003b6  202d              MOVS     r0,#0x2d              ;7832
0003b8  71e8              STRB     r0,[r5,#7]            ;7832
                  |L77.954|
0003ba  4d0a              LDR      r5,|L77.996|
0003bc  6a28              LDR      r0,[r5,#0x20]         ;7836  ; LL_conn_pi
0003be  3080              ADDS     r0,r0,#0x80           ;7836
0003c0  8084              STRH     r4,[r0,#4]            ;7836
0003c2  f7fffffe          BL       RF_Get_LastRssi
0003c6  6a29              LDR      r1,[r5,#0x20]         ;7838  ; LL_conn_pi
0003c8  e1d5              B        |L77.1910|
                  |L77.970|
0003ca  2601              MOVS     r6,#1                 ;7852
0003cc  9601              STR      r6,[sp,#4]            ;7564
0003ce  4e05              LDR      r6,|L77.996|
0003d0  2932              CMP      r1,#0x32              ;7853
0003d2  69f6              LDR      r6,[r6,#0x1c]         ;7588
0003d4  d01e              BEQ      |L77.1044|
0003d6  2933              CMP      r1,#0x33              ;7853
0003d8  d074              BEQ      |L77.1220|
0003da  2934              CMP      r1,#0x34              ;7853
0003dc  d073              BEQ      |L77.1222|
0003de  2935              CMP      r1,#0x35              ;7853
0003e0  d172              BNE      |L77.1224|
0003e2  e026              B        |L77.1074|
                  |L77.996|
                          DCD      ||.data||
                  |L77.1000|
                          DCD      ||.bss||+0x460
                  |L77.1004|
                          DCD      rssi_read_data
                  |L77.1008|
                          DCD      ||.constdata||+0x11a
                  |L77.1012|
                          DCD      ||.data||+0x54
                  |L77.1016|
                          DCD      ||.constdata||+0x8
                  |L77.1020|
                          DCD      ||.bss||+0x3f0
                  |L77.1024|
                          DCD      ||.bss||+0x378
                  |L77.1028|
                          DCD      ||.bss||+0x43c
                  |L77.1032|
                          DCD      ||.bss||+0x3a0
                  |L77.1036|
                          DCD      ||.constdata||+0x15e
                  |L77.1040|
                          DCD      ||.bss||+0x5c4
                  |L77.1044|
000414  466f              MOV      r7,sp                 ;7856
000416  703d              STRB     r5,[r7,#0]            ;7856
000418  4661              MOV      r1,r12                ;7856
00041a  4bfa              LDR      r3,|L77.2052|
00041c  7079              STRB     r1,[r7,#1]            ;7857
00041e  625c              STR      r4,[r3,#0x24]         ;7857  ; LL_Slv_Win_Width
000420  78d1              LDRB     r1,[r2,#3]            ;7857
000422  8bc0              LDRH     r0,[r0,#0x1e]         ;7857
000424  008a              LSLS     r2,r1,#2              ;7857
000426  49f8              LDR      r1,|L77.2056|
000428  5889              LDR      r1,[r1,r2]            ;7857
00042a  4348              MULS     r0,r1,r0              ;7857
00042c  6298              STR      r0,[r3,#0x28]         ;7859  ; LL_Slv_Win_Width_Base
00042e  2000              MOVS     r0,#0                 ;7859
000430  9001              STR      r0,[sp,#4]            ;7859
                  |L77.1074|
000432  2115              MOVS     r1,#0x15              ;7861
000434  4ff3              LDR      r7,|L77.2052|
000436  4630              MOV      r0,r6                 ;7861
000438  f7fffffe          BL       LLWTR_MDset
00043c  2800              CMP      r0,#0                 ;7861
00043e  d005              BEQ      |L77.1100|
000440  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000444  2036              MOVS     r0,#0x36              ;7864
000446  71f8              STRB     r0,[r7,#7]            ;7864
000448  b009              ADD      sp,sp,#0x24
00044a  bdf0              POP      {r4-r7,pc}
                  |L77.1100|
00044c  9801              LDR      r0,[sp,#4]            ;7867
00044e  2800              CMP      r0,#0                 ;7867
000450  d005              BEQ      |L77.1118|
000452  48ee              LDR      r0,|L77.2060|
000454  466a              MOV      r2,sp                 ;7869
000456  7881              LDRB     r1,[r0,#2]            ;7869  ; LL_Para_IntervalR
000458  7011              STRB     r1,[r2,#0]            ;7869
00045a  78c0              LDRB     r0,[r0,#3]            ;7870  ; LL_Para_IntervalR
00045c  7050              STRB     r0,[r2,#1]            ;7870
                  |L77.1118|
00045e  6a38              LDR      r0,[r7,#0x20]         ;7872  ; LL_conn_pi
000460  210c              MOVS     r1,#0xc               ;7872
000462  7ac5              LDRB     r5,[r0,#0xb]          ;7872
000464  400d              ANDS     r5,r5,r1              ;7872
000466  7801              LDRB     r1,[r0,#0]            ;7873
000468  2902              CMP      r1,#2                 ;7873
00046a  d108              BNE      |L77.1150|
00046c  2104              MOVS     r1,#4                 ;7875
00046e  7001              STRB     r1,[r0,#0]            ;7875
000470  4601              MOV      r1,r0                 ;7876
000472  3180              ADDS     r1,r1,#0x80           ;7876
000474  808c              STRH     r4,[r1,#4]            ;7876
000476  80cc              STRH     r4,[r1,#6]            ;7877
000478  8d41              LDRH     r1,[r0,#0x2a]         ;7879
00047a  2500              MOVS     r5,#0                 ;7878
00047c  8241              STRH     r1,[r0,#0x12]         ;7879
                  |L77.1150|
00047e  f7fffffe          BL       RF_CRCchk
000482  49e0              LDR      r1,|L77.2052|
000484  2800              CMP      r0,#0                 ;7882
000486  7008              STRB     r0,[r1,#0]            ;7881
000488  d01f              BEQ      |L77.1226|
00048a  2203              MOVS     r2,#3                 ;7902
00048c  49e0              LDR      r1,|L77.2064|
00048e  20a6              MOVS     r0,#0xa6              ;7902
000490  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000494  4668              MOV      r0,sp                 ;7907
000496  7800              LDRB     r0,[r0,#0]            ;7907
000498  4fde              LDR      r7,|L77.2068|
00049a  0700              LSLS     r0,r0,#28             ;7907
00049c  0f86              LSRS     r6,r0,#30             ;7907
00049e  4628              MOV      r0,r5                 ;7907
0004a0  4330              ORRS     r0,r0,r6              ;7908
0004a2  5c38              LDRB     r0,[r7,r0]            ;7908
0004a4  0641              LSLS     r1,r0,#25             ;7908
0004a6  d537              BPL      |L77.1304|
0004a8  4668              MOV      r0,sp                 ;7910
0004aa  7840              LDRB     r0,[r0,#1]            ;7910
0004ac  2800              CMP      r0,#0                 ;7910
0004ae  d030              BEQ      |L77.1298|
0004b0  206a              MOVS     r0,#0x6a              ;7912
0004b2  f7fffffe          BL       SPI_1BYT_SetRx_Isr
0004b6  f7fffffe          BL       LLWTRFIFOGet_Isr
0004ba  48d7              LDR      r0,|L77.2072|
0004bc  6840              LDR      r0,[r0,#4]            ;7914  ; LL_ConnDataInTmp
0004be  2800              CMP      r0,#0                 ;7914
0004c0  d01f              BEQ      |L77.1282|
0004c2  e026              B        |L77.1298|
                  |L77.1220|
0004c4  e15a              B        |L77.1916|
                  |L77.1222|
0004c6  e18a              B        |L77.2014|
                  |L77.1224|
0004c8  e249              B        |L77.2398|
                  |L77.1226|
0004ca  48d4              LDR      r0,|L77.2076|
0004cc  21fb              MOVS     r1,#0xfb              ;7887
0004ce  7085              STRB     r5,[r0,#2]            ;7886
0004d0  70c1              STRB     r1,[r0,#3]            ;7887
0004d2  2600              MOVS     r6,#0                 ;7884
0004d4  1c80              ADDS     r0,r0,#2              ;7887
0004d6  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
0004da  4fca              LDR      r7,|L77.2052|
0004dc  69b8              LDR      r0,[r7,#0x18]         ;7890  ; tblk_LL_pi
0004de  7840              LDRB     r0,[r0,#1]            ;7890
0004e0  f7fffffe          BL       LLWTR_Buffer_nAck_Isr
0004e4  9001              STR      r0,[sp,#4]            ;7891
0004e6  6a38              LDR      r0,[r7,#0x20]         ;7891  ; LL_conn_pi
0004e8  72c5              STRB     r5,[r0,#0xb]          ;7891
0004ea  2034              MOVS     r0,#0x34              ;7892
0004ec  71f8              STRB     r0,[r7,#7]            ;7892
0004ee  3754              ADDS     r7,r7,#0x54           ;7893
0004f0  6838              LDR      r0,[r7,#0]            ;7893  ; LL_ConnDataInTmp
0004f2  2800              CMP      r0,#0                 ;7893
0004f4  d076              BEQ      |L77.1508|
0004f6  6878              LDR      r0,[r7,#4]            ;7895  ; LL_ConnDataInTmp
0004f8  f7fffffe          BL       FreeMsgBlks_Isr
0004fc  607c              STR      r4,[r7,#4]            ;7897  ; LL_ConnDataInTmp
0004fe  603c              STR      r4,[r7,#0]            ;7897  ; LL_ConnDataInTmp
000500  e070              B        |L77.1508|
                  |L77.1282|
000502  4669              MOV      r1,sp                 ;7916
000504  7808              LDRB     r0,[r1,#0]            ;7916
000506  21ef              MOVS     r1,#0xef              ;7916
000508  4008              ANDS     r0,r0,r1              ;7916
00050a  4669              MOV      r1,sp                 ;7916
00050c  7008              STRB     r0,[r1,#0]            ;7916
00050e  48c4              LDR      r0,|L77.2080|
000510  5d86              LDRB     r6,[r0,r6]            ;7917
                  |L77.1298|
000512  4335              ORRS     r5,r5,r6              ;7920
000514  5d7d              LDRB     r5,[r7,r5]            ;7920
000516  e000              B        |L77.1306|
                  |L77.1304|
000518  4605              MOV      r5,r0                 ;7924
                  |L77.1306|
00051a  49ba              LDR      r1,|L77.2052|
00051c  2234              MOVS     r2,#0x34              ;7927
00051e  6a08              LDR      r0,[r1,#0x20]         ;7926  ; LL_conn_pi
000520  72c5              STRB     r5,[r0,#0xb]          ;7926
000522  71ca              STRB     r2,[r1,#7]            ;7927
000524  466a              MOV      r2,sp                 ;7928
000526  7812              LDRB     r2,[r2,#0]            ;7928
000528  06d2              LSLS     r2,r2,#27             ;7928
00052a  d501              BPL      |L77.1328|
00052c  2233              MOVS     r2,#0x33              ;7930
00052e  71ca              STRB     r2,[r1,#7]            ;7930
                  |L77.1328|
000530  7801              LDRB     r1,[r0,#0]            ;7932
000532  2906              CMP      r1,#6                 ;7932
000534  d103              BNE      |L77.1342|
000536  2104              MOVS     r1,#4                 ;7934
000538  7001              STRB     r1,[r0,#0]            ;7934
00053a  8d41              LDRH     r1,[r0,#0x2a]         ;7935
00053c  8241              STRH     r1,[r0,#0x12]         ;7935
                  |L77.1342|
00053e  48b7              LDR      r0,|L77.2076|
000540  21fb              MOVS     r1,#0xfb              ;7940
000542  7085              STRB     r5,[r0,#2]            ;7939
000544  70c1              STRB     r1,[r0,#3]            ;7940
000546  2600              MOVS     r6,#0                 ;7937
000548  1c80              ADDS     r0,r0,#2              ;7940
00054a  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
00054e  0628              LSLS     r0,r5,#24             ;7943
000550  48ac              LDR      r0,|L77.2052|
000552  6980              LDR      r0,[r0,#0x18]         ;7969  ; tblk_LL_pi
000554  7840              LDRB     r0,[r0,#1]            ;7969
000556  d53c              BPL      |L77.1490|
000558  f7fffffe          BL       LLWTR_Buffer_wAck_Isr
00055c  4607              MOV      r7,r0                 ;7945
00055e  48a9              LDR      r0,|L77.2052|
000560  6980              LDR      r0,[r0,#0x18]         ;7946  ; tblk_LL_pi
000562  7840              LDRB     r0,[r0,#1]            ;7946
000564  0081              LSLS     r1,r0,#2              ;7946
000566  48af              LDR      r0,|L77.2084|
000568  5841              LDR      r1,[r0,r1]            ;7946
00056a  4638              MOV      r0,r7                 ;7946
00056c  4308              ORRS     r0,r0,r1              ;7946
00056e  d01a              BEQ      |L77.1446|
000570  2900              CMP      r1,#0                 ;7948
000572  d107              BNE      |L77.1412|
000574  7a7e              LDRB     r6,[r7,#9]            ;7950
000576  2020              MOVS     r0,#0x20              ;7950
000578  4306              ORRS     r6,r6,r0              ;7950
00057a  7af8              LDRB     r0,[r7,#0xb]          ;7951
00057c  9002              STR      r0,[sp,#8]            ;7953
00057e  4638              MOV      r0,r7                 ;7953
000580  f7fffffe          BL       FreeMsgBlk_Isr
                  |L77.1412|
000584  489f              LDR      r0,|L77.2052|
000586  7981              LDRB     r1,[r0,#6]            ;7955  ; LL_SMP_DataCh
000588  07c9              LSLS     r1,r1,#31             ;7955
00058a  d00c              BEQ      |L77.1446|
00058c  2f00              CMP      r7,#0                 ;7955
00058e  d00a              BEQ      |L77.1446|
000590  6a00              LDR      r0,[r0,#0x20]         ;7957  ; LL_conn_pi
000592  6f01              LDR      r1,[r0,#0x70]         ;7957
000594  1c49              ADDS     r1,r1,#1              ;7957
000596  6701              STR      r1,[r0,#0x70]         ;7958
000598  d105              BNE      |L77.1446|
00059a  3060              ADDS     r0,r0,#0x60           ;7958
00059c  7d01              LDRB     r1,[r0,#0x14]         ;7960
00059e  1c49              ADDS     r1,r1,#1              ;7960
0005a0  0649              LSLS     r1,r1,#25             ;7961
0005a2  0e49              LSRS     r1,r1,#25             ;7961
0005a4  7501              STRB     r1,[r0,#0x14]         ;7961
                  |L77.1446|
0005a6  4897              LDR      r0,|L77.2052|
0005a8  6980              LDR      r0,[r0,#0x18]         ;7965  ; tblk_LL_pi
0005aa  7840              LDRB     r0,[r0,#1]            ;7965
0005ac  f7fffffe          BL       LL_Queue_To_Buffer_Isr
                  |L77.1456|
0005b0  9001              STR      r0,[sp,#4]            ;7971
0005b2  0668              LSLS     r0,r5,#25             ;7971
0005b4  d516              BPL      |L77.1508|
0005b6  4668              MOV      r0,sp                 ;7973
0005b8  7840              LDRB     r0,[r0,#1]            ;7973
0005ba  2800              CMP      r0,#0                 ;7973
0005bc  d012              BEQ      |L77.1508|
0005be  4891              LDR      r0,|L77.2052|
0005c0  7981              LDRB     r1,[r0,#6]            ;7975  ; LL_SMP_DataCh
0005c2  0789              LSLS     r1,r1,#30             ;7975
0005c4  d50e              BPL      |L77.1508|
0005c6  6a00              LDR      r0,[r0,#0x20]         ;7977  ; LL_conn_pi
0005c8  6f81              LDR      r1,[r0,#0x78]         ;7977
0005ca  1c49              ADDS     r1,r1,#1              ;7977
0005cc  6781              STR      r1,[r0,#0x78]         ;7978
0005ce  d003              BEQ      |L77.1496|
0005d0  e008              B        |L77.1508|
                  |L77.1490|
0005d2  f7fffffe          BL       LLWTR_Buffer_nAck_Isr
0005d6  e7eb              B        |L77.1456|
                  |L77.1496|
0005d8  3060              ADDS     r0,r0,#0x60           ;7969
0005da  7f01              LDRB     r1,[r0,#0x1c]         ;7980
0005dc  1c49              ADDS     r1,r1,#1              ;7980
0005de  0649              LSLS     r1,r1,#25             ;7981
0005e0  0e49              LSRS     r1,r1,#25             ;7981
0005e2  7701              STRB     r1,[r0,#0x1c]         ;7981
                  |L77.1508|
0005e4  9801              LDR      r0,[sp,#4]            ;7987
0005e6  2800              CMP      r0,#0                 ;7987
0005e8  d024              BEQ      |L77.1588|
0005ea  4f86              LDR      r7,|L77.2052|
0005ec  7838              LDRB     r0,[r7,#0]            ;7990  ; RX_CRC_valid_flag
0005ee  2800              CMP      r0,#0                 ;7990
0005f0  d010              BEQ      |L77.1556|
0005f2  69b8              LDR      r0,[r7,#0x18]         ;7992  ; tblk_LL_pi
0005f4  498c              LDR      r1,|L77.2088|
0005f6  7840              LDRB     r0,[r0,#1]            ;7992
0005f8  00c0              LSLS     r0,r0,#3              ;7992
0005fa  1841              ADDS     r1,r0,r1              ;7992
0005fc  6849              LDR      r1,[r1,#4]            ;7992
0005fe  2900              CMP      r1,#0                 ;7992
000600  d104              BNE      |L77.1548|
000602  498a              LDR      r1,|L77.2092|
000604  1840              ADDS     r0,r0,r1              ;7992
000606  6840              LDR      r0,[r0,#4]            ;7992
000608  2800              CMP      r0,#0                 ;7992
00060a  d003              BEQ      |L77.1556|
                  |L77.1548|
00060c  2010              MOVS     r0,#0x10              ;7994
00060e  4305              ORRS     r5,r5,r0              ;7994
000610  2033              MOVS     r0,#0x33              ;7995
000612  71f8              STRB     r0,[r7,#7]            ;7995
                  |L77.1556|
000614  69b8              LDR      r0,[r7,#0x18]         ;7998  ; tblk_LL_pi
000616  4629              MOV      r1,r5                 ;7998
000618  7840              LDRB     r0,[r0,#1]            ;7998
00061a  f7fffffe          BL       LL_Buffer_To_FIFO_Isr
00061e  2800              CMP      r0,#0                 ;7998
000620  d135              BNE      |L77.1678|
000622  69b8              LDR      r0,[r7,#0x18]         ;7998  ; tblk_LL_pi
000624  7840              LDRB     r0,[r0,#1]            ;7998
000626  0081              LSLS     r1,r0,#2              ;7998
000628  487e              LDR      r0,|L77.2084|
00062a  5840              LDR      r0,[r0,r1]            ;7998
00062c  2800              CMP      r0,#0                 ;7998
00062e  d02e              BEQ      |L77.1678|
000630  2034              MOVS     r0,#0x34              ;8000
000632  e026              B        |L77.1666|
                  |L77.1588|
000634  2001              MOVS     r0,#1                 ;8005
000636  4328              ORRS     r0,r0,r5              ;8005
000638  06c1              LSLS     r1,r0,#27             ;8005
00063a  4878              LDR      r0,|L77.2076|
00063c  0ec9              LSRS     r1,r1,#27             ;8005
00063e  7081              STRB     r1,[r0,#2]            ;8005
000640  70c4              STRB     r4,[r0,#3]            ;8006
000642  1c80              ADDS     r0,r0,#2              ;8006
000644  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
000648  4f6e              LDR      r7,|L77.2052|
00064a  6a38              LDR      r0,[r7,#0x20]         ;8008  ; LL_conn_pi
00064c  8a02              LDRH     r2,[r0,#0x10]         ;8008
00064e  2a00              CMP      r2,#0                 ;8008
000650  d01d              BEQ      |L77.1678|
000652  8981              LDRH     r1,[r0,#0xc]          ;8010
000654  4291              CMP      r1,r2                 ;8010
000656  d219              BCS      |L77.1676|
000658  066a              LSLS     r2,r5,#25             ;8012
00065a  d514              BPL      |L77.1670|
00065c  4669              MOV      r1,sp                 ;8014
00065e  7849              LDRB     r1,[r1,#1]            ;8014
000660  2900              CMP      r1,#0                 ;8014
000662  d113              BNE      |L77.1676|
000664  0629              LSLS     r1,r5,#24             ;8016
000666  d403              BMI      |L77.1648|
000668  2184              MOVS     r1,#0x84              ;8025
00066a  5a09              LDRH     r1,[r1,r0]            ;8025
00066c  2900              CMP      r1,#0                 ;8025
00066e  d00d              BEQ      |L77.1676|
                  |L77.1648|
000670  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000674  6a38              LDR      r0,[r7,#0x20]         ;8019  ; LL_conn_pi
000676  8981              LDRH     r1,[r0,#0xc]          ;8019
000678  1c49              ADDS     r1,r1,#1              ;8019
00067a  8181              STRH     r1,[r0,#0xc]          ;8019
00067c  3080              ADDS     r0,r0,#0x80           ;8019
00067e  8084              STRH     r4,[r0,#4]            ;8020
000680  2036              MOVS     r0,#0x36              ;8021
                  |L77.1666|
000682  71f8              STRB     r0,[r7,#7]            ;8021
000684  e003              B        |L77.1678|
                  |L77.1670|
000686  2900              CMP      r1,#0                 ;8045
000688  d1f2              BNE      |L77.1648|
00068a  e000              B        |L77.1678|
                  |L77.1676|
00068c  8184              STRH     r4,[r0,#0xc]          ;8056
                  |L77.1678|
00068e  06b0              LSLS     r0,r6,#26             ;8060
000690  2737              MOVS     r7,#0x37              ;8081
000692  2800              CMP      r0,#0                 ;8060
000694  da42              BGE      |L77.1820|
000696  43f0              MVNS     r0,r6                 ;8062
000698  0780              LSLS     r0,r0,#30             ;8062
00069a  d00d              BEQ      |L77.1720|
00069c  0670              LSLS     r0,r6,#25             ;8064
00069e  d53d              BPL      |L77.1820|
0006a0  4858              LDR      r0,|L77.2052|
0006a2  6980              LDR      r0,[r0,#0x18]         ;8066  ; tblk_LL_pi
0006a4  7846              LDRB     r6,[r0,#1]            ;8066
0006a6  f7fffffe          BL       GetMsgBlk_Isr
0006aa  2164              MOVS     r1,#0x64              ;8066
0006ac  7101              STRB     r1,[r0,#4]            ;8066
0006ae  7286              STRB     r6,[r0,#0xa]          ;8066
0006b0  2104              MOVS     r1,#4                 ;8066
0006b2  f7fffffe          BL       SndMsgBlk_Isr
0006b6  e031              B        |L77.1820|
                  |L77.1720|
0006b8  4e52              LDR      r6,|L77.2052|
0006ba  6a30              LDR      r0,[r6,#0x20]         ;8071  ; LL_conn_pi
0006bc  7801              LDRB     r1,[r0,#0]            ;8071
0006be  2904              CMP      r1,#4                 ;8071
0006c0  d105              BNE      |L77.1742|
0006c2  495b              LDR      r1,|L77.2096|
0006c4  9a02              LDR      r2,[sp,#8]            ;8073
0006c6  5c89              LDRB     r1,[r1,r2]            ;8073
0006c8  7001              STRB     r1,[r0,#0]            ;8073
0006ca  2186              MOVS     r1,#0x86              ;8074
0006cc  520c              STRH     r4,[r1,r0]            ;8074
                  |L77.1742|
0006ce  9902              LDR      r1,[sp,#8]            ;8076
0006d0  2902              CMP      r1,#2                 ;8076
0006d2  d006              BEQ      |L77.1762|
0006d4  2906              CMP      r1,#6                 ;8076
0006d6  d00d              BEQ      |L77.1780|
0006d8  290b              CMP      r1,#0xb               ;8076
0006da  d010              BEQ      |L77.1790|
0006dc  290c              CMP      r1,#0xc               ;8076
0006de  d11a              BNE      |L77.1814|
0006e0  e014              B        |L77.1804|
                  |L77.1762|
0006e2  f7fffffe          BL       rafael_reset_phy_fsm_Isr
0006e6  6a30              LDR      r0,[r6,#0x20]         ;8080  ; LL_conn_pi
0006e8  2116              MOVS     r1,#0x16              ;8080
0006ea  3020              ADDS     r0,r0,#0x20           ;8080
0006ec  7081              STRB     r1,[r0,#2]            ;8080
0006ee  71f7              STRB     r7,[r6,#7]            ;8081
                  |L77.1776|
0006f0  b009              ADD      sp,sp,#0x24
0006f2  bdf0              POP      {r4-r7,pc}
                  |L77.1780|
0006f4  2153              MOVS     r1,#0x53              ;8085
0006f6  540c              STRB     r4,[r1,r0]            ;8085
0006f8  2104              MOVS     r1,#4                 ;8086
0006fa  7001              STRB     r1,[r0,#0]            ;8086
0006fc  e00b              B        |L77.1814|
                  |L77.1790|
0006fe  2102              MOVS     r1,#2                 ;8090
000700  2253              MOVS     r2,#0x53              ;8090
000702  5411              STRB     r1,[r2,r0]            ;8090
000704  6704              STR      r4,[r0,#0x70]         ;8091
000706  3060              ADDS     r0,r0,#0x60           ;8091
000708  7504              STRB     r4,[r0,#0x14]         ;8092
00070a  e004              B        |L77.1814|
                  |L77.1804|
00070c  7801              LDRB     r1,[r0,#0]            ;8096
00070e  298c              CMP      r1,#0x8c              ;8096
000710  d101              BNE      |L77.1814|
000712  2104              MOVS     r1,#4                 ;8098
000714  7001              STRB     r1,[r0,#0]            ;8098
                  |L77.1814|
000716  79f0              LDRB     r0,[r6,#7]            ;8105  ; status_LL_Tmr
000718  2837              CMP      r0,#0x37              ;8105
00071a  d0e9              BEQ      |L77.1776|
                  |L77.1820|
00071c  4e39              LDR      r6,|L77.2052|
00071e  7830              LDRB     r0,[r6,#0]            ;8111  ; RX_CRC_valid_flag
000720  2800              CMP      r0,#0                 ;8111
000722  d0e5              BEQ      |L77.1776|
000724  0668              LSLS     r0,r5,#25             ;8113
000726  d520              BPL      |L77.1898|
000728  4668              MOV      r0,sp                 ;8115
00072a  7840              LDRB     r0,[r0,#1]            ;8115
00072c  2800              CMP      r0,#0                 ;8115
00072e  d00b              BEQ      |L77.1864|
000730  79b0              LDRB     r0,[r6,#6]            ;8117  ; LL_SMP_DataCh
000732  0780              LSLS     r0,r0,#30             ;8117
000734  d508              BPL      |L77.1864|
000736  209b              MOVS     r0,#0x9b              ;8119
000738  f7fffffe          BL       SPI_1BYT_SetRx_Isr
00073c  06c0              LSLS     r0,r0,#27             ;8119
00073e  d50b              BPL      |L77.1880|
000740  4668              MOV      r0,sp                 ;8119
000742  7800              LDRB     r0,[r0,#0]            ;8119
000744  0780              LSLS     r0,r0,#30             ;8119
000746  d007              BEQ      |L77.1880|
                  |L77.1864|
000748  69b0              LDR      r0,[r6,#0x18]         ;8128  ; tblk_LL_pi
00074a  9900              LDR      r1,[sp,#0]            ;8128
00074c  7840              LDRB     r0,[r0,#1]            ;8128
00074e  f7fffffe          BL       LLWTR_Rx2Hc
000752  28b0              CMP      r0,#0xb0              ;8128
000754  d006              BEQ      |L77.1892|
000756  e008              B        |L77.1898|
                  |L77.1880|
000758  6a31              LDR      r1,[r6,#0x20]         ;8121  ; LL_conn_pi
00075a  203d              MOVS     r0,#0x3d              ;8121
00075c  3120              ADDS     r1,r1,#0x20           ;8121
00075e  7088              STRB     r0,[r1,#2]            ;8121
000760  71f7              STRB     r7,[r6,#7]            ;8122
000762  e2a8              B        |L77.3254|
                  |L77.1892|
000764  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000768  71f7              STRB     r7,[r6,#7]            ;8131
                  |L77.1898|
00076a  6a30              LDR      r0,[r6,#0x20]         ;8134  ; LL_conn_pi
00076c  3080              ADDS     r0,r0,#0x80           ;8134
00076e  8084              STRH     r4,[r0,#4]            ;8134
000770  f7fffffe          BL       RF_Get_LastRssi
000774  6a31              LDR      r1,[r6,#0x20]         ;8135  ; LL_conn_pi
                  |L77.1910|
000776  7748              STRB     r0,[r1,#0x1d]         ;7837
000778  b009              ADD      sp,sp,#0x24
00077a  bdf0              POP      {r4-r7,pc}
                  |L77.1916|
00077c  7cd8              LDRB     r0,[r3,#0x13]         ;8140
00077e  4c21              LDR      r4,|L77.2052|
000780  2800              CMP      r0,#0                 ;8140
000782  d005              BEQ      |L77.1936|
000784  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000788  2036              MOVS     r0,#0x36              ;8163
                  |L77.1930|
00078a  71e0              STRB     r0,[r4,#7]            ;7578
00078c  b009              ADD      sp,sp,#0x24
00078e  bdf0              POP      {r4-r7,pc}
                  |L77.1936|
000790  2126              MOVS     r1,#0x26              ;8142
000792  4630              MOV      r0,r6                 ;8142
000794  f7fffffe          BL       LLWTR_MDset
000798  2800              CMP      r0,#0                 ;8142
00079a  d005              BEQ      |L77.1960|
00079c  f7fffffe          BL       rafael_reset_phy_fsm_Isr
0007a0  2036              MOVS     r0,#0x36              ;8145
0007a2  71e0              STRB     r0,[r4,#7]            ;8145
0007a4  b009              ADD      sp,sp,#0x24
0007a6  bdf0              POP      {r4-r7,pc}
                  |L77.1960|
0007a8  2035              MOVS     r0,#0x35              ;8149
0007aa  71e0              STRB     r0,[r4,#7]            ;8149
0007ac  79a0              LDRB     r0,[r4,#6]            ;8150  ; LL_SMP_DataCh
0007ae  0780              LSLS     r0,r0,#30             ;8150
0007b0  d400              BMI      |L77.1972|
0007b2  e46a              B        |L77.138|
                  |L77.1972|
0007b4  6a21              LDR      r1,[r4,#0x20]         ;8152  ; LL_conn_pi
0007b6  2380              MOVS     r3,#0x80              ;8152
0007b8  4608              MOV      r0,r1                 ;8152
0007ba  3060              ADDS     r0,r0,#0x60           ;8152
0007bc  7f02              LDRB     r2,[r0,#0x1c]         ;8152
0007be  3178              ADDS     r1,r1,#0x78           ;8153
0007c0  431a              ORRS     r2,r2,r3              ;8152
0007c2  7702              STRB     r2,[r0,#0x1c]         ;8152
0007c4  2205              MOVS     r2,#5                 ;8153
0007c6  207e              MOVS     r0,#0x7e              ;8153
0007c8  f7fffffe          BL       SPI_PDMA_SetTx
0007cc  f7fffffe          BL       SPI_PDMA_waitFinish
0007d0  6a20              LDR      r0,[r4,#0x20]         ;8155  ; LL_conn_pi
0007d2  3060              ADDS     r0,r0,#0x60           ;8155
0007d4  7f01              LDRB     r1,[r0,#0x1c]         ;8155
0007d6  0649              LSLS     r1,r1,#25             ;8155
0007d8  0e49              LSRS     r1,r1,#25             ;8155
0007da  7701              STRB     r1,[r0,#0x1c]         ;8155
0007dc  e455              B        |L77.138|
                  |L77.2014|
0007de  f7fffffe          BL       rafael_reset_phy_fsm_Isr
0007e2  4908              LDR      r1,|L77.2052|
0007e4  2036              MOVS     r0,#0x36              ;8169
0007e6  71c8              STRB     r0,[r1,#7]            ;8169
0007e8  b009              ADD      sp,sp,#0x24
0007ea  bdf0              POP      {r4-r7,pc}
                  |L77.2028|
0007ec  240f              MOVS     r4,#0xf               ;8191
0007ee  27b0              MOVS     r7,#0xb0              ;8201
0007f0  2e05              CMP      r6,#5                 ;8181
0007f2  d01f              BEQ      |L77.2100|
0007f4  2e06              CMP      r6,#6                 ;8181
0007f6  d07d              BEQ      |L77.2292|
0007f8  2e07              CMP      r6,#7                 ;8181
0007fa  d07c              BEQ      |L77.2294|
0007fc  bf00              NOP                            ;8809
                  |L77.2046|
0007fe  b009              ADD      sp,sp,#0x24
000800  bdf0              POP      {r4-r7,pc}
000802  0000              DCW      0x0000
                  |L77.2052|
                          DCD      ||.data||
                  |L77.2056|
                          DCD      ||.constdata||+0x70
                  |L77.2060|
                          DCD      ||.bss||+0x460
                  |L77.2064|
                          DCD      rssi_read_data
                  |L77.2068|
                          DCD      ||.constdata||+0x11a
                  |L77.2072|
                          DCD      ||.data||+0x54
                  |L77.2076|
                          DCD      ||.bss||+0x43c
                  |L77.2080|
                          DCD      ||.constdata||+0x8
                  |L77.2084|
                          DCD      ||.bss||+0x3f0
                  |L77.2088|
                          DCD      ||.bss||+0x378
                  |L77.2092|
                          DCD      ||.bss||+0x3a0
                  |L77.2096|
                          DCD      ||.constdata||+0x15e
                  |L77.2100|
000834  290a              CMP      r1,#0xa               ;8184
000836  d007              BEQ      |L77.2120|
000838  290b              CMP      r1,#0xb               ;8184
00083a  d008              BEQ      |L77.2126|
00083c  290c              CMP      r1,#0xc               ;8184
00083e  d00a              BEQ      |L77.2134|
000840  290d              CMP      r1,#0xd               ;8184
000842  d1dc              BNE      |L77.2046|
000844  f7fffffe          BL       rafael_reset_phy_fsm_Isr
                  |L77.2120|
000848  71ec              STRB     r4,[r5,#7]            ;8380
00084a  b009              ADD      sp,sp,#0x24
00084c  bdf0              POP      {r4-r7,pc}
                  |L77.2126|
00084e  200c              MOVS     r0,#0xc               ;8187
000850  71e8              STRB     r0,[r5,#7]            ;8187
000852  b009              ADD      sp,sp,#0x24
000854  bdf0              POP      {r4-r7,pc}
                  |L77.2134|
000856  48fe              LDR      r0,|L77.3152|
000858  71c4              STRB     r4,[r0,#7]            ;8191
00085a  f7fffffe          BL       RF_CRCchk
00085e  2800              CMP      r0,#0                 ;8192
000860  d07d              BEQ      |L77.2398|
000862  2202              MOVS     r2,#2                 ;8197
000864  4669              MOV      r1,sp                 ;8197
000866  20ff              MOVS     r0,#0xff              ;8197
000868  f7fffffe          BL       SPI_PDMA_SetRx_Isr
00086c  4ef9              LDR      r6,|L77.3156|
00086e  7a30              LDRB     r0,[r6,#8]            ;8198  ; LL_Adv_Para
000870  0705              LSLS     r5,r0,#28             ;8198
000872  0f2d              LSRS     r5,r5,#28             ;8198
000874  f7fffffe          BL       GetMsgBlk_Isr
000878  4604              MOV      r4,r0                 ;8200
00087a  9001              STR      r0,[sp,#4]            ;8201
00087c  3408              ADDS     r4,r4,#8              ;8200
00087e  7107              STRB     r7,[r0,#4]            ;8201
000880  2222              MOVS     r2,#0x22              ;8203
000882  4621              MOV      r1,r4                 ;8203
000884  20ff              MOVS     r0,#0xff              ;8203
000886  f7fffffe          BL       SPI_PDMA_SetRx_Isr
00088a  4668              MOV      r0,sp                 ;8204
00088c  7800              LDRB     r0,[r0,#0]            ;8204
00088e  0700              LSLS     r0,r0,#28             ;8204
000890  0f00              LSRS     r0,r0,#28             ;8204
000892  2803              CMP      r0,#3                 ;8204
000894  d07e              BEQ      |L77.2452|
000896  2805              CMP      r0,#5                 ;8204
000898  d17d              BNE      |L77.2454|
00089a  f7fffffe          BL       rafael_reset_phy_fsm_Isr
00089e  2d00              CMP      r5,#0                 ;8209
0008a0  d002              BEQ      |L77.2216|
0008a2  2d01              CMP      r5,#1                 ;8217
0008a4  d00d              BEQ      |L77.2242|
0008a6  e107              B        |L77.2744|
                  |L77.2216|
0008a8  7cb0              LDRB     r0,[r6,#0x12]         ;8211  ; LL_Adv_Para
0008aa  2803              CMP      r0,#3                 ;8211
0008ac  d001              BEQ      |L77.2226|
0008ae  2802              CMP      r0,#2                 ;8211
0008b0  d118              BNE      |L77.2276|
                  |L77.2226|
0008b2  466a              MOV      r2,sp                 ;8213
0008b4  7810              LDRB     r0,[r2,#0]            ;8213
0008b6  9901              LDR      r1,[sp,#4]            ;8213
0008b8  f7fffffe          BL       RF_cmpFIFO_WhiteList
0008bc  2800              CMP      r0,#0                 ;8213
0008be  d16a              BNE      |L77.2454|
0008c0  e010              B        |L77.2276|
                  |L77.2242|
0008c2  4668              MOV      r0,sp                 ;8219
0008c4  7800              LDRB     r0,[r0,#0]            ;8219
0008c6  0640              LSLS     r0,r0,#25             ;8219
0008c8  7a30              LDRB     r0,[r6,#8]            ;8228  ; LL_Adv_Para
0008ca  d402              BMI      |L77.2258|
0008cc  0600              LSLS     r0,r0,#24             ;8221
0008ce  d462              BMI      |L77.2454|
0008d0  e001              B        |L77.2262|
                  |L77.2258|
0008d2  0600              LSLS     r0,r0,#24             ;8228
0008d4  d55f              BPL      |L77.2454|
                  |L77.2262|
0008d6  2206              MOVS     r2,#6                 ;8233
0008d8  49df              LDR      r1,|L77.3160|
0008da  4620              MOV      r0,r4                 ;8233
0008dc  f7fffffe          BL       Knl_MemComp_Isr
0008e0  2800              CMP      r0,#0                 ;8233
0008e2  d158              BNE      |L77.2454|
                  |L77.2276|
0008e4  4668              MOV      r0,sp                 ;8242
0008e6  7800              LDRB     r0,[r0,#0]            ;8242
0008e8  9901              LDR      r1,[sp,#4]            ;8242
0008ea  f7fffffe          BL       RF_cmpFIFO_BDAddr
0008ee  2800              CMP      r0,#0                 ;8242
0008f0  d151              BNE      |L77.2454|
0008f2  e001              B        |L77.2296|
                  |L77.2292|
0008f4  e0ec              B        |L77.2768|
                  |L77.2294|
0008f6  e1d8              B        |L77.3242|
                  |L77.2296|
0008f8  48d6              LDR      r0,|L77.3156|
0008fa  7845              LDRB     r5,[r0,#1]            ;8244  ; LL_Adv_Para
0008fc  4668              MOV      r0,sp                 ;8245
0008fe  7800              LDRB     r0,[r0,#0]            ;8245
000900  0640              LSLS     r0,r0,#25             ;8245
000902  d505              BPL      |L77.2320|
000904  2101              MOVS     r1,#1                 ;8247
000906  48d5              LDR      r0,|L77.3164|
000908  00aa              LSLS     r2,r5,#2              ;8247
00090a  5880              LDR      r0,[r0,r2]            ;8247
00090c  7341              STRB     r1,[r0,#0xd]          ;8247
00090e  e004              B        |L77.2330|
                  |L77.2320|
000910  2100              MOVS     r1,#0                 ;8251
000912  48d2              LDR      r0,|L77.3164|
000914  00aa              LSLS     r2,r5,#2              ;8251
000916  5880              LDR      r0,[r0,r2]            ;8251
000918  7341              STRB     r1,[r0,#0xd]          ;8251
                  |L77.2330|
00091a  48d0              LDR      r0,|L77.3164|
00091c  00af              LSLS     r7,r5,#2              ;8253
00091e  59c3              LDR      r3,[r0,r7]            ;8253
000920  4621              MOV      r1,r4                 ;8253
000922  4618              MOV      r0,r3                 ;8253
000924  2206              MOVS     r2,#6                 ;8253
000926  3116              ADDS     r1,r1,#0x16           ;8253
000928  3014              ADDS     r0,r0,#0x14           ;8253
00092a  f7fffffe          BL       Knl_MemCpy_Isr
00092e  48cb              LDR      r0,|L77.3164|
000930  2100              MOVS     r1,#0                 ;8254
000932  59c0              LDR      r0,[r0,r7]            ;8254
000934  4626              MOV      r6,r4                 ;8255
000936  7281              STRB     r1,[r0,#0xa]          ;8254
000938  3620              ADDS     r6,r6,#0x20           ;8255
00093a  7870              LDRB     r0,[r6,#1]            ;8255
00093c  2206              MOVS     r2,#6                 ;8257
00093e  0941              LSRS     r1,r0,#5              ;8255
000940  48c6              LDR      r0,|L77.3164|
000942  59c0              LDR      r0,[r0,r7]            ;8255
000944  7681              STRB     r1,[r0,#0x1a]         ;8255
000946  7870              LDRB     r0,[r6,#1]            ;8256
000948  0941              LSRS     r1,r0,#5              ;8256
00094a  48c1              LDR      r0,|L77.3152|
00094c  6a00              LDR      r0,[r0,#0x20]         ;8256  ; LL_conn_pi
00094e  3080              ADDS     r0,r0,#0x80           ;8256
000950  70c1              STRB     r1,[r0,#3]            ;8256
000952  48c2              LDR      r0,|L77.3164|
000954  4621              MOV      r1,r4                 ;8257
000956  59c3              LDR      r3,[r0,r7]            ;8257
000958  4618              MOV      r0,r3                 ;8257
00095a  300e              ADDS     r0,r0,#0xe            ;8257
00095c  e000              B        |L77.2400|
                  |L77.2398|
00095e  e124              B        |L77.2986|
                  |L77.2400|
000960  f7fffffe          BL       Knl_MemCpy_Isr
000964  48bd              LDR      r0,|L77.3164|
000966  2104              MOVS     r1,#4                 ;8259
000968  59c0              LDR      r0,[r0,r7]            ;8259
00096a  f7fffffe          BL       SndMsgBlk_Isr
00096e  48bb              LDR      r0,|L77.3164|
000970  2100              MOVS     r1,#0                 ;8260
000972  51c1              STR      r1,[r0,r7]            ;8260
000974  48b6              LDR      r0,|L77.3152|
000976  78c1              LDRB     r1,[r0,#3]            ;8261  ; LL_ConnID_Remaining
000978  2900              CMP      r1,#0                 ;8261
00097a  d001              BEQ      |L77.2432|
00097c  1e49              SUBS     r1,r1,#1              ;8263
00097e  70c1              STRB     r1,[r0,#3]            ;8263
                  |L77.2432|
000980  4fb3              LDR      r7,|L77.3152|
000982  4621              MOV      r1,r4                 ;8265
000984  6a38              LDR      r0,[r7,#0x20]         ;8265  ; LL_conn_pi
000986  2215              MOVS     r2,#0x15              ;8265
000988  310c              ADDS     r1,r1,#0xc            ;8265
00098a  1d00              ADDS     r0,r0,#4              ;8265
00098c  f7fffffe          BL       Knl_MemCpy_Isr
000990  2225              MOVS     r2,#0x25              ;8267
000992  e001              B        |L77.2456|
                  |L77.2452|
000994  e053              B        |L77.2622|
                  |L77.2454|
000996  e08f              B        |L77.2744|
                  |L77.2456|
000998  6a38              LDR      r0,[r7,#0x20]         ;8267  ; LL_conn_pi
00099a  49b1              LDR      r1,|L77.3168|
00099c  302e              ADDS     r0,r0,#0x2e           ;8267
00099e  f7fffffe          BL       Knl_CodeCpy_Isr
0009a2  2000              MOVS     r0,#0                 ;8267
0009a4  6278              STR      r0,[r7,#0x24]         ;8267  ; LL_Slv_Win_Width
0009a6  6a38              LDR      r0,[r7,#0x20]         ;8267  ; LL_conn_pi
0009a8  4603              MOV      r3,r0                 ;8267
0009aa  3380              ADDS     r3,r3,#0x80           ;8267
0009ac  78d9              LDRB     r1,[r3,#3]            ;8267
0009ae  469c              MOV      r12,r3                ;8267
0009b0  008a              LSLS     r2,r1,#2              ;8267
0009b2  49ac              LDR      r1,|L77.3172|
0009b4  230a              MOVS     r3,#0xa               ;8280
0009b6  5889              LDR      r1,[r1,r2]            ;8280
0009b8  8bc2              LDRH     r2,[r0,#0x1e]         ;8280
0009ba  434a              MULS     r2,r1,r2              ;8280
0009bc  62ba              STR      r2,[r7,#0x28]         ;8270  ; LL_Slv_Win_Width_Base
0009be  7ce1              LDRB     r1,[r4,#0x13]         ;8270
0009c0  220a              MOVS     r2,#0xa               ;8270
0009c2  4351              MULS     r1,r2,r1              ;8270
0009c4  b2c9              UXTB     r1,r1                 ;8270
0009c6  72c1              STRB     r1,[r0,#0xb]          ;8270
0009c8  7872              LDRB     r2,[r6,#1]            ;8274
0009ca  06d2              LSLS     r2,r2,#27             ;8274
0009cc  0ed2              LSRS     r2,r2,#27             ;8274
0009ce  7642              STRB     r2,[r0,#0x19]         ;8274
0009d0  7872              LDRB     r2,[r6,#1]            ;8275
0009d2  06d2              LSLS     r2,r2,#27             ;8275
0009d4  0ed2              LSRS     r2,r2,#27             ;8275
0009d6  7702              STRB     r2,[r0,#0x1c]         ;8275
0009d8  2202              MOVS     r2,#2                 ;8276
0009da  7002              STRB     r2,[r0,#0]            ;8276
0009dc  8982              LDRH     r2,[r0,#0xc]          ;8279
0009de  435a              MULS     r2,r3,r2              ;8280
0009e0  8182              STRH     r2,[r0,#0xc]          ;8280
0009e2  8a42              LDRH     r2,[r0,#0x12]         ;8282
0009e4  4663              MOV      r3,r12                ;8287
0009e6  00d2              LSLS     r2,r2,#3              ;8283
0009e8  8542              STRH     r2,[r0,#0x2a]         ;8283
0009ea  89c2              LDRH     r2,[r0,#0xe]          ;8285
0009ec  83c2              STRH     r2,[r0,#0x1e]         ;8286
0009ee  0094              LSLS     r4,r2,#2              ;8287
0009f0  809c              STRH     r4,[r3,#4]            ;8287
0009f2  230a              MOVS     r3,#0xa               ;8288
0009f4  435a              MULS     r2,r3,r2              ;8288
0009f6  b292              UXTH     r2,r2                 ;8288
0009f8  460b              MOV      r3,r1                 ;8307
0009fa  81c2              STRH     r2,[r0,#0xe]          ;8288
0009fc  3308              ADDS     r3,r3,#8              ;8307
0009fe  8242              STRH     r2,[r0,#0x12]         ;8289
000a00  429a              CMP      r2,r3                 ;8307
000a02  d101              BNE      |L77.2568|
000a04  3922              SUBS     r1,r1,#0x22           ;8307
000a06  72c1              STRB     r1,[r0,#0xb]          ;8309
                  |L77.2568|
000a08  f7fffffe          BL       GetMsgBlk_Isr
000a0c  21e9              MOVS     r1,#0xe9              ;8309
000a0e  7101              STRB     r1,[r0,#4]            ;8309
000a10  7205              STRB     r5,[r0,#8]            ;8309
000a12  2100              MOVS     r1,#0                 ;8309
000a14  f7fffffe          BL       SndMsgBlk_Isr
000a18  488e              LDR      r0,|L77.3156|
000a1a  6a39              LDR      r1,[r7,#0x20]         ;8312  ; LL_conn_pi
000a1c  7880              LDRB     r0,[r0,#2]            ;8312  ; LL_Adv_Para
000a1e  70c8              STRB     r0,[r1,#3]            ;8312
000a20  7a78              LDRB     r0,[r7,#9]            ;8313  ; LL_Msg_AdvScnConn
000a22  21ef              MOVS     r1,#0xef              ;8313
000a24  4008              ANDS     r0,r0,r1              ;8313
000a26  7278              STRB     r0,[r7,#9]            ;8313
000a28  7af8              LDRB     r0,[r7,#0xb]          ;8314  ; LL_Msg_AdvScnConnUpdSts
000a2a  0840              LSRS     r0,r0,#1              ;8314
000a2c  0040              LSLS     r0,r0,#1              ;8314
000a2e  72f8              STRB     r0,[r7,#0xb]          ;8314
000a30  7ab8              LDRB     r0,[r7,#0xa]          ;8315  ; LL_Msg_AdvScnConnUpd
000a32  0840              LSRS     r0,r0,#1              ;8315
000a34  0040              LSLS     r0,r0,#1              ;8315
000a36  72b8              STRB     r0,[r7,#0xa]          ;8315
000a38  200e              MOVS     r0,#0xe               ;8316
000a3a  71f8              STRB     r0,[r7,#7]            ;8316
000a3c  e03c              B        |L77.2744|
                  |L77.2622|
000a3e  2d00              CMP      r5,#0                 ;8321
000a40  d001              BEQ      |L77.2630|
000a42  2d06              CMP      r5,#6                 ;8321
000a44  d138              BNE      |L77.2744|
                  |L77.2630|
000a46  f7fffffe          BL       SPI_PDMA_waitFinish
000a4a  7cb0              LDRB     r0,[r6,#0x12]         ;8326  ; LL_Adv_Para
000a4c  2801              CMP      r0,#1                 ;8326
000a4e  d001              BEQ      |L77.2644|
000a50  2803              CMP      r0,#3                 ;8326
000a52  d106              BNE      |L77.2658|
                  |L77.2644|
000a54  4668              MOV      r0,sp                 ;8330
000a56  7800              LDRB     r0,[r0,#0]            ;8330
000a58  9901              LDR      r1,[sp,#4]            ;8330
000a5a  f7fffffe          BL       RF_cmpFIFO_WhiteList
000a5e  2800              CMP      r0,#0                 ;8330
000a60  d12a              BNE      |L77.2744|
                  |L77.2658|
000a62  4668              MOV      r0,sp                 ;8333
000a64  7800              LDRB     r0,[r0,#0]            ;8333
000a66  9901              LDR      r1,[sp,#4]            ;8333
000a68  f7fffffe          BL       RF_cmpFIFO_BDAddr
000a6c  2800              CMP      r0,#0                 ;8333
000a6e  d123              BNE      |L77.2744|
000a70  7a30              LDRB     r0,[r6,#8]            ;8335  ; LL_Adv_Para
000a72  4d77              LDR      r5,|L77.3152|
000a74  0901              LSRS     r1,r0,#4              ;8335
000a76  0109              LSLS     r1,r1,#4              ;8335
000a78  487b              LDR      r0,|L77.3176|
000a7a  1d09              ADDS     r1,r1,#4              ;8335
000a7c  7081              STRB     r1,[r0,#2]            ;8335
000a7e  7ae9              LDRB     r1,[r5,#0xb]          ;8336  ; LL_Msg_AdvScnConnUpdSts
000a80  06c9              LSLS     r1,r1,#27             ;8336
000a82  d505              BPL      |L77.2704|
000a84  4979              LDR      r1,|L77.3180|
000a86  4c7a              LDR      r4,|L77.3184|
000a88  7ec9              LDRB     r1,[r1,#0x1b]         ;8338  ; LL_Adv_Para_UpdBuf
000a8a  1d89              ADDS     r1,r1,#6              ;8338
000a8c  70c1              STRB     r1,[r0,#3]            ;8338
000a8e  e004              B        |L77.2714|
                  |L77.2704|
000a90  4978              LDR      r1,|L77.3188|
000a92  4c70              LDR      r4,|L77.3156|
000a94  7ec9              LDRB     r1,[r1,#0x1b]         ;8343  ; LL_Adv_Para
000a96  1d89              ADDS     r1,r1,#6              ;8343
000a98  70c1              STRB     r1,[r0,#3]            ;8343
                  |L77.2714|
000a9a  343c              ADDS     r4,r4,#0x3c           ;8344
000a9c  1c80              ADDS     r0,r0,#2              ;8344
000a9e  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
000aa2  7a70              LDRB     r0,[r6,#9]            ;8347  ; LL_Adv_Para
000aa4  2800              CMP      r0,#0                 ;8347
000aa6  d011              BEQ      |L77.2764|
000aa8  4873              LDR      r0,|L77.3192|
                  |L77.2730|
000aaa  f7fffffe          BL       RF_TxFIFO_ADVaddr_set
000aae  4620              MOV      r0,r4                 ;8355
000ab0  f7fffffe          BL       RF_TxFIFO_ADVData_set
000ab4  200d              MOVS     r0,#0xd               ;8356
000ab6  71e8              STRB     r0,[r5,#7]            ;8356
                  |L77.2744|
000ab8  2100              MOVS     r1,#0                 ;8370
000aba  9801              LDR      r0,[sp,#4]            ;8370
000abc  f7fffffe          BL       SndMsgBlk_Isr
000ac0  4863              LDR      r0,|L77.3152|
000ac2  79c0              LDRB     r0,[r0,#7]            ;8371  ; status_LL_Tmr
000ac4  280f              CMP      r0,#0xf               ;8371
000ac6  d070              BEQ      |L77.2986|
                  |L77.2760|
000ac8  b009              ADD      sp,sp,#0x24
000aca  bdf0              POP      {r4-r7,pc}
                  |L77.2764|
000acc  486b              LDR      r0,|L77.3196|
000ace  e7ec              B        |L77.2730|
                  |L77.2768|
000ad0  2018              MOVS     r0,#0x18              ;8390
000ad2  4e6b              LDR      r6,|L77.3200|
000ad4  2914              CMP      r1,#0x14              ;8387
000ad6  d027              BEQ      |L77.2856|
000ad8  2915              CMP      r1,#0x15              ;8387
000ada  d067              BEQ      |L77.2988|
000adc  2916              CMP      r1,#0x16              ;8387
000ade  d066              BEQ      |L77.2990|
000ae0  2917              CMP      r1,#0x17              ;8387
000ae2  d1f1              BNE      |L77.2760|
000ae4  71e8              STRB     r0,[r5,#7]            ;8493
000ae6  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000aea  f7fffffe          BL       RF_CRCchk
000aee  2800              CMP      r0,#0                 ;8495
000af0  d0ea              BEQ      |L77.2760|
000af2  2058              MOVS     r0,#0x58              ;8495
000af4  f7fffffe          BL       CheckMsgBlk_L2_wSizeUsed_Isr
000af8  2800              CMP      r0,#0                 ;8495
000afa  d1e5              BNE      |L77.2760|
000afc  2202              MOVS     r2,#2                 ;8500
000afe  4669              MOV      r1,sp                 ;8500
000b00  20ff              MOVS     r0,#0xff              ;8500
000b02  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000b06  f7fffffe          BL       GetMsgBlk_Isr
000b0a  4601              MOV      r1,r0                 ;8504
000b0c  4604              MOV      r4,r0                 ;8501
000b0e  7107              STRB     r7,[r0,#4]            ;8502
000b10  2225              MOVS     r2,#0x25              ;8504
000b12  3108              ADDS     r1,r1,#8              ;8504
000b14  20ff              MOVS     r0,#0xff              ;8504
000b16  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000b1a  4668              MOV      r0,sp                 ;8506
000b1c  7800              LDRB     r0,[r0,#0]            ;8506
000b1e  0700              LSLS     r0,r0,#28             ;8506
000b20  0f00              LSRS     r0,r0,#28             ;8506
000b22  2804              CMP      r0,#4                 ;8506
000b24  d17e              BNE      |L77.3108|
000b26  e0b3              B        |L77.3216|
                  |L77.2856|
000b28  71e8              STRB     r0,[r5,#7]            ;8390
000b2a  f7fffffe          BL       RF_CRCchk
000b2e  2800              CMP      r0,#0                 ;8391
000b30  d03b              BEQ      |L77.2986|
000b32  2058              MOVS     r0,#0x58              ;8391
000b34  f7fffffe          BL       CheckMsgBlk_L2_wSizeUsed_Isr
000b38  2800              CMP      r0,#0                 ;8391
000b3a  d136              BNE      |L77.2986|
000b3c  2202              MOVS     r2,#2                 ;8396
000b3e  4669              MOV      r1,sp                 ;8396
000b40  20ff              MOVS     r0,#0xff              ;8396
000b42  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000b46  f7fffffe          BL       GetMsgBlk_Isr
000b4a  4601              MOV      r1,r0                 ;8401
000b4c  7107              STRB     r7,[r0,#4]            ;8399
000b4e  4604              MOV      r4,r0                 ;8398
000b50  3108              ADDS     r1,r1,#8              ;8401
000b52  2225              MOVS     r2,#0x25              ;8401
000b54  460f              MOV      r7,r1                 ;8401
000b56  20ff              MOVS     r0,#0xff              ;8401
000b58  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000b5c  79f0              LDRB     r0,[r6,#7]            ;8403  ; LL_Scan_Para
000b5e  2800              CMP      r0,#0                 ;8403
000b60  d00b              BEQ      |L77.2938|
000b62  f7fffffe          BL       SPI_PDMA_waitFinish
000b66  4668              MOV      r0,sp                 ;8406
000b68  7800              LDRB     r0,[r0,#0]            ;8406
000b6a  4621              MOV      r1,r4                 ;8406
000b6c  f7fffffe          BL       RF_cmpFIFO_WhiteList
000b70  2800              CMP      r0,#0                 ;8406
000b72  d002              BEQ      |L77.2938|
                  |L77.2932|
000b74  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000b78  e069              B        |L77.3150|
                  |L77.2938|
000b7a  4669              MOV      r1,sp                 ;8414
000b7c  780a              LDRB     r2,[r1,#0]            ;8414
000b7e  2000              MOVS     r0,#0                 ;8413
000b80  0711              LSLS     r1,r2,#28             ;8414
000b82  0f09              LSRS     r1,r1,#28             ;8414
000b84  d005              BEQ      |L77.2962|
000b86  2901              CMP      r1,#1                 ;8414
000b88  d027              BEQ      |L77.3034|
000b8a  2902              CMP      r1,#2                 ;8414
000b8c  d025              BEQ      |L77.3034|
000b8e  2906              CMP      r1,#6                 ;8414
000b90  d1f0              BNE      |L77.2932|
                  |L77.2962|
000b92  0651              LSLS     r1,r2,#25             ;8424
000b94  d500              BPL      |L77.2968|
000b96  2080              MOVS     r0,#0x80              ;8426
                  |L77.2968|
000b98  79b1              LDRB     r1,[r6,#6]            ;8428  ; LL_Scan_Para
000b9a  2900              CMP      r1,#0                 ;8428
000b9c  d001              BEQ      |L77.2978|
000b9e  2140              MOVS     r1,#0x40              ;8430
000ba0  4308              ORRS     r0,r0,r1              ;8430
                  |L77.2978|
000ba2  2103              MOVS     r1,#3                 ;8432
000ba4  4308              ORRS     r0,r0,r1              ;8432
000ba6  e003              B        |L77.2992|
                  |L77.2984|
000ba8  e07c              B        |L77.3236|
                  |L77.2986|
000baa  e084              B        |L77.3254|
                  |L77.2988|
000bac  e01a              B        |L77.3044|
                  |L77.2990|
000bae  e076              B        |L77.3230|
                  |L77.2992|
000bb0  492d              LDR      r1,|L77.3176|
000bb2  7088              STRB     r0,[r1,#2]            ;8432
000bb4  1c88              ADDS     r0,r1,#2              ;8433
000bb6  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
000bba  79b0              LDRB     r0,[r6,#6]            ;8434  ; LL_Scan_Para
000bbc  2800              CMP      r0,#0                 ;8434
000bbe  d00f              BEQ      |L77.3040|
000bc0  482d              LDR      r0,|L77.3192|
                  |L77.3010|
000bc2  f7fffffe          BL       RF_TxFIFO_ADVaddr_set
000bc6  2016              MOVS     r0,#0x16              ;8442
000bc8  71e8              STRB     r0,[r5,#7]            ;8442
000bca  4638              MOV      r0,r7                 ;8442
000bcc  f7fffffe          BL       RF_TxFIFO_ADVData_set
                  |L77.3024|
000bd0  4621              MOV      r1,r4                 ;8445
000bd2  9800              LDR      r0,[sp,#0]            ;8445
000bd4  f7fffffe          BL       LL_Tmr_FIFO_ADVrpt
000bd8  e039              B        |L77.3150|
                  |L77.3034|
000bda  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000bde  e7f7              B        |L77.3024|
                  |L77.3040|
000be0  4826              LDR      r0,|L77.3196|
000be2  e7ee              B        |L77.3010|
                  |L77.3044|
000be4  71e8              STRB     r0,[r5,#7]            ;8456
000be6  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000bea  f7fffffe          BL       RF_CRCchk
000bee  2800              CMP      r0,#0                 ;8458
000bf0  d100              BNE      |L77.3060|
                  |L77.3058|
000bf2  e769              B        |L77.2760|
                  |L77.3060|
000bf4  2058              MOVS     r0,#0x58              ;8458
000bf6  f7fffffe          BL       CheckMsgBlk_L2_wSizeUsed_Isr
000bfa  2800              CMP      r0,#0                 ;8458
000bfc  d1f9              BNE      |L77.3058|
000bfe  2202              MOVS     r2,#2                 ;8463
000c00  4669              MOV      r1,sp                 ;8463
000c02  20ff              MOVS     r0,#0xff              ;8463
000c04  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000c08  f7fffffe          BL       GetMsgBlk_Isr
000c0c  4601              MOV      r1,r0                 ;8467
000c0e  4604              MOV      r4,r0                 ;8464
000c10  7107              STRB     r7,[r0,#4]            ;8465
000c12  2225              MOVS     r2,#0x25              ;8467
000c14  3108              ADDS     r1,r1,#8              ;8467
000c16  20ff              MOVS     r0,#0xff              ;8467
000c18  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000c1c  79f0              LDRB     r0,[r6,#7]            ;8468  ; LL_Scan_Para
000c1e  2800              CMP      r0,#0                 ;8468
000c20  d00a              BEQ      |L77.3128|
000c22  e000              B        |L77.3110|
                  |L77.3108|
000c24  e038              B        |L77.3224|
                  |L77.3110|
000c26  f7fffffe          BL       SPI_PDMA_waitFinish
000c2a  4668              MOV      r0,sp                 ;8471
000c2c  7800              LDRB     r0,[r0,#0]            ;8471
000c2e  4621              MOV      r1,r4                 ;8471
000c30  f7fffffe          BL       RF_cmpFIFO_WhiteList
000c34  2800              CMP      r0,#0                 ;8471
000c36  d10a              BNE      |L77.3150|
                  |L77.3128|
000c38  4668              MOV      r0,sp                 ;8477
000c3a  7800              LDRB     r0,[r0,#0]            ;8477
000c3c  0700              LSLS     r0,r0,#28             ;8477
000c3e  0f00              LSRS     r0,r0,#28             ;8477
000c40  d0c6              BEQ      |L77.3024|
000c42  2801              CMP      r0,#1                 ;8477
000c44  d0c4              BEQ      |L77.3024|
000c46  2802              CMP      r0,#2                 ;8477
000c48  d0c2              BEQ      |L77.3024|
000c4a  2806              CMP      r0,#6                 ;8477
000c4c  d0c0              BEQ      |L77.3024|
                  |L77.3150|
000c4e  e019              B        |L77.3204|
                  |L77.3152|
                          DCD      ||.data||
                  |L77.3156|
                          DCD      ||.bss||
                  |L77.3160|
                          DCD      ||.bss||+0xb
                  |L77.3164|
                          DCD      ||.bss||+0x5c4
                  |L77.3168|
                          DCD      ||.constdata||+0x90
                  |L77.3172|
                          DCD      ||.constdata||+0x70
                  |L77.3176|
                          DCD      ||.bss||+0x43c
                  |L77.3180|
                          DCD      ||.bss||+0x9c
                  |L77.3184|
                          DCD      ||.bss||+0x5c
                  |L77.3188|
                          DCD      ||.bss||+0x40
                  |L77.3192|
                          DCD      ||.data||+0x45
                  |L77.3196|
                          DCD      ble_device_param+0x2
                  |L77.3200|
                          DCD      ||.bss||+0xb8
                  |L77.3204|
000c84  2100              MOVS     r1,#0                 ;8489
000c86  4620              MOV      r0,r4                 ;8489
000c88  f7fffffe          BL       SndMsgBlk_Isr
000c8c  b009              ADD      sp,sp,#0x24
000c8e  bdf0              POP      {r4-r7,pc}
                  |L77.3216|
000c90  4621              MOV      r1,r4                 ;8509
000c92  9800              LDR      r0,[sp,#0]            ;8509
000c94  f7fffffe          BL       LL_Tmr_FIFO_ADVrpt
                  |L77.3224|
000c98  2100              MOVS     r1,#0                 ;8515
000c9a  4620              MOV      r0,r4                 ;8515
000c9c  e06b              B        |L77.3446|
                  |L77.3230|
000c9e  f7fffffe          BL       RF_TxAutoAckOff
000ca2  2017              MOVS     r0,#0x17              ;8520
                  |L77.3236|
000ca4  71e8              STRB     r0,[r5,#7]            ;7822
                  |L77.3238|
000ca6  b009              ADD      sp,sp,#0x24
000ca8  bdf0              POP      {r4-r7,pc}
                  |L77.3242|
000caa  291e              CMP      r1,#0x1e              ;8530
000cac  d007              BEQ      |L77.3262|
000cae  291f              CMP      r1,#0x1f              ;8530
000cb0  d1f9              BNE      |L77.3238|
000cb2  2020              MOVS     r0,#0x20              ;8798
000cb4  71e8              STRB     r0,[r5,#7]            ;8798
                  |L77.3254|
000cb6  f7fffffe          BL       rafael_reset_phy_fsm_Isr
000cba  b009              ADD      sp,sp,#0x24
000cbc  bdf0              POP      {r4-r7,pc}
                  |L77.3262|
000cbe  2021              MOVS     r0,#0x21              ;8533
000cc0  71e8              STRB     r0,[r5,#7]            ;8533
000cc2  f7fffffe          BL       RF_CRCchk
000cc6  2800              CMP      r0,#0                 ;8534
000cc8  d0f5              BEQ      |L77.3254|
000cca  2202              MOVS     r2,#2                 ;8539
000ccc  4669              MOV      r1,sp                 ;8539
000cce  20ff              MOVS     r0,#0xff              ;8539
000cd0  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000cd4  f7fffffe          BL       GetMsgBlk_Isr
000cd8  9001              STR      r0,[sp,#4]            ;8542
000cda  7107              STRB     r7,[r0,#4]            ;8542
000cdc  9801              LDR      r0,[sp,#4]            ;8543
000cde  220c              MOVS     r2,#0xc               ;8546
000ce0  3008              ADDS     r0,r0,#8              ;8543
000ce2  9002              STR      r0,[sp,#8]            ;8543
000ce4  4601              MOV      r1,r0                 ;8546
000ce6  9005              STR      r0,[sp,#0x14]         ;8546
000ce8  20ff              MOVS     r0,#0xff              ;8546
000cea  f7fffffe          BL       SPI_PDMA_SetRx_Isr
000cee  466b              MOV      r3,sp                 ;8549
000cf0  781e              LDRB     r6,[r3,#0]            ;8549
000cf2  0730              LSLS     r0,r6,#28             ;8550
000cf4  0f00              LSRS     r0,r0,#28             ;8550
000cf6  d001              BEQ      |L77.3324|
000cf8  2801              CMP      r0,#1                 ;8550
000cfa  d138              BNE      |L77.3438|
                  |L77.3324|
000cfc  f7fffffe          BL       SPI_PDMA_waitFinish
000d00  4cbc              LDR      r4,|L77.4084|
000d02  7a20              LDRB     r0,[r4,#8]            ;8555  ; LL_Init_Para
000d04  2800              CMP      r0,#0                 ;8555
000d06  d021              BEQ      |L77.3404|
000d08  4668              MOV      r0,sp                 ;8557
000d0a  7800              LDRB     r0,[r0,#0]            ;8557
000d0c  9901              LDR      r1,[sp,#4]            ;8557
000d0e  f7fffffe          BL       RF_cmpFIFO_WhiteList
000d12  2800              CMP      r0,#0                 ;8557
000d14  d12b              BNE      |L77.3438|
000d16  4668              MOV      r0,sp                 ;8560
000d18  7800              LDRB     r0,[r0,#0]            ;8560
000d1a  0640              LSLS     r0,r0,#25             ;8560
000d1c  d506              BPL      |L77.3372|
000d1e  7821              LDRB     r1,[r4,#0]            ;8563  ; LL_Init_Para
000d20  2001              MOVS     r0,#1                 ;8563
000d22  008a              LSLS     r2,r1,#2              ;8563
000d24  49b4              LDR      r1,|L77.4088|
000d26  5889              LDR      r1,[r1,r2]            ;8563
000d28  7348              STRB     r0,[r1,#0xd]          ;8563
000d2a  e005              B        |L77.3384|
                  |L77.3372|
000d2c  7821              LDRB     r1,[r4,#0]            ;8567  ; LL_Init_Para
000d2e  2000              MOVS     r0,#0                 ;8567
000d30  008a              LSLS     r2,r1,#2              ;8567
000d32  49b1              LDR      r1,|L77.4088|
000d34  5889              LDR      r1,[r1,r2]            ;8567
000d36  7348              STRB     r0,[r1,#0xd]          ;8567
                  |L77.3384|
000d38  7820              LDRB     r0,[r4,#0]            ;8569  ; LL_Init_Para
000d3a  2206              MOVS     r2,#6                 ;8569
000d3c  0081              LSLS     r1,r0,#2              ;8569
000d3e  48ae              LDR      r0,|L77.4088|
000d40  5840              LDR      r0,[r0,r1]            ;8569
000d42  9902              LDR      r1,[sp,#8]            ;8569
000d44  300e              ADDS     r0,r0,#0xe            ;8569
000d46  f7fffffe          BL       Knl_MemCpy_Isr
000d4a  e018              B        |L77.3454|
                  |L77.3404|
000d4c  0670              LSLS     r0,r6,#25             ;8575
000d4e  d501              BPL      |L77.3412|
000d50  2701              MOVS     r7,#1                 ;8577
000d52  e000              B        |L77.3414|
                  |L77.3412|
000d54  2700              MOVS     r7,#0                 ;8581
                  |L77.3414|
000d56  7a60              LDRB     r0,[r4,#9]            ;8583  ; LL_Init_Para
000d58  42b8              CMP      r0,r7                 ;8583
000d5a  d106              BNE      |L77.3434|
000d5c  2206              MOVS     r2,#6                 ;8585
000d5e  48a7              LDR      r0,|L77.4092|
000d60  9902              LDR      r1,[sp,#8]            ;8585
000d62  f7fffffe          BL       Knl_MemComp_Isr
000d66  2800              CMP      r0,#0                 ;8585
000d68  d009              BEQ      |L77.3454|
                  |L77.3434|
000d6a  2f06              CMP      r7,#6                 ;8591
000d6c  d007              BEQ      |L77.3454|
                  |L77.3438|
000d6e  f7fffffe          BL       rafael_reset_phy_fsm_Isr
                  |L77.3442|
000d72  2100              MOVS     r1,#0                 ;8794
000d74  9801              LDR      r0,[sp,#4]            ;8794
                  |L77.3446|
000d76  f7fffffe          BL       SndMsgBlk_Isr
000d7a  b009              ADD      sp,sp,#0x24
000d7c  bdf0              POP      {r4-r7,pc}
                  |L77.3454|
000d7e  7a68              LDRB     r0,[r5,#9]            ;8593  ; LL_Msg_AdvScnConn
000d80  21bf              MOVS     r1,#0xbf              ;8593
000d82  4008              ANDS     r0,r0,r1              ;8593
000d84  7268              STRB     r0,[r5,#9]            ;8593
000d86  7ae9              LDRB     r1,[r5,#0xb]          ;8594  ; LL_Msg_AdvScnConnUpdSts
000d88  20fb              MOVS     r0,#0xfb              ;8594
000d8a  4001              ANDS     r1,r1,r0              ;8594
000d8c  72e9              STRB     r1,[r5,#0xb]          ;8594
000d8e  7aa9              LDRB     r1,[r5,#0xa]          ;8595  ; LL_Msg_AdvScnConnUpd
000d90  4001              ANDS     r1,r1,r0              ;8595
000d92  72a9              STRB     r1,[r5,#0xa]          ;8595
000d94  201f              MOVS     r0,#0x1f              ;8597
000d96  71e8              STRB     r0,[r5,#7]            ;8597
000d98  0670              LSLS     r0,r6,#25             ;8598
000d9a  d501              BPL      |L77.3488|
000d9c  2185              MOVS     r1,#0x85              ;8600
000d9e  e000              B        |L77.3490|
                  |L77.3488|
000da0  2105              MOVS     r1,#5                 ;8604
                  |L77.3490|
000da2  7c20              LDRB     r0,[r4,#0x10]         ;8606  ; LL_Init_Para
000da4  2800              CMP      r0,#0                 ;8606
000da6  d001              BEQ      |L77.3500|
000da8  2040              MOVS     r0,#0x40              ;8608
000daa  4301              ORRS     r1,r1,r0              ;8608
                  |L77.3500|
000dac  4894              LDR      r0,|L77.4096|
000dae  7081              STRB     r1,[r0,#2]            ;8610
000db0  1c80              ADDS     r0,r0,#2              ;8610
000db2  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
000db6  488f              LDR      r0,|L77.4084|
000db8  7c00              LDRB     r0,[r0,#0x10]         ;8613  ; LL_Init_Para
000dba  2800              CMP      r0,#0                 ;8613
000dbc  d024              BEQ      |L77.3592|
000dbe  4891              LDR      r0,|L77.4100|
                  |L77.3520|
000dc0  f7fffffe          BL       RF_TxFIFO_ADVaddr_set
000dc4  9801              LDR      r0,[sp,#4]            ;8621
000dc6  9902              LDR      r1,[sp,#8]            ;8621
000dc8  300e              ADDS     r0,r0,#0xe            ;8621
000dca  2206              MOVS     r2,#6                 ;8621
000dcc  9007              STR      r0,[sp,#0x1c]         ;8621
000dce  f7fffffe          BL       Knl_MemCpy_Isr
000dd2  4a8d              LDR      r2,|L77.4104|
000dd4  6810              LDR      r0,[r2,#0]            ;8623  ; Timeline24
000dd6  300f              ADDS     r0,r0,#0xf            ;8623
000dd8  0840              LSRS     r0,r0,#1              ;8623
000dda  0203              LSLS     r3,r0,#8              ;8623
000ddc  0e01              LSRS     r1,r0,#24             ;8623
000dde  0e1b              LSRS     r3,r3,#24             ;8623
000de0  18c9              ADDS     r1,r1,r3              ;8624
000de2  0403              LSLS     r3,r0,#16             ;8624
000de4  0e1b              LSRS     r3,r3,#24             ;8624
000de6  b2c0              UXTB     r0,r0                 ;8624
000de8  1818              ADDS     r0,r3,r0              ;8624
000dea  1808              ADDS     r0,r1,r0              ;8624
000dec  0401              LSLS     r1,r0,#16             ;8624
000dee  0e09              LSRS     r1,r1,#24             ;8624
000df0  1840              ADDS     r0,r0,r1              ;8625
000df2  b2c1              UXTB     r1,r0                 ;8625
000df4  0908              LSRS     r0,r1,#4              ;8626
000df6  2900              CMP      r1,#0                 ;8627
000df8  d009              BEQ      |L77.3598|
000dfa  4c84              LDR      r4,|L77.4108|
000dfc  5c23              LDRB     r3,[r4,r0]            ;8629
000dfe  428b              CMP      r3,r1                 ;8629
000e00  d204              BCS      |L77.3596|
000e02  1820              ADDS     r0,r4,r0              ;8631
000e04  7840              LDRB     r0,[r0,#1]            ;8631
000e06  e002              B        |L77.3598|
                  |L77.3592|
000e08  4881              LDR      r0,|L77.4112|
000e0a  e7d9              B        |L77.3520|
                  |L77.3596|
000e0c  4618              MOV      r0,r3                 ;8615
                  |L77.3598|
000e0e  1a40              SUBS     r0,r0,r1              ;8638
000e10  0640              LSLS     r0,r0,#25             ;8639
000e12  0e01              LSRS     r1,r0,#24             ;8639
000e14  7810              LDRB     r0,[r2,#0]            ;8642  ; Timeline24
000e16  2201              MOVS     r2,#1                 ;8642
000e18  07c0              LSLS     r0,r0,#31             ;8642
000e1a  07d2              LSLS     r2,r2,#31             ;8642
000e1c  42d0              CMN      r0,r2                 ;8642
000e1e  d005              BEQ      |L77.3628|
000e20  2900              CMP      r1,#0                 ;8644
000e22  d002              BEQ      |L77.3626|
000e24  1e49              SUBS     r1,r1,#1              ;8644
000e26  b2c9              UXTB     r1,r1                 ;8646
000e28  e000              B        |L77.3628|
                  |L77.3626|
000e2a  211d              MOVS     r1,#0x1d              ;8651
                  |L77.3628|
000e2c  4608              MOV      r0,r1                 ;8655
000e2e  300f              ADDS     r0,r0,#0xf            ;8655
000e30  2200              MOVS     r2,#0                 ;8656
000e32  290a              CMP      r1,#0xa               ;8657
000e34  d201              BCS      |L77.3642|
000e36  2100              MOVS     r1,#0                 ;8659
000e38  e004              B        |L77.3652|
                  |L77.3642|
000e3a  2914              CMP      r1,#0x14              ;8661
000e3c  d201              BCS      |L77.3650|
000e3e  2101              MOVS     r1,#1                 ;8663
000e40  e000              B        |L77.3652|
                  |L77.3650|
000e42  2102              MOVS     r1,#2                 ;8667
                  |L77.3652|
000e44  9b05              LDR      r3,[sp,#0x14]         ;8670
000e46  3314              ADDS     r3,r3,#0x14           ;8670
000e48  9304              STR      r3,[sp,#0x10]         ;8671
000e4a  8019              STRH     r1,[r3,#0]            ;8671
000e4c  6a2b              LDR      r3,[r5,#0x20]         ;8672  ; LL_conn_pi
000e4e  9e05              LDR      r6,[sp,#0x14]         ;8672
000e50  7adc              LDRB     r4,[r3,#0xb]          ;8672
000e52  1c64              ADDS     r4,r4,#1              ;8672
000e54  74f4              STRB     r4,[r6,#0x13]         ;8672
000e56  2600              MOVS     r6,#0                 ;8673
000e58  72de              STRB     r6,[r3,#0xb]          ;8673
000e5a  69ac              LDR      r4,[r5,#0x18]         ;8674  ; tblk_LL_pi
000e5c  461d              MOV      r5,r3                 ;7609
000e5e  78a4              LDRB     r4,[r4,#2]            ;8674
000e60  3580              ADDS     r5,r5,#0x80           ;7609
000e62  46a4              MOV      r12,r4                ;8674
000e64  4634              MOV      r4,r6                 ;8675
000e66  9503              STR      r5,[sp,#0xc]          ;7609
                  |L77.3688|
000e68  88ad              LDRH     r5,[r5,#4]            ;8678
000e6a  9506              STR      r5,[sp,#0x18]         ;8678
000e6c  8a5e              LDRH     r6,[r3,#0x12]         ;8678
000e6e  42b5              CMP      r5,r6                 ;8678
000e70  d25c              BCS      |L77.3884|
000e72  4665              MOV      r5,r12                ;8682
000e74  2d0c              CMP      r5,#0xc               ;8682
000e76  d237              BCS      |L77.3816|
000e78  00ee              LSLS     r6,r5,#3              ;8684
000e7a  4d66              LDR      r5,|L77.4116|
000e7c  1975              ADDS     r5,r6,r5              ;8684
000e7e  4e66              LDR      r6,|L77.4120|
000e80  61f5              STR      r5,[r6,#0x1c]         ;8685  ; tblk_LL_pi2
000e82  686e              LDR      r6,[r5,#4]            ;8685
000e84  9602              STR      r6,[sp,#8]            ;8685
000e86  4286              CMP      r6,r0                 ;8685
000e88  d326              BCC      |L77.3800|
000e8a  782f              LDRB     r7,[r5,#0]            ;8687
000e8c  4e62              LDR      r6,|L77.4120|
000e8e  2f02              CMP      r7,#2                 ;8687
000e90  d207              BCS      |L77.3746|
000e92  2800              CMP      r0,#0                 ;8689
000e94  d005              BEQ      |L77.3746|
000e96  2700              MOVS     r7,#0                 ;8691
000e98  81f7              STRH     r7,[r6,#0xe]          ;8691
000e9a  9e02              LDR      r6,[sp,#8]            ;8692
000e9c  1a36              SUBS     r6,r6,r0              ;8692
000e9e  2e25              CMP      r6,#0x25              ;8692
000ea0  d844              BHI      |L77.3884|
                  |L77.3746|
000ea2  321e              ADDS     r2,r2,#0x1e           ;8692
000ea4  89de              LDRH     r6,[r3,#0xe]          ;8699
000ea6  b292              UXTH     r2,r2                 ;8698
000ea8  4296              CMP      r6,r2                 ;8699
000eaa  d812              BHI      |L77.3794|
000eac  1b91              SUBS     r1,r2,r6              ;8701
000eae  b28a              UXTH     r2,r1                 ;8701
000eb0  8bde              LDRH     r6,[r3,#0x1e]         ;8703
000eb2  9906              LDR      r1,[sp,#0x18]         ;8703
000eb4  1880              ADDS     r0,r0,r2              ;8702
000eb6  1989              ADDS     r1,r1,r6              ;8703
000eb8  9e03              LDR      r6,[sp,#0xc]          ;8703
000eba  80b1              STRH     r1,[r6,#4]            ;8703
000ebc  7f19              LDRB     r1,[r3,#0x1c]         ;8703
000ebe  7e5e              LDRB     r6,[r3,#0x19]         ;8703
000ec0  198e              ADDS     r6,r1,r6              ;8703
000ec2  4956              LDR      r1,|L77.4124|
000ec4  1c64              ADDS     r4,r4,#1              ;8706
000ec6  5d89              LDRB     r1,[r1,r6]            ;8706
000ec8  7719              STRB     r1,[r3,#0x1c]         ;8706
000eca  9904              LDR      r1,[sp,#0x10]         ;8706
000ecc  b2e4              UXTB     r4,r4                 ;8707
000ece  7809              LDRB     r1,[r1,#0]            ;8706
000ed0  e002              B        |L77.3800|
                  |L77.3794|
000ed2  1cc9              ADDS     r1,r1,#3              ;8707
000ed4  b2c9              UXTB     r1,r1                 ;8712
000ed6  301e              ADDS     r0,r0,#0x1e           ;8712
                  |L77.3800|
000ed8  78ae              LDRB     r6,[r5,#2]            ;8741
000eda  4f4f              LDR      r7,|L77.4120|
000edc  46b4              MOV      r12,r6                ;8741
000ede  686e              LDR      r6,[r5,#4]            ;8742
000ee0  61bd              STR      r5,[r7,#0x18]         ;8743  ; tblk_LL_pi
000ee2  1b80              SUBS     r0,r0,r6              ;8742
000ee4  9d03              LDR      r5,[sp,#0xc]          ;8676
000ee6  e7bf              B        |L77.3688|
                  |L77.3816|
000ee8  2800              CMP      r0,#0                 ;8718
000eea  d11a              BNE      |L77.3874|
000eec  321e              ADDS     r2,r2,#0x1e           ;8718
000eee  b290              UXTH     r0,r2                 ;8720
000ef0  89da              LDRH     r2,[r3,#0xe]          ;8721
000ef2  4282              CMP      r2,r0                 ;8721
000ef4  d812              BHI      |L77.3868|
000ef6  9903              LDR      r1,[sp,#0xc]          ;8725
000ef8  1a80              SUBS     r0,r0,r2              ;8723
000efa  8889              LDRH     r1,[r1,#4]            ;8725
000efc  8bda              LDRH     r2,[r3,#0x1e]         ;8725
000efe  b280              UXTH     r0,r0                 ;8723
000f00  1889              ADDS     r1,r1,r2              ;8725
000f02  9a03              LDR      r2,[sp,#0xc]          ;8725
000f04  8091              STRH     r1,[r2,#4]            ;8725
000f06  7f19              LDRB     r1,[r3,#0x1c]         ;8725
000f08  7e5a              LDRB     r2,[r3,#0x19]         ;8725
000f0a  188a              ADDS     r2,r1,r2              ;8725
000f0c  4943              LDR      r1,|L77.4124|
000f0e  1c64              ADDS     r4,r4,#1              ;8728
000f10  5c89              LDRB     r1,[r1,r2]            ;8728
000f12  7719              STRB     r1,[r3,#0x1c]         ;8728
000f14  9904              LDR      r1,[sp,#0x10]         ;8728
000f16  b2e4              UXTB     r4,r4                 ;8729
000f18  7809              LDRB     r1,[r1,#0]            ;8728
000f1a  e002              B        |L77.3874|
                  |L77.3868|
000f1c  201e              MOVS     r0,#0x1e              ;8733
000f1e  1cc9              ADDS     r1,r1,#3              ;8733
000f20  b2c9              UXTB     r1,r1                 ;8734
                  |L77.3874|
000f22  2200              MOVS     r2,#0                 ;8737
000f24  4b3c              LDR      r3,|L77.4120|
000f26  1c64              ADDS     r4,r4,#1              ;8737
000f28  81da              STRH     r2,[r3,#0xe]          ;8737
000f2a  b2e4              UXTB     r4,r4                 ;8738
                  |L77.3884|
000f2c  9a04              LDR      r2,[sp,#0x10]         ;8745
000f2e  4d3a              LDR      r5,|L77.4120|
000f30  8011              STRH     r1,[r2,#0]            ;8745
000f32  6a29              LDR      r1,[r5,#0x20]         ;8746  ; LL_conn_pi
000f34  2284              MOVS     r2,#0x84              ;8746
000f36  5a52              LDRH     r2,[r2,r1]            ;8746
000f38  8a4b              LDRH     r3,[r1,#0x12]         ;8746
000f3a  429a              CMP      r2,r3                 ;8746
000f3c  d225              BCS      |L77.3978|
000f3e  8b4a              LDRH     r2,[r1,#0x1a]         ;8748
000f40  4b34              LDR      r3,|L77.4116|
000f42  1912              ADDS     r2,r2,r4              ;8748
000f44  834a              STRH     r2,[r1,#0x1a]         ;8748
000f46  69aa              LDR      r2,[r5,#0x18]         ;8749  ; tblk_LL_pi
000f48  7929              LDRB     r1,[r5,#4]            ;8749  ; TBlk_Free_LL
000f4a  7091              STRB     r1,[r2,#2]            ;8749
000f4c  00c9              LSLS     r1,r1,#3              ;8750
000f4e  18c9              ADDS     r1,r1,r3              ;8750
000f50  2201              MOVS     r2,#1                 ;8751
000f52  61a9              STR      r1,[r5,#0x18]         ;8751  ; tblk_LL_pi
000f54  700a              STRB     r2,[r1,#0]            ;8751
000f56  6048              STR      r0,[r1,#4]            ;8753
000f58  7888              LDRB     r0,[r1,#2]            ;8753
000f5a  00c0              LSLS     r0,r0,#3              ;8753
000f5c  18c0              ADDS     r0,r0,r3              ;8753
000f5e  61e8              STR      r0,[r5,#0x1c]         ;8754  ; tblk_LL_pi2
000f60  7881              LDRB     r1,[r0,#2]            ;8754
000f62  7129              STRB     r1,[r5,#4]            ;8754
000f64  4661              MOV      r1,r12                ;8756
000f66  7081              STRB     r1,[r0,#2]            ;8756
000f68  2125              MOVS     r1,#0x25              ;8757
000f6a  6041              STR      r1,[r0,#4]            ;8758
000f6c  21ff              MOVS     r1,#0xff              ;8758
000f6e  7001              STRB     r1,[r0,#0]            ;8758
000f70  4820              LDR      r0,|L77.4084|
000f72  69aa              LDR      r2,[r5,#0x18]         ;8760  ; tblk_LL_pi
000f74  7801              LDRB     r1,[r0,#0]            ;8760  ; LL_Init_Para
000f76  7051              STRB     r1,[r2,#1]            ;8760
000f78  69e9              LDR      r1,[r5,#0x1c]         ;8761  ; tblk_LL_pi2
000f7a  7800              LDRB     r0,[r0,#0]            ;8761  ; LL_Init_Para
000f7c  7048              STRB     r0,[r1,#1]            ;8761
000f7e  6a28              LDR      r0,[r5,#0x20]         ;8762  ; LL_conn_pi
000f80  89e9              LDRH     r1,[r5,#0xe]          ;8762  ; LL_DurRxPktAccu
000f82  89c0              LDRH     r0,[r0,#0xe]          ;8762
000f84  1840              ADDS     r0,r0,r1              ;8762
000f86  81e8              STRH     r0,[r5,#0xe]          ;8762
000f88  e001              B        |L77.3982|
                  |L77.3978|
000f8a  2001              MOVS     r0,#1                 ;8766
000f8c  7008              STRB     r0,[r1,#0]            ;8766
                  |L77.3982|
000f8e  f7fffffe          BL       LL_TmrBlk_Pt_PairRst
000f92  6a29              LDR      r1,[r5,#0x20]         ;8773  ; LL_conn_pi
000f94  9801              LDR      r0,[sp,#4]            ;8773
000f96  2207              MOVS     r2,#7                 ;8773
000f98  3014              ADDS     r0,r0,#0x14           ;8773
000f9a  1d09              ADDS     r1,r1,#4              ;8773
000f9c  f7fffffe          BL       Knl_MemCpy_Isr
000fa0  6a29              LDR      r1,[r5,#0x20]         ;8774  ; LL_conn_pi
000fa2  9805              LDR      r0,[sp,#0x14]         ;8774
000fa4  2205              MOVS     r2,#5                 ;8774
000fa6  301c              ADDS     r0,r0,#0x1c           ;8774
000fa8  3114              ADDS     r1,r1,#0x14           ;8774
000faa  f7fffffe          BL       Knl_MemCpy_Isr
000fae  9805              LDR      r0,[sp,#0x14]         ;8776
000fb0  2206              MOVS     r2,#6                 ;8776
000fb2  491b              LDR      r1,|L77.4128|
000fb4  3016              ADDS     r0,r0,#0x16           ;8776
000fb6  f7fffffe          BL       Knl_MemCpy_Isr
000fba  6a28              LDR      r0,[r5,#0x20]         ;8777  ; LL_conn_pi
000fbc  7e41              LDRB     r1,[r0,#0x19]         ;8777
000fbe  9805              LDR      r0,[sp,#0x14]         ;8777
000fc0  3020              ADDS     r0,r0,#0x20           ;8777
000fc2  7041              STRB     r1,[r0,#1]            ;8777
000fc4  9807              LDR      r0,[sp,#0x1c]         ;8778
000fc6  f7fffffe          BL       RF_TxFIFO_ADVData_set
000fca  480a              LDR      r0,|L77.4084|
000fcc  6a2a              LDR      r2,[r5,#0x20]         ;8779  ; LL_conn_pi
000fce  7c41              LDRB     r1,[r0,#0x11]         ;8779  ; LL_Init_Para
000fd0  70d1              STRB     r1,[r2,#3]            ;8779
000fd2  7800              LDRB     r0,[r0,#0]            ;8780  ; LL_Init_Para
000fd4  4e08              LDR      r6,|L77.4088|
000fd6  0084              LSLS     r4,r0,#2              ;8781
000fd8  5930              LDR      r0,[r6,r4]            ;8781
000fda  2104              MOVS     r1,#4                 ;8781
000fdc  f7fffffe          BL       SndMsgBlk_Isr
000fe0  2000              MOVS     r0,#0                 ;8782
000fe2  5130              STR      r0,[r6,r4]            ;8782
000fe4  78e8              LDRB     r0,[r5,#3]            ;8783  ; LL_ConnID_Remaining
000fe6  2800              CMP      r0,#0                 ;8783
000fe8  d100              BNE      |L77.4076|
000fea  e6c2              B        |L77.3442|
                  |L77.4076|
000fec  1e40              SUBS     r0,r0,#1              ;8783
000fee  70e8              STRB     r0,[r5,#3]            ;8785
000ff0  e6bf              B        |L77.3442|
;;;8814   
                          ENDP

000ff2  0000              DCW      0x0000
                  |L77.4084|
                          DCD      ||.bss||+0x404
                  |L77.4088|
                          DCD      ||.bss||+0x5c4
                  |L77.4092|
                          DCD      ||.bss||+0x40e
                  |L77.4096|
                          DCD      ||.bss||+0x43c
                  |L77.4100|
                          DCD      ||.data||+0x45
                  |L77.4104|
                          DCD      Timeline24
                  |L77.4108|
                          DCD      TIMELINE24_3750US_IDX
                  |L77.4112|
                          DCD      ble_device_param+0x2
                  |L77.4116|
                          DCD      ||.bss||+0x564
                  |L77.4120|
                          DCD      ||.data||
                  |L77.4124|
                          DCD      ||.constdata||+0x90
                  |L77.4128|
                          DCD      ||.bss||+0x41a

                          AREA ||i.LLWTR_MDset||, CODE, READONLY, ALIGN=2

                  LLWTR_MDset PROC
;;;7509   
;;;7510   Uint8 LLWTR_MDset(TBLK_LLx *tblk_LL_pi, Uint8 DUR_LL_Rsv_MD_Type)
000000  b410              PUSH     {r4}
;;;7511   {
;;;7512       Uint32 *pi16;
;;;7513       Uint16 i16;
;;;7514   
;;;7515       i16 = (LL_conn_pi->LE_Conn_Para.LL_ConnInterval>>5)+(3+DUR_LL_RSV_MIN_AES_CCM*5);
000002  4c10              LDR      r4,|L78.68|
;;;7516       i16 += DUR_LL_Rsv_MD_Type;
;;;7517       if(tblk_LL_pi->Next<MAX_TBLK_LL_NO)
000004  7883              LDRB     r3,[r0,#2]
000006  6a22              LDR      r2,[r4,#0x20]         ;7515  ; LL_conn_pi
000008  89d2              LDRH     r2,[r2,#0xe]          ;7515
00000a  0952              LSRS     r2,r2,#5              ;7515
00000c  3212              ADDS     r2,r2,#0x12           ;7515
00000e  1852              ADDS     r2,r2,r1              ;7516
000010  2b0c              CMP      r3,#0xc
000012  d20c              BCS      |L78.46|
;;;7518       {
;;;7519           pi16 = &TmrBlk_LL[tblk_LL_pi->Next].Ticks;
000014  00d9              LSLS     r1,r3,#3
000016  4b0c              LDR      r3,|L78.72|
;;;7520           if((*pi16+tblk_LL_pi->Ticks) > i16)
000018  6844              LDR      r4,[r0,#4]
00001a  18c9              ADDS     r1,r1,r3              ;7519
00001c  684b              LDR      r3,[r1,#4]
00001e  1d09              ADDS     r1,r1,#4
000020  191b              ADDS     r3,r3,r4
000022  4293              CMP      r3,r2
000024  d906              BLS      |L78.52|
;;;7521           {
;;;7522               *pi16 = (*pi16+tblk_LL_pi->Ticks)-i16;
000026  1a9b              SUBS     r3,r3,r2
;;;7523               tblk_LL_pi->Ticks = i16;
000028  600b              STR      r3,[r1,#0]
;;;7524               return SUCCESS_;
00002a  6042              STR      r2,[r0,#4]
00002c  e006              B        |L78.60|
                  |L78.46|
;;;7525           }
;;;7526           else
;;;7527           {
;;;7528               return FAIL_;
;;;7529           }
;;;7530       }
;;;7531       else
;;;7532       {
;;;7533           if(LL_DurRxPktAccu<i16)
00002e  89e3              LDRH     r3,[r4,#0xe]  ; LL_DurRxPktAccu
000030  4293              CMP      r3,r2
000032  d202              BCS      |L78.58|
                  |L78.52|
;;;7534           {
;;;7535               return FAIL_;
;;;7536           }
;;;7537           else
;;;7538           {
;;;7539               tblk_LL_pi->Ticks = DUR_LL_Rsv_MD_Type;
;;;7540               return SUCCESS_;
;;;7541           }
;;;7542       }
;;;7543   }
000034  bc10              POP      {r4}
000036  2001              MOVS     r0,#1                 ;7535
000038  4770              BX       lr
                  |L78.58|
00003a  6041              STR      r1,[r0,#4]            ;7539
                  |L78.60|
00003c  bc10              POP      {r4}
00003e  2000              MOVS     r0,#0                 ;7540
000040  4770              BX       lr
;;;7544   
                          ENDP

000042  0000              DCW      0x0000
                  |L78.68|
                          DCD      ||.data||
                  |L78.72|
                          DCD      ||.bss||+0x564

                          AREA ||i.LLWTR_Rx2Hc||, CODE, READONLY, ALIGN=2

                  LLWTR_Rx2Hc PROC
;;;7069   
;;;7070   Uint8 LLWTR_Rx2Hc(Uint8 ConnId, LL_Para_Header HeaderR)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;7071   {
000002  0408              LSLS     r0,r1,#16
000004  0e07              LSRS     r7,r0,#24
;;;7072       MBLK *mblk;
;;;7073       Uint8 i, llid, LL_SMP_Gate;
;;;7074       Uint8 len;
;;;7075       Uint8 mskPhy;
;;;7076       MQUEUE *pqueue;
;;;7077   
;;;7078       i = HeaderR.HeaderLen;
;;;7079       llid = HeaderR.HeaderSts&FLD_MSK_LL_DATA_LLID;
000006  0788              LSLS     r0,r1,#30
000008  b081              SUB      sp,sp,#4              ;7071
00000a  0f80              LSRS     r0,r0,#30
;;;7080       pqueue = &LL_ConnDataInQ[ConnId];
00000c  9000              STR      r0,[sp,#0]
00000e  9801              LDR      r0,[sp,#4]
000010  49e1              LDR      r1,|L79.920|
000012  00c0              LSLS     r0,r0,#3
000014  1845              ADDS     r5,r0,r1
;;;7081       LL_SMP_Gate = LL_conn_pi->LE_Conn_Para.LL_SMP_Gate;
000016  48e1              LDR      r0,|L79.924|
000018  6a01              LDR      r1,[r0,#0x20]  ; LL_conn_pi
00001a  2053              MOVS     r0,#0x53
00001c  5c46              LDRB     r6,[r0,r1]
;;;7082   
;;;7083       if((LL_SMP_Gate != LL_SMP_GATE_OFF))
00001e  2e00              CMP      r6,#0
000020  d00f              BEQ      |L79.66|
;;;7084       {
;;;7085           switch(llid)
000022  9800              LDR      r0,[sp,#0]
000024  2801              CMP      r0,#1
000026  d004              BEQ      |L79.50|
000028  2802              CMP      r0,#2
00002a  d002              BEQ      |L79.50|
00002c  2803              CMP      r0,#3
00002e  d145              BNE      |L79.188|
000030  e007              B        |L79.66|
                  |L79.50|
;;;7086           {
;;;7087           case LL_DATA_LLID_CONTROL:
;;;7088               break;
;;;7089   
;;;7090           case LL_DATA_LLID_EMPTY_CONTI:
;;;7091           case LL_DATA_LLID_START_COMPLETE:
;;;7092               if(i)
000032  2f00              CMP      r7,#0
000034  d005              BEQ      |L79.66|
;;;7093               {
;;;7094                   LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE;
000036  203d              MOVS     r0,#0x3d
000038  3120              ADDS     r1,r1,#0x20
00003a  7088              STRB     r0,[r1,#2]
;;;7095                   return MLL_HCI_NULL;
00003c  20b0              MOVS     r0,#0xb0
;;;7096               }
;;;7097               break;
;;;7098   
;;;7099           default:
;;;7100               return MLL_HCI_NULL;
;;;7101           }
;;;7102       }
;;;7103       if(pqueue->QOut != (MBLK *)0)
;;;7104       {
;;;7105           switch(llid)
;;;7106           {
;;;7107           case LL_DATA_LLID_EMPTY_CONTI:
;;;7108               if(i)
;;;7109               {
;;;7110                   break;
;;;7111               }
;;;7112               len = 0;
;;;7113               mblk = pqueue->QOut;
;;;7114               //len_Tgt = mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data[0]+4;
;;;7115               while(mblk != (MBLK *)0)
;;;7116               {
;;;7117                   len += mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_LthL;
;;;7118                   mblk = mblk->Next;
;;;7119                   //if(mblk == (MBLK *)0)
;;;7120                   //break;
;;;7121               }
;;;7122               if(len!=((pqueue->QOut)->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data[0]+4))
;;;7123               {
;;;7124                   break;
;;;7125               }
;;;7126           case LL_DATA_LLID_START_COMPLETE:
;;;7127               (pqueue->QOut)->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L = ConnId;
;;;7128               (pqueue->QOut)->Primitive = MHC_LE_ACL_DATA_PKT;
;;;7129               SndMsgBlks_Isr((pqueue->QOut), Q_2HCI);
;;;7130               pqueue->QOut = (MBLK *)0;
;;;7131               pqueue->QIn = (MBLK *)0;
;;;7132               break;
;;;7133   
;;;7134           default:
;;;7135               break;
;;;7136           }
;;;7137       }
;;;7138   
;;;7139       if(i)
;;;7140       {
;;;7141   #if 0
;;;7142           if((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM))
;;;7143           {
;;;7144               i = i-LEN_CONN_MIC;
;;;7145           }
;;;7146   #endif
;;;7147           mblk = LL_ConnDataInTmp.QOut;
;;;7148           if(mblk==(MBLK *)0)
;;;7149           {
;;;7150               return MLL_HCI_NULL;
;;;7151           }
;;;7152           else
;;;7153           {
;;;7154               if(llid==LL_DATA_LLID_CONTROL)
;;;7155               {
;;;7156                   mblk->Primitive = LLHC_LE_CTRL_PKT;
;;;7157               }
;;;7158               else if(llid==LL_DATA_LLID_START_COMPLETE)
;;;7159               {
;;;7160                   mblk->Primitive = MHC_LE_ACL_DATA_PKT;
;;;7161               }
;;;7162               else
;;;7163               {
;;;7164                   mblk->Primitive = MHC_LE_ACL_DATA_PKT_EXTEND;
;;;7165               }
;;;7166           }
;;;7167   
;;;7168           if(llid==LL_DATA_LLID_CONTROL)
;;;7169           {
;;;7170               mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_LthL = i;
;;;7171               mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L = ConnId;
;;;7172               if(mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode > LL_MAX_CTRL_OP)
;;;7173               {
;;;7174                   i = mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode;
;;;7175               }
;;;7176               else
;;;7177               {
;;;7178                   if((mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_LthL-1)==LL_RX_CONN_ID_OP_LENGTH[mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode])
;;;7179                   {
;;;7180                       i = mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode;
;;;7181   #if MAX_NUM_CONN_MAS_HDL != 0
;;;7182                       if(ConnId < LL_CONN_ID_MASTER_RSV)
;;;7183                       {
;;;7184                           i = LL_RX_CONN_ID_MASTER_SIDE_ONLY[i];
;;;7185                       }
;;;7186                       else
;;;7187   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;7188                       {
;;;7189   #if MAX_NUM_CONN_SLV_HDL != 0
;;;7190                           i = LL_RX_CONN_ID_SLAVE_SIDE_ONLY[i];
;;;7191   #endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
;;;7192                       }
;;;7193                   }
;;;7194                   else
;;;7195                   {
;;;7196                       i = LL_RSV_CTRL_OP;
;;;7197                   }
;;;7198                   mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode = i;
;;;7199               }
;;;7200               if((LL_conn_pi->LE_Conn_Para.LL_Conn_ID&LL_CONN_ID_LL_MSK_INIT))
;;;7201               {
;;;7202                   if(i == LL_PR_CONN_ID_PAIR[(LL_conn_pi->LE_Conn_Para.LL_Conn_ID-LL_CONN_ID_LL_MSK_INIT)])
;;;7203                   {
;;;7204                       LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7205                       LL_conn_pi->LE_Conn_Para.LL_PrToutAccu = 0;
;;;7206                   }
;;;7207                   else
;;;7208                   {
;;;7209                       switch(i)
;;;7210                       {
;;;7211                       case LL_UNKNOWN_RSP:
;;;7212                       case LL_REJECT_IND:
;;;7213                       case LL_REJECT_IND_EXT:
;;;7214                           LL_conn_pi->LE_Conn_Para.LL_PrToutAccu = 0;
;;;7215                           break;
;;;7216   
;;;7217                       case LL_PHY_RSP:        //for LL master
;;;7218                           if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_PHY_REQ)
;;;7219                           {
;;;7220                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7221                               LL_conn_pi->LE_Conn_Para.LL_PrToutAccu = 0;
;;;7222                           }
;;;7223                           break;
;;;7224   
;;;7225                       default:
;;;7226                           break;
;;;7227                       }
;;;7228                   }
;;;7229               }
;;;7230               else
;;;7231               {
;;;7232                   if(i > LL_MAX_CTRL_OP)
;;;7233                   {
;;;7234   //                    LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
;;;7235                   }
;;;7236                   else
;;;7237                   {
;;;7238   //                    LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_RX_CONN_ID_INIT[i];
;;;7239                       if(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_CONN)
;;;7240                       {
;;;7241                           LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_RX_CONN_ID_INIT[i];
;;;7242                       }
;;;7243                       else
;;;7244                       {
;;;7245                           if(LL_RX_CONN_ID_INIT[i] != LL_CONN_ID_CONN)
;;;7246                           {
;;;7247                               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_RX_CONN_ID_INIT[i];
;;;7248                           }
;;;7249                       }
;;;7250                   }
;;;7251               }
;;;7252               switch(i)
;;;7253               {
;;;7254               case LL_CONN_UPDATE_REQ:
;;;7255               case LL_CHANNEL_MAP_REQ:
;;;7256                   //case LL_PHY_UPDATE_IND:
;;;7257                   if((LL_SMP_Gate != LL_SMP_GATE_OFF))
;;;7258                   {
;;;7259                       LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE;
;;;7260                       mblk->Primitive = MLL_HCI_NULL;
;;;7261                       break;
;;;7262                   }
;;;7263                   if(i)
;;;7264                   {
;;;7265                       Knl_MemCpy_Isr(LL_conn_pi->LE_Conn_Para.LL_ChMapReM, &mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data[FLD_LL_CTRL_PARAM_BGN_TRXFIFO], LEN_LL_CH_MAP);
;;;7266                       Knl_MemCpy_Isr((uint8_t *)&LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd, &mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data[FLD_LL_CTRL_PARAM_BGN_TRXFIFO+LEN_LL_CH_MAP], 2);    //2: size of Instant
;;;7267                   }
;;;7268                   else
;;;7269                   {
;;;7270                       Knl_MemCpy_Isr(&LL_conn_pi->LE_Conn_Para.WinSizeUpd, &mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data[FLD_LL_CTRL_PARAM_BGN_TRXFIFO], 11);
;;;7271                   }
;;;7272                   if((LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd-LL_conn_pi->LE_Conn_Para.LL_EventCounter==0) \
;;;7273                           ||(LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd-LL_conn_pi->LE_Conn_Para.LL_EventCounter>=LL_INST_MOD_LMT))
;;;7274                   {
;;;7275                       LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_INSTANT_PASSED;
;;;7276                       mblk->Primitive = MLL_HCI_NULL;
;;;7277                   }
;;;7278   #ifdef LL_PATCH_CONN_UDATE_FAIL_DUE_TO_USER_DELAY
;;;7279                   else
;;;7280                   {
;;;7281                       LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrgUpd = LL_conn_pi->LE_Conn_Para.LL_ConnIntervalUpd;
;;;7282   #if _TICK_BASE_ ==  _TICK_BASE_125P00_
;;;7283                       LL_conn_pi->LE_Conn_Para.WinSizeUpd = (LL_conn_pi->LE_Conn_Para.WinSizeUpd*10);                        //transfer to 125us base
;;;7284                       LL_conn_pi->LE_Conn_Para.WinOffsetUpd = (LL_conn_pi->LE_Conn_Para.WinOffsetUpd*10);                    //transfer to 125us base
;;;7285                       LL_conn_pi->LE_Conn_Para.LL_ConnIntervalUpd = (LL_conn_pi->LE_Conn_Para.LL_ConnIntervalUpd*10);        //transfer to 125us base
;;;7286                       LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd = (LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd<<3);    //transfer to 1.25ms base
;;;7287   #else   //(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;7288                       LL_conn_pi->LE_Conn_Para.WinSizeUpd = (LL_conn_pi->LE_Conn_Para.WinSizeUpd<<3);
;;;7289                       LL_conn_pi->LE_Conn_Para.WinOffsetUpd = (LL_conn_pi->LE_Conn_Para.WinOffsetUpd<<3);
;;;7290                       LL_conn_pi->LE_Conn_Para.LL_ConnIntervalUpd = (LL_conn_pi->LE_Conn_Para.LL_ConnIntervalUpd<<3);
;;;7291                       LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd = (LL_conn_pi->LE_Conn_Para.LL_SvisionTimeoutUpd<<3);
;;;7292   #endif  ////(#if _TICK_BASE_ ==  _TICK_BASE_125P00_)
;;;7293                   }
;;;7294   #endif  //LL_PATCH_CONN_UDATE_FAIL_DUE_TO_USER_DELAY     
;;;7295                   break;
;;;7296   
;;;7297               case LL_TERMINATE_IND:
;;;7298                   LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0];
;;;7299                   mblk->Primitive = MLL_HCI_NULL;
;;;7300                   break;
;;;7301   
;;;7302               case LL_ENC_REQ:
;;;7303                   LL_SMP_DataCh = LL_SMP_DATA_CH_R_CCM;
;;;7304                   if(LL_SMP_Gate == LL_SMP_GATE_OFF)
;;;7305                   {
;;;7306                       LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_ENC_WAIT;
;;;7307                   }
;;;7308                   break;
;;;7309   
;;;7310               case LL_ENC_RSP:
;;;7311                   LL_SMP_DataCh = LL_SMP_DATA_CH_T_CCM;
;;;7312                   LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_LL_ENC_RSP;
;;;7313                   if(LL_SMP_Gate == LL_SMP_GATE_OFF)
;;;7314                   {
;;;7315                       LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_ENC_WAIT;
;;;7316                   }
;;;7317                   break;
;;;7318   
;;;7319               case LL_START_ENC_RSP:
;;;7320                   mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0] = LL_SMP_Gate;
;;;7321                   if((LL_SMP_DataCh&LL_SMP_DATA_CH_MSK) == LL_SMP_DATA_CH_R_T_CCM)
;;;7322                   {
;;;7323                       LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_OFF;
;;;7324                   }
;;;7325               case LL_START_ENC_REQ:
;;;7326                   LL_SMP_DataCh = LL_SMP_DATA_CH_R_T_CCM;
;;;7327                   break;
;;;7328   
;;;7329               case LL_PAUSE_ENC_REQ:
;;;7330                   LL_SMP_DataCh = LL_SMP_DATA_CH_T_CCM;
;;;7331                   break;
;;;7332   
;;;7333               case LL_PAUSE_ENC_RSP:
;;;7334                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterR = 0;
;;;7335                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterRd = 0;
;;;7336                   LL_SMP_DataCh = LL_SMP_DATA_CH_R_T_NORMAL;
;;;7337                   break;
;;;7338   
;;;7339               case LL_FEATURE_REQ:
;;;7340               case LL_FEATURE_RSP:
;;;7341               case LL_SLAVE_FEATURE_REQ:
;;;7342                   LL_conn_pi->LE_Conn_Para.LL_Feature = (LL_FEATURE[0] & mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0]);
;;;7343                   LL_conn_pi->LE_Conn_Para.LL_Feature1 = (LL_FEATURE[1] & mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[1]);
;;;7344               case LL_VERSION_IND:
;;;7345                   break;
;;;7346   
;;;7347               case LL_REJECT_IND:
;;;7348               case LL_REJECT_IND_EXT:
;;;7349                   if((LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_ENC_REQ)||(LL_conn_pi->LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_LL_ENC_RSP))
;;;7350                   {
;;;7351                       LL_conn_pi->LE_Conn_Para.LL_SMP_Gate = LL_SMP_GATE_OFF;
;;;7352                       LL_SMP_DataCh = LL_SMP_DATA_CH_R_T_NORMAL;
;;;7353                   }
;;;7354                   break;
;;;7355   
;;;7356               case LL_PHY_UPDATE_IND:
;;;7357                   LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_LL_PHY_UPDATE_IND_RCVD;
;;;7358                   Knl_MemCpy_Isr((Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd, &mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[2], 2);
;;;7359                   if((LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd-LL_conn_pi->LE_Conn_Para.LL_EventCounter==0) \
;;;7360                           ||(LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd-LL_conn_pi->LE_Conn_Para.LL_EventCounter>=LL_INST_MOD_LMT))
;;;7361                   {
;;;7362                       LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_INSTANT_PASSED;
;;;7363                       mblk->Primitive = MLL_HCI_NULL;
;;;7364                       break;
;;;7365                   }
;;;7366                   else
;;;7367                   {
;;;7368   #ifdef LL_PATCH_PHY_UPDATE_FAIL_DUE_TO_USER_DELAY
;;;7369                       mskPhy = ((mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0]&mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[1])&(~LL_RX_PHYS_TX_NO_SUPPORT));     //symmetric
;;;7370                       if(mskPhy)
;;;7371                       {
;;;7372                           if(mskPhy!=LL_conn_pi->LE_Conn_Para.LL_Tx_PHYS)                       //symmetric
;;;7373                           {
;;;7374                               LL_conn_pi->LE_Conn_Para.LL_Tx_PHYsUpd = mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[1];   //S_TO_M_PHY
;;;7375                               LL_conn_pi->LE_Conn_Para.LL_Rx_PHYsUpd = mblk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[0];   //M_TO_S_PHY
;;;7376                               //Knl_MemCpy((Uint8 *)&LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd, &pMBlk->Para.LLHC_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data[2], 2);
;;;7377                           }
;;;7378                           else
;;;7379                           {
;;;7380                               LL_conn_pi->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
;;;7381                               LL_conn_pi->LE_Conn_Para.LL_Rx_PHYsUpd = 0;
;;;7382                           }
;;;7383                       }
;;;7384                       else
;;;7385                       {
;;;7386                           LL_conn_pi->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
;;;7387                           LL_conn_pi->LE_Conn_Para.LL_Rx_PHYsUpd = 0;
;;;7388                       }
;;;7389   #endif //#ifdef LL_PATCH_CONN_UDATE_FAIL_DUE_TO_USER_DELAY
;;;7390                   }
;;;7391               default:
;;;7392                   if((LL_SMP_Gate != LL_SMP_GATE_OFF))
;;;7393                   {
;;;7394                       LL_conn_pi->LE_Conn_Para.ErrCode_DisConn = HCI_ERR_CODE_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE;
;;;7395                       mblk->Primitive = MLL_HCI_NULL;
;;;7396                   }
;;;7397                   break;
;;;7398               }
;;;7399   #if MAX_NUM_CONN_MAS_HDL != 0
;;;7400               if(ConnId < MAX_NUM_CONN_MAS_HDL)
;;;7401               {
;;;7402                   LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd |= MSK_LL_SMP_DATA_CH_MASTER;   //Next Tx: master
;;;7403               }
;;;7404   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;7405               LL_conn_pi->LE_Conn_Para.LL_SMP_DataCh = LL_SMP_DataCh;
;;;7406               __NOP();
;;;7407               SndMsgBlks_Isr(mblk, Q_2LL);
;;;7408           }
;;;7409           else
;;;7410           {
;;;7411               if(LL_ConnDataInTmp.QIn != (MBLK *)0)
;;;7412               {
;;;7413                   if(pqueue->QIn != (MBLK *)0)
;;;7414                   {
;;;7415                       if((LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0)
;;;7416                       {
;;;7417                           Knl_MemCpy_Isr(&((pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7418                                          &((LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7419                                          (SIZE_MBLK_ACL_DATA_UNIT-(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL));
;;;7420   
;;;7421                           (pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = SIZE_MBLK_ACL_DATA_UNIT;
;;;7422                       }
;;;7423                       else
;;;7424                       {
;;;7425                           if((LL_ConnDataInTmp.QIn) != LL_ConnBuffPrcsR.BufPrcsF)
;;;7426                           {
;;;7427                               Knl_MemCpy_Isr(&((pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7428                                              &((LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7429                                              (SIZE_MBLK_ACL_DATA_UNIT-(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL));
;;;7430   
;;;7431                               (pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = SIZE_MBLK_ACL_DATA_UNIT;
;;;7432                           }
;;;7433                           else
;;;7434                           {
;;;7435                               if(LL_ConnBuffPrcsR.BufPrcsF != LL_ConnBuffPrcsR.BufPrcsN)
;;;7436                               {
;;;7437                                   Knl_MemCpy_Isr(&((pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7438                                                  &((LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7439                                                  (SIZE_MBLK_ACL_DATA_UNIT-(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL));
;;;7440   
;;;7441                                   (pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = SIZE_MBLK_ACL_DATA_UNIT;
;;;7442                               }
;;;7443                               else
;;;7444                               {
;;;7445                                   Knl_MemCpy_Isr(&((pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7446                                                  &((LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data)[(pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL],
;;;7447                                                  LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL);
;;;7448   
;;;7449                                   (pqueue->QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL += LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL;
;;;7450                               }
;;;7451                           }
;;;7452                       }
;;;7453   
;;;7454                       if((LL_ConnDataInTmp.QOut)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0)
;;;7455                       {
;;;7456                           if((LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 == 0)
;;;7457                           {
;;;7458                               if(LL_ConnDataInTmp.QIn != LL_ConnBuffPrcsR.BufPrcsF)
;;;7459                               {
;;;7460                                   FreeMsgBlk_Isr(LL_ConnDataInTmp.QIn);
;;;7461                                   LL_ConnDataInTmp.QIn = LL_ConnBuffPrcsR.BufPrcsF;
;;;7462                                   if(LL_ConnBuffPrcsR.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 == SIZE_MBLK_ACL_DATA_UNIT)
;;;7463                                   {
;;;7464                                       if(LL_ConnBuffPrcsR.BufPrcsN != (MBLK *)0)
;;;7465                                       {
;;;7466                                           LL_ConnDataInTmp.QIn->Next = LL_ConnBuffPrcsR.BufPrcsN;
;;;7467                                           LL_ConnDataInTmp.QIn = LL_ConnBuffPrcsR.BufPrcsN;
;;;7468                                           (LL_ConnDataInTmp.QIn)->Next = (MBLK *)0;
;;;7469                                       }
;;;7470                                       else
;;;7471                                       {
;;;7472                                           (LL_ConnDataInTmp.QIn)->Next = (MBLK *)0;
;;;7473                                       }
;;;7474                                   }
;;;7475                                   else
;;;7476                                   {
;;;7477                                       (LL_ConnDataInTmp.QIn)->Next = (MBLK *)0;
;;;7478                                   }
;;;7479                               }
;;;7480                           }
;;;7481   
;;;7482                           if((LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 != (LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL)
;;;7483                           {
;;;7484                               (LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = (LL_ConnDataInTmp.QIn)->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0;
;;;7485                           }
;;;7486                           (pqueue->QIn)->Next = LL_ConnDataInTmp.QOut;
;;;7487                           pqueue->QIn = LL_ConnDataInTmp.QIn;
;;;7488                       }
;;;7489                       else
;;;7490                       {
;;;7491                           FreeMsgBlks_Isr(LL_ConnDataInTmp.QOut);
;;;7492                       }
;;;7493                   }
;;;7494                   else
;;;7495                   {
;;;7496                       pqueue->QOut = LL_ConnDataInTmp.QOut;
;;;7497                       pqueue->QIn = LL_ConnDataInTmp.QIn;
;;;7498                   }
;;;7499               }
;;;7500           }
;;;7501           LL_ConnDataInTmp.QOut = (MBLK *)0;
;;;7502           LL_ConnDataInTmp.QIn = (MBLK *)0;
;;;7503   
;;;7504           i = mblk->Primitive;
;;;7505       }
;;;7506       return i;
;;;7507   }
00003e  b003              ADD      sp,sp,#0xc
000040  bdf0              POP      {r4-r7,pc}
                  |L79.66|
000042  686a              LDR      r2,[r5,#4]            ;7103
000044  2a00              CMP      r2,#0                 ;7103
000046  d01f              BEQ      |L79.136|
000048  9800              LDR      r0,[sp,#0]            ;7105
00004a  2801              CMP      r0,#1                 ;7105
00004c  d002              BEQ      |L79.84|
00004e  2802              CMP      r0,#2                 ;7105
000050  d11a              BNE      |L79.136|
000052  e00d              B        |L79.112|
                  |L79.84|
000054  2f00              CMP      r7,#0                 ;7108
000056  d119              BNE      |L79.140|
000058  2100              MOVS     r1,#0                 ;7112
00005a  4610              MOV      r0,r2                 ;7112
                  |L79.92|
00005c  7a83              LDRB     r3,[r0,#0xa]          ;7117
00005e  6800              LDR      r0,[r0,#0]            ;7118
000060  1859              ADDS     r1,r3,r1              ;7117
000062  b2c9              UXTB     r1,r1                 ;7117
000064  2800              CMP      r0,#0                 ;7115
000066  d1f9              BNE      |L79.92|
000068  7ad0              LDRB     r0,[r2,#0xb]          ;7122
00006a  1d00              ADDS     r0,r0,#4              ;7122
00006c  4288              CMP      r0,r1                 ;7122
00006e  d10b              BNE      |L79.136|
                  |L79.112|
000070  9801              LDR      r0,[sp,#4]            ;7127
000072  7210              STRB     r0,[r2,#8]            ;7127
000074  6869              LDR      r1,[r5,#4]            ;7128
000076  2071              MOVS     r0,#0x71              ;7128
000078  7108              STRB     r0,[r1,#4]            ;7128
00007a  2104              MOVS     r1,#4                 ;7129
00007c  6868              LDR      r0,[r5,#4]            ;7129
00007e  f7fffffe          BL       SndMsgBlks_Isr
000082  2000              MOVS     r0,#0                 ;7130
000084  6068              STR      r0,[r5,#4]            ;7131
000086  6028              STR      r0,[r5,#0]            ;7131
                  |L79.136|
000088  2f00              CMP      r7,#0                 ;7139
00008a  d06e              BEQ      |L79.362|
                  |L79.140|
00008c  48c4              LDR      r0,|L79.928|
00008e  6844              LDR      r4,[r0,#4]            ;7148  ; LL_ConnDataInTmp
000090  2c00              CMP      r4,#0                 ;7148
000092  d013              BEQ      |L79.188|
000094  9800              LDR      r0,[sp,#0]            ;7154
000096  2803              CMP      r0,#3                 ;7154
000098  d013              BEQ      |L79.194|
00009a  2802              CMP      r0,#2                 ;7158
00009c  d023              BEQ      |L79.230|
00009e  2078              MOVS     r0,#0x78              ;7164
                  |L79.160|
0000a0  49bf              LDR      r1,|L79.928|
0000a2  7120              STRB     r0,[r4,#4]            ;7160
0000a4  680b              LDR      r3,[r1,#0]            ;7411  ; LL_ConnDataInTmp
0000a6  2b00              CMP      r3,#0                 ;7411
0000a8  d076              BEQ      |L79.408|
0000aa  6828              LDR      r0,[r5,#0]            ;7413
0000ac  2800              CMP      r0,#0                 ;7413
0000ae  d074              BEQ      |L79.410|
0000b0  7a59              LDRB     r1,[r3,#9]            ;7415
0000b2  2629              MOVS     r6,#0x29              ;7417
0000b4  4fbb              LDR      r7,|L79.932|
0000b6  2900              CMP      r1,#0                 ;7415
0000b8  d170              BNE      |L79.412|
0000ba  e113              B        |L79.740|
                  |L79.188|
0000bc  20b0              MOVS     r0,#0xb0              ;7150
0000be  b003              ADD      sp,sp,#0xc
0000c0  bdf0              POP      {r4-r7,pc}
                  |L79.194|
0000c2  20e7              MOVS     r0,#0xe7              ;7156
0000c4  7120              STRB     r0,[r4,#4]            ;7156
0000c6  72a7              STRB     r7,[r4,#0xa]          ;7170
0000c8  9801              LDR      r0,[sp,#4]            ;7171
0000ca  7220              STRB     r0,[r4,#8]            ;7171
0000cc  7ae1              LDRB     r1,[r4,#0xb]          ;7172
0000ce  2919              CMP      r1,#0x19              ;7172
0000d0  d810              BHI      |L79.244|
0000d2  48b5              LDR      r0,|L79.936|
0000d4  1e7f              SUBS     r7,r7,#1              ;7178
0000d6  5c40              LDRB     r0,[r0,r1]            ;7178
0000d8  4287              CMP      r7,r0                 ;7178
0000da  d109              BNE      |L79.240|
0000dc  9801              LDR      r0,[sp,#4]            ;7182
0000de  2804              CMP      r0,#4                 ;7182
0000e0  d203              BCS      |L79.234|
0000e2  48b2              LDR      r0,|L79.940|
0000e4  e002              B        |L79.236|
                  |L79.230|
0000e6  2071              MOVS     r0,#0x71              ;7160
0000e8  e7da              B        |L79.160|
                  |L79.234|
0000ea  48b1              LDR      r0,|L79.944|
                  |L79.236|
0000ec  5c41              LDRB     r1,[r0,r1]            ;7184
0000ee  e000              B        |L79.242|
                  |L79.240|
0000f0  211a              MOVS     r1,#0x1a              ;7196
                  |L79.242|
0000f2  72e1              STRB     r1,[r4,#0xb]          ;7198
                  |L79.244|
0000f4  4da9              LDR      r5,|L79.924|
0000f6  6a28              LDR      r0,[r5,#0x20]         ;7200  ; LL_conn_pi
0000f8  7802              LDRB     r2,[r0,#0]            ;7200
0000fa  0653              LSLS     r3,r2,#25             ;7200
0000fc  d516              BPL      |L79.300|
0000fe  4bad              LDR      r3,|L79.948|
000100  5cd7              LDRB     r7,[r2,r3]            ;7202
000102  2304              MOVS     r3,#4                 ;7129
000104  428f              CMP      r7,r1                 ;7202
000106  d101              BNE      |L79.268|
                  |L79.264|
000108  7003              STRB     r3,[r0,#0]            ;7204
00010a  e008              B        |L79.286|
                  |L79.268|
00010c  2907              CMP      r1,#7                 ;7209
00010e  d006              BEQ      |L79.286|
000110  290d              CMP      r1,#0xd               ;7209
000112  d004              BEQ      |L79.286|
000114  2911              CMP      r1,#0x11              ;7209
000116  d002              BEQ      |L79.286|
000118  2917              CMP      r1,#0x17              ;7209
00011a  d110              BNE      |L79.318|
00011c  e003              B        |L79.294|
                  |L79.286|
00011e  2200              MOVS     r2,#0                 ;7214
000120  2386              MOVS     r3,#0x86              ;7214
000122  521a              STRH     r2,[r3,r0]            ;7214
000124  e00b              B        |L79.318|
                  |L79.294|
000126  2a56              CMP      r2,#0x56              ;7218
000128  d0ee              BEQ      |L79.264|
00012a  e008              B        |L79.318|
                  |L79.300|
00012c  2919              CMP      r1,#0x19              ;7232
00012e  d806              BHI      |L79.318|
000130  4ba1              LDR      r3,|L79.952|
000132  2a04              CMP      r2,#4                 ;7239
000134  5c5a              LDRB     r2,[r3,r1]            ;7245
000136  d016              BEQ      |L79.358|
000138  2a04              CMP      r2,#4                 ;7245
00013a  d000              BEQ      |L79.318|
00013c  7002              STRB     r2,[r0,#0]            ;7247
                  |L79.318|
00013e  2919              CMP      r1,#0x19              ;7252
000140  d273              BCS      |L79.554|
000142  000a              MOVS     r2,r1                 ;7252
000144  447a              ADD      r2,r2,pc              ;7252
000146  7912              LDRB     r2,[r2,#4]            ;7252
000148  1892              ADDS     r2,r2,r2              ;7252
00014a  4497              ADD      pc,pc,r2              ;7252
00014c  0f0f4e54          DCB      0x0f,0x0f,0x4e,0x54
000150  5c6c65ac          DCB      0x5c,0x6c,0x65,0xac
000154  77776f72          DCB      0x77,0x77,0x6f,0x72
000158  b48077ac          DCB      0xb4,0x80,0x77,0xac
00015c  ac80acac          DCB      0xac,0x80,0xac,0xac
000160  acacacac          DCB      0xac,0xac,0xac,0xac
000164  8a00              DCB      0x8a,0x00
                  |L79.358|
000166  7002              STRB     r2,[r0,#0]            ;7241
000168  e7e9              B        |L79.318|
                  |L79.362|
00016a  e10e              B        |L79.906|
00016c  2e00              CMP      r6,#0                 ;7257
00016e  d005              BEQ      |L79.380|
000170  213d              MOVS     r1,#0x3d              ;7259
000172  3020              ADDS     r0,r0,#0x20           ;7259
000174  7081              STRB     r1,[r0,#2]            ;7259
000176  20b0              MOVS     r0,#0xb0              ;7260
000178  7120              STRB     r0,[r4,#4]            ;7260
00017a  e09c              B        |L79.694|
                  |L79.380|
00017c  2900              CMP      r1,#0                 ;7263
00017e  d00e              BEQ      |L79.414|
000180  4621              MOV      r1,r4                 ;7265
000182  2205              MOVS     r2,#5                 ;7265
000184  310c              ADDS     r1,r1,#0xc            ;7265
000186  3014              ADDS     r0,r0,#0x14           ;7265
000188  f7fffffe          BL       Knl_MemCpy_Isr
00018c  4621              MOV      r1,r4                 ;7266
00018e  6a28              LDR      r0,[r5,#0x20]         ;7266  ; LL_conn_pi
000190  2202              MOVS     r2,#2                 ;7266
000192  3111              ADDS     r1,r1,#0x11           ;7266
000194  302c              ADDS     r0,r0,#0x2c           ;7266
000196  e006              B        |L79.422|
                  |L79.408|
000198  e0f2              B        |L79.896|
                  |L79.410|
00019a  e0f9              B        |L79.912|
                  |L79.412|
00019c  e0a8              B        |L79.752|
                  |L79.414|
00019e  4621              MOV      r1,r4                 ;7270
0001a0  220b              MOVS     r2,#0xb               ;7270
0001a2  310c              ADDS     r1,r1,#0xc            ;7270
0001a4  3023              ADDS     r0,r0,#0x23           ;7270
                  |L79.422|
0001a6  f7fffffe          BL       Knl_MemCpy_Isr
0001aa  6a28              LDR      r0,[r5,#0x20]         ;7272  ; LL_conn_pi
0001ac  8d81              LDRH     r1,[r0,#0x2c]         ;7272
0001ae  8b42              LDRH     r2,[r0,#0x1a]         ;7272
0001b0  4291              CMP      r1,r2                 ;7272
0001b2  d003              BEQ      |L79.444|
0001b4  1a8a              SUBS     r2,r1,r2              ;7273
0001b6  4981              LDR      r1,|L79.956|
0001b8  428a              CMP      r2,r1                 ;7273
0001ba  db05              BLT      |L79.456|
                  |L79.444|
0001bc  2128              MOVS     r1,#0x28              ;7275
0001be  3020              ADDS     r0,r0,#0x20           ;7275
0001c0  7081              STRB     r1,[r0,#2]            ;7275
0001c2  20b0              MOVS     r0,#0xb0              ;7276
0001c4  7120              STRB     r0,[r4,#4]            ;7276
0001c6  e076              B        |L79.694|
                  |L79.456|
0001c8  8cc1              LDRH     r1,[r0,#0x26]         ;7281
0001ca  4602              MOV      r2,r0                 ;7283
0001cc  8401              STRH     r1,[r0,#0x20]         ;7281
0001ce  3220              ADDS     r2,r2,#0x20           ;7283
0001d0  78d3              LDRB     r3,[r2,#3]            ;7283
0001d2  260a              MOVS     r6,#0xa               ;7283
0001d4  4373              MULS     r3,r6,r3              ;7283
0001d6  70d3              STRB     r3,[r2,#3]            ;7283
0001d8  8c82              LDRH     r2,[r0,#0x24]         ;7284
0001da  4371              MULS     r1,r6,r1              ;7285
0001dc  4372              MULS     r2,r6,r2              ;7284
0001de  8482              STRH     r2,[r0,#0x24]         ;7284
0001e0  84c1              STRH     r1,[r0,#0x26]         ;7285
0001e2  8d41              LDRH     r1,[r0,#0x2a]         ;7286
0001e4  00c9              LSLS     r1,r1,#3              ;7286
0001e6  8541              STRH     r1,[r0,#0x2a]         ;7286
0001e8  e065              B        |L79.694|
0001ea  7b21              LDRB     r1,[r4,#0xc]          ;7298
0001ec  3020              ADDS     r0,r0,#0x20           ;7298
0001ee  7081              STRB     r1,[r0,#2]            ;7298
0001f0  20b0              MOVS     r0,#0xb0              ;7299
0001f2  7120              STRB     r0,[r4,#4]            ;7299
0001f4  e05f              B        |L79.694|
0001f6  2102              MOVS     r1,#2                 ;7303
0001f8  71a9              STRB     r1,[r5,#6]            ;7303
0001fa  2e00              CMP      r6,#0                 ;7304
0001fc  d15b              BNE      |L79.694|
0001fe  2101              MOVS     r1,#1                 ;7306
000200  3040              ADDS     r0,r0,#0x40           ;7306
000202  74c1              STRB     r1,[r0,#0x13]         ;7306
000204  e057              B        |L79.694|
000206  2101              MOVS     r1,#1                 ;7311
000208  2244              MOVS     r2,#0x44              ;7312
00020a  71a9              STRB     r1,[r5,#6]            ;7311
00020c  7002              STRB     r2,[r0,#0]            ;7312
00020e  2e00              CMP      r6,#0                 ;7313
000210  d151              BNE      |L79.694|
000212  3040              ADDS     r0,r0,#0x40           ;7313
000214  74c1              STRB     r1,[r0,#0x13]         ;7315
000216  e04e              B        |L79.694|
000218  7326              STRB     r6,[r4,#0xc]          ;7320
00021a  79a9              LDRB     r1,[r5,#6]            ;7321  ; LL_SMP_DataCh
00021c  43c9              MVNS     r1,r1                 ;7321
00021e  0789              LSLS     r1,r1,#30             ;7321
000220  d101              BNE      |L79.550|
000222  3040              ADDS     r0,r0,#0x40           ;7323
000224  74c1              STRB     r1,[r0,#0x13]         ;7323
                  |L79.550|
000226  2003              MOVS     r0,#3                 ;7326
000228  e001              B        |L79.558|
                  |L79.554|
00022a  e03c              B        |L79.678|
00022c  2001              MOVS     r0,#1                 ;7330
                  |L79.558|
00022e  71a8              STRB     r0,[r5,#6]            ;7326
000230  e041              B        |L79.694|
000232  2100              MOVS     r1,#0                 ;7334
000234  6781              STR      r1,[r0,#0x78]         ;7334
000236  3060              ADDS     r0,r0,#0x60           ;7334
000238  7701              STRB     r1,[r0,#0x1c]         ;7335
00023a  e010              B        |L79.606|
00023c  7b21              LDRB     r1,[r4,#0xc]          ;7342
00023e  222d              MOVS     r2,#0x2d              ;7342
000240  4011              ANDS     r1,r1,r2              ;7342
000242  7041              STRB     r1,[r0,#1]            ;7342
000244  7b61              LDRB     r1,[r4,#0xd]          ;7343
000246  07c9              LSLS     r1,r1,#31             ;7343
000248  0fc9              LSRS     r1,r1,#31             ;7343
00024a  7081              STRB     r1,[r0,#2]            ;7343
00024c  e033              B        |L79.694|
00024e  7801              LDRB     r1,[r0,#0]            ;7349
000250  2943              CMP      r1,#0x43              ;7349
000252  d001              BEQ      |L79.600|
000254  2944              CMP      r1,#0x44              ;7349
000256  d12e              BNE      |L79.694|
                  |L79.600|
000258  2100              MOVS     r1,#0                 ;7351
00025a  3040              ADDS     r0,r0,#0x40           ;7351
00025c  74c1              STRB     r1,[r0,#0x13]         ;7351
                  |L79.606|
00025e  71a9              STRB     r1,[r5,#6]            ;7352
000260  e029              B        |L79.694|
000262  2198              MOVS     r1,#0x98              ;7357
000264  7001              STRB     r1,[r0,#0]            ;7357
000266  4621              MOV      r1,r4                 ;7358
000268  2202              MOVS     r2,#2                 ;7358
00026a  310e              ADDS     r1,r1,#0xe            ;7358
00026c  302c              ADDS     r0,r0,#0x2c           ;7358
00026e  f7fffffe          BL       Knl_MemCpy_Isr
000272  6a28              LDR      r0,[r5,#0x20]         ;7359  ; LL_conn_pi
000274  8d82              LDRH     r2,[r0,#0x2c]         ;7359
000276  8b41              LDRH     r1,[r0,#0x1a]         ;7359
000278  428a              CMP      r2,r1                 ;7359
00027a  d09f              BEQ      |L79.444|
00027c  1a51              SUBS     r1,r2,r1              ;7360
00027e  4a4f              LDR      r2,|L79.956|
000280  4291              CMP      r1,r2                 ;7360
000282  da9b              BGE      |L79.444|
000284  7b21              LDRB     r1,[r4,#0xc]          ;7369
000286  7b62              LDRB     r2,[r4,#0xd]          ;7369
000288  4011              ANDS     r1,r1,r2              ;7369
00028a  0789              LSLS     r1,r1,#30             ;7369
00028c  0f89              LSRS     r1,r1,#30             ;7369
00028e  d025              BEQ      |L79.732|
000290  3060              ADDS     r0,r0,#0x60           ;7370
000292  7f43              LDRB     r3,[r0,#0x1d]         ;7372
000294  428b              CMP      r3,r1                 ;7372
000296  d003              BEQ      |L79.672|
000298  7582              STRB     r2,[r0,#0x16]         ;7374
00029a  7b21              LDRB     r1,[r4,#0xc]          ;7375
                  |L79.668|
00029c  75c1              STRB     r1,[r0,#0x17]         ;7387
00029e  e002              B        |L79.678|
                  |L79.672|
0002a0  2100              MOVS     r1,#0                 ;7380
0002a2  7581              STRB     r1,[r0,#0x16]         ;7380
0002a4  75c1              STRB     r1,[r0,#0x17]         ;7381
                  |L79.678|
0002a6  2e00              CMP      r6,#0                 ;7392
0002a8  d005              BEQ      |L79.694|
0002aa  6a29              LDR      r1,[r5,#0x20]         ;7394  ; LL_conn_pi
0002ac  203d              MOVS     r0,#0x3d              ;7394
0002ae  3120              ADDS     r1,r1,#0x20           ;7394
0002b0  7088              STRB     r0,[r1,#2]            ;7394
0002b2  20b0              MOVS     r0,#0xb0              ;7395
0002b4  7120              STRB     r0,[r4,#4]            ;7395
                  |L79.694|
0002b6  9801              LDR      r0,[sp,#4]            ;7400
0002b8  2804              CMP      r0,#4                 ;7400
0002ba  d205              BCS      |L79.712|
0002bc  6a28              LDR      r0,[r5,#0x20]         ;7402  ; LL_conn_pi
0002be  2280              MOVS     r2,#0x80              ;7402
0002c0  3060              ADDS     r0,r0,#0x60           ;7402
0002c2  7d01              LDRB     r1,[r0,#0x14]         ;7402
0002c4  4311              ORRS     r1,r1,r2              ;7402
0002c6  7501              STRB     r1,[r0,#0x14]         ;7402
                  |L79.712|
0002c8  6a28              LDR      r0,[r5,#0x20]         ;7405  ; LL_conn_pi
0002ca  79a9              LDRB     r1,[r5,#6]            ;7405  ; LL_SMP_DataCh
0002cc  3060              ADDS     r0,r0,#0x60           ;7405
0002ce  7541              STRB     r1,[r0,#0x15]         ;7405
0002d0  bf00              NOP                            ;7406
0002d2  2100              MOVS     r1,#0                 ;7407
0002d4  4620              MOV      r0,r4                 ;7407
0002d6  f7fffffe          BL       SndMsgBlks_Isr
0002da  e051              B        |L79.896|
                  |L79.732|
0002dc  2100              MOVS     r1,#0                 ;7386
0002de  3060              ADDS     r0,r0,#0x60           ;7386
0002e0  7581              STRB     r1,[r0,#0x16]         ;7386
0002e2  e7db              B        |L79.668|
                  |L79.740|
0002e4  6839              LDR      r1,[r7,#0]            ;7425  ; LL_ConnBuffPrcsR
0002e6  428b              CMP      r3,r1                 ;7425
0002e8  d102              BNE      |L79.752|
0002ea  687a              LDR      r2,[r7,#4]            ;7435  ; LL_ConnBuffPrcsR
0002ec  4291              CMP      r1,r2                 ;7435
0002ee  d00b              BEQ      |L79.776|
                  |L79.752|
0002f0  7a82              LDRB     r2,[r0,#0xa]          ;7437
0002f2  1899              ADDS     r1,r3,r2              ;7437
0002f4  1880              ADDS     r0,r0,r2              ;7437
0002f6  1ab2              SUBS     r2,r6,r2              ;7437
0002f8  b2d2              UXTB     r2,r2                 ;7437
0002fa  300b              ADDS     r0,r0,#0xb            ;7437
0002fc  310b              ADDS     r1,r1,#0xb            ;7437
0002fe  f7fffffe          BL       Knl_MemCpy_Isr
000302  6828              LDR      r0,[r5,#0]            ;7441
000304  7286              STRB     r6,[r0,#0xa]          ;7441
000306  e00e              B        |L79.806|
                  |L79.776|
000308  7a82              LDRB     r2,[r0,#0xa]          ;7445
00030a  1880              ADDS     r0,r0,r2              ;7445
00030c  189b              ADDS     r3,r3,r2              ;7445
00030e  7a8a              LDRB     r2,[r1,#0xa]          ;7445
000310  4619              MOV      r1,r3                 ;7445
000312  310b              ADDS     r1,r1,#0xb            ;7445
000314  300b              ADDS     r0,r0,#0xb            ;7445
000316  f7fffffe          BL       Knl_MemCpy_Isr
00031a  6828              LDR      r0,[r5,#0]            ;7449
00031c  683a              LDR      r2,[r7,#0]            ;7449  ; LL_ConnBuffPrcsR
00031e  7a81              LDRB     r1,[r0,#0xa]          ;7449
000320  7a92              LDRB     r2,[r2,#0xa]          ;7449
000322  1889              ADDS     r1,r1,r2              ;7449
000324  7281              STRB     r1,[r0,#0xa]          ;7449
                  |L79.806|
000326  4e1e              LDR      r6,|L79.928|
000328  6870              LDR      r0,[r6,#4]            ;7454  ; LL_ConnDataInTmp
00032a  7a41              LDRB     r1,[r0,#9]            ;7454
00032c  2900              CMP      r1,#0                 ;7454
00032e  d025              BEQ      |L79.892|
000330  6830              LDR      r0,[r6,#0]            ;7456  ; LL_ConnDataInTmp
000332  7a41              LDRB     r1,[r0,#9]            ;7456
000334  2900              CMP      r1,#0                 ;7456
000336  d115              BNE      |L79.868|
000338  6839              LDR      r1,[r7,#0]            ;7458  ; LL_ConnBuffPrcsR
00033a  4288              CMP      r0,r1                 ;7458
00033c  d012              BEQ      |L79.868|
00033e  f7fffffe          BL       FreeMsgBlk_Isr
000342  6838              LDR      r0,[r7,#0]            ;7461  ; LL_ConnBuffPrcsR
000344  6030              STR      r0,[r6,#0]            ;7462  ; LL_ConnDataInTmp
000346  7a42              LDRB     r2,[r0,#9]            ;7462
000348  4639              MOV      r1,r7                 ;7461
00034a  2a29              CMP      r2,#0x29              ;7462
00034c  d108              BNE      |L79.864|
00034e  684a              LDR      r2,[r1,#4]            ;7464  ; LL_ConnBuffPrcsR
000350  2a00              CMP      r2,#0                 ;7464
000352  d005              BEQ      |L79.864|
000354  6002              STR      r2,[r0,#0]            ;7467
000356  6878              LDR      r0,[r7,#4]            ;7467  ; LL_ConnBuffPrcsR
000358  2100              MOVS     r1,#0                 ;7468
00035a  6030              STR      r0,[r6,#0]            ;7468  ; LL_ConnDataInTmp
00035c  6001              STR      r1,[r0,#0]            ;7468
00035e  e001              B        |L79.868|
                  |L79.864|
000360  2100              MOVS     r1,#0                 ;7477
000362  6001              STR      r1,[r0,#0]            ;7477
                  |L79.868|
000364  6830              LDR      r0,[r6,#0]            ;7482  ; LL_ConnDataInTmp
000366  7a41              LDRB     r1,[r0,#9]            ;7482
000368  7a82              LDRB     r2,[r0,#0xa]          ;7482
00036a  4291              CMP      r1,r2                 ;7482
00036c  d000              BEQ      |L79.880|
00036e  7281              STRB     r1,[r0,#0xa]          ;7484
                  |L79.880|
000370  6829              LDR      r1,[r5,#0]            ;7486
000372  6870              LDR      r0,[r6,#4]            ;7486  ; LL_ConnDataInTmp
000374  6008              STR      r0,[r1,#0]            ;7487
000376  6830              LDR      r0,[r6,#0]            ;7487  ; LL_ConnDataInTmp
                  |L79.888|
000378  6028              STR      r0,[r5,#0]            ;7497
00037a  e001              B        |L79.896|
                  |L79.892|
00037c  f7fffffe          BL       FreeMsgBlks_Isr
                  |L79.896|
000380  4907              LDR      r1,|L79.928|
000382  2000              MOVS     r0,#0                 ;7501
000384  6048              STR      r0,[r1,#4]            ;7502  ; LL_ConnDataInTmp
000386  6008              STR      r0,[r1,#0]            ;7504  ; LL_ConnDataInTmp
000388  7927              LDRB     r7,[r4,#4]            ;7504
                  |L79.906|
00038a  b003              ADD      sp,sp,#0xc
00038c  4638              MOV      r0,r7                 ;7506
00038e  bdf0              POP      {r4-r7,pc}
                  |L79.912|
000390  6848              LDR      r0,[r1,#4]            ;7496  ; LL_ConnDataInTmp
000392  6068              STR      r0,[r5,#4]            ;7497
000394  6808              LDR      r0,[r1,#0]            ;7497  ; LL_ConnDataInTmp
000396  e7ef              B        |L79.888|
;;;7508   
                          ENDP

                  |L79.920|
                          DCD      ||.bss||+0x3c8
                  |L79.924|
                          DCD      ||.data||
                  |L79.928|
                          DCD      ||.data||+0x54
                  |L79.932|
                          DCD      ||.data||+0x64
                  |L79.936|
                          DCD      ||.constdata||+0x1ac
                  |L79.940|
                          DCD      ||.constdata||+0x178
                  |L79.944|
                          DCD      ||.constdata||+0x192
                  |L79.948|
                          DCD      ||.constdata||+0xea
                  |L79.952|
                          DCD      ||.constdata||+0x144
                  |L79.956|
                          DCD      0x00007fff

                          AREA ||i.LLWTR_TxEndRpt||, CODE, READONLY, ALIGN=1

                  LLWTR_TxEndRpt PROC
;;;7058   
;;;7059   void LLWTR_TxEndRpt(Uint8 ConnId)
000000  b510              PUSH     {r4,lr}
;;;7060   {
000002  4604              MOV      r4,r0
;;;7061       MBLK *mblk;
;;;7062   
;;;7063       mblk = GetMsgBlk_Isr();
000004  f7fffffe          BL       GetMsgBlk_Isr
;;;7064       mblk->Primitive = MHC_EVENT_NUM_OF_COMPLETED_PCKTS;
000008  2164              MOVS     r1,#0x64
00000a  7101              STRB     r1,[r0,#4]
;;;7065       mblk->Para.MHC_Num_Of_Completed_Pckts_Para.HCI_Conn_Hdl_L = ConnId;
00000c  7284              STRB     r4,[r0,#0xa]
;;;7066       SndMsgBlk_Isr(mblk, Q_2HCI);
00000e  2104              MOVS     r1,#4
000010  f7fffffe          BL       SndMsgBlk_Isr
;;;7067   }
000014  bd10              POP      {r4,pc}
;;;7068   
                          ENDP


                          AREA ||i.LL_Buffer_To_FIFO_Isr||, CODE, READONLY, ALIGN=2

                  LL_Buffer_To_FIFO_Isr PROC
;;;4932   
;;;4933   MBLK* LL_Buffer_To_FIFO_Isr(Uint8 LL_Conn_ID, Uint8 HeaderSts)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;4934   {
000002  b081              SUB      sp,sp,#4
;;;4935       MBLK *mblk;
;;;4936       Uint8 i, Len, idxBuf;
;;;4937       extern uint8_t Content_ioInt;
;;;4938   
;;;4939       mblk = LL_ConnBuffPt[LL_Conn_ID];
000004  9801              LDR      r0,[sp,#4]
000006  49b7              LDR      r1,|L81.740|
000008  0080              LSLS     r0,r0,#2
00000a  9000              STR      r0,[sp,#0]
;;;4940   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_PARTICULAR
;;;4941       LL_ConnBuffPrcs.BufPrcsF = mblk;
00000c  4eb6              LDR      r6,|L81.744|
00000e  5809              LDR      r1,[r1,r0]            ;4939
;;;4942       LL_ConnBuffPrcs.BufPrcsN = mblk;
000010  6031              STR      r1,[r6,#0]  ; LL_ConnBuffPrcs
;;;4943   #endif
;;;4944       //Len = 0;
;;;4945       switch(mblk->Primitive)
000012  6071              STR      r1,[r6,#4]  ; LL_ConnBuffPrcs
000014  7908              LDRB     r0,[r1,#4]
000016  28e6              CMP      r0,#0xe6
000018  d010              BEQ      |L81.60|
00001a  28ef              CMP      r0,#0xef
00001c  d00c              BEQ      |L81.56|
00001e  28f0              CMP      r0,#0xf0
000020  d012              BEQ      |L81.72|
;;;4946       {
;;;4947       case MLL_LE_CTRL_PKT:
;;;4948           i = LL_DATA_LLID_CONTROL;
;;;4949           //Len = mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL;
;;;4950           break;
;;;4951   
;;;4952       case HCLL_LE_ACL_DATA_PKT:
;;;4953           if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0==mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL)
;;;4954           {
;;;4955               i = LL_DATA_LLID_START_COMPLETE;
;;;4956           }
;;;4957           else
;;;4958           {
;;;4959               i = LL_DATA_LLID_EMPTY_CONTI;
;;;4960           }
;;;4961           break;
;;;4962   
;;;4963       case HCLL_LE_ACL_DATA_PKT_EXTEND:
;;;4964           i = LL_DATA_LLID_EMPTY_CONTI;
;;;4965           break;
;;;4966   
;;;4967       default:
;;;4968           i = LL_DATA_LLID_RESERVE;
000022  2400              MOVS     r4,#0
                  |L81.36|
;;;4969           break;
;;;4970       }
;;;4971   
;;;4972       Len = LL_conn_pi->LE_Conn_Para.LL_Tx_length_1M;
000024  48b1              LDR      r0,|L81.748|
000026  6a00              LDR      r0,[r0,#0x20]  ; LL_conn_pi
000028  3080              ADDS     r0,r0,#0x80
00002a  7840              LDRB     r0,[r0,#1]
;;;4973   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_PARTICULAR
;;;4974       if((Len-(Len&0xF0))==1)
00002c  0902              LSRS     r2,r0,#4
00002e  0112              LSLS     r2,r2,#4
000030  1a82              SUBS     r2,r0,r2
000032  2a01              CMP      r2,#1
000034  d00a              BEQ      |L81.76|
000036  e00b              B        |L81.80|
                  |L81.56|
000038  2403              MOVS     r4,#3                 ;4948
00003a  e7f3              B        |L81.36|
                  |L81.60|
00003c  7a48              LDRB     r0,[r1,#9]            ;4953
00003e  7a8a              LDRB     r2,[r1,#0xa]          ;4953
000040  4290              CMP      r0,r2                 ;4953
000042  d101              BNE      |L81.72|
000044  2402              MOVS     r4,#2                 ;4955
000046  e7ed              B        |L81.36|
                  |L81.72|
000048  2401              MOVS     r4,#1                 ;4959
00004a  e7eb              B        |L81.36|
                  |L81.76|
00004c  1e40              SUBS     r0,r0,#1              ;4959
;;;4975       {
;;;4976           Len -= 1;
00004e  b2c0              UXTB     r0,r0
                  |L81.80|
;;;4977       }
;;;4978   #endif
;;;4979   
;;;4980       LL_Para_Interval.HeaderSts = ((HeaderSts|i)&(~FLD_MSK_LL_DATA_RSV));
000050  9a02              LDR      r2,[sp,#8]
000052  4da7              LDR      r5,|L81.752|
000054  4322              ORRS     r2,r2,r4
000056  06d2              LSLS     r2,r2,#27
000058  0ed2              LSRS     r2,r2,#27
00005a  70aa              STRB     r2,[r5,#2]
;;;4981       LL_Para_Interval.HeaderLen = 0;
00005c  2200              MOVS     r2,#0
00005e  70ea              STRB     r2,[r5,#3]
;;;4982       switch(i)
000060  2c01              CMP      r4,#1
000062  d00c              BEQ      |L81.126|
000064  2c02              CMP      r4,#2
000066  d00a              BEQ      |L81.126|
000068  2c03              CMP      r4,#3
00006a  d13e              BNE      |L81.234|
;;;4983       {
;;;4984       case LL_DATA_LLID_CONTROL:
;;;4985           mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL;
00006c  7a88              LDRB     r0,[r1,#0xa]
00006e  7208              STRB     r0,[r1,#8]
;;;4986           LL_Para_Interval.HeaderLen = mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL;
000070  70e8              STRB     r0,[r5,#3]
;;;4987           Knl_MemCpy_Isr(LL_Para_Interval.Data, mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL);
000072  7a8a              LDRB     r2,[r1,#0xa]
000074  1d28              ADDS     r0,r5,#4
000076  310b              ADDS     r1,r1,#0xb
000078  f7fffffe          BL       Knl_MemCpy_Isr
;;;4988           break;
00007c  e01c              B        |L81.184|
                  |L81.126|
;;;4989   
;;;4990       case LL_DATA_LLID_START_COMPLETE:
;;;4991       case LL_DATA_LLID_EMPTY_CONTI:
;;;4992           while(1)
;;;4993           {
;;;4994               if(Len+mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 < mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0)
00007e  7a0b              LDRB     r3,[r1,#8]
000080  7a4a              LDRB     r2,[r1,#9]
000082  181f              ADDS     r7,r3,r0
000084  4297              CMP      r7,r2
000086  d206              BCS      |L81.150|
;;;4995               {
;;;4996                   mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 += Len;
000088  b2da              UXTB     r2,r3
00008a  1812              ADDS     r2,r2,r0
00008c  720a              STRB     r2,[r1,#8]
;;;4997                   LL_Para_Interval.HeaderLen += Len;
00008e  78e9              LDRB     r1,[r5,#3]  ; LL_Para_Interval
000090  1808              ADDS     r0,r1,r0
000092  70e8              STRB     r0,[r5,#3]
;;;4998                   break;
000094  e010              B        |L81.184|
                  |L81.150|
;;;4999               }
;;;5000               else
;;;5001               {
;;;5002                   if(Len)
000096  2800              CMP      r0,#0
000098  d00e              BEQ      |L81.184|
;;;5003                   {
;;;5004                       Len -= (mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0-mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1);
00009a  1ad2              SUBS     r2,r2,r3
;;;5005                       LL_Para_Interval.HeaderLen += (mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0-mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1);
00009c  78eb              LDRB     r3,[r5,#3]  ; LL_Para_Interval
00009e  1a80              SUBS     r0,r0,r2              ;5004
0000a0  18d2              ADDS     r2,r2,r3
0000a2  70ea              STRB     r2,[r5,#3]
;;;5006                       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 += (mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0-mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1);
0000a4  7a4a              LDRB     r2,[r1,#9]
0000a6  720a              STRB     r2,[r1,#8]
;;;5007                   }
;;;5008                   else
;;;5009                       break;
;;;5010               }
;;;5011               if(mblk->Next != (MBLK *)0)
0000a8  680a              LDR      r2,[r1,#0]
0000aa  b2c0              UXTB     r0,r0                 ;5004
0000ac  2a00              CMP      r2,#0
0000ae  d003              BEQ      |L81.184|
;;;5012               {
;;;5013                   LL_ConnBuffPrcs.BufPrcsF = mblk;
;;;5014                   mblk = mblk->Next;
0000b0  6031              STR      r1,[r6,#0]  ; LL_ConnBuffPrcs
0000b2  6809              LDR      r1,[r1,#0]
;;;5015                   LL_ConnBuffPrcs.BufPrcsN = mblk;
0000b4  6071              STR      r1,[r6,#4]  ; LL_ConnBuffPrcs
0000b6  e7e2              B        |L81.126|
                  |L81.184|
;;;5016               }
;;;5017               else
;;;5018                   break;
;;;5019           }
;;;5020           break;
;;;5021   
;;;5022       default:
;;;5023           break;
;;;5024       }
;;;5025   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_PARTICULAR
;;;5026       if((LL_Para_Interval.HeaderLen>0x10)&&((LL_Para_Interval.HeaderLen&0x0F)==1))
0000b8  78e8              LDRB     r0,[r5,#3]  ; LL_Para_Interval
0000ba  2810              CMP      r0,#0x10
0000bc  d915              BLS      |L81.234|
0000be  0700              LSLS     r0,r0,#28
0000c0  0f00              LSRS     r0,r0,#28
0000c2  2801              CMP      r0,#1
0000c4  d111              BNE      |L81.234|
;;;5027       {
;;;5028           if(LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 >= 9)
0000c6  6870              LDR      r0,[r6,#4]  ; LL_ConnBuffPrcs
0000c8  7a02              LDRB     r2,[r0,#8]
0000ca  2a09              CMP      r2,#9
0000cc  d302              BCC      |L81.212|
0000ce  3a09              SUBS     r2,r2,#9
;;;5029           {
;;;5030               LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 -= 9;
0000d0  7202              STRB     r2,[r0,#8]
0000d2  e007              B        |L81.228|
                  |L81.212|
;;;5031           }
;;;5032           else
;;;5033           {
;;;5034               LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 -= (9-LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1);
0000d4  6831              LDR      r1,[r6,#0]  ; LL_ConnBuffPrcs
0000d6  2709              MOVS     r7,#9
0000d8  7a0b              LDRB     r3,[r1,#8]
0000da  1aba              SUBS     r2,r7,r2
0000dc  1a9a              SUBS     r2,r3,r2
0000de  720a              STRB     r2,[r1,#8]
;;;5035               LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
0000e0  2100              MOVS     r1,#0
0000e2  7201              STRB     r1,[r0,#8]
                  |L81.228|
;;;5036           }
;;;5037           LL_Para_Interval.HeaderLen -= 9;
0000e4  78e8              LDRB     r0,[r5,#3]  ; LL_Para_Interval
0000e6  3809              SUBS     r0,r0,#9
0000e8  70e8              STRB     r0,[r5,#3]
                  |L81.234|
;;;5038       }
;;;5039   #endif
;;;5040   
;;;5041   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS
;;;5042       Len = 0;
;;;5043       mblk = LL_ConnBuffPrcs.BufPrcsF;
0000ea  497f              LDR      r1,|L81.744|
0000ec  2000              MOVS     r0,#0                 ;5042
0000ee  6809              LDR      r1,[r1,#0]  ; LL_ConnBuffPrcs
0000f0  460e              MOV      r6,r1
                  |L81.242|
;;;5044       while(1)
;;;5045       {
;;;5046           if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 < mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0)
0000f2  7a0a              LDRB     r2,[r1,#8]
0000f4  7a4b              LDRB     r3,[r1,#9]
0000f6  429a              CMP      r2,r3
0000f8  d202              BCS      |L81.256|
;;;5047           {
;;;5048               Len += (mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 - mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1);
0000fa  1a9a              SUBS     r2,r3,r2
0000fc  1810              ADDS     r0,r2,r0
0000fe  b2c0              UXTB     r0,r0
                  |L81.256|
;;;5049           }
;;;5050           if(Len > LEN_LL_PATCH_MIC_FAIL_CONDITION)
000100  2807              CMP      r0,#7
000102  d823              BHI      |L81.332|
;;;5051           {
;;;5052               Len = 0;
;;;5053               break;
;;;5054           }
;;;5055           else
;;;5056           {
;;;5057               if(mblk->Next != (MBLK *)0)
000104  6809              LDR      r1,[r1,#0]
000106  2900              CMP      r1,#0
000108  d1f3              BNE      |L81.242|
;;;5058               {
;;;5059                   mblk = mblk->Next;
;;;5060               }
;;;5061               else
;;;5062                   break;
;;;5063           }
;;;5064       }
;;;5065       if(Len)
00010a  2800              CMP      r0,#0
00010c  d01e              BEQ      |L81.332|
;;;5066       {
;;;5067           if(Len <= LEN_LL_PATCH_MIC_FAIL_CONDITION)
00010e  2807              CMP      r0,#7
000110  d802              BHI      |L81.280|
;;;5068           {
;;;5069               Len = (LEN_LL_PATCH_MIC_FAIL_CONDITION+1)-Len;
000112  2108              MOVS     r1,#8
000114  1a08              SUBS     r0,r1,r0
000116  b2c0              UXTB     r0,r0
                  |L81.280|
;;;5070           }
;;;5071           if(((LL_Para_Interval.HeaderLen-Len)>0x10)&&(((LL_Para_Interval.HeaderLen-Len)&0x0F)==1))
000118  78e9              LDRB     r1,[r5,#3]  ; LL_Para_Interval
00011a  1a09              SUBS     r1,r1,r0
00011c  2910              CMP      r1,#0x10
00011e  dd05              BLE      |L81.300|
000120  0709              LSLS     r1,r1,#28
000122  0f09              LSRS     r1,r1,#28
000124  2901              CMP      r1,#1
000126  d101              BNE      |L81.300|
000128  1c40              ADDS     r0,r0,#1
;;;5072           {
;;;5073               Len++;
00012a  b2c0              UXTB     r0,r0
                  |L81.300|
;;;5074           }
;;;5075           if(LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 >= Len)
00012c  496e              LDR      r1,|L81.744|
00012e  684a              LDR      r2,[r1,#4]  ; LL_ConnBuffPrcs
000130  7a11              LDRB     r1,[r2,#8]
000132  4281              CMP      r1,r0
000134  d301              BCC      |L81.314|
;;;5076           {
;;;5077               LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 -= Len;
000136  1a09              SUBS     r1,r1,r0
000138  e004              B        |L81.324|
                  |L81.314|
;;;5078           }
;;;5079           else
;;;5080           {
;;;5081               LL_ConnBuffPrcs.BufPrcsF->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 -= (Len-LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1);
00013a  7a33              LDRB     r3,[r6,#8]
00013c  1a41              SUBS     r1,r0,r1
00013e  1a59              SUBS     r1,r3,r1
000140  7231              STRB     r1,[r6,#8]
;;;5082               LL_ConnBuffPrcs.BufPrcsN->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
000142  2100              MOVS     r1,#0
                  |L81.324|
000144  7211              STRB     r1,[r2,#8]
;;;5083           }
;;;5084           LL_Para_Interval.HeaderLen -= Len;
000146  78e9              LDRB     r1,[r5,#3]  ; LL_Para_Interval
000148  1a08              SUBS     r0,r1,r0
00014a  70e8              STRB     r0,[r5,#3]
                  |L81.332|
;;;5085       }
;;;5086   #endif  //(#ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS)
;;;5087       mblk = LL_ConnBuffPt[LL_Conn_ID];
00014c  4965              LDR      r1,|L81.740|
00014e  9800              LDR      r0,[sp,#0]
;;;5088       if(LL_Para_Interval.HeaderLen > LEN_LL_DATA_BUF)
000150  78ef              LDRB     r7,[r5,#3]  ; LL_Para_Interval
000152  580e              LDR      r6,[r1,r0]            ;5087
000154  2f20              CMP      r7,#0x20
000156  d900              BLS      |L81.346|
;;;5089       {
;;;5090           Len = LEN_LL_DATA_BUF;
000158  2720              MOVS     r7,#0x20
                  |L81.346|
;;;5091       }
;;;5092       else
;;;5093       {
;;;5094           Len = LL_Para_Interval.HeaderLen;
;;;5095       }
;;;5096   
;;;5097       LL_Para_Interval.DataIdxN = Len;
00015a  706f              STRB     r7,[r5,#1]
;;;5098   
;;;5099       idxBuf = 0;
00015c  2500              MOVS     r5,#0
                  |L81.350|
;;;5100       while(1)
;;;5101       {
;;;5102           LL_ConnBuffPrcs.BufPrcsF = mblk;
00015e  4862              LDR      r0,|L81.744|
;;;5103           if(Len > mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1)
000160  6006              STR      r6,[r0,#0]  ; LL_ConnBuffPrcs
000162  7a32              LDRB     r2,[r6,#8]
;;;5104           {
;;;5105               Knl_MemCpy_Isr(&LL_Para_Interval.Data[idxBuf], &mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL-mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0], mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1);
;;;5106               Len -= mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1;
;;;5107               idxBuf += mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1;
;;;5108               LL_Para_Interval.DataIdxF = mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1;
;;;5109           }
;;;5110           else
;;;5111           {
;;;5112               Knl_MemCpy_Isr(&LL_Para_Interval.Data[idxBuf], &mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data[mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL-mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0], Len);
000164  7ab0              LDRB     r0,[r6,#0xa]
000166  7a71              LDRB     r1,[r6,#9]
000168  42ba              CMP      r2,r7                 ;5103
00016a  d213              BCS      |L81.404|
00016c  1a40              SUBS     r0,r0,r1              ;5105
00016e  1981              ADDS     r1,r0,r6              ;5105
000170  485f              LDR      r0,|L81.752|
000172  310b              ADDS     r1,r1,#0xb            ;5105
000174  1940              ADDS     r0,r0,r5              ;5105
000176  1d00              ADDS     r0,r0,#4              ;5105
000178  f7fffffe          BL       Knl_MemCpy_Isr
00017c  7a30              LDRB     r0,[r6,#8]            ;5106
00017e  1a39              SUBS     r1,r7,r0              ;5106
000180  b2cf              UXTB     r7,r1                 ;5106
000182  1941              ADDS     r1,r0,r5              ;5107
000184  b2cd              UXTB     r5,r1                 ;5107
000186  495a              LDR      r1,|L81.752|
000188  7008              STRB     r0,[r1,#0]            ;5108
;;;5113               idxBuf = mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL-mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0;
;;;5114               LL_Para_Interval.DataIdxF = idxBuf+Len;
;;;5115               Len = 0;
;;;5116               break;
;;;5117           }
;;;5118           if(mblk->Next != (MBLK *)0)
00018a  6830              LDR      r0,[r6,#0]
00018c  2800              CMP      r0,#0
00018e  d010              BEQ      |L81.434|
;;;5119           {
;;;5120               mblk = mblk->Next;
000190  4606              MOV      r6,r0
000192  e7e4              B        |L81.350|
                  |L81.404|
000194  1a40              SUBS     r0,r0,r1              ;5112
000196  1981              ADDS     r1,r0,r6              ;5112
000198  4855              LDR      r0,|L81.752|
00019a  463a              MOV      r2,r7                 ;5112
00019c  1940              ADDS     r0,r0,r5              ;5112
00019e  1d00              ADDS     r0,r0,#4              ;5112
0001a0  310b              ADDS     r1,r1,#0xb            ;5112
0001a2  f7fffffe          BL       Knl_MemCpy_Isr
0001a6  7ab0              LDRB     r0,[r6,#0xa]          ;5113
0001a8  7a71              LDRB     r1,[r6,#9]            ;5113
0001aa  1a40              SUBS     r0,r0,r1              ;5113
0001ac  19c1              ADDS     r1,r0,r7              ;5114
0001ae  4850              LDR      r0,|L81.752|
0001b0  7001              STRB     r1,[r0,#0]            ;5114
                  |L81.434|
;;;5121           }
;;;5122           else
;;;5123               break;
;;;5124       }
;;;5125   
;;;5126       LL_ConnBuffPrcs.BufPrcsF = mblk;
0001b2  4a4d              LDR      r2,|L81.744|
;;;5127       if(mblk->Next != (MBLK *)0)
0001b4  6016              STR      r6,[r2,#0]  ; LL_ConnBuffPrcs
0001b6  6830              LDR      r0,[r6,#0]
0001b8  2800              CMP      r0,#0
0001ba  d007              BEQ      |L81.460|
;;;5128       {
;;;5129           if(LL_Para_Interval.DataIdxF == mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL)
0001bc  494c              LDR      r1,|L81.752|
0001be  7ab5              LDRB     r5,[r6,#0xa]
0001c0  780b              LDRB     r3,[r1,#0]  ; LL_Para_Interval
0001c2  42ab              CMP      r3,r5
0001c4  d102              BNE      |L81.460|
;;;5130           {
;;;5131               LL_ConnBuffPrcs.BufPrcsF = mblk->Next;
;;;5132               LL_Para_Interval.DataIdxF = 0;
0001c6  6010              STR      r0,[r2,#0]  ; LL_ConnBuffPrcs
0001c8  2000              MOVS     r0,#0
0001ca  7008              STRB     r0,[r1,#0]
                  |L81.460|
;;;5133           }
;;;5134       }
;;;5135       if(LL_ConnBuffPrcs.BufPrcsF->Next != (MBLK *)0)
0001cc  6810              LDR      r0,[r2,#0]  ; LL_ConnBuffPrcs
0001ce  6801              LDR      r1,[r0,#0]
0001d0  2900              CMP      r1,#0
0001d2  d001              BEQ      |L81.472|
;;;5136       {
;;;5137           LL_ConnBuffPrcs.BufPrcsN = LL_ConnBuffPrcs.BufPrcsF->Next;
0001d4  6051              STR      r1,[r2,#4]  ; LL_ConnBuffPrcs
0001d6  e000              B        |L81.474|
                  |L81.472|
;;;5138       }
;;;5139       else
;;;5140       {
;;;5141           LL_ConnBuffPrcs.BufPrcsN = LL_ConnBuffPrcs.BufPrcsF;
0001d8  6050              STR      r0,[r2,#4]  ; LL_ConnBuffPrcs
                  |L81.474|
;;;5142       }
;;;5143   
;;;5144       if((LL_SMP_DataCh&LL_SMP_DATA_CH_T_CCM))
0001da  4d44              LDR      r5,|L81.748|
0001dc  79a8              LDRB     r0,[r5,#6]  ; LL_SMP_DataCh
0001de  07c0              LSLS     r0,r0,#31
0001e0  d00e              BEQ      |L81.512|
;;;5145       {
;;;5146   #if MAX_NUM_CONN_MAS_HDL != 0
;;;5147           if(LL_Conn_ID<LL_CONN_ID_MASTER_RSV)
0001e2  9801              LDR      r0,[sp,#4]
0001e4  2804              CMP      r0,#4
0001e6  d205              BCS      |L81.500|
;;;5148           {
;;;5149               LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd |= MSK_LL_SMP_DATA_CH_MASTER;
0001e8  6a28              LDR      r0,[r5,#0x20]  ; LL_conn_pi
0001ea  2280              MOVS     r2,#0x80
0001ec  3060              ADDS     r0,r0,#0x60
0001ee  7d01              LDRB     r1,[r0,#0x14]
0001f0  4311              ORRS     r1,r1,r2
0001f2  7501              STRB     r1,[r0,#0x14]
                  |L81.500|
;;;5150           }
;;;5151   #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
;;;5152           RF_CCM_NoncePktCnt_set(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT);
0001f4  6a29              LDR      r1,[r5,#0x20]  ; LL_conn_pi
0001f6  2205              MOVS     r2,#5
0001f8  207e              MOVS     r0,#0x7e
0001fa  3170              ADDS     r1,r1,#0x70
0001fc  f7fffffe          BL       SPI_PDMA_SetTx
                  |L81.512|
;;;5153       }
;;;5154       RF_CCM_AES_Mode_set((LL_SMP_DataCh&LL_SMP_DATA_CH_R_T_CCM));
000200  4d3a              LDR      r5,|L81.748|
000202  79a8              LDRB     r0,[r5,#6]  ; LL_SMP_DataCh
000204  0780              LSLS     r0,r0,#30
000206  0f80              LSRS     r0,r0,#30
000208  f7fffffe          BL       RF_CCM_AES_Mode_set
;;;5155       LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterTd &= (~MSK_LL_SMP_DATA_CH_MASTER);
00020c  6a29              LDR      r1,[r5,#0x20]  ; LL_conn_pi
00020e  460a              MOV      r2,r1
000210  3160              ADDS     r1,r1,#0x60
000212  7d08              LDRB     r0,[r1,#0x14]
000214  0640              LSLS     r0,r0,#25
000216  0e40              LSRS     r0,r0,#25
000218  7508              STRB     r0,[r1,#0x14]
;;;5156   
;;;5157   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS
;;;5158       if((LL_SMP_DataCh&LL_SMP_DATA_CH_T_CCM))
00021a  79a8              LDRB     r0,[r5,#6]  ; LL_SMP_DataCh
00021c  07c3              LSLS     r3,r0,#31
00021e  d037              BEQ      |L81.656|
;;;5159       {
;;;5160           if(LL_conn_pi->LE_Conn_Para.LL_Tx_PHYS==LL_TX_PHYS_2M_PHY)
000220  7f49              LDRB     r1,[r1,#0x1d]
000222  2902              CMP      r1,#2
000224  d134              BNE      |L81.656|
;;;5161           {
;;;5162               if(LL_Para_Interval.HeaderLen <= LEN_LL_PATCH_MIC_FAIL_CONDITION)
000226  4f32              LDR      r7,|L81.752|
000228  78f9              LDRB     r1,[r7,#3]  ; LL_Para_Interval
00022a  2907              CMP      r1,#7
00022c  d830              BHI      |L81.656|
;;;5163               {
;;;5164                   if((mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Length_CCM==0)||(LL_conn_pi->LE_Conn_Para.LL_SMP_packetCounterT != mblk->Para.LLEC_LE_CCM_Manual_Para.LL_SMP_packetCounterT))
00022e  4635              MOV      r5,r6
000230  3520              ADDS     r5,r5,#0x20
000232  7869              LDRB     r1,[r5,#1]
000234  2900              CMP      r1,#0
000236  d003              BEQ      |L81.576|
000238  6f11              LDR      r1,[r2,#0x70]
00023a  6972              LDR      r2,[r6,#0x14]
00023c  4291              CMP      r1,r2
00023e  d01b              BEQ      |L81.632|
                  |L81.576|
;;;5165                   {
;;;5166                       //if(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL > LEN_LL_PATCH_MIC_FAIL_CONDITION)
;;;5167                       {
;;;5168                           //mblk->Primitive = HCLL_LE_ACL_DATA_PKT_EXTEND;
;;;5169                       }
;;;5170                       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
000240  2100              MOVS     r1,#0
000242  7231              STRB     r1,[r6,#8]
;;;5171                       //mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = LL_Para_Interval.HeaderLen;
;;;5172                       //Knl_MemCpy_Isr(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, LL_Para_Interval.Data, LL_Para_Interval.HeaderLen);
;;;5173   
;;;5174                       LL_Para_Interval.HeaderSts = ((HeaderSts|LL_DATA_LLID_EMPTY_CONTI)&(~(FLD_MSK_LL_DATA_RSV|FLD_MSK_LL_DATA_MD)));
000244  9802              LDR      r0,[sp,#8]
000246  2201              MOVS     r2,#1
000248  4310              ORRS     r0,r0,r2
00024a  0702              LSLS     r2,r0,#28
00024c  0f12              LSRS     r2,r2,#28
00024e  70ba              STRB     r2,[r7,#2]
;;;5175                       LL_Para_Interval.HeaderLen = 0;
000250  70f9              STRB     r1,[r7,#3]
;;;5176                       RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
000252  1cb8              ADDS     r0,r7,#2
000254  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
;;;5177   
;;;5178                       mblk = GetMsgBlk_Isr();
000258  f7fffffe          BL       GetMsgBlk_Isr
;;;5179                       mblk->Primitive = LLEC_LE_CCM_MANUAL;
00025c  2159              MOVS     r1,#0x59
00025e  7101              STRB     r1,[r0,#4]
;;;5180                       mblk->Para.MLL_LE_CCM_Manual_Para.mblk_LL_ConnDataQ = (Uint8 *)(LL_ConnBuffPt[LL_Conn_ID]);
000260  4a20              LDR      r2,|L81.740|
000262  9900              LDR      r1,[sp,#0]
000264  5851              LDR      r1,[r2,r1]
;;;5181                       mblk->Para.MLL_LE_CCM_Manual_Para.HCI_Conn_Hdl_L = LL_Conn_ID;
000266  60c1              STR      r1,[r0,#0xc]
000268  9901              LDR      r1,[sp,#4]
00026a  7201              STRB     r1,[r0,#8]
;;;5182                       mblk->Para.MLL_LE_CCM_Manual_Para.HCI_Conn_Hdl_H = i;
00026c  7244              STRB     r4,[r0,#9]
;;;5183                       SndMsgBlkEC(mblk);
00026e  f7fffffe          BL       SndMsgBlkEC
;;;5184                       return (MBLK *)0;
000272  2000              MOVS     r0,#0
;;;5185                   }
;;;5186                   else
;;;5187                   {
;;;5188                       RF_CCM_AES_Mode_set((LL_SMP_DataCh&LL_SMP_DATA_CH_R_CCM));
;;;5189   
;;;5190                       LL_Para_Interval.HeaderLen = mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Length_CCM;
;;;5191                       LL_Para_Interval.DataIdxN = LL_Para_Interval.HeaderLen;
;;;5192                       Knl_MemCpy_Isr(LL_Para_Interval.Data, mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Data_CCM, LL_Para_Interval.HeaderLen);
;;;5193                   }
;;;5194               }
;;;5195           }
;;;5196       }
;;;5197   #endif  //(#ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS)
;;;5198       Content_ioInt = (SPI_1BYT_SetRx_Isr(RFIP_REG_62)&REG_62_WAKEUP);    //Read and clear interrupt status, 1/2
;;;5199       if(Content_ioInt)
;;;5200       {
;;;5201           LL_DurRxPktAccu = LL_DurRxPktAccu - DUR_LL_TMR_TICK_BASE;
;;;5202           tblk_LL_pi2->Ticks = tblk_LL_pi2->Ticks - DUR_LL_TMR_TICK_BASE;
;;;5203           LLTimer_TmrRefUpd_Isr();
;;;5204           SPI_1BYT_SetTx_Isr(RFIP_REG_62, Content_ioInt);                     //Read and clear interrupt status, 2/2
;;;5205       }
;;;5206       RF_LE_HeaderStsLen_Tx(&LL_Para_Interval.HeaderSts);
;;;5207       if(LL_Para_Interval.HeaderLen)
;;;5208       {
;;;5209           RF_TxFIFO_LeData_set(LL_Para_Interval.Data, LL_Para_Interval.DataIdxN);
;;;5210           LL_ConnDataTmpGate = 1;
;;;5211       }
;;;5212   
;;;5213       return LL_ConnBuffPt[LL_Conn_ID];
;;;5214   }
000274  b003              ADD      sp,sp,#0xc
000276  bdf0              POP      {r4-r7,pc}
                  |L81.632|
000278  2102              MOVS     r1,#2                 ;5188
00027a  4008              ANDS     r0,r0,r1              ;5188
00027c  f7fffffe          BL       RF_CCM_AES_Mode_set
000280  786a              LDRB     r2,[r5,#1]            ;5190
000282  70fa              STRB     r2,[r7,#3]            ;5190
000284  4631              MOV      r1,r6                 ;5192
000286  707a              STRB     r2,[r7,#1]            ;5191
000288  3122              ADDS     r1,r1,#0x22           ;5192
00028a  1d38              ADDS     r0,r7,#4              ;5192
00028c  f7fffffe          BL       Knl_MemCpy_Isr
                  |L81.656|
000290  203e              MOVS     r0,#0x3e              ;5198
000292  f7fffffe          BL       SPI_1BYT_SetRx_Isr
000296  2140              MOVS     r1,#0x40              ;5198
000298  4c16              LDR      r4,|L81.756|
00029a  4008              ANDS     r0,r0,r1              ;5198
00029c  7020              STRB     r0,[r4,#0]            ;5198
00029e  d00d              BEQ      |L81.700|
0002a0  4812              LDR      r0,|L81.748|
0002a2  89c1              LDRH     r1,[r0,#0xe]          ;5201  ; LL_DurRxPktAccu
0002a4  1e49              SUBS     r1,r1,#1              ;5201
0002a6  81c1              STRH     r1,[r0,#0xe]          ;5201
0002a8  69c0              LDR      r0,[r0,#0x1c]         ;5202  ; tblk_LL_pi2
0002aa  6841              LDR      r1,[r0,#4]            ;5202
0002ac  1e49              SUBS     r1,r1,#1              ;5202
0002ae  6041              STR      r1,[r0,#4]            ;5203
0002b0  f7fffffe          BL       LLTimer_TmrRefUpd_Isr
0002b4  7821              LDRB     r1,[r4,#0]            ;5204  ; Content_ioInt
0002b6  203e              MOVS     r0,#0x3e              ;5204
0002b8  f7fffffe          BL       SPI_1BYT_SetTx_Isr
                  |L81.700|
0002bc  4c0c              LDR      r4,|L81.752|
0002be  1ca0              ADDS     r0,r4,#2              ;5206
0002c0  f7fffffe          BL       RF_LE_HeaderStsLen_Tx
0002c4  78e0              LDRB     r0,[r4,#3]            ;5207  ; LL_Para_Interval
0002c6  2800              CMP      r0,#0                 ;5207
0002c8  d006              BEQ      |L81.728|
0002ca  7861              LDRB     r1,[r4,#1]            ;5209  ; LL_Para_Interval
0002cc  1d20              ADDS     r0,r4,#4              ;5209
0002ce  f7fffffe          BL       RF_TxFIFO_LeData_set
0002d2  4906              LDR      r1,|L81.748|
0002d4  2001              MOVS     r0,#1                 ;5210
0002d6  7088              STRB     r0,[r1,#2]            ;5210
                  |L81.728|
0002d8  4902              LDR      r1,|L81.740|
0002da  9800              LDR      r0,[sp,#0]            ;5213
0002dc  5808              LDR      r0,[r1,r0]            ;5213
0002de  b003              ADD      sp,sp,#0xc
0002e0  bdf0              POP      {r4-r7,pc}
;;;5215   
                          ENDP

0002e2  0000              DCW      0x0000
                  |L81.740|
                          DCD      ||.bss||+0x3f0
                  |L81.744|
                          DCD      ||.data||+0x5c
                  |L81.748|
                          DCD      ||.data||
                  |L81.752|
                          DCD      ||.bss||+0x43c
                  |L81.756|
                          DCD      Content_ioInt

                          AREA ||i.LL_CheckConnExist||, CODE, READONLY, ALIGN=2

                  LL_CheckConnExist PROC
;;;945    
;;;946    Uint8 LL_CheckConnExist(Uint8 LL_Conn_ID)
000000  2188              MOVS     r1,#0x88
;;;947    {
;;;948    #ifdef LL_PATCH_FOR_CONNECTIOM_COMPLETE_SEND_CONNECT_UPDATE_REQ
;;;949        if(LL_Conn_Para[LL_Conn_ID].LE_Conn_Para.LL_Conn_ID < LL_CONN_ID_ADV)
000002  4348              MULS     r0,r1,r0
000004  4903              LDR      r1,|L82.20|
000006  5c08              LDRB     r0,[r1,r0]
000008  2802              CMP      r0,#2
00000a  d201              BCS      |L82.16|
;;;950    #else
;;;951        if(LL_Conn_Para[LL_Conn_ID].LE_Conn_Para.LL_Conn_ID < LL_CONN_ID_CONN)
;;;952    #endif
;;;953        {
;;;954            return NO_;
00000c  2000              MOVS     r0,#0
;;;955        }
;;;956        else
;;;957        {
;;;958            return YES_;
;;;959        }
;;;960    }
00000e  4770              BX       lr
                  |L82.16|
000010  2001              MOVS     r0,#1                 ;958
000012  4770              BX       lr
;;;961    
                          ENDP

                  |L82.20|
                          DCD      ||.bss||+0xd0

                          AREA ||i.LL_Data2ConnTxFIFO||, CODE, READONLY, ALIGN=2

                  LL_Data2ConnTxFIFO PROC
;;;962    
;;;963    Uint8 LL_Data2ConnTxFIFO(Uint8 connID, Uint8 *Data, Uint8 Length)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;964    {
000002  4615              MOV      r5,r2
;;;965        MBLK *mblk;
;;;966        MBLK *pmblk;
;;;967        MQUEUE *pqueue;
;;;968        Uint8 DataIdx, len;
;;;969    
;;;970        if(LL_CheckConnExist(connID) == NO_)
000004  9800              LDR      r0,[sp,#0]
000006  f7fffffe          BL       LL_CheckConnExist
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L83.40|
;;;971        {
;;;972            return FAIL_;
;;;973        }
;;;974        mblk = GetMsgBlk_L2_wSize(Length);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       GetMsgBlk_L2_wSize
000014  0006              MOVS     r6,r0
;;;975        if(mblk == (MBLK *)0)
000016  d007              BEQ      |L83.40|
000018  2000              MOVS     r0,#0
;;;976        {
;;;977            return FAIL_;
;;;978        }
;;;979    
;;;980    #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS
;;;981        if(Length<=LEN_LL_PATCH_MIC_FAIL_CONDITION)
00001a  2d07              CMP      r5,#7
00001c  d801              BHI      |L83.34|
;;;982        {
;;;983            mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Length_CCM = 0;
00001e  2121              MOVS     r1,#0x21
000020  5588              STRB     r0,[r1,r6]
                  |L83.34|
;;;984        }
;;;985    #endif
;;;986    
;;;987        pmblk = mblk;
000022  4634              MOV      r4,r6
;;;988    
;;;989        DataIdx = 0;
000024  2700              MOVS     r7,#0
;;;990        while(Length)
000026  e01b              B        |L83.96|
                  |L83.40|
000028  2001              MOVS     r0,#1                 ;977
;;;991        {
;;;992            if(Length >= SIZE_MBLK_ACL_DATA_UNIT)
;;;993            {
;;;994                len = SIZE_MBLK_ACL_DATA_UNIT;
;;;995                Length -= SIZE_MBLK_ACL_DATA_UNIT;
;;;996            }
;;;997            else
;;;998            {
;;;999                len = Length;
;;;1000               Length = 0;
;;;1001           }
;;;1002           pmblk->Primitive = HCLL_LE_ACL_DATA_PKT_EXTEND;
;;;1003           pmblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = len;
;;;1004           pmblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = len;
;;;1005           pmblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
;;;1006           Knl_MemCpy(pmblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, (Data+DataIdx), len);
;;;1007   
;;;1008           if(pmblk->Next != (MBLK *)0)
;;;1009           {
;;;1010               pmblk = pmblk->Next;
;;;1011               DataIdx += SIZE_MBLK_ACL_DATA_UNIT;
;;;1012           }
;;;1013       }
;;;1014       mblk->Primitive = HCLL_LE_ACL_DATA_PKT;
;;;1015   
;;;1016       InterruptDisable();
;;;1017       if(LL_CheckConnExist(connID) == NO_)
;;;1018       {
;;;1019           FreeMsgBlks(mblk);
;;;1020           InterruptEnable();
;;;1021           return FAIL_;
;;;1022       }
;;;1023       else
;;;1024       {
;;;1025           pqueue = &LL_ConnDataQ[connID];
;;;1026           if (pqueue->QIn == (MBLK *)0)
;;;1027           {
;;;1028               pqueue->QOut = mblk;
;;;1029           }
;;;1030           else
;;;1031           {
;;;1032               (pqueue->QIn)->Next = (MBLK *)mblk;
;;;1033           }
;;;1034           pqueue->QIn = pmblk;
;;;1035           InterruptEnable();
;;;1036           return SUCCESS_;
;;;1037       }
;;;1038   }
00002a  bdfe              POP      {r1-r7,pc}
                  |L83.44|
00002c  2d29              CMP      r5,#0x29              ;992
00002e  d303              BCC      |L83.56|
000030  2229              MOVS     r2,#0x29              ;994
000032  3d29              SUBS     r5,r5,#0x29           ;994
000034  b2ed              UXTB     r5,r5                 ;995
000036  e001              B        |L83.60|
                  |L83.56|
000038  462a              MOV      r2,r5                 ;999
00003a  2500              MOVS     r5,#0                 ;1000
                  |L83.60|
00003c  20f0              MOVS     r0,#0xf0              ;1002
00003e  7120              STRB     r0,[r4,#4]            ;1002
000040  72a2              STRB     r2,[r4,#0xa]          ;1003
000042  7262              STRB     r2,[r4,#9]            ;1004
000044  2000              MOVS     r0,#0                 ;1005
000046  7220              STRB     r0,[r4,#8]            ;1005
000048  9801              LDR      r0,[sp,#4]            ;1006
00004a  19c1              ADDS     r1,r0,r7              ;1006
00004c  4620              MOV      r0,r4                 ;1006
00004e  300b              ADDS     r0,r0,#0xb            ;1006
000050  f7fffffe          BL       Knl_MemCpy
000054  6820              LDR      r0,[r4,#0]            ;1008
000056  2800              CMP      r0,#0                 ;1008
000058  d002              BEQ      |L83.96|
00005a  3729              ADDS     r7,r7,#0x29           ;1010
00005c  4604              MOV      r4,r0                 ;1010
00005e  b2ff              UXTB     r7,r7                 ;1011
                  |L83.96|
000060  2d00              CMP      r5,#0                 ;990
000062  d1e3              BNE      |L83.44|
000064  20e6              MOVS     r0,#0xe6              ;1014
000066  7130              STRB     r0,[r6,#4]            ;1014
000068  b672              CPSID    i                     ;1016
00006a  9800              LDR      r0,[sp,#0]            ;1017
00006c  f7fffffe          BL       LL_CheckConnExist
000070  2800              CMP      r0,#0                 ;1017
000072  d00b              BEQ      |L83.140|
000074  9800              LDR      r0,[sp,#0]            ;1025
000076  4909              LDR      r1,|L83.156|
000078  00c0              LSLS     r0,r0,#3              ;1025
00007a  1840              ADDS     r0,r0,r1              ;1025
00007c  6801              LDR      r1,[r0,#0]            ;1026
00007e  2900              CMP      r1,#0                 ;1026
000080  d009              BEQ      |L83.150|
000082  600e              STR      r6,[r1,#0]            ;1032
                  |L83.132|
000084  6004              STR      r4,[r0,#0]            ;1035
000086  b662              CPSIE    i                     ;1035
000088  2000              MOVS     r0,#0                 ;1036
00008a  bdfe              POP      {r1-r7,pc}
                  |L83.140|
00008c  4630              MOV      r0,r6                 ;1019
00008e  f7fffffe          BL       FreeMsgBlks
000092  b662              CPSIE    i                     ;1020
000094  e7c8              B        |L83.40|
                  |L83.150|
000096  6046              STR      r6,[r0,#4]            ;1028
000098  e7f4              B        |L83.132|
;;;1039   
                          ENDP

00009a  0000              DCW      0x0000
                  |L83.156|
                          DCD      ||.bss||+0x378

                          AREA ||i.LL_Data2ConnTxFIFO_smp||, CODE, READONLY, ALIGN=2

                  LL_Data2ConnTxFIFO_smp PROC
;;;1040   
;;;1041   Uint8 LL_Data2ConnTxFIFO_smp(Uint8 connID, Uint8 *Data, Uint8 Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1042   {
000002  4615              MOV      r5,r2
000004  460f              MOV      r7,r1
000006  4606              MOV      r6,r0
;;;1043       MBLK *mblk;
;;;1044       MQUEUE *pqueue;
;;;1045   
;;;1046       if(LL_CheckConnExist(connID) == NO_)
000008  f7fffffe          BL       LL_CheckConnExist
00000c  2800              CMP      r0,#0
00000e  d024              BEQ      |L84.90|
;;;1047       {
;;;1048           return FAIL_;
;;;1049       }
;;;1050       mblk = GetMsgBlk();
000010  f7fffffe          BL       GetMsgBlk
000014  0004              MOVS     r4,r0
;;;1051       if(mblk == (MBLK *)0)
000016  d020              BEQ      |L84.90|
000018  2000              MOVS     r0,#0
;;;1052       {
;;;1053           return FAIL_;
;;;1054       }
;;;1055   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS
;;;1056       if(Length<=LEN_LL_PATCH_MIC_FAIL_CONDITION)
00001a  2d07              CMP      r5,#7
00001c  d801              BHI      |L84.34|
;;;1057       {
;;;1058           mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Length_CCM = 0;
00001e  2121              MOVS     r1,#0x21
000020  5508              STRB     r0,[r1,r4]
                  |L84.34|
;;;1059       }
;;;1060   #endif
;;;1061   
;;;1062       mblk->Primitive = HCLL_LE_ACL_DATA_PKT;
000022  21e6              MOVS     r1,#0xe6
000024  7121              STRB     r1,[r4,#4]
;;;1063       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = Length;
000026  72a5              STRB     r5,[r4,#0xa]
;;;1064       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = Length;
000028  7265              STRB     r5,[r4,#9]
;;;1065       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
00002a  7220              STRB     r0,[r4,#8]
;;;1066       Knl_MemCpy(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, Data, Length);
00002c  4620              MOV      r0,r4
00002e  462a              MOV      r2,r5
000030  4639              MOV      r1,r7
000032  300b              ADDS     r0,r0,#0xb
000034  f7fffffe          BL       Knl_MemCpy
;;;1067   
;;;1068       InterruptDisable();
000038  b672              CPSID    i
;;;1069       if(LL_CheckConnExist(connID) == NO_)
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       LL_CheckConnExist
000040  2800              CMP      r0,#0
000042  d00c              BEQ      |L84.94|
;;;1070       {
;;;1071           SndMsgBlk(mblk, Q_2LL);
;;;1072           InterruptEnable();
;;;1073           return FAIL_;
;;;1074       }
;;;1075       else
;;;1076       {
;;;1077           pqueue = &LL_ConnDataQ[connID];
000044  490a              LDR      r1,|L84.112|
000046  00f0              LSLS     r0,r6,#3
000048  1840              ADDS     r0,r0,r1
;;;1078           if (pqueue->QIn == (MBLK *)0)
00004a  6801              LDR      r1,[r0,#0]
00004c  2900              CMP      r1,#0
00004e  d00c              BEQ      |L84.106|
;;;1079           {
;;;1080               pqueue->QOut = mblk;
;;;1081           }
;;;1082           else
;;;1083           {
;;;1084               (pqueue->QIn)->Next = (MBLK *)mblk;
000050  600c              STR      r4,[r1,#0]
                  |L84.82|
;;;1085           }
;;;1086           pqueue->QIn = mblk;
;;;1087           InterruptEnable();
000052  6004              STR      r4,[r0,#0]
000054  b662              CPSIE    i
;;;1088           return SUCCESS_;
000056  2000              MOVS     r0,#0
;;;1089       }
;;;1090   }
000058  bdf8              POP      {r3-r7,pc}
                  |L84.90|
00005a  2001              MOVS     r0,#1                 ;1053
00005c  bdf8              POP      {r3-r7,pc}
                  |L84.94|
00005e  2100              MOVS     r1,#0                 ;1071
000060  4620              MOV      r0,r4                 ;1071
000062  f7fffffe          BL       SndMsgBlk
000066  b662              CPSIE    i                     ;1072
000068  e7f7              B        |L84.90|
                  |L84.106|
00006a  6044              STR      r4,[r0,#4]            ;1080
00006c  e7f1              B        |L84.82|
;;;1091   
                          ENDP

00006e  0000              DCW      0x0000
                  |L84.112|
                          DCD      ||.bss||+0x378

                          AREA ||i.LL_Data2ConnTxFIFO_smp_Isr||, CODE, READONLY, ALIGN=2

                  LL_Data2ConnTxFIFO_smp_Isr PROC
;;;1092   
;;;1093   Uint8 LL_Data2ConnTxFIFO_smp_Isr(Uint8 connID, Uint8 *Data, Uint8 Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1094   {
000002  4615              MOV      r5,r2
000004  460f              MOV      r7,r1
000006  4606              MOV      r6,r0
;;;1095       MBLK *mblk;
;;;1096       MQUEUE *pqueue;
;;;1097   
;;;1098       mblk = GetMsgBlk_Isr();
000008  f7fffffe          BL       GetMsgBlk_Isr
00000c  0004              MOVS     r4,r0
;;;1099       if(mblk == (MBLK *)0)
00000e  d019              BEQ      |L85.68|
000010  2000              MOVS     r0,#0
;;;1100       {
;;;1101           return FAIL_;
;;;1102       }
;;;1103   #ifdef LL_PATCH_MIC_FAIL_DATA_SIZE_LESS
;;;1104       if(Length<=LEN_LL_PATCH_MIC_FAIL_CONDITION)
000012  2d07              CMP      r5,#7
000014  d801              BHI      |L85.26|
;;;1105       {
;;;1106           mblk->Para.LLEC_LE_CCM_Manual_Para.HCI_DataPkt_Length_CCM = 0;
000016  2121              MOVS     r1,#0x21
000018  5508              STRB     r0,[r1,r4]
                  |L85.26|
;;;1107       }
;;;1108   #endif
;;;1109   
;;;1110       mblk->Primitive = HCLL_LE_ACL_DATA_PKT;
00001a  21e6              MOVS     r1,#0xe6
00001c  7121              STRB     r1,[r4,#4]
;;;1111       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_LthL = Length;
00001e  72a5              STRB     r5,[r4,#0xa]
;;;1112       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx0 = Length;
000020  7265              STRB     r5,[r4,#9]
;;;1113       mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_Data_Idx1 = 0;
000022  7220              STRB     r0,[r4,#8]
;;;1114       Knl_MemCpy_Isr(mblk->Para.HCLL_LE_ACL_Data_Pkt_Extend_Para.HCI_DataPkt_Data, Data, Length);
000024  4620              MOV      r0,r4
000026  462a              MOV      r2,r5
000028  4639              MOV      r1,r7
00002a  300b              ADDS     r0,r0,#0xb
00002c  f7fffffe          BL       Knl_MemCpy_Isr
;;;1115   
;;;1116       pqueue = &LL_ConnDataQ[connID];
000030  4906              LDR      r1,|L85.76|
000032  00f0              LSLS     r0,r6,#3
000034  1840              ADDS     r0,r0,r1
;;;1117       if (pqueue->QIn == (MBLK *)0)
000036  6801              LDR      r1,[r0,#0]
000038  2900              CMP      r1,#0
00003a  d005              BEQ      |L85.72|
;;;1118       {
;;;1119           pqueue->QOut = mblk;
;;;1120       }
;;;1121       else
;;;1122       {
;;;1123           (pqueue->QIn)->Next = (MBLK *)mblk;
00003c  600c              STR      r4,[r1,#0]
                  |L85.62|
;;;1124       }
;;;1125       pqueue->QIn = mblk;
;;;1126       return SUCCESS_;
00003e  6004              STR      r4,[r0,#0]
000040  2000              MOVS     r0,#0
;;;1127   }
000042  bdf8              POP      {r3-r7,pc}
                  |L85.68|
000044  2001              MOVS     r0,#1                 ;1101
000046  bdf8              POP      {r3-r7,pc}
                  |L85.72|
000048  6044              STR      r4,[r0,#4]            ;1119
00004a  e7f8              B        |L85.62|
;;;1128   
                          ENDP

                  |L85.76|
                          DCD      ||.bss||+0x378

                          AREA ||i.LL_EventCounter_Map_Upd||, CODE, READONLY, ALIGN=2

                  LL_EventCounter_Map_Upd PROC
;;;4745   
;;;4746   void LL_EventCounter_Map_Upd(Uint8 LL_Conn_No)
000000  b570              PUSH     {r4-r6,lr}
;;;4747   {
;;;4748       MBLK *mblk;
;;;4749   
;;;4750       if(LL_conn_pi->LE_Conn_Para.LL_EventCounter > LL_conn_pi->LE_Conn_Para.LL_EventCounterUpd)
000002  4d1d              LDR      r5,|L86.120|
000004  4604              MOV      r4,r0                 ;4747
000006  6a2a              LDR      r2,[r5,#0x20]  ; LL_conn_pi
000008  8b50              LDRH     r0,[r2,#0x1a]
00000a  8d91              LDRH     r1,[r2,#0x2c]
00000c  4288              CMP      r0,r1
00000e  d932              BLS      |L86.118|
;;;4751       {
;;;4752           switch(LL_conn_pi->LE_Conn_Para.LL_Conn_ID)
000010  7810              LDRB     r0,[r2,#0]
;;;4753           {
;;;4754           case LL_CONN_ID_LL_CHN_MAP_REQ:
;;;4755           case LL_CONN_ID_LL_CHN_MAP_REQ_RCVD:
;;;4756               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
000012  2304              MOVS     r3,#4
000014  2841              CMP      r0,#0x41              ;4752
000016  d00c              BEQ      |L86.50|
000018  4629              MOV      r1,r5                 ;4750
00001a  6a09              LDR      r1,[r1,#0x20]         ;4750
00001c  3160              ADDS     r1,r1,#0x60           ;4750
00001e  2858              CMP      r0,#0x58              ;4752
000020  d010              BEQ      |L86.68|
000022  2881              CMP      r0,#0x81              ;4752
000024  d005              BEQ      |L86.50|
000026  2898              CMP      r0,#0x98              ;4752
000028  d125              BNE      |L86.118|
;;;4757               LL_Msg_Map_Upd(LL_Conn_No);
;;;4758               break;
;;;4759   
;;;4760           case LL_CONN_ID_LL_PHY_UPDATE_IND_RCVD:
;;;4761               if(LL_conn_pi->LE_Conn_Para.LL_Tx_PHYsUpd == 0)
00002a  7d88              LDRB     r0,[r1,#0x16]
00002c  2800              CMP      r0,#0
00002e  d008              BEQ      |L86.66|
000030  e008              B        |L86.68|
                  |L86.50|
000032  7013              STRB     r3,[r2,#0]            ;4756
000034  f7fffffe          BL       GetMsgBlk_Isr
000038  21e9              MOVS     r1,#0xe9              ;4756
00003a  7101              STRB     r1,[r0,#4]            ;4756
00003c  7204              STRB     r4,[r0,#8]            ;4756
00003e  2100              MOVS     r1,#0                 ;4756
000040  e017              B        |L86.114|
                  |L86.66|
;;;4762               {
;;;4763                   LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
000042  7013              STRB     r3,[r2,#0]
                  |L86.68|
;;;4764   //                break;
;;;4765               }
;;;4766           case LL_CONN_ID_LL_PHY_UPDATE_IND:
;;;4767               LL_conn_pi->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_CONN;
000044  7013              STRB     r3,[r2,#0]
;;;4768               if(LL_conn_pi->LE_Conn_Para.LL_Tx_PHYsUpd)
000046  7d88              LDRB     r0,[r1,#0x16]
000048  2600              MOVS     r6,#0
00004a  2800              CMP      r0,#0
00004c  d004              BEQ      |L86.88|
;;;4769               {
;;;4770                   LL_conn_pi->LE_Conn_Para.LL_Tx_PHYS = LL_conn_pi->LE_Conn_Para.LL_Tx_PHYsUpd;
00004e  7748              STRB     r0,[r1,#0x1d]
;;;4771                   LL_conn_pi->LE_Conn_Para.LL_Rx_PHYS = LL_conn_pi->LE_Conn_Para.LL_Rx_PHYsUpd;
000050  7dc8              LDRB     r0,[r1,#0x17]
000052  7788              STRB     r0,[r1,#0x1e]
;;;4772                   LL_conn_pi->LE_Conn_Para.LL_Tx_PHYsUpd = 0;
000054  758e              STRB     r6,[r1,#0x16]
;;;4773                   LL_conn_pi->LE_Conn_Para.LL_Rx_PHYsUpd = 0;
000056  75ce              STRB     r6,[r1,#0x17]
                  |L86.88|
;;;4774               }
;;;4775               mblk = GetMsgBlk_Isr();
000058  f7fffffe          BL       GetMsgBlk_Isr
;;;4776               mblk->Primitive = MHC_EVENT_LE_PHY_UPDATE_COMPLETE;
00005c  2174              MOVS     r1,#0x74
00005e  7101              STRB     r1,[r0,#4]
;;;4777               mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Status = HCI_ERR_CODE_SUCCESS;
000060  7286              STRB     r6,[r0,#0xa]
;;;4778               mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Conn_Hdl_L = LL_Conn_No;
000062  72c4              STRB     r4,[r0,#0xb]
;;;4779               mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_TX_PHY = LL_conn_pi->LE_Conn_Para.LL_Tx_PHYS;
000064  6a29              LDR      r1,[r5,#0x20]  ; LL_conn_pi
000066  3160              ADDS     r1,r1,#0x60
000068  7f4a              LDRB     r2,[r1,#0x1d]
00006a  7302              STRB     r2,[r0,#0xc]
;;;4780               mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_RX_PHY = LL_conn_pi->LE_Conn_Para.LL_Tx_PHYS;
00006c  7f49              LDRB     r1,[r1,#0x1d]
00006e  7341              STRB     r1,[r0,#0xd]
;;;4781               SndMsgBlk_Isr(mblk, Q_2HCI);
000070  2104              MOVS     r1,#4
                  |L86.114|
000072  f7fffffe          BL       SndMsgBlk_Isr
                  |L86.118|
;;;4782               break;
;;;4783   
;;;4784           default:
;;;4785               break;
;;;4786           }
;;;4787       }
;;;4788   }
000076  bd70              POP      {r4-r6,pc}
;;;4789   
                          ENDP

                  |L86.120|
                          DCD      ||.data||

                          AREA ||i.LL_GPIO_Isr||, CODE, READONLY, ALIGN=2

                  LL_GPIO_Isr PROC
;;;9196   
;;;9197   void LL_GPIO_Isr(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;9198   {
;;;9199       uint8_t i;
;;;9200       extern void LLTimer_Isr(void);
;;;9201       extern void LLWTR_Isr(void);
;;;9202       extern uint8_t Content_ioInt;
;;;9203       extern uint8_t Content_ioInt_exceptTmr;
;;;9204   
;;;9205   #ifdef _APP_CURRENT_TEST_
;;;9206       extern Uint8 rt568Wakeup;
;;;9207   #endif
;;;9208   
;;;9209       extern void RF_DC_Rstr_Isr(void);
;;;9210   
;;;9211       // set wakeup flag
;;;9212       FT_WakeupFlag = 1;
000002  4930              LDR      r1,|L87.196|
000004  2001              MOVS     r0,#1
000006  7048              STRB     r0,[r1,#1]
;;;9213       RF_DC_Rstr_Isr();
000008  f7fffffe          BL       RF_DC_Rstr_Isr
;;;9214   
;;;9215   
;;;9216       //#ifdef _SW_PATCH_MP_
;;;9217       if(ble_device_param.ble_deviceChipId==MP_A1)
00000c  482e              LDR      r0,|L87.200|
;;;9218       {
;;;9219           //i = (SPI_1BYT_SetRx_Isr(RFIP_REG_62)&INT_SETTING_R);    //read current INT status
;;;9220           while(1)
;;;9221           {
;;;9222               i = SPI_1BYT_SetRx_Isr(RFIP_REG_62);    //read current INT status
;;;9223               if((i&(~INT_SETTING_R))==0)
;;;9224                   break;
;;;9225           }
;;;9226           i&=INT_SETTING_R;
00000e  2655              MOVS     r6,#0x55
000010  7800              LDRB     r0,[r0,#0]            ;9217  ; ble_device_param
;;;9227   
;;;9228           InterruptDisable();
;;;9229           if(i)     //if not 0
;;;9230           {
;;;9231               Content_ioInt = i;                      //store current INT status
000012  4d2e              LDR      r5,|L87.204|
000014  2866              CMP      r0,#0x66              ;9217
000016  d02b              BEQ      |L87.112|
;;;9232               if(i&(~REG_62_WAKEUP))
;;;9233               {
;;;9234                   Content_ioInt_exceptTmr = (i&(~REG_62_WAKEUP));
;;;9235               }
;;;9236               SPI_1BYT_SetTx_Isr(RFIP_REG_62, i);     //Read and clear interrupt status, 2/2
;;;9237           }
;;;9238           else      //if(int status==0)
;;;9239           {
;;;9240               //check previous int status
;;;9241               if(Content_ioInt&REG_62_WAKEUP)                 //if(last one is WAKEUP)
;;;9242               {
;;;9243                   if(Content_ioInt == REG_62_WAKEUP)          //if(last one is WAKEUP)
;;;9244                   {
;;;9245                       //i = ((INT_SETTING_R&(~REG_62_WAKEUP))&(~Content_ioInt_exceptTmr));   //set this one as TX_END or RX_END
;;;9246                       //i = ((~Content_ioInt_exceptTmr)&(INT_SETTING_R&(~REG_62_WAKEUP)));   //set this one as TX_END or RX_END
;;;9247                       switch(Content_ioInt_exceptTmr)
;;;9248                       {
;;;9249                       case REG_62_HEADER_RDY:
;;;9250                           i = REG_62_RX_END;
;;;9251                           break;
;;;9252   
;;;9253                       case REG_62_TX_END:
;;;9254                           i = REG_62_HEADER_RDY;
;;;9255                           break;
;;;9256   
;;;9257                       case REG_62_RX_END:
;;;9258                           i = REG_62_TX_END;
;;;9259                           break;
;;;9260   
;;;9261                       default:
;;;9262                           i = 0;
;;;9263                           break;
;;;9264                       }
;;;9265                   }
;;;9266               }
;;;9267               else                                            //else
;;;9268               {
;;;9269                   i = REG_62_WAKEUP;                          //set this one as WAKEUP
;;;9270               }
;;;9271           }
;;;9272       }
;;;9273       else  //not apply patch
;;;9274       {
;;;9275           i = (SPI_1BYT_SetRx_Isr(RFIP_REG_62)&INT_SETTING_R);    //Read and clear interrupt status, 1/2
000018  203e              MOVS     r0,#0x3e
00001a  f7fffffe          BL       SPI_1BYT_SetRx_Isr
00001e  4030              ANDS     r0,r0,r6
000020  4604              MOV      r4,r0
;;;9276   
;;;9277           InterruptDisable();
000022  b672              CPSID    i
;;;9278           SPI_1BYT_SetTx_Isr(RFIP_REG_62, i);                     //Read and clear interrupt status, 2/2
000024  4601              MOV      r1,r0
000026  203e              MOVS     r0,#0x3e
000028  f7fffffe          BL       SPI_1BYT_SetTx_Isr
                  |L87.44|
;;;9279       }
;;;9280       InterruptEnable();
00002c  b662              CPSIE    i
;;;9281       if((i&REG_62_WAKEUP))                           //if INT is WAKEUP
00002e  0660              LSLS     r0,r4,#25
000030  d505              BPL      |L87.62|
;;;9282       {
;;;9283           InterruptDisable();
000032  b672              CPSID    i
;;;9284   #ifdef _APP_CURRENT_TEST_
;;;9285           rt568Wakeup = 1;
;;;9286   #else
;;;9287           LLTimerFIFOGetSend_Isr();
000034  f7fffffe          BL       LLTimerFIFOGetSend_Isr
;;;9288           LLTimer_Isr();
000038  f7fffffe          BL       LLTimer_Isr
;;;9289   #endif
;;;9290           InterruptEnable();
00003c  b662              CPSIE    i
                  |L87.62|
;;;9291       }
;;;9292       if((i&REG_62_HEADER_RDY))
00003e  07e0              LSLS     r0,r4,#31
000040  d003              BEQ      |L87.74|
;;;9293       {
;;;9294           InterruptDisable();
000042  b672              CPSID    i
;;;9295           LLHeaderRdy_Isr();
000044  f7fffffe          BL       LLHeaderRdy_Isr
;;;9296           InterruptEnable();
000048  b662              CPSIE    i
                  |L87.74|
;;;9297       }
;;;9298   
;;;9299       if((i&(INT_SETTING_R&(~(REG_62_WAKEUP|REG_62_HEADER_RDY)))))        //if INT is TX_END or RX_END
00004a  2014              MOVS     r0,#0x14
00004c  4204              TST      r4,r0
00004e  d00e              BEQ      |L87.110|
;;;9300       {
;;;9301           if((i&REG_62_TX_END))
000050  0760              LSLS     r0,r4,#29
000052  d506              BPL      |L87.98|
;;;9302           {
;;;9303               RF_FIFOrst();
000054  481e              LDR      r0,|L87.208|
000056  7a01              LDRB     r1,[r0,#8]  ; RFIP_reg_MEM
000058  20c0              MOVS     r0,#0xc0
00005a  4301              ORRS     r1,r1,r0
00005c  206b              MOVS     r0,#0x6b
00005e  f7fffffe          BL       SPI_1BYT_SetTx_Isr
                  |L87.98|
;;;9304           }
;;;9305           InterruptDisable();
000062  b672              CPSID    i
;;;9306   #ifdef _APP_CURRENT_TEST_
;;;9307           rt568Wakeup = 1;
;;;9308   #else
;;;9309   #if 1
;;;9310           Content_ioInt = 0;
000064  2000              MOVS     r0,#0
000066  7028              STRB     r0,[r5,#0]
;;;9311   #endif  //(1)
;;;9312           LLWTR_Isr();
000068  f7fffffe          BL       LLWTR_Isr
;;;9313   
;;;9314   #endif
;;;9315           InterruptEnable();
00006c  b662              CPSIE    i
                  |L87.110|
;;;9316       }
;;;9317   }
00006e  bdf8              POP      {r3-r7,pc}
                  |L87.112|
000070  27aa              MOVS     r7,#0xaa              ;9223
                  |L87.114|
000072  203e              MOVS     r0,#0x3e              ;9222
000074  f7fffffe          BL       SPI_1BYT_SetRx_Isr
000078  4604              MOV      r4,r0                 ;9222
00007a  4238              TST      r0,r7                 ;9223
00007c  d1f9              BNE      |L87.114|
00007e  4034              ANDS     r4,r4,r6              ;9226
000080  b672              CPSID    i                     ;9228
000082  4914              LDR      r1,|L87.212|
000084  d00a              BEQ      |L87.156|
000086  4620              MOV      r0,r4                 ;9232
000088  22bf              MOVS     r2,#0xbf              ;9232
00008a  702c              STRB     r4,[r5,#0]            ;9231
00008c  4010              ANDS     r0,r0,r2              ;9232
00008e  d000              BEQ      |L87.146|
000090  7008              STRB     r0,[r1,#0]            ;9234
                  |L87.146|
000092  4621              MOV      r1,r4                 ;9236
000094  203e              MOVS     r0,#0x3e              ;9236
000096  f7fffffe          BL       SPI_1BYT_SetTx_Isr
00009a  e7c7              B        |L87.44|
                  |L87.156|
00009c  7828              LDRB     r0,[r5,#0]            ;9241  ; Content_ioInt
00009e  0642              LSLS     r2,r0,#25             ;9241
0000a0  d50e              BPL      |L87.192|
0000a2  2840              CMP      r0,#0x40              ;9243
0000a4  d1c2              BNE      |L87.44|
0000a6  7808              LDRB     r0,[r1,#0]            ;9247  ; Content_ioInt_exceptTmr
0000a8  2801              CMP      r0,#1                 ;9247
0000aa  d005              BEQ      |L87.184|
0000ac  2804              CMP      r0,#4                 ;9247
0000ae  d005              BEQ      |L87.188|
0000b0  2810              CMP      r0,#0x10              ;9247
0000b2  d1bb              BNE      |L87.44|
0000b4  2404              MOVS     r4,#4                 ;9258
0000b6  e7b9              B        |L87.44|
                  |L87.184|
0000b8  2410              MOVS     r4,#0x10              ;9250
0000ba  e7b7              B        |L87.44|
                  |L87.188|
0000bc  2401              MOVS     r4,#1                 ;9254
0000be  e7b5              B        |L87.44|
                  |L87.192|
0000c0  2440              MOVS     r4,#0x40              ;9269
0000c2  e7b3              B        |L87.44|
;;;9318   
                          ENDP

                  |L87.196|
                          DCD      ||.data||
                  |L87.200|
                          DCD      ble_device_param
                  |L87.204|
                          DCD      Content_ioInt
                  |L87.208|
                          DCD      RFIP_reg_MEM
                  |L87.212|
                          DCD      Content_ioInt_exceptTmr

                          AREA ||i.LL_GetMasterFreeConnID||, CODE, READONLY, ALIGN=2

                  LL_GetMasterFreeConnID PROC
;;;818    #if MAX_NUM_CONN_MAS_HDL != 0
;;;819    Uint8 LL_GetMasterFreeConnID(void)
000000  4905              LDR      r1,|L88.24|
;;;820    {
;;;821        Uint8 i;
;;;822    
;;;823        for(i=0; i<MAX_NUM_CONN_MAS_HDL; i++)
000002  2000              MOVS     r0,#0
                  |L88.4|
;;;824        {
;;;825            if(LL_Conn_Para[i].LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_STBY)
000004  2288              MOVS     r2,#0x88
000006  4342              MULS     r2,r0,r2
000008  5c8a              LDRB     r2,[r1,r2]
00000a  2a01              CMP      r2,#1
00000c  d003              BEQ      |L88.22|
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0                 ;823
000012  2804              CMP      r0,#4                 ;823
000014  d3f6              BCC      |L88.4|
                  |L88.22|
;;;826            {
;;;827                break;
;;;828            }
;;;829        }
;;;830        return i;
;;;831    }
000016  4770              BX       lr
;;;832    #endif  //(#if MAX_NUM_CONN_MAS_HDL != 0)
                          ENDP

                  |L88.24|
                          DCD      ||.bss||+0xd0

                          AREA ||i.LL_GetSlaveFreeConnID||, CODE, READONLY, ALIGN=2

                  LL_GetSlaveFreeConnID PROC
;;;835    //#if MAX_NUM_CONN_SLV_HDL != 0
;;;836    Uint8 LL_GetSlaveFreeConnID(void)
000000  4905              LDR      r1,|L89.24|
;;;837    {
;;;838        Uint8 i;
;;;839    
;;;840        for(i=MAX_NUM_CONN_MAS_HDL; i<MAX_NUM_CONN_HDL; i++)
000002  2004              MOVS     r0,#4
                  |L89.4|
;;;841        {
;;;842            if(LL_Conn_Para[i].LE_Conn_Para.LL_Conn_ID == LL_CONN_ID_STBY)
000004  2288              MOVS     r2,#0x88
000006  4342              MULS     r2,r0,r2
000008  5c8a              LDRB     r2,[r1,r2]
00000a  2a01              CMP      r2,#1
00000c  d003              BEQ      |L89.22|
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0                 ;840
000012  2805              CMP      r0,#5                 ;840
000014  d3f6              BCC      |L89.4|
                  |L89.22|
;;;843            {
;;;844                break;
;;;845            }
;;;846        }
;;;847        return i;
;;;848    }
000016  4770              BX       lr
;;;849    //#endif  //(#if MAX_NUM_CONN_SLV_HDL != 0)
                          ENDP

                  |L89.24|
                          DCD      ||.bss||+0xd0

                          AREA ||i.LL_MsgBlk_LL_conn_Para_Rls||, CODE, READONLY, ALIGN=2

                  LL_MsgBlk_LL_conn_Para_Rls PROC
;;;4656   
;;;4657   void LL_MsgBlk_LL_conn_Para_Rls(Uint8 ConnID)
000000  b570              PUSH     {r4-r6,lr}
;;;4658   {
;;;4659       MBLK *mblk;
;;;4660   
;;;4661       if(mblk_LL_conn_Para[ConnID] != (MBLK *)0)
000002  4d06              LDR      r5,|L90.28|
000004  0084              LSLS     r4,r0,#2
000006  5928              LDR      r0,[r5,r4]
000008  2800              CMP      r0,#0
00000a  d006              BEQ      |L90.26|
;;;4662       {
;;;4663           mblk = mblk_LL_conn_Para[ConnID];
;;;4664           mblk->Primitive = MLL_HCI_NULL;
00000c  21b0              MOVS     r1,#0xb0
00000e  7101              STRB     r1,[r0,#4]
;;;4665           SndMsgBlk_Isr(mblk, Q_2LL);
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       SndMsgBlk_Isr
;;;4666           mblk_LL_conn_Para[ConnID] = (MBLK *)0;
000016  2000              MOVS     r0,#0
000018  5128              STR      r0,[r5,r4]
                  |L90.26|
;;;4667       }
;;;4668   }
00001a  bd70              POP      {r4-r6,pc}
;;;4669   
                          ENDP

                  |L90.28|
                          DCD      ||.bss||+0x5c4

                          AREA ||i.LL_Msg_CTRL_PKT||, CODE, READONLY, ALIGN=1

                  LL_Msg_CTRL_PKT PROC
;;;1129   
;;;1130   void LL_Msg_CTRL_PKT(Uint8 *pParam, Uint8 OpcodeCtrl, Uint8 Len_Param, Uint8 ConnID)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1131   {
000002  b081              SUB      sp,sp,#4
000004  461e              MOV      r6,r3
000006  4615              MOV      r5,r2
000008  460f              MOV      r7,r1
;;;1132       MBLK *mblk;
;;;1133   
;;;1134       mblk = GetMsgBlk();
00000a  f7fffffe          BL       GetMsgBlk
00000e  4604              MOV      r4,r0
;;;1135       mblk->Primitive = HCLL_LE_CTRL_PKT;
000010  20e8              MOVS     r0,#0xe8
000012  7120              STRB     r0,[r4,#4]
;;;1136       mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_Conn_Hdl_L = ConnID;
000014  7226              STRB     r6,[r4,#8]
;;;1137       mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode = OpcodeCtrl;
;;;1138       mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL = Len_Param+1;
000016  1c68              ADDS     r0,r5,#1
000018  72e7              STRB     r7,[r4,#0xb]          ;1137
00001a  72a0              STRB     r0,[r4,#0xa]
;;;1139   
;;;1140       if(Len_Param)
00001c  2d00              CMP      r5,#0
00001e  d005              BEQ      |L91.44|
;;;1141       {
;;;1142           Knl_MemCpy(mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data, pParam, Len_Param);
000020  4620              MOV      r0,r4
000022  462a              MOV      r2,r5
000024  300c              ADDS     r0,r0,#0xc
000026  9901              LDR      r1,[sp,#4]
000028  f7fffffe          BL       Knl_MemCpy
                  |L91.44|
;;;1143       }
;;;1144       SndMsgBlk(mblk, Q_2LL);
00002c  2100              MOVS     r1,#0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SndMsgBlk
;;;1145   }
000034  b005              ADD      sp,sp,#0x14
000036  bdf0              POP      {r4-r7,pc}
;;;1146   
                          ENDP


                          AREA ||i.LL_Msg_CTRL_PKT_Isr||, CODE, READONLY, ALIGN=1

                  LL_Msg_CTRL_PKT_Isr PROC
;;;3833   #pragma Otime
;;;3834   void LL_Msg_CTRL_PKT_Isr(Uint8 *pParam, Uint8 OpcodeCtrl, Uint8 Len_Param, Uint8 ConnID)
000000  b5ff              PUSH     {r0-r7,lr}
;;;3835   {
000002  b081              SUB      sp,sp,#4
000004  461e              MOV      r6,r3
000006  4615              MOV      r5,r2
000008  460f              MOV      r7,r1
;;;3836       MBLK *mblk;
;;;3837   
;;;3838       mblk = GetMsgBlk_Isr();
00000a  f7fffffe          BL       GetMsgBlk_Isr
00000e  4604              MOV      r4,r0
;;;3839       mblk->Primitive = HCLL_LE_CTRL_PKT;
000010  20e8              MOVS     r0,#0xe8
000012  7120              STRB     r0,[r4,#4]
;;;3840       mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_Conn_Hdl_L = ConnID;
000014  7226              STRB     r6,[r4,#8]
;;;3841       mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode = OpcodeCtrl;
;;;3842       mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_DataPkt_LthL = Len_Param+1;
000016  1c68              ADDS     r0,r5,#1
000018  72e7              STRB     r7,[r4,#0xb]          ;3841
00001a  72a0              STRB     r0,[r4,#0xa]
;;;3843   
;;;3844       if(Len_Param)
00001c  2d00              CMP      r5,#0
00001e  d005              BEQ      |L92.44|
;;;3845       {
;;;3846           Knl_MemCpy_Isr(mblk->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Data, pParam, Len_Param);
000020  4620              MOV      r0,r4
000022  462a              MOV      r2,r5
000024  300c              ADDS     r0,r0,#0xc
000026  9901              LDR      r1,[sp,#4]
000028  f7fffffe          BL       Knl_MemCpy_Isr
                  |L92.44|
;;;3847       }
;;;3848       SndMsgBlk_Isr(mblk, Q_2LL);
00002c  2100              MOVS     r1,#0
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       SndMsgBlk_Isr
;;;3849   }
000034  b005              ADD      sp,sp,#0x14
000036  bdf0              POP      {r4-r7,pc}
;;;3850   
                          ENDP


                          AREA ||i.LL_Msg_Event_Disconn_Complete||, CODE, READONLY, ALIGN=1

                  LL_Msg_Event_Disconn_Complete PROC
;;;4733   
;;;4734   void LL_Msg_Event_Disconn_Complete(Uint8 HCI_Reason, Uint8 HCI_Conn_Hdl_L)
000000  b570              PUSH     {r4-r6,lr}
;;;4735   {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;4736       MBLK *mblk;
;;;4737   
;;;4738       mblk = GetMsgBlk_Isr();
000006  f7fffffe          BL       GetMsgBlk_Isr
;;;4739       mblk->Para.MHC_Disconn_Complete_Para.HCI_Reason = HCI_Reason;
00000a  72c4              STRB     r4,[r0,#0xb]
;;;4740       mblk->Para.MHC_Disconn_Complete_Para.HCI_Conn_Hdl_L = HCI_Conn_Hdl_L;
00000c  7285              STRB     r5,[r0,#0xa]
;;;4741       mblk->Primitive = MHC_EVENT_DISCONN_COMPLETE;
00000e  2163              MOVS     r1,#0x63
000010  7101              STRB     r1,[r0,#4]
;;;4742       SndMsgBlk_Isr(mblk, Q_2HCI);
000012  2104              MOVS     r1,#4
000014  f7fffffe          BL       SndMsgBlk_Isr
;;;4743   }
000018  bd70              POP      {r4-r6,pc}
;;;4744   
                          ENDP


                          AREA ||i.LL_Msg_Event_Encrypt_Change||, CODE, READONLY, ALIGN=1

                  LL_Msg_Event_Encrypt_Change PROC
;;;1177   
;;;1178   void LL_Msg_Event_Encrypt_Change(Uint8 HCI_Status, Uint8 ConnID, Uint8 HCI_Encrpt_En)
000000  b570              PUSH     {r4-r6,lr}
;;;1179   {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;1180       MBLK *mblk;
;;;1181   
;;;1182       mblk = GetMsgBlk();
000008  f7fffffe          BL       GetMsgBlk
;;;1183       mblk->Primitive = MHC_EVENT_ENCRYPT_CHANGE;
00000c  2166              MOVS     r1,#0x66
00000e  7101              STRB     r1,[r0,#4]
;;;1184       mblk->Para.MHC_Encrypt_Change_Para.HCI_Status = HCI_Status;
000010  7246              STRB     r6,[r0,#9]
;;;1185       mblk->Para.MHC_Encrypt_Change_Para.HCI_Conn_Hdl_L = ConnID;
000012  7285              STRB     r5,[r0,#0xa]
;;;1186       mblk->Para.MHC_Encrypt_Change_Para.HCI_Encrpt_En = HCI_Encrpt_En;
000014  72c4              STRB     r4,[r0,#0xb]
;;;1187   #ifdef _HCI_NEW_
;;;1188       SndMsgBlk(mblk, Q_2HCI);
000016  2104              MOVS     r1,#4
000018  f7fffffe          BL       SndMsgBlk
;;;1189   #endif
;;;1190   }
00001c  bd70              POP      {r4-r6,pc}
;;;1191   
                          ENDP


                          AREA ||i.LL_Msg_Event_Le_Data_Length_Change||, CODE, READONLY, ALIGN=1

                  LL_Msg_Event_Le_Data_Length_Change PROC
;;;1224   #else
;;;1225   void LL_Msg_Event_Le_Data_Length_Change(Uint8 ConnID, Uint8 Tx_length, Uint8 Rx_length)
000000  b570              PUSH     {r4-r6,lr}
;;;1226   {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;1227       MBLK *mblk;
;;;1228   
;;;1229       mblk = GetMsgBlk();
000008  f7fffffe          BL       GetMsgBlk
;;;1230       mblk->Primitive = MHC_EVENT_LE_DATA_LENGTH_CHANGE;
00000c  2173              MOVS     r1,#0x73
00000e  7101              STRB     r1,[r0,#4]
;;;1231       mblk->Para.MHC_Le_Data_Length_Change_Para.HCI_Conn_Hdl_L = ConnID;
000010  7286              STRB     r6,[r0,#0xa]
;;;1232       mblk->Para.MHC_Le_Data_Length_Change_Para.HCI_MaxTxOctets = Tx_length;
000012  8185              STRH     r5,[r0,#0xc]
;;;1233       mblk->Para.MHC_Le_Data_Length_Change_Para.HCI_MaxRxOctets = Rx_length;
000014  81c4              STRH     r4,[r0,#0xe]
;;;1234   #ifdef _HCI_NEW_
;;;1235       SndMsgBlk(mblk, Q_2HCI);
000016  2104              MOVS     r1,#4
000018  f7fffffe          BL       SndMsgBlk
;;;1236   #endif
;;;1237   }
00001c  bd70              POP      {r4-r6,pc}
;;;1238   #endif
                          ENDP


                          AREA ||i.LL_Msg_Event_Le_PHY_Update_Complete||, CODE, READONLY, ALIGN=1

                  LL_Msg_Event_Le_PHY_Update_Complete PROC
;;;1192   
;;;1193   void LL_Msg_Event_Le_PHY_Update_Complete(Uint8 HCI_Status, Uint8 ConnID, Uint8 LL_Phys)
000000  b570              PUSH     {r4-r6,lr}
;;;1194   {
000002  4614              MOV      r4,r2
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;1195       MBLK *mblk;
;;;1196   
;;;1197       mblk = GetMsgBlk();
000008  f7fffffe          BL       GetMsgBlk
;;;1198       mblk->Primitive = MHC_EVENT_LE_PHY_UPDATE_COMPLETE;
00000c  2174              MOVS     r1,#0x74
00000e  7101              STRB     r1,[r0,#4]
;;;1199       mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Status = HCI_Status;
000010  7286              STRB     r6,[r0,#0xa]
;;;1200       mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_Conn_Hdl_L = ConnID;
000012  72c5              STRB     r5,[r0,#0xb]
;;;1201       mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_TX_PHY = LL_Phys;
000014  7304              STRB     r4,[r0,#0xc]
;;;1202       mblk->Para.MHC_Le_PHY_Update_Complete_Para.HCI_RX_PHY = LL_Phys;
000016  7344              STRB     r4,[r0,#0xd]
;;;1203   #ifdef _HCI_NEW_
;;;1204       SndMsgBlk(mblk, Q_2HCI);
000018  2104              MOVS     r1,#4
00001a  f7fffffe          BL       SndMsgBlk
;;;1205   #endif
;;;1206   }
00001e  bd70              POP      {r4-r6,pc}
;;;1207   
                          ENDP


                          AREA ||i.LL_Msg_Event_Status||, CODE, READONLY, ALIGN=1

                  LL_Msg_Event_Status PROC
;;;1162   #else   //(#ifdef _HCI_HW_)
;;;1163   void LL_Msg_Event_Status(Uint8 HCI_Status, Uint8 By_Primitive)
000000  b570              PUSH     {r4-r6,lr}
;;;1164   {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;1165       MBLK *mblk;
;;;1166   
;;;1167       mblk = GetMsgBlk();
000006  f7fffffe          BL       GetMsgBlk
;;;1168       mblk->Primitive = MHC_EVENT_CMD_STATUS;
00000a  2162              MOVS     r1,#0x62
00000c  7101              STRB     r1,[r0,#4]
;;;1169       mblk->Para.MHC_Cmd_Status_Para.HCI_Status = HCI_Status;
00000e  7245              STRB     r5,[r0,#9]
;;;1170       mblk->Para.MHC_Cmd_Status_Para.By_Primitive = By_Primitive;
000010  72c4              STRB     r4,[r0,#0xb]
;;;1171   #ifdef _HCI_NEW_
;;;1172       SndMsgBlk(mblk, Q_2HCI);
000012  2104              MOVS     r1,#4
000014  f7fffffe          BL       SndMsgBlk
;;;1173   #endif
;;;1174   }
000018  bd70              POP      {r4-r6,pc}
;;;1175   #endif  //(#ifdef _HCI_HW_)
                          ENDP


                          AREA ||i.LL_Msg_Map_Upd||, CODE, READONLY, ALIGN=1

                  LL_Msg_Map_Upd PROC
;;;4722   
;;;4723   void LL_Msg_Map_Upd(Uint8 LL_Conn_No)
000000  b510              PUSH     {r4,lr}
;;;4724   {
000002  4604              MOV      r4,r0
;;;4725       MBLK *mblk;
;;;4726   
;;;4727       mblk = GetMsgBlk_Isr();
000004  f7fffffe          BL       GetMsgBlk_Isr
;;;4728       mblk->Primitive = MLL_LL_CHN_MAP_UPD;
000008  21e9              MOVS     r1,#0xe9
00000a  7101              STRB     r1,[r0,#4]
;;;4729       mblk->Para.MLL_LL_CHN_Map_Upd_Para.LL_Conn_No = LL_Conn_No;
00000c  7204              STRB     r4,[r0,#8]
;;;4730       SndMsgBlk_Isr(mblk, Q_2LL);
00000e  2100              MOVS     r1,#0
000010  f7fffffe          BL       SndMsgBlk_Isr
;;;4731   }
000014  bd10              POP      {r4,pc}
;;;4732   
                          ENDP


                          AREA ||i.LL_NextConnCh||, CODE, READONLY, ALIGN=2

                  LL_NextConnCh PROC
;;;4715   
;;;4716   void LL_NextConnCh(LL_Conn *LL_conn_pi)
000000  7f01              LDRB     r1,[r0,#0x1c]
;;;4717   {
;;;4718       LL_conn_pi->LE_Conn_Para.LL_CurrentCH = LL_RF_DATA_CH[LL_conn_pi->LE_Conn_Para.LL_CurrentCH + LL_conn_pi->LE_Conn_Para.LL_HopIncrement];
000002  7e42              LDRB     r2,[r0,#0x19]
000004  1889              ADDS     r1,r1,r2
000006  4a02              LDR      r2,|L99.16|
000008  5c51              LDRB     r1,[r2,r1]
00000a  7701              STRB     r1,[r0,#0x1c]
;;;4719   }
00000c  4770              BX       lr
;;;4720   //#pragma pop
                          ENDP

00000e  0000              DCW      0x0000
                  |L99.16|
                          DCD      ||.constdata||+0x90

                          AREA ||i.LL_Queue_To_Buffer_Isr||, CODE, READONLY, ALIGN=2

                  LL_Queue_To_Buffer_Isr PROC
;;;4834   
;;;4835   MBLK* LL_Queue_To_Buffer_Isr(Uint8 LL_Conn_ID)
000000  b430              PUSH     {r4,r5}
;;;4836   {
;;;4837       MQUEUE *pqueue;
;;;4838       Uint8 len;
;;;4839       MBLK *mblk;
;;;4840   
;;;4841       len = 0;
;;;4842       if(LL_ConnBuffPt[LL_Conn_ID] == (MBLK *)0)
000002  4c22              LDR      r4,|L100.140|
000004  0083              LSLS     r3,r0,#2
000006  58e1              LDR      r1,[r4,r3]
000008  2200              MOVS     r2,#0                 ;4841
00000a  2900              CMP      r1,#0
00000c  d13a              BNE      |L100.132|
;;;4843       {
;;;4844           pqueue = &LL_ConnCtrlQ[LL_Conn_ID];
;;;4845           if(LL_conn_pi->LE_Conn_Para.LL_SMP_Gate != LL_SMP_GATE_OFF)
00000e  4d21              LDR      r5,|L100.148|
000010  00c1              LSLS     r1,r0,#3              ;4844
000012  6a2d              LDR      r5,[r5,#0x20]  ; LL_conn_pi
000014  481e              LDR      r0,|L100.144|
000016  3540              ADDS     r5,r5,#0x40
000018  7ced              LDRB     r5,[r5,#0x13]
00001a  1808              ADDS     r0,r1,r0              ;4844
00001c  2d00              CMP      r5,#0
00001e  d013              BEQ      |L100.72|
;;;4846           {
;;;4847               if((pqueue->QOut!=(MBLK *)0))
000020  6841              LDR      r1,[r0,#4]
000022  2900              CMP      r1,#0
000024  d02e              BEQ      |L100.132|
;;;4848               {
;;;4849                   switch(pqueue->QOut->Para.HCLL_LE_Ctrl_Pkt_Para.HCI_CtrlPkt_Opcode)
000026  7ac9              LDRB     r1,[r1,#0xb]
000028  1ec9              SUBS     r1,r1,#3
00002a  290f              CMP      r1,#0xf
00002c  d215              BCS      |L100.90|
00002e  000d              MOVS     r5,r1
000030  447d              ADD      r5,r5,pc
000032  792d              LDRB     r5,[r5,#4]
000034  196d              ADDS     r5,r5,r5
000036  44af              ADD      pc,pc,r5
000038  12121212          DCB      0x12,0x12,0x12,0x12
00003c  10101012          DCB      0x10,0x10,0x10,0x12
000040  12101210          DCB      0x12,0x10,0x12,0x10
000044  10101200          DCB      0x10,0x10,0x12,0x00
                  |L100.72|
;;;4850                   {
;;;4851                   case LL_ENC_REQ:
;;;4852                   case LL_ENC_RSP:
;;;4853                   case LL_START_ENC_REQ:
;;;4854                   case LL_START_ENC_RSP:
;;;4855                   case LL_PAUSE_ENC_REQ:
;;;4856                   case LL_PAUSE_ENC_RSP:
;;;4857                   case LL_REJECT_IND:
;;;4858                   case LL_REJECT_IND_EXT:
;;;4859                       len = 1;
;;;4860                       break;
;;;4861   
;;;4862                   default:
;;;4863                       break;
;;;4864                   }
;;;4865               }
;;;4866           }
;;;4867           else
;;;4868           {
;;;4869               if((pqueue->QOut!=(MBLK *)0))
000048  6842              LDR      r2,[r0,#4]
00004a  2a00              CMP      r2,#0
00004c  d107              BNE      |L100.94|
;;;4870               {
;;;4871                   len = 1;
;;;4872               }
;;;4873               else
;;;4874               {
;;;4875                   pqueue = &LL_ConnDataQ[LL_Conn_ID];
00004e  4812              LDR      r0,|L100.152|
000050  1808              ADDS     r0,r1,r0
;;;4876                   if((pqueue->QOut!=(MBLK *)0))
000052  6841              LDR      r1,[r0,#4]
000054  2900              CMP      r1,#0
000056  d102              BNE      |L100.94|
000058  e014              B        |L100.132|
                  |L100.90|
;;;4877                   {
;;;4878                       len = 1;
;;;4879                   }
;;;4880               }
;;;4881           }
;;;4882       }
;;;4883       //LL_ConnBuffPt[LL_Conn_ID] = (MBLK *)0;
;;;4884   
;;;4885       if(len!=0)
00005a  2a00              CMP      r2,#0
00005c  d012              BEQ      |L100.132|
                  |L100.94|
;;;4886       {
;;;4887           LL_ConnBuffPt[LL_Conn_ID] = pqueue->QOut;
00005e  6841              LDR      r1,[r0,#4]
000060  50e1              STR      r1,[r4,r3]
;;;4888           mblk = pqueue->QOut;
;;;4889           pqueue->QOut = (pqueue->QOut)->Next;
000062  6842              LDR      r2,[r0,#4]
;;;4890           while(1)
000064  6811              LDR      r1,[r2,#0]
000066  e004              B        |L100.114|
                  |L100.104|
;;;4891           {
;;;4892               if(pqueue->QOut != (MBLK *)0)
;;;4893               {
;;;4894                   if(pqueue->QOut->Primitive==HCLL_LE_ACL_DATA_PKT_EXTEND)
000068  790d              LDRB     r5,[r1,#4]
00006a  2df0              CMP      r5,#0xf0
00006c  d104              BNE      |L100.120|
;;;4895                   {
;;;4896                       mblk = pqueue->QOut;
00006e  460a              MOV      r2,r1
;;;4897                       pqueue->QOut = (pqueue->QOut)->Next;
000070  6809              LDR      r1,[r1,#0]
                  |L100.114|
000072  6041              STR      r1,[r0,#4]            ;4892
000074  2900              CMP      r1,#0                 ;4892
000076  d1f7              BNE      |L100.104|
                  |L100.120|
;;;4898                   }
;;;4899                   else
;;;4900                       break;
;;;4901               }
;;;4902               else
;;;4903                   break;
;;;4904           }
;;;4905           mblk->Next = (MBLK *)0;
000078  2100              MOVS     r1,#0
;;;4906           if(pqueue->QOut == (MBLK *)0)
00007a  6011              STR      r1,[r2,#0]
00007c  6842              LDR      r2,[r0,#4]
00007e  2a00              CMP      r2,#0
000080  d100              BNE      |L100.132|
;;;4907           {
;;;4908               pqueue->QIn = (MBLK *)0;
000082  6001              STR      r1,[r0,#0]
                  |L100.132|
;;;4909           }
;;;4910   
;;;4911       }
;;;4912   
;;;4913       return LL_ConnBuffPt[LL_Conn_ID];
000084  58e0              LDR      r0,[r4,r3]
;;;4914   }
000086  bc30              POP      {r4,r5}
000088  4770              BX       lr
;;;4915   
                          ENDP

00008a  0000              DCW      0x0000
                  |L100.140|
                          DCD      ||.bss||+0x3f0
                  |L100.144|
                          DCD      ||.bss||+0x3a0
                  |L100.148|
                          DCD      ||.data||
                  |L100.152|
                          DCD      ||.bss||+0x378

                          AREA ||i.LL_ReleaseConnID||, CODE, READONLY, ALIGN=2

                  LL_ReleaseConnID PROC
;;;851    
;;;852    void LL_ReleaseConnID(Uint8 LL_Conn_ID)
000000  b5f8              PUSH     {r3-r7,lr}
;;;853    {
000002  4607              MOV      r7,r0
;;;854        MQUEUE *pqueue;
;;;855        extern MBLK *MBlk_Free;
;;;856        LL_Conn *pLL_conn;
;;;857        extern Uint8 MBlk_depth_Remaining;
;;;858        extern Uint8 LL_ConnID_Remaining;
;;;859        MBLK *mblk;
;;;860        Uint8 i;
;;;861    
;;;862        pLL_conn = &LL_Conn_Para[LL_Conn_ID];
000004  2088              MOVS     r0,#0x88
000006  492e              LDR      r1,|L101.192|
000008  4378              MULS     r0,r7,r0
00000a  1846              ADDS     r6,r0,r1
;;;863    
;;;864        Knl_CodeCpy((Uint8 *)LL_Length_Prefer[LL_Conn_ID], (Uint8 *)LL_LENGTH_DEFAULT, sizeof(LL_LENGTH));
00000c  482d              LDR      r0,|L101.196|
00000e  00fd              LSLS     r5,r7,#3
000010  1828              ADDS     r0,r5,r0
000012  2208              MOVS     r2,#8
000014  492c              LDR      r1,|L101.200|
000016  f7fffffe          BL       Knl_CodeCpy
;;;865        Knl_CodeCpy(&pLL_conn->LE_Conn_Para.LL_Conn_ID, TAB_ZERO_128, LEN_LE_CONN_PARA);     //initialization
00001a  2288              MOVS     r2,#0x88
00001c  492b              LDR      r1,|L101.204|
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       Knl_CodeCpy
;;;866        InterruptDisable();
000024  b672              CPSID    i
;;;867        pLL_conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_STBY;                                 //initialization
000026  2101              MOVS     r1,#1
;;;868        pLL_conn->LE_Conn_Para.LL_Tx_PHYS = LL_TX_PHYS_1M_PHY;                               //initialization
000028  4630              MOV      r0,r6
00002a  7031              STRB     r1,[r6,#0]            ;867
00002c  3060              ADDS     r0,r0,#0x60
00002e  7741              STRB     r1,[r0,#0x1d]
;;;869        pLL_conn->LE_Conn_Para.LL_Rx_PHYS = LL_RX_PHYS_1M_PHY;                               //initialization
000030  7781              STRB     r1,[r0,#0x1e]
;;;870        pLL_conn->LE_Conn_Para.LL_Rx_length_1M = LEN_CONN_DATA_INITIAL;                      //initialization
000032  211b              MOVS     r1,#0x1b
000034  77c1              STRB     r1,[r0,#0x1f]
000036  3680              ADDS     r6,r6,#0x80
;;;871        pLL_conn->LE_Conn_Para.LL_Rx_length_2M = LEN_CONN_DATA_INITIAL;                      //initialization
000038  7031              STRB     r1,[r6,#0]
;;;872        pLL_conn->LE_Conn_Para.LL_Tx_length_1M = LEN_CONN_DATA_INITIAL;                      //initialization
00003a  7071              STRB     r1,[r6,#1]
;;;873        pLL_conn->LE_Conn_Para.LL_Tx_length_2M = LEN_CONN_DATA_INITIAL;                      //initialization
00003c  70b1              STRB     r1,[r6,#2]
;;;874        //LL_ConnID_Remaining++;
;;;875    
;;;876        if(LL_ConnBuffPt[LL_Conn_ID]!=(MBLK *)0)
00003e  4e24              LDR      r6,|L101.208|
000040  00ba              LSLS     r2,r7,#2
000042  58b0              LDR      r0,[r6,r2]
;;;877        {
;;;878            mblk = LL_ConnBuffPt[LL_Conn_ID];
;;;879            while(1)
;;;880            {
;;;881                if(mblk != (MBLK *)0)
;;;882                {
;;;883                    MBlk_depth_Remaining++;
000044  4b23              LDR      r3,|L101.212|
;;;884                    if(mblk->Next != (MBLK *)0)
;;;885                        mblk = mblk->Next;
;;;886                    else
;;;887                        break;
;;;888                }
;;;889                else
;;;890                    break;
;;;891            }
;;;892            if(mblk != (MBLK *)0)
;;;893            {
;;;894                mblk->Next = MBlk_Free;
000046  4f24              LDR      r7,|L101.216|
000048  2800              CMP      r0,#0                 ;876
00004a  d00e              BEQ      |L101.106|
                  |L101.76|
00004c  7819              LDRB     r1,[r3,#0]            ;883  ; MBlk_depth_Remaining
00004e  1c49              ADDS     r1,r1,#1              ;883
000050  7019              STRB     r1,[r3,#0]            ;883
000052  6801              LDR      r1,[r0,#0]            ;884
000054  2900              CMP      r1,#0                 ;884
000056  d002              BEQ      |L101.94|
000058  0008              MOVS     r0,r1                 ;884
00005a  d1f7              BNE      |L101.76|
00005c  e005              B        |L101.106|
                  |L101.94|
00005e  6839              LDR      r1,[r7,#0]  ; MBlk_Free
;;;895                MBlk_Free = LL_ConnBuffPt[LL_Conn_ID];
000060  6001              STR      r1,[r0,#0]
000062  58b0              LDR      r0,[r6,r2]
;;;896                LL_ConnBuffPt[LL_Conn_ID] = (MBLK *)0;
000064  6038              STR      r0,[r7,#0]  ; MBlk_Free
000066  2000              MOVS     r0,#0
000068  50b0              STR      r0,[r6,r2]
                  |L101.106|
;;;897            }
;;;898        }
;;;899        InterruptEnable();
00006a  b662              CPSIE    i
;;;900        for(i=0; i<3; i++)
00006c  2000              MOVS     r0,#0
                  |L101.110|
;;;901        {
;;;902            switch(i)
00006e  2800              CMP      r0,#0
000070  d004              BEQ      |L101.124|
000072  2801              CMP      r0,#1
000074  d005              BEQ      |L101.130|
000076  2802              CMP      r0,#2
000078  d106              BNE      |L101.136|
00007a  e01d              B        |L101.184|
                  |L101.124|
;;;903            {
;;;904            case 0:
;;;905                pqueue = &LL_ConnDataQ[LL_Conn_ID];
00007c  4914              LDR      r1,|L101.208|
00007e  3978              SUBS     r1,r1,#0x78
;;;906                break;
000080  e001              B        |L101.134|
                  |L101.130|
;;;907    
;;;908            case 1:
;;;909                pqueue = &LL_ConnCtrlQ[LL_Conn_ID];
000082  4913              LDR      r1,|L101.208|
000084  3950              SUBS     r1,r1,#0x50
                  |L101.134|
000086  186c              ADDS     r4,r5,r1              ;905
                  |L101.136|
;;;910                break;
;;;911    
;;;912            case 2:
;;;913                pqueue = &LL_ConnDataInQ[LL_Conn_ID];
;;;914                break;
;;;915    
;;;916            default:
;;;917                break;
;;;918            }
;;;919            InterruptDisable();
000088  b672              CPSID    i
;;;920            if(pqueue->QIn != (MBLK *)0)
00008a  6826              LDR      r6,[r4,#0]
00008c  2e00              CMP      r6,#0
00008e  d00d              BEQ      |L101.172|
;;;921            {
;;;922                mblk = pqueue->QOut;
000090  6861              LDR      r1,[r4,#4]
                  |L101.146|
;;;923                while(1)
;;;924                {
;;;925                    MBlk_depth_Remaining++;
000092  781a              LDRB     r2,[r3,#0]  ; MBlk_depth_Remaining
000094  1c52              ADDS     r2,r2,#1
000096  701a              STRB     r2,[r3,#0]
;;;926                    if(mblk->Next != (MBLK *)0)
000098  6809              LDR      r1,[r1,#0]
00009a  2900              CMP      r1,#0
00009c  d1f9              BNE      |L101.146|
;;;927                    {
;;;928                        mblk = mblk->Next;
;;;929                    }
;;;930                    else
;;;931                    {
;;;932                        break;
;;;933                    }
;;;934                }
;;;935                (pqueue->QIn)->Next = MBlk_Free;
00009e  6839              LDR      r1,[r7,#0]  ; MBlk_Free
;;;936                MBlk_Free = pqueue->QOut;
0000a0  6031              STR      r1,[r6,#0]
0000a2  6861              LDR      r1,[r4,#4]
;;;937                pqueue->QOut = (MBLK *)0;
0000a4  6039              STR      r1,[r7,#0]  ; MBlk_Free
0000a6  2100              MOVS     r1,#0
;;;938                pqueue->QIn = (MBLK *)0;
0000a8  6061              STR      r1,[r4,#4]
0000aa  6021              STR      r1,[r4,#0]
                  |L101.172|
;;;939            }
;;;940            InterruptEnable();
0000ac  b662              CPSIE    i
0000ae  1c40              ADDS     r0,r0,#1
0000b0  b2c0              UXTB     r0,r0                 ;900
0000b2  2803              CMP      r0,#3                 ;900
0000b4  d3db              BCC      |L101.110|
;;;941            //pqueue = &LL_ConnCtrlQ[LL_Conn_ID];
;;;942        }
;;;943    }
0000b6  bdf8              POP      {r3-r7,pc}
                  |L101.184|
0000b8  4905              LDR      r1,|L101.208|
0000ba  3928              SUBS     r1,r1,#0x28           ;913
0000bc  e7e3              B        |L101.134|
;;;944    
                          ENDP

0000be  0000              DCW      0x0000
                  |L101.192|
                          DCD      ||.bss||+0xd0
                  |L101.196|
                          DCD      ||.bss||+0x5d8
                  |L101.200|
                          DCD      ||.constdata||+0x32
                  |L101.204|
                          DCD      ||.constdata||+0x1c6
                  |L101.208|
                          DCD      ||.bss||+0x3f0
                  |L101.212|
                          DCD      MBlk_depth_Remaining
                  |L101.216|
                          DCD      MBlk_Free

                          AREA ||i.LL_ReleaseConnID_Isr||, CODE, READONLY, ALIGN=2

                  LL_ReleaseConnID_Isr PROC
;;;4355   
;;;4356   void LL_ReleaseConnID_Isr(Uint8 LL_Conn_ID)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4357   {
000002  4607              MOV      r7,r0
;;;4358       MQUEUE *pqueue;
;;;4359       extern MBLK *MBlk_Free;
;;;4360       LL_Conn *pLL_conn;
;;;4361       extern Uint8 MBlk_depth_Remaining;
;;;4362       extern Uint8 LL_ConnID_Remaining;
;;;4363       MBLK *mblk;
;;;4364       Uint8 i;
;;;4365   
;;;4366       pLL_conn = &LL_Conn_Para[LL_Conn_ID];
000004  2088              MOVS     r0,#0x88
000006  4930              LDR      r1,|L102.200|
000008  4378              MULS     r0,r7,r0
00000a  1846              ADDS     r6,r0,r1
;;;4367   
;;;4368       Knl_CodeCpy_Isr((Uint8 *)LL_Length_Prefer[LL_Conn_ID], (Uint8 *)LL_LENGTH_DEFAULT, sizeof(LL_LENGTH));
00000c  482f              LDR      r0,|L102.204|
00000e  00fd              LSLS     r5,r7,#3
000010  1828              ADDS     r0,r5,r0
000012  2208              MOVS     r2,#8
000014  492e              LDR      r1,|L102.208|
000016  f7fffffe          BL       Knl_CodeCpy_Isr
;;;4369       Knl_CodeCpy_Isr(&pLL_conn->LE_Conn_Para.LL_Conn_ID, TAB_ZERO_128, LEN_LE_CONN_PARA);    //initialization
00001a  2288              MOVS     r2,#0x88
00001c  492d              LDR      r1,|L102.212|
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       Knl_CodeCpy_Isr
;;;4370   
;;;4371       pLL_conn->LE_Conn_Para.LL_Conn_ID = LL_CONN_ID_STBY;
000024  2101              MOVS     r1,#1
;;;4372       pLL_conn->LE_Conn_Para.LL_Tx_PHYS = LL_TX_PHYS_1M_PHY;                                  //initialization
000026  4630              MOV      r0,r6
000028  7031              STRB     r1,[r6,#0]            ;4371
00002a  3060              ADDS     r0,r0,#0x60
00002c  7741              STRB     r1,[r0,#0x1d]
;;;4373       pLL_conn->LE_Conn_Para.LL_Rx_PHYS = LL_RX_PHYS_1M_PHY;                                  //initialization
00002e  7781              STRB     r1,[r0,#0x1e]
;;;4374       pLL_conn->LE_Conn_Para.LL_Rx_length_1M = LEN_CONN_DATA_INITIAL;                         //initialization
000030  211b              MOVS     r1,#0x1b
000032  77c1              STRB     r1,[r0,#0x1f]
;;;4375       pLL_conn->LE_Conn_Para.LL_Rx_length_2M = LEN_CONN_DATA_INITIAL;                         //initialization
000034  3020              ADDS     r0,r0,#0x20
000036  7001              STRB     r1,[r0,#0]
;;;4376       pLL_conn->LE_Conn_Para.LL_Tx_length_1M = LEN_CONN_DATA_INITIAL;                         //initialization
000038  7041              STRB     r1,[r0,#1]
;;;4377       pLL_conn->LE_Conn_Para.LL_Tx_length_2M = LEN_CONN_DATA_INITIAL;                         //initialization
00003a  7081              STRB     r1,[r0,#2]
;;;4378       LL_ConnID_Remaining++;
00003c  4926              LDR      r1,|L102.216|
;;;4379   
;;;4380       if(LL_ConnBuffPt[LL_Conn_ID]!=(MBLK *)0)
00003e  00ba              LSLS     r2,r7,#2
000040  78c8              LDRB     r0,[r1,#3]            ;4378  ; LL_ConnID_Remaining
;;;4381       {
;;;4382           mblk = LL_ConnBuffPt[LL_Conn_ID];
;;;4383           while(1)
;;;4384           {
;;;4385               if(mblk!=(MBLK *)0)
;;;4386               {
;;;4387                   MBlk_depth_Remaining++;
000042  4b27              LDR      r3,|L102.224|
000044  1c40              ADDS     r0,r0,#1              ;4378
000046  70c8              STRB     r0,[r1,#3]            ;4378
000048  4924              LDR      r1,|L102.220|
00004a  5888              LDR      r0,[r1,r2]            ;4380
00004c  2800              CMP      r0,#0                 ;4380
00004e  d010              BEQ      |L102.114|
000050  460f              MOV      r7,r1                 ;4382
                  |L102.82|
000052  7819              LDRB     r1,[r3,#0]  ; MBlk_depth_Remaining
000054  1c49              ADDS     r1,r1,#1
000056  7019              STRB     r1,[r3,#0]
;;;4388                   if(mblk->Next!=(MBLK *)0)
000058  6801              LDR      r1,[r0,#0]
00005a  2900              CMP      r1,#0
00005c  d002              BEQ      |L102.100|
00005e  0008              MOVS     r0,r1
;;;4389                       mblk = mblk->Next;
000060  d1f7              BNE      |L102.82|
000062  e006              B        |L102.114|
                  |L102.100|
;;;4390                   else
;;;4391                       break;
;;;4392               }
;;;4393               else
;;;4394                   break;
;;;4395           }
;;;4396   
;;;4397           if(mblk!=(MBLK *)0)
;;;4398           {
;;;4399               mblk->Next = MBlk_Free;
000064  491f              LDR      r1,|L102.228|
000066  680e              LDR      r6,[r1,#0]  ; MBlk_Free
;;;4400               MBlk_Free = LL_ConnBuffPt[LL_Conn_ID];
000068  6006              STR      r6,[r0,#0]
00006a  58be              LDR      r6,[r7,r2]
;;;4401               LL_ConnBuffPt[LL_Conn_ID] = (MBLK *)0;
00006c  600e              STR      r6,[r1,#0]  ; MBlk_Free
00006e  2100              MOVS     r1,#0
000070  50b9              STR      r1,[r7,r2]
                  |L102.114|
;;;4402           }
;;;4403       }
;;;4404       //pqueue = &LL_ConnDataQ[LL_Conn_ID];
;;;4405       for(i=0; i<3; i++)
;;;4406       {
;;;4407           switch(i)
;;;4408           {
;;;4409           case 0:
;;;4410               pqueue = &LL_ConnDataQ[LL_Conn_ID];
000072  481d              LDR      r0,|L102.232|
000074  2100              MOVS     r1,#0                 ;4405
000076  1828              ADDS     r0,r5,r0
000078  4684              MOV      r12,r0
;;;4411               break;
;;;4412   
;;;4413           case 1:
;;;4414               pqueue = &LL_ConnCtrlQ[LL_Conn_ID];
00007a  481c              LDR      r0,|L102.236|
00007c  182f              ADDS     r7,r5,r0
;;;4415               break;
;;;4416   
;;;4417           case 2:
;;;4418               pqueue = &LL_ConnDataInQ[LL_Conn_ID];
00007e  481c              LDR      r0,|L102.240|
000080  182e              ADDS     r6,r5,r0
                  |L102.130|
000082  2900              CMP      r1,#0                 ;4407
000084  d004              BEQ      |L102.144|
000086  2901              CMP      r1,#1                 ;4407
000088  d004              BEQ      |L102.148|
00008a  2902              CMP      r1,#2                 ;4407
00008c  d105              BNE      |L102.154|
00008e  e003              B        |L102.152|
                  |L102.144|
000090  4664              MOV      r4,r12                ;4407
000092  e002              B        |L102.154|
                  |L102.148|
000094  463c              MOV      r4,r7                 ;4411
000096  e000              B        |L102.154|
                  |L102.152|
000098  4634              MOV      r4,r6                 ;4415
                  |L102.154|
;;;4419               break;
;;;4420   
;;;4421           default:
;;;4422               break;
;;;4423           }
;;;4424           if(pqueue->QIn != (MBLK *)0)
00009a  6825              LDR      r5,[r4,#0]
00009c  2d00              CMP      r5,#0
00009e  d00e              BEQ      |L102.190|
;;;4425           {
;;;4426               mblk = pqueue->QOut;
0000a0  6860              LDR      r0,[r4,#4]
                  |L102.162|
;;;4427               while(1)
;;;4428               {
;;;4429                   MBlk_depth_Remaining++;
0000a2  781a              LDRB     r2,[r3,#0]  ; MBlk_depth_Remaining
0000a4  1c52              ADDS     r2,r2,#1
0000a6  701a              STRB     r2,[r3,#0]
;;;4430                   if(mblk->Next != (MBLK *)0)
0000a8  6800              LDR      r0,[r0,#0]
0000aa  2800              CMP      r0,#0
0000ac  d1f9              BNE      |L102.162|
;;;4431                   {
;;;4432                       mblk = mblk->Next;
;;;4433                   }
;;;4434                   else
;;;4435                   {
;;;4436                       break;
;;;4437                   }
;;;4438               }
;;;4439               (pqueue->QIn)->Next = MBlk_Free;
0000ae  4a0d              LDR      r2,|L102.228|
0000b0  6810              LDR      r0,[r2,#0]  ; MBlk_Free
;;;4440               MBlk_Free = pqueue->QOut;
0000b2  6028              STR      r0,[r5,#0]
0000b4  6860              LDR      r0,[r4,#4]
;;;4441               pqueue->QOut = (MBLK *)0;
0000b6  6010              STR      r0,[r2,#0]  ; MBlk_Free
0000b8  2000              MOVS     r0,#0
;;;4442               pqueue->QIn = (MBLK *)0;
0000ba  6060              STR      r0,[r4,#4]
0000bc  6020              STR      r0,[r4,#0]
                  |L102.190|
0000be  1c49              ADDS     r1,r1,#1
0000c0  b2c9              UXTB     r1,r1                 ;4405
0000c2  2903              CMP      r1,#3                 ;4405
0000c4  d3dd              BCC      |L102.130|
;;;4443           }
;;;4444           //pqueue = &LL_ConnCtrlQ[LL_Conn_ID];
;;;4445       }
;;;4446   
;;;4447   }
0000c6  bdf8              POP      {r3-r7,pc}
;;;4448   
                          ENDP

                  |L102.200|
                          DCD      ||.bss||+0xd0
                  |L102.204|
                          DCD      ||.bss||+0x5d8
                  |L102.208|
                          DCD      ||.constdata||+0x32
                  |L102.212|
                          DCD      ||.constdata||+0x1c6
                  |L102.216|
                          DCD      ||.data||
                  |L102.220|
                          DCD      ||.bss||+0x3f0
                  |L102.224|
                          DCD      MBlk_depth_Remaining
                  |L102.228|
                          DCD      MBlk_Free
                  |L102.232|
                          DCD      ||.bss||+0x378
                  |L102.236|
                          DCD      ||.bss||+0x3a0
                  |L102.240|
                          DCD      ||.bss||+0x3c8

                          AREA ||i.LL_RfChRemap||, CODE, READONLY, ALIGN=1

                  LL_RfChRemap PROC
;;;4301   
;;;4302   void LL_RfChRemap(LL_Conn *pLL_Conn)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4303   {
;;;4304       Uint8 i, j, ch_b, ch_idx, ch_re_idx;
;;;4305       Uint8 * ChMapReM;
;;;4306       Uint8 * LL_Data_Ch_ReMap;
;;;4307   
;;;4308       ChMapReM = &(pLL_Conn->LE_Conn_Para.LL_ChMapReM[0]);
000002  4606              MOV      r6,r0
000004  3614              ADDS     r6,r6,#0x14
000006  4605              MOV      r5,r0
000008  352e              ADDS     r5,r5,#0x2e
;;;4309       LL_Data_Ch_ReMap = &(pLL_Conn->LE_Conn_Para.LL_RF_Data_Ch_ReM[0]);
;;;4310   
;;;4311       ch_idx=0;
00000a  2300              MOVS     r3,#0
;;;4312       ch_re_idx=0;
00000c  461c              MOV      r4,r3
;;;4313       for(i=0; i<LEN_LL_CH_MAP; i++)
00000e  4618              MOV      r0,r3
                  |L103.16|
;;;4314       {
;;;4315           j = *(ChMapReM+i);     //LL__005
000010  5c31              LDRB     r1,[r6,r0]
;;;4316           for(ch_b=0x01; ch_b!=0; ch_b=(ch_b<<1))
000012  2201              MOVS     r2,#1
                  |L103.20|
;;;4317           {
;;;4318               if((j & ch_b) != 0)
000014  4211              TST      r1,r2
000016  d002              BEQ      |L103.30|
;;;4319               {
;;;4320                   *(LL_Data_Ch_ReMap+ch_re_idx) = ch_idx;
000018  552b              STRB     r3,[r5,r4]
00001a  1c64              ADDS     r4,r4,#1
;;;4321                   ch_re_idx++;
00001c  b2e4              UXTB     r4,r4
                  |L103.30|
00001e  1c5b              ADDS     r3,r3,#1
000020  0052              LSLS     r2,r2,#1              ;4316
000022  0612              LSLS     r2,r2,#24             ;4316
;;;4322               }
;;;4323               ch_idx++;
000024  b2db              UXTB     r3,r3
000026  0e12              LSRS     r2,r2,#24             ;4316
000028  d1f4              BNE      |L103.20|
00002a  1c40              ADDS     r0,r0,#1              ;4316
00002c  b2c0              UXTB     r0,r0                 ;4313
00002e  2805              CMP      r0,#5                 ;4313
000030  d3ee              BCC      |L103.16|
;;;4324           }
;;;4325       }
;;;4326       if((NUM_LL_DATA_CH-ch_re_idx))
000032  2c25              CMP      r4,#0x25
000034  d00d              BEQ      |L103.82|
;;;4327       {
;;;4328           Knl_MemCpy((LL_Data_Ch_ReMap+ch_re_idx), LL_Data_Ch_ReMap, (NUM_LL_DATA_CH-ch_re_idx));
000036  2025              MOVS     r0,#0x25
000038  1b00              SUBS     r0,r0,r4
00003a  b2c2              UXTB     r2,r0
00003c  1928              ADDS     r0,r5,r4
00003e  4629              MOV      r1,r5
000040  f7fffffe          BL       Knl_MemCpy
;;;4329           while(ch_re_idx)
000044  e003              B        |L103.78|
                  |L103.70|
000046  1e64              SUBS     r4,r4,#1
;;;4330           {
;;;4331               ch_re_idx--;
000048  b2e4              UXTB     r4,r4
;;;4332               *(LL_Data_Ch_ReMap+*(LL_Data_Ch_ReMap+ch_re_idx)) = *(LL_Data_Ch_ReMap+ch_re_idx);
00004a  5d28              LDRB     r0,[r5,r4]
00004c  5428              STRB     r0,[r5,r0]
                  |L103.78|
00004e  2c00              CMP      r4,#0                 ;4329
000050  d1f9              BNE      |L103.70|
                  |L103.82|
;;;4333           }
;;;4334       }
;;;4335   }
000052  bdf8              POP      {r3-r7,pc}
;;;4336   
                          ENDP


                          AREA ||i.LL_Root||, CODE, READONLY, ALIGN=2

                  LL_Root PROC
;;;3819   
;;;3820   void LL_Root(Uint8 QueueId)
000000  b510              PUSH     {r4,lr}
;;;3821   {
;;;3822       Uint8 event;
;;;3823       MBLK *pmblk;
;;;3824   
;;;3825       pmblk = RcvMsgBlk(QueueId);
000002  f7fffffe          BL       RcvMsgBlk
000006  4604              MOV      r4,r0
;;;3826   
;;;3827       event = pmblk->Primitive - LL_E0;
000008  7900              LDRB     r0,[r0,#4]
;;;3828       (*(LL_fsm[event]))(pmblk);
00000a  4905              LDR      r1,|L104.32|
00000c  38b0              SUBS     r0,r0,#0xb0           ;3827
00000e  0600              LSLS     r0,r0,#24             ;3827
000010  0d80              LSRS     r0,r0,#22
000012  5809              LDR      r1,[r1,r0]
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
;;;3829       FreeMsgBlk(pmblk);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       FreeMsgBlk
;;;3830   }
00001e  bd10              POP      {r4,pc}
;;;3831   
                          ENDP

                  |L104.32|
                          DCD      ||.constdata||+0x268

                          AREA ||i.LL_RxEnter_Isr||, CODE, READONLY, ALIGN=2

                  LL_RxEnter_Isr PROC
;;;4629   
;;;4630   void LL_RxEnter_Isr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;4631   {
;;;4632       uint8_t i;
;;;4633   
;;;4634       //First T/R=R
;;;4635       //R121[6]=1: MAC go to RX state after wakeup
;;;4636       i = RFIP_reg_MEM[RFIP_REG_MEM_121] | REG_121_T_R_SEL_WKP;
000002  4e10              LDR      r6,|L105.68|
000004  7af4              LDRB     r4,[r6,#0xb]  ; RFIP_reg_MEM
000006  2540              MOVS     r5,#0x40
000008  432c              ORRS     r4,r4,r5
;;;4637       SPI_1BYT_SetTx_Isr(RFIP_REG_121, i);
00000a  4621              MOV      r1,r4
00000c  2079              MOVS     r0,#0x79
00000e  f7fffffe          BL       SPI_1BYT_SetTx_Isr
;;;4638       RFIP_reg_MEM[RFIP_REG_MEM_121] = i;
000012  72f4              STRB     r4,[r6,#0xb]
;;;4639   
;;;4640       RF_Msg_RF0INT = RF_MSG_RF0INT_WTR;
000014  490c              LDR      r1,|L105.72|
000016  2001              MOVS     r0,#1
000018  7308              STRB     r0,[r1,#0xc]
;;;4641   
;;;4642       if(ble_device_param.ble_deviceChipId==MP_A1)
00001a  480c              LDR      r0,|L105.76|
00001c  7800              LDRB     r0,[r0,#0]  ; ble_device_param
00001e  2866              CMP      r0,#0x66
000020  d005              BEQ      |L105.46|
;;;4643       {
;;;4644           ((uint8_t *)&Tmr37)[4] |= (RFIP_reg_MEM[RFIP_REG_MEM_119] | REG_119_TR_TRIG_MODE);   //set R119 to enable RX
;;;4645           SPI_PDMA_SetTx(RFIP_REG_115, (uint32_t)&Tmr37, 5);
;;;4646       }
;;;4647       else
;;;4648       {
;;;4649           i = RFIP_reg_MEM[RFIP_REG_MEM_119] | REG_119_TR_TRIG_MODE;
000022  7a71              LDRB     r1,[r6,#9]  ; RFIP_reg_MEM
;;;4650           SPI_1BYT_SetTx_Isr(RFIP_REG_119, i);
000024  2077              MOVS     r0,#0x77
000026  4329              ORRS     r1,r1,r5              ;4649
000028  f7fffffe          BL       SPI_1BYT_SetTx_Isr
;;;4651       }
;;;4652   }
00002c  bd70              POP      {r4-r6,pc}
                  |L105.46|
00002e  4908              LDR      r1,|L105.80|
000030  7a72              LDRB     r2,[r6,#9]            ;4644  ; RFIP_reg_MEM
000032  7908              LDRB     r0,[r1,#4]            ;4644  ; Tmr37
000034  4310              ORRS     r0,r0,r2              ;4644
000036  4328              ORRS     r0,r0,r5              ;4644
000038  7108              STRB     r0,[r1,#4]            ;4644
00003a  2205              MOVS     r2,#5                 ;4645
00003c  2073              MOVS     r0,#0x73              ;4645
00003e  f7fffffe          BL       SPI_PDMA_SetTx
000042  bd70              POP      {r4-r6,pc}
;;;4653   
                          ENDP

                  |L105.68|
                          DCD      RFIP_reg_MEM
                  |L105.72|
                          DCD      ||.data||
                  |L105.76|
                          DCD      ble_device_param
                  |L105.80|
                          DCD      ||.data||+0x70

                          AREA ||i.LL_RxLen2Offset||, CODE, READONLY, ALIGN=2

                  LL_RxLen2Offset PROC
;;;4806   
;;;4807   Uint8 LL_RxLen2Offset(Uint8 LenData)
000000  490d              LDR      r1,|L106.56|
;;;4808   {
;;;4809       Uint8 i;
;;;4810   
;;;4811       if(LL_conn_pi->LE_Conn_Para.LL_Tx_PHYS==LL_TX_PHYS_1M_PHY)      //symmetric
000002  6a09              LDR      r1,[r1,#0x20]  ; LL_conn_pi
000004  3160              ADDS     r1,r1,#0x60
000006  7f49              LDRB     r1,[r1,#0x1d]
000008  2901              CMP      r1,#1
00000a  d00b              BEQ      |L106.36|
;;;4812       {
;;;4813           for(i=0; i<sizeof(LL_LEN_OFFSET_1M); i++)
;;;4814           {
;;;4815               if(LenData <= LL_LEN_OFFSET_1M[i])
;;;4816               {
;;;4817                   break;
;;;4818               }
;;;4819           }
;;;4820       }
;;;4821       else
;;;4822       {
;;;4823           for(i=0; i<sizeof(LL_LEN_OFFSET_2M); i++)
;;;4824           {
;;;4825               if(LenData <= LL_LEN_OFFSET_2M[i])
00000c  4a0b              LDR      r2,|L106.60|
00000e  2100              MOVS     r1,#0                 ;4823
                  |L106.16|
000010  5c53              LDRB     r3,[r2,r1]
000012  4283              CMP      r3,r0
000014  d203              BCS      |L106.30|
000016  1c49              ADDS     r1,r1,#1
000018  b2c9              UXTB     r1,r1                 ;4823
00001a  2909              CMP      r1,#9                 ;4823
00001c  d3f8              BCC      |L106.16|
                  |L106.30|
00001e  1c89              ADDS     r1,r1,#2              ;4823
;;;4826               {
;;;4827                   break;
;;;4828               }
;;;4829           }
;;;4830       }
;;;4831       return (i+2);
000020  b2c8              UXTB     r0,r1
;;;4832   }
000022  4770              BX       lr
                  |L106.36|
000024  4a06              LDR      r2,|L106.64|
000026  2100              MOVS     r1,#0                 ;4813
                  |L106.40|
000028  5c53              LDRB     r3,[r2,r1]            ;4815
00002a  4283              CMP      r3,r0                 ;4815
00002c  d2f7              BCS      |L106.30|
00002e  1c49              ADDS     r1,r1,#1              ;4815
000030  b2c9              UXTB     r1,r1                 ;4813
000032  2911              CMP      r1,#0x11              ;4813
000034  d3f8              BCC      |L106.40|
000036  e7f2              B        |L106.30|
;;;4833   
                          ENDP

                  |L106.56|
                          DCD      ||.data||
                  |L106.60|
                          DCD      ||.constdata||+0x25f
                  |L106.64|
                          DCD      ||.constdata||+0x24e

                          AREA ||i.LL_Slv_Win_Width_Incr||, CODE, READONLY, ALIGN=2

                  LL_Slv_Win_Width_Incr PROC
;;;4695   
;;;4696   Uint8 LL_Slv_Win_Width_Incr(void)
000000  4804              LDR      r0,|L107.20|
;;;4697   {
;;;4698       LL_Slv_Win_Width += LL_Slv_Win_Width_Base;
000002  6a82              LDR      r2,[r0,#0x28]  ; LL_Slv_Win_Width_Base
000004  6a41              LDR      r1,[r0,#0x24]  ; LL_Slv_Win_Width
000006  1889              ADDS     r1,r1,r2
;;;4699       return ((((Uint8 *) &LL_Slv_Win_Width)[3])+2);      //Little endian
000008  6241              STR      r1,[r0,#0x24]  ; LL_Slv_Win_Width
00000a  4803              LDR      r0,|L107.24|
00000c  78c0              LDRB     r0,[r0,#3]  ; LL_Slv_Win_Width
00000e  1c80              ADDS     r0,r0,#2
000010  b2c0              UXTB     r0,r0
;;;4700   }
000012  4770              BX       lr
;;;4701   void LL_Slv_Win_Width_Reset(void)
                          ENDP

                  |L107.20|
                          DCD      ||.data||
                  |L107.24|
                          DCD      ||.data||+0x24

                          AREA ||i.LL_Slv_Win_Width_Reset||, CODE, READONLY, ALIGN=2

                  LL_Slv_Win_Width_Reset PROC
;;;4700   }
;;;4701   void LL_Slv_Win_Width_Reset(void)
000000  4a06              LDR      r2,|L108.28|
;;;4702   {
;;;4703       Uint32 i32;
;;;4704   
;;;4705       LL_Slv_Win_Width = 0;
000002  2000              MOVS     r0,#0
;;;4706       i32 = LL_RF_PARA_WIN_WIDTH_CNVT[LL_conn_pi->LE_Conn_Para.LL_SCA];
000004  6250              STR      r0,[r2,#0x24]  ; LL_Slv_Win_Width
000006  6a10              LDR      r0,[r2,#0x20]  ; LL_conn_pi
000008  2183              MOVS     r1,#0x83
00000a  5c09              LDRB     r1,[r1,r0]
00000c  4b04              LDR      r3,|L108.32|
00000e  0089              LSLS     r1,r1,#2
000010  5859              LDR      r1,[r3,r1]
;;;4707       //LL_Slv_Win_Width_Base = (LL_RF_PARA_WIN_WIDTH_CNVT[LL_conn_pi->LE_Conn_Para.LL_SCA])*(LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg);
;;;4708       LL_Slv_Win_Width_Base = (LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg)*(i32);
000012  8bc0              LDRH     r0,[r0,#0x1e]
000014  4348              MULS     r0,r1,r0
000016  6290              STR      r0,[r2,#0x28]  ; LL_Slv_Win_Width_Base
;;;4709   }
000018  4770              BX       lr
;;;4710   
                          ENDP

00001a  0000              DCW      0x0000
                  |L108.28|
                          DCD      ||.data||
                  |L108.32|
                          DCD      ||.constdata||+0x70

                          AREA ||i.LL_SvPrToutAccu_Incr||, CODE, READONLY, ALIGN=2

                  LL_SvPrToutAccu_Incr PROC
;;;4790   
;;;4791   void LL_SvPrToutAccu_Incr(void)
000000  4809              LDR      r0,|L109.40|
;;;4792   {
;;;4793       Uint16 i16;
;;;4794   
;;;4795       i16 = LL_conn_pi->LE_Conn_Para.LL_ConnIntervalOrg;
000002  6a00              LDR      r0,[r0,#0x20]  ; LL_conn_pi
;;;4796       if((LL_conn_pi->LE_Conn_Para.LL_Conn_ID&LL_CONN_ID_LL_MSK_INIT))
000004  7802              LDRB     r2,[r0,#0]
000006  8bc1              LDRH     r1,[r0,#0x1e]         ;4795
000008  0653              LSLS     r3,r2,#25
00000a  3080              ADDS     r0,r0,#0x80
00000c  2b00              CMP      r3,#0
00000e  da06              BGE      |L109.30|
;;;4797       {
;;;4798           if(LL_PR_CONN_ID_PAIR[(LL_conn_pi->LE_Conn_Para.LL_Conn_ID-LL_CONN_ID_LL_MSK_INIT)])
000010  4b06              LDR      r3,|L109.44|
000012  5cd2              LDRB     r2,[r2,r3]
000014  2a00              CMP      r2,#0
000016  d002              BEQ      |L109.30|
;;;4799           {
;;;4800               LL_conn_pi->LE_Conn_Para.LL_PrToutAccu += i16;
000018  88c2              LDRH     r2,[r0,#6]
00001a  1852              ADDS     r2,r2,r1
00001c  80c2              STRH     r2,[r0,#6]
                  |L109.30|
;;;4801           }
;;;4802       }
;;;4803       LL_conn_pi->LE_Conn_Para.LL_SvToutAccu += i16;
00001e  8882              LDRH     r2,[r0,#4]
000020  1851              ADDS     r1,r2,r1
000022  8081              STRH     r1,[r0,#4]
;;;4804   }
000024  4770              BX       lr
;;;4805   
                          ENDP

000026  0000              DCW      0x0000
                  |L109.40|
                          DCD      ||.data||
                  |L109.44|
                          DCD      ||.constdata||+0xea

                          AREA ||i.LL_TmrBlk_Pt_PairRst||, CODE, READONLY, ALIGN=2

                  LL_TmrBlk_Pt_PairRst PROC
;;;4575   
;;;4576   void LL_TmrBlk_Pt_PairRst(void)
000000  4908              LDR      r1,|L110.36|
;;;4577   {
;;;4578       if(TBlk_InUse_LL != MAX_TBLK_LL_NO)
000002  7948              LDRB     r0,[r1,#5]  ; TBlk_InUse_LL
000004  280c              CMP      r0,#0xc
000006  d009              BEQ      |L110.28|
;;;4579       {
;;;4580           tblk_LL_pi = &TmrBlk_LL[TBlk_InUse_LL];
000008  4a07              LDR      r2,|L110.40|
00000a  00c0              LSLS     r0,r0,#3
00000c  1880              ADDS     r0,r0,r2
;;;4581           if(tblk_LL_pi->Next == MAX_TBLK_LL_NO)
00000e  6188              STR      r0,[r1,#0x18]  ; tblk_LL_pi
000010  7880              LDRB     r0,[r0,#2]
000012  280c              CMP      r0,#0xc
000014  d003              BEQ      |L110.30|
;;;4582           {
;;;4583               tblk_LL_pi2 = (TBLK_LLx *)0;
;;;4584           }
;;;4585           else
;;;4586           {
;;;4587               tblk_LL_pi2 = &TmrBlk_LL[tblk_LL_pi->Next];
000016  00c0              LSLS     r0,r0,#3
000018  1880              ADDS     r0,r0,r2
                  |L110.26|
00001a  61c8              STR      r0,[r1,#0x1c]  ; tblk_LL_pi2
                  |L110.28|
;;;4588           }
;;;4589       }
;;;4590   }
00001c  4770              BX       lr
                  |L110.30|
00001e  2000              MOVS     r0,#0                 ;4583
000020  e7fb              B        |L110.26|
;;;4591   
                          ENDP

000022  0000              DCW      0x0000
                  |L110.36|
                          DCD      ||.data||
                  |L110.40|
                          DCD      ||.bss||+0x564

                          AREA ||i.LL_TmrBlk_Rls||, CODE, READONLY, ALIGN=2

                  LL_TmrBlk_Rls PROC
;;;4504   
;;;4505   void LL_TmrBlk_Rls(void)
000000  4a0b              LDR      r2,|L111.48|
;;;4506   {
;;;4507       Uint8 i;
;;;4508   
;;;4509       i = tblk_LL_pi->Next;
000002  6991              LDR      r1,[r2,#0x18]  ; tblk_LL_pi
;;;4510       tblk_LL_pi->Next = TBlk_Free_LL;
000004  7913              LDRB     r3,[r2,#4]  ; TBlk_Free_LL
000006  7888              LDRB     r0,[r1,#2]            ;4509
000008  708b              STRB     r3,[r1,#2]
;;;4511       TBlk_Free_LL = TBlk_InUse_LL;
00000a  7951              LDRB     r1,[r2,#5]  ; TBlk_InUse_LL
00000c  7111              STRB     r1,[r2,#4]
;;;4512       TBlk_InUse_LL = i;
00000e  2100              MOVS     r1,#0
000010  7150              STRB     r0,[r2,#5]
;;;4513       if(i == MAX_TBLK_LL_NO)
000012  280c              CMP      r0,#0xc
000014  d009              BEQ      |L111.42|
;;;4514       {
;;;4515           tblk_LL_pi = (TBLK_LLx *)0;
;;;4516       }
;;;4517       else
;;;4518       {
;;;4519           tblk_LL_pi = tblk_LL_pi2;
000016  69d0              LDR      r0,[r2,#0x1c]  ; tblk_LL_pi2
;;;4520           i = tblk_LL_pi->Next;
000018  6190              STR      r0,[r2,#0x18]  ; tblk_LL_pi
00001a  7880              LDRB     r0,[r0,#2]
;;;4521       }
;;;4522       if(i == MAX_TBLK_LL_NO)
00001c  280c              CMP      r0,#0xc
00001e  d005              BEQ      |L111.44|
;;;4523       {
;;;4524           tblk_LL_pi2 = (TBLK_LLx *)0;
;;;4525       }
;;;4526       else
;;;4527       {
;;;4528           tblk_LL_pi2 = &TmrBlk_LL[i];
000020  4904              LDR      r1,|L111.52|
000022  00c0              LSLS     r0,r0,#3
000024  1840              ADDS     r0,r0,r1
000026  61d0              STR      r0,[r2,#0x1c]  ; tblk_LL_pi2
;;;4529       }
;;;4530   }
000028  4770              BX       lr
                  |L111.42|
00002a  6191              STR      r1,[r2,#0x18]         ;4515  ; tblk_LL_pi
                  |L111.44|
00002c  61d1              STR      r1,[r2,#0x1c]         ;4524  ; tblk_LL_pi2
00002e  4770              BX       lr
;;;4531   
                          ENDP

                  |L111.48|
                          DCD      ||.data||
                  |L111.52|
                          DCD      ||.bss||+0x564

                          AREA ||i.LL_TmrBlk_Rls_NxtIntvl||, CODE, READONLY, ALIGN=2

                  LL_TmrBlk_Rls_NxtIntvl PROC
;;;4562   
;;;4563   void LL_TmrBlk_Rls_NxtIntvl(void)
000000  b510              PUSH     {r4,lr}
;;;4564   {
;;;4565       if(TBlk_InUse_LL == MAX_TBLK_LL_NO)
000002  4806              LDR      r0,|L112.28|
000004  7941              LDRB     r1,[r0,#5]  ; TBlk_InUse_LL
000006  290c              CMP      r1,#0xc
000008  d004              BEQ      |L112.20|
;;;4566       {
;;;4567           RF_Tmr_Periodic_set_ISR(DUR_LL_WAKEUP_MIN);
;;;4568       }
;;;4569       else
;;;4570       {
;;;4571           RF_Tmr_Periodic_set_ISR(tblk_LL_pi->Ticks);
00000a  6980              LDR      r0,[r0,#0x18]  ; tblk_LL_pi
00000c  6840              LDR      r0,[r0,#4]
                  |L112.14|
00000e  f7fffffe          BL       RF_Tmr_Periodic_set_ISR
;;;4572       }
;;;4573   }
000012  bd10              POP      {r4,pc}
                  |L112.20|
000014  2019              MOVS     r0,#0x19              ;4567
000016  0180              LSLS     r0,r0,#6              ;4567
000018  e7f9              B        |L112.14|
;;;4574   
                          ENDP

00001a  0000              DCW      0x0000
                  |L112.28|
                          DCD      ||.data||

                          AREA ||i.LL_TmrBlk_Rls_Pair||, CODE, READONLY, ALIGN=2

                  LL_TmrBlk_Rls_Pair PROC
;;;4532   
;;;4533   void LL_TmrBlk_Rls_Pair(void)
000000  b430              PUSH     {r4,r5}
;;;4534   {
;;;4535       Uint8 i;
;;;4536   
;;;4537       i = tblk_LL_pi2->Next;
000002  4a0f              LDR      r2,|L113.64|
000004  69d1              LDR      r1,[r2,#0x1c]  ; tblk_LL_pi2
;;;4538       tblk_LL_pi2->Next = TBlk_Free_LL;
000006  7913              LDRB     r3,[r2,#4]  ; TBlk_Free_LL
000008  7888              LDRB     r0,[r1,#2]            ;4537
00000a  708b              STRB     r3,[r1,#2]
;;;4539       TBlk_Free_LL = TBlk_InUse_LL;
00000c  7953              LDRB     r3,[r2,#5]  ; TBlk_InUse_LL
00000e  7113              STRB     r3,[r2,#4]
;;;4540       TBlk_InUse_LL = i;
000010  2300              MOVS     r3,#0
000012  7150              STRB     r0,[r2,#5]
;;;4541   
;;;4542       if(i == MAX_TBLK_LL_NO)
000014  280c              CMP      r0,#0xc
000016  d00f              BEQ      |L113.56|
;;;4543       {
;;;4544           tblk_LL_pi = (TBLK_LLx *)0;
;;;4545       }
;;;4546       else
;;;4547       {
;;;4548           tblk_LL_pi = &TmrBlk_LL[i];
000018  4c0a              LDR      r4,|L113.68|
00001a  00c0              LSLS     r0,r0,#3
00001c  1900              ADDS     r0,r0,r4
;;;4549           tblk_LL_pi->Ticks = tblk_LL_pi->Ticks + tblk_LL_pi2->Ticks;
00001e  6190              STR      r0,[r2,#0x18]  ; tblk_LL_pi
000020  6845              LDR      r5,[r0,#4]
000022  6849              LDR      r1,[r1,#4]
000024  1869              ADDS     r1,r5,r1
;;;4550           i = tblk_LL_pi->Next;
000026  6041              STR      r1,[r0,#4]
000028  7880              LDRB     r0,[r0,#2]
;;;4551       }
;;;4552       if(i == MAX_TBLK_LL_NO)
00002a  280c              CMP      r0,#0xc
00002c  d005              BEQ      |L113.58|
;;;4553       {
;;;4554           tblk_LL_pi2 = (TBLK_LLx *)0;
;;;4555       }
;;;4556       else
;;;4557       {
;;;4558           tblk_LL_pi2 = &TmrBlk_LL[i];
00002e  00c0              LSLS     r0,r0,#3
000030  1900              ADDS     r0,r0,r4
000032  61d0              STR      r0,[r2,#0x1c]  ; tblk_LL_pi2
;;;4559       }
;;;4560   }
000034  bc30              POP      {r4,r5}
000036  4770              BX       lr
                  |L113.56|
000038  6193              STR      r3,[r2,#0x18]         ;4544  ; tblk_LL_pi
                  |L113.58|
00003a  61d3              STR      r3,[r2,#0x1c]         ;4554  ; tblk_LL_pi2
00003c  bc30              POP      {r4,r5}
00003e  4770              BX       lr
;;;4561   
                          ENDP

                  |L113.64|
                          DCD      ||.data||
                  |L113.68|
                          DCD      ||.bss||+0x564

                          AREA ||i.LL_Tmr_FIFO_ADVrpt||, CODE, READONLY, ALIGN=2

                  LL_Tmr_FIFO_ADVrpt PROC
;;;4592   
;;;4593   void LL_Tmr_FIFO_ADVrpt(LL_Para_Header HeaderR, MBLK *pMBlk)
000000  b570              PUSH     {r4-r6,lr}
;;;4594   {
000002  460e              MOV      r6,r1
000004  4605              MOV      r5,r0
;;;4595       MBLK *mblk;
;;;4596       Uint8 headerSts;
;;;4597   
;;;4598       RF_Get_LastRssiRaw();  //wait for read RX FIFO and Read RSSI register.
000006  2203              MOVS     r2,#3
000008  491a              LDR      r1,|L114.116|
00000a  20a6              MOVS     r0,#0xa6
00000c  f7fffffe          BL       SPI_PDMA_SetRx_Isr
;;;4599       mblk = GetMsgBlk_Isr();
000010  f7fffffe          BL       GetMsgBlk_Isr
000014  4604              MOV      r4,r0
;;;4600       mblk->Primitive = MHC_EVENT_LE_ADV_REPORT;
000016  206b              MOVS     r0,#0x6b
000018  7120              STRB     r0,[r4,#4]
;;;4601       Knl_MemCpy_Isr(mblk->Para.MHC_Le_Adv_Report_Para.HCI_Addr0, pMBlk->Para.Data, LEN_BD_ADDR);
00001a  4631              MOV      r1,r6
00001c  4620              MOV      r0,r4
00001e  2206              MOVS     r2,#6
000020  3108              ADDS     r1,r1,#8
000022  300d              ADDS     r0,r0,#0xd
000024  f7fffffe          BL       Knl_MemCpy_Isr
000028  b2e8              UXTB     r0,r5
;;;4602       headerSts = HeaderR.HeaderSts;    //headerSts = header[0]
;;;4603       if(headerSts&FLD_MSK_LL_ADV_TXADDR_TYPE)     //header0, bit6
00002a  0641              LSLS     r1,r0,#25
00002c  d501              BPL      |L114.50|
;;;4604       {
;;;4605           mblk->Para.MHC_Le_Adv_Report_Para.HCI_Addr_Type0 = HCI_ADDR_TYPE_RANDOM;
00002e  2101              MOVS     r1,#1
000030  e000              B        |L114.52|
                  |L114.50|
;;;4606       }
;;;4607       else
;;;4608       {
;;;4609           mblk->Para.MHC_Le_Adv_Report_Para.HCI_Addr_Type0 = HCI_ADDR_TYPE_PUBLIC;
000032  2100              MOVS     r1,#0
                  |L114.52|
;;;4610       }
;;;4611       mblk->Para.MHC_Le_Adv_Report_Para.HCI_Event_Type0 = (headerSts&FLD_MSK_LL_ADV_TYPE);
000034  0700              LSLS     r0,r0,#28
000036  0f00              LSRS     r0,r0,#28
000038  7321              STRB     r1,[r4,#0xc]          ;4609
00003a  72e0              STRB     r0,[r4,#0xb]
;;;4612       if((headerSts&FLD_MSK_LL_ADV_TYPE)==LE_ADV_TYPE_ADV_DIRECT_IND)
00003c  2801              CMP      r0,#1
00003e  d016              BEQ      |L114.110|
000040  04a8              LSLS     r0,r5,#18
;;;4613       {
;;;4614           headerSts = 0;
;;;4615       }
;;;4616       else
;;;4617       {
;;;4618           headerSts = (HeaderR.HeaderLen&FLD_MSK_LL_ADV_LEN)-LEN_BD_ADDR;   // headerSts = header_len - 6
000042  0e80              LSRS     r0,r0,#26
000044  1f80              SUBS     r0,r0,#6
000046  b2c5              UXTB     r5,r0
                  |L114.72|
;;;4619       }
;;;4620       mblk->Para.MHC_Le_Adv_Report_Para.HCI_Length0 = headerSts;
000048  74e5              STRB     r5,[r4,#0x13]
;;;4621       if(headerSts != 0)
00004a  2d00              CMP      r5,#0
00004c  d006              BEQ      |L114.92|
;;;4622       {
;;;4623           Knl_MemCpy_Isr(mblk->Para.MHC_Le_Adv_Report_Para.HCI_Data0, &pMBlk->Para.Data[LEN_BD_ADDR], headerSts);
00004e  4631              MOV      r1,r6
000050  4620              MOV      r0,r4
000052  462a              MOV      r2,r5
000054  310e              ADDS     r1,r1,#0xe
000056  3014              ADDS     r0,r0,#0x14
000058  f7fffffe          BL       Knl_MemCpy_Isr
                  |L114.92|
;;;4624       }
;;;4625       mblk->Para.MHC_Le_Adv_Report_Para.HCI_Data0[headerSts] = RF_Get_LastRssi();     //RSSI
00005c  f7fffffe          BL       RF_Get_LastRssi
000060  1961              ADDS     r1,r4,r5
000062  7508              STRB     r0,[r1,#0x14]
;;;4626       SndMsgBlk_Isr(mblk, Q_2HCI);
000064  2104              MOVS     r1,#4
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       SndMsgBlk_Isr
;;;4627   }
00006c  bd70              POP      {r4-r6,pc}
                  |L114.110|
00006e  2500              MOVS     r5,#0                 ;4614
000070  e7ea              B        |L114.72|
;;;4628   
                          ENDP

000072  0000              DCW      0x0000
                  |L114.116|
                          DCD      rssi_read_data

                          AREA ||i.LL_TxEnter_Isr||, CODE, READONLY, ALIGN=2

                  LL_TxEnter_Isr PROC
;;;4670   
;;;4671   void LL_TxEnter_Isr(void)
000000  b570              PUSH     {r4-r6,lr}
;;;4672   {
;;;4673       uint8_t i;
;;;4674   
;;;4675       //First T/R=T
;;;4676       //R121[6]=0: MAC go to TX state after wakeup
;;;4677       i = RFIP_reg_MEM[RFIP_REG_MEM_121] & (~REG_121_T_R_SEL_WKP);
000002  4d11              LDR      r5,|L115.72|
000004  7aec              LDRB     r4,[r5,#0xb]  ; RFIP_reg_MEM
000006  20bf              MOVS     r0,#0xbf
000008  4004              ANDS     r4,r4,r0
;;;4678       SPI_1BYT_SetTx_Isr(RFIP_REG_121, i);
00000a  4621              MOV      r1,r4
00000c  2079              MOVS     r0,#0x79
00000e  f7fffffe          BL       SPI_1BYT_SetTx_Isr
;;;4679       RFIP_reg_MEM[RFIP_REG_MEM_121] = i;
000012  72ec              STRB     r4,[r5,#0xb]
;;;4680   
;;;4681       RF_Msg_RF0INT = RF_MSG_RF0INT_WTR_T;
000014  490d              LDR      r1,|L115.76|
000016  2002              MOVS     r0,#2
000018  7308              STRB     r0,[r1,#0xc]
;;;4682   
;;;4683       if(ble_device_param.ble_deviceChipId==MP_A1)
00001a  480d              LDR      r0,|L115.80|
00001c  7801              LDRB     r1,[r0,#0]  ; ble_device_param
;;;4684       {
;;;4685           ((uint8_t *)&Tmr37)[4] |= (RFIP_reg_MEM[RFIP_REG_MEM_119] | REG_119_TR_TRIG_MODE);   //set R119 to enable TX
00001e  2040              MOVS     r0,#0x40
000020  2966              CMP      r1,#0x66              ;4683
000022  d005              BEQ      |L115.48|
;;;4686           SPI_PDMA_SetTx(RFIP_REG_115, (uint32_t)&Tmr37, 5);
;;;4687       }
;;;4688       else
;;;4689       {
;;;4690           i = RFIP_reg_MEM[RFIP_REG_MEM_119] | REG_119_TR_TRIG_MODE;
000024  7a69              LDRB     r1,[r5,#9]  ; RFIP_reg_MEM
000026  4301              ORRS     r1,r1,r0
;;;4691           SPI_1BYT_SetTx_Isr(RFIP_REG_119, i);
000028  2077              MOVS     r0,#0x77
00002a  f7fffffe          BL       SPI_1BYT_SetTx_Isr
;;;4692       }
;;;4693   }
00002e  bd70              POP      {r4-r6,pc}
                  |L115.48|
000030  4a08              LDR      r2,|L115.84|
000032  7a6b              LDRB     r3,[r5,#9]            ;4685  ; RFIP_reg_MEM
000034  7911              LDRB     r1,[r2,#4]            ;4685  ; Tmr37
000036  4319              ORRS     r1,r1,r3              ;4685
000038  4301              ORRS     r1,r1,r0              ;4685
00003a  7111              STRB     r1,[r2,#4]            ;4685
00003c  2205              MOVS     r2,#5                 ;4686
00003e  4905              LDR      r1,|L115.84|
000040  2073              MOVS     r0,#0x73              ;4686
000042  f7fffffe          BL       SPI_PDMA_SetTx
000046  bd70              POP      {r4-r6,pc}
;;;4694   
                          ENDP

                  |L115.72|
                          DCD      RFIP_reg_MEM
                  |L115.76|
                          DCD      ||.data||
                  |L115.80|
                          DCD      ble_device_param
                  |L115.84|
                          DCD      ||.data||+0x70

                          AREA ||i.LL_smp_SKD_IV_genIn||, CODE, READONLY, ALIGN=2

                  LL_smp_SKD_IV_genIn PROC
;;;4338   #pragma Otime
;;;4339   void LL_smp_SKD_IV_genIn(Uint8 *DataOut)
000000  b570              PUSH     {r4-r6,lr}
;;;4340   {
;;;4341       Knl_CodeCpy_Isr(DataOut, &RAND_INI32[(((Uint8 *) &seedR16)[0]&0x0F)], LEN_AES_KEY);
000002  4c0e              LDR      r4,|L116.60|
000004  4605              MOV      r5,r0                 ;4340
000006  7820              LDRB     r0,[r4,#0]  ; seedR16
000008  490d              LDR      r1,|L116.64|
00000a  0700              LSLS     r0,r0,#28
00000c  0f00              LSRS     r0,r0,#28
00000e  1841              ADDS     r1,r0,r1
000010  2210              MOVS     r2,#0x10
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       Knl_CodeCpy_Isr
;;;4342       if((((Uint8 *) &seedR16)[0]&0x01))
000018  7820              LDRB     r0,[r4,#0]  ; seedR16
00001a  07c0              LSLS     r0,r0,#31
00001c  d004              BEQ      |L116.40|
;;;4343       {
;;;4344           //smpAES_inInv((Uint8 *)(&seedR16-(LEN_AES_KEY-2)), DataOut);
;;;4345           smpAES_inInv((Uint8 *)(&seedR16), DataOut);
00001e  4629              MOV      r1,r5
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       smpAES_inInv
;;;4346       }
;;;4347       else
;;;4348       {
;;;4349           smpAES_in_key((Uint8 *)(&seedR16));
;;;4350           smpAES_in_PlainText(DataOut);
;;;4351           smpAES_En();
;;;4352       }
;;;4353   }
000026  bd70              POP      {r4-r6,pc}
                  |L116.40|
000028  4804              LDR      r0,|L116.60|
00002a  f7fffffe          BL       smpAES_in_key
00002e  4628              MOV      r0,r5                 ;4350
000030  f7fffffe          BL       smpAES_in_PlainText
000034  f7fffffe          BL       smpAES_En
000038  bd70              POP      {r4-r6,pc}
;;;4354   
                          ENDP

00003a  0000              DCW      0x0000
                  |L116.60|
                          DCD      ||.data||+0x2c
                  |L116.64|
                          DCD      ||.constdata||+0xfa

                          AREA ||i.MEC_HCI_Null||, CODE, READONLY, ALIGN=1

                  MEC_HCI_Null PROC
;;;3851   
;;;3852   void MEC_HCI_Null(MBLK *pMBlk)
000000  bf00              NOP      
;;;3853   {
;;;3854       __NOP();
;;;3855   }
000002  4770              BX       lr
;;;3856   
                          ENDP


                          AREA ||i.MLL_HCI_Null||, CODE, READONLY, ALIGN=1

                  MLL_HCI_Null PROC
;;;1240   
;;;1241   void MLL_HCI_Null(MBLK *pMBlk)
000000  bf00              NOP      
;;;1242   {
;;;1243       __NOP();
;;;1244   }
000002  4770              BX       lr
;;;1245   
                          ENDP


                          AREA ||i.MLL_LE_Ctrl_Pkt||, CODE, READONLY, ALIGN=1

                  MLL_LE_Ctrl_Pkt PROC
;;;3235   
;;;3236   void MLL_LE_Ctrl_Pkt(MBLK *pMBlk)
000000  bf00              NOP      
;;;3237   {
;;;3238       __NOP();
;;;3239   }
000002  4770              BX       lr
;;;3240   
                          ENDP


                          AREA ||i.MLL_LL_CHN_Map_Upd||, CODE, READONLY, ALIGN=2

                  MLL_LL_CHN_Map_Upd PROC
;;;3732   
;;;3733   void MLL_LL_CHN_Map_Upd(MBLK *pMBlk)
000000  b510              PUSH     {r4,lr}
;;;3734   {
;;;3735       extern void LL_RfChRemap(LL_Conn *pLL_Conn);
;;;3736   
;;;3737       LL_RfChRemap(&LL_Conn_Para[pMBlk->Para.MLL_LL_CHN_Map_Upd_Para.LL_Conn_No]);
000002  7a00              LDRB     r0,[r0,#8]
000004  2188              MOVS     r1,#0x88
000006  4348              MULS     r0,r1,r0
000008  4902              LDR      r1,|L120.20|
00000a  1840              ADDS     r0,r0,r1
00000c  f7fffffe          BL       LL_RfChRemap
;;;3738   }
000010  bd10              POP      {r4,pc}
;;;3739   
                          ENDP

000012  0000              DCW      0x0000
                  |L120.20|
                          DCD      ||.bss||+0xd0

                          AREA ||i.MLL_LL_Enc_Req||, CODE, READONLY, ALIGN=2

                  MLL_LL_Enc_Req PROC
;;;3740   
;;;3741   void MLL_LL_Enc_Req(MBLK *pMBlk)
000000  b510              PUSH     {r4,lr}
;;;3742   {
;;;3743       Uint8 i;
;;;3744   
;;;3745       i = pMBlk->Para.MLL_LL_Enc_Req_Para.LL_Conn_No;
000002  7a03              LDRB     r3,[r0,#8]
;;;3746       LL_Msg_CTRL_PKT(mblk_LL_conn_Para[i]->Para.MLL_LE_Conn_Para_SMP.LL_Random_Num, LL_ENC_REQ, (LEN_SMP_RAND+LEN_SMP_EDIV+LEN_SMP_SKDM+LEN_SMP_IVM), i);
000004  4904              LDR      r1,|L121.24|
000006  0098              LSLS     r0,r3,#2
000008  5808              LDR      r0,[r1,r0]
00000a  2216              MOVS     r2,#0x16
00000c  2103              MOVS     r1,#3
00000e  3008              ADDS     r0,r0,#8
000010  f7fffffe          BL       LL_Msg_CTRL_PKT
;;;3747   }
000014  bd10              POP      {r4,pc}
;;;3748   
                          ENDP

000016  0000              DCW      0x0000
                  |L121.24|
                          DCD      ||.bss||+0x5c4

                          AREA ||i.RF_cmpFIFO_BDAddr||, CODE, READONLY, ALIGN=2

                  RF_cmpFIFO_BDAddr PROC
;;;4449   
;;;4450   Uint8 RF_cmpFIFO_BDAddr(Uint8 HeaderSts_Rx, MBLK *pMBlk)
000000  b510              PUSH     {r4,lr}
;;;4451   {
;;;4452       if(LL_Adv_Para.Adv_Para.LL_Own_Addr_Type == 0)
000002  4a09              LDR      r2,|L122.40|
000004  310e              ADDS     r1,r1,#0xe
000006  7a52              LDRB     r2,[r2,#9]  ; LL_Adv_Para
000008  2a00              CMP      r2,#0
00000a  d006              BEQ      |L122.26|
;;;4453       {
;;;4454           if((HeaderSts_Rx&FLD_MSK_LL_ADV_RXADDR_TYPE))
;;;4455           {
;;;4456               return FAIL_;
;;;4457           }
;;;4458           else
;;;4459           {
;;;4460               return Knl_MemComp_Isr(ble_device_param.ble_deviceAddr_param.addr, &pMBlk->Para.Data[LEN_BD_ADDR], LEN_BD_ADDR);
;;;4461   
;;;4462           }
;;;4463       }
;;;4464       else
;;;4465       {
;;;4466           if((HeaderSts_Rx&FLD_MSK_LL_ADV_RXADDR_TYPE))
00000c  0600              LSLS     r0,r0,#24
00000e  d509              BPL      |L122.36|
;;;4467           {
;;;4468               return Knl_MemComp_Isr(BD_Rand_Addr, &pMBlk->Para.Data[LEN_BD_ADDR], LEN_BD_ADDR);
000010  2206              MOVS     r2,#6
000012  4806              LDR      r0,|L122.44|
                  |L122.20|
000014  f7fffffe          BL       Knl_MemComp_Isr
;;;4469           }
;;;4470           else
;;;4471           {
;;;4472               return FAIL_;
;;;4473           }
;;;4474       }
;;;4475   }
000018  bd10              POP      {r4,pc}
                  |L122.26|
00001a  0600              LSLS     r0,r0,#24             ;4454
00001c  d402              BMI      |L122.36|
00001e  2206              MOVS     r2,#6                 ;4460
000020  4803              LDR      r0,|L122.48|
000022  e7f7              B        |L122.20|
                  |L122.36|
000024  2001              MOVS     r0,#1                 ;4472
000026  bd10              POP      {r4,pc}
;;;4476   
                          ENDP

                  |L122.40|
                          DCD      ||.bss||
                  |L122.44|
                          DCD      ||.data||+0x45
                  |L122.48|
                          DCD      ble_device_param+0x2

                          AREA ||i.RF_cmpFIFO_WhiteList||, CODE, READONLY, ALIGN=2

                  RF_cmpFIFO_WhiteList PROC
;;;4477   
;;;4478   Uint8 RF_cmpFIFO_WhiteList(Uint8 HeaderSts_Rx, MBLK *pMBlk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4479   {
;;;4480       Uint8 j, status;
;;;4481   
;;;4482       j = 0;
000002  2500              MOVS     r5,#0
;;;4483       if((HeaderSts_Rx&FLD_MSK_LL_ADV_TXADDR_TYPE))
000004  0640              LSLS     r0,r0,#25
000006  d500              BPL      |L123.10|
;;;4484       {
;;;4485           j = HCI_ADDR_TYPE_RANDOM;
000008  2501              MOVS     r5,#1
                  |L123.10|
;;;4486       }
;;;4487       for(status=0; status<SIZE_WHITE_LIST_ENTRIES; status++)
00000a  2400              MOVS     r4,#0
;;;4488       {
;;;4489           if(LL_WhiteList_Para[status].LE_WhiteList_Para.AddrType == j)
00000c  4e0c              LDR      r6,|L123.64|
;;;4490           {
;;;4491               //if(Knl_MemComp_Isr(RXDATA_REG, &(LL_WhiteList_Para[status].LE_WhiteList_Para.Addr)[0], LEN_BD_ADDR)==SUCCESS) {
;;;4492               if(Knl_MemComp_Isr(pMBlk->Para.Data, &(LL_WhiteList_Para[status].LE_WhiteList_Para.Addr)[0], LEN_BD_ADDR)==SUCCESS_)
00000e  460f              MOV      r7,r1
000010  3708              ADDS     r7,r7,#8
                  |L123.18|
000012  00e0              LSLS     r0,r4,#3              ;4489
000014  1b00              SUBS     r0,r0,r4              ;4489
000016  5c31              LDRB     r1,[r6,r0]            ;4489
000018  42a9              CMP      r1,r5                 ;4489
00001a  d107              BNE      |L123.44|
00001c  1981              ADDS     r1,r0,r6
00001e  2206              MOVS     r2,#6
000020  4638              MOV      r0,r7
000022  1c49              ADDS     r1,r1,#1
000024  f7fffffe          BL       Knl_MemComp_Isr
000028  2800              CMP      r0,#0
00002a  d003              BEQ      |L123.52|
                  |L123.44|
00002c  1c64              ADDS     r4,r4,#1
00002e  b2e4              UXTB     r4,r4                 ;4487
000030  2c04              CMP      r4,#4                 ;4487
000032  d3ee              BCC      |L123.18|
                  |L123.52|
;;;4493               {
;;;4494                   break;
;;;4495               }
;;;4496           }
;;;4497       }
;;;4498       if(status == SIZE_WHITE_LIST_ENTRIES)
000034  2c04              CMP      r4,#4
000036  d001              BEQ      |L123.60|
;;;4499           return FAIL_;
;;;4500       else
;;;4501           return SUCCESS_;
000038  2000              MOVS     r0,#0
;;;4502   }
00003a  bdf8              POP      {r3-r7,pc}
                  |L123.60|
00003c  2001              MOVS     r0,#1                 ;4499
00003e  bdf8              POP      {r3-r7,pc}
;;;4503   
                          ENDP

                  |L123.64|
                          DCD      ||.bss||+0x420

                          AREA ||i.SndMsgBlkEC||, CODE, READONLY, ALIGN=2

                  SndMsgBlkEC PROC
;;;800     *******************************************************************/
;;;801    void SndMsgBlkEC(MBLK *pMsgBlk)
000000  b672              CPSID    i
;;;802    {
;;;803    
;;;804        InterruptDisable();
;;;805        if (MsgQueueEC.QIn == (MBLK *)0)
000002  4a05              LDR      r2,|L124.24|
000004  6811              LDR      r1,[r2,#0]  ; MsgQueueEC
000006  2900              CMP      r1,#0
000008  d003              BEQ      |L124.18|
;;;806        {
;;;807            MsgQueueEC.QOut = pMsgBlk;
;;;808            MsgQueueEC.QIn = pMsgBlk;
;;;809        }
;;;810        else
;;;811        {
;;;812            (MsgQueueEC.QIn)->Next = (MBLK *)pMsgBlk;
00000a  6008              STR      r0,[r1,#0]
                  |L124.12|
;;;813            MsgQueueEC.QIn = (MBLK *)pMsgBlk;
;;;814        }
;;;815        InterruptEnable();
00000c  6010              STR      r0,[r2,#0]  ; MsgQueueEC
00000e  b662              CPSIE    i
;;;816    }
000010  4770              BX       lr
                  |L124.18|
000012  6050              STR      r0,[r2,#4]            ;808  ; MsgQueueEC
000014  e7fa              B        |L124.12|
;;;817    
                          ENDP

000016  0000              DCW      0x0000
                  |L124.24|
                          DCD      ||.data||+0x78

                          AREA ||i.chkBLE_LL_State_Adv||, CODE, READONLY, ALIGN=2

                  chkBLE_LL_State_Adv PROC
;;;9319   
;;;9320   Uint8 chkBLE_LL_State_Adv(void)
000000  b672              CPSID    i
;;;9321   {
;;;9322       Uint8 i;
;;;9323       InterruptDisable();
;;;9324       i = LL_Msg_AdvScnConnUpd;
000002  4803              LDR      r0,|L125.16|
000004  7a80              LDRB     r0,[r0,#0xa]  ; LL_Msg_AdvScnConnUpd
;;;9325       InterruptEnable();
000006  b662              CPSIE    i
;;;9326   
;;;9327       return (i&(LL_MSG_ADVSCNCONN_ADV_EN));
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
;;;9328   }   //0: Stanby, not 0: Advertising state.
00000c  4770              BX       lr
;;;9329   
                          ENDP

00000e  0000              DCW      0x0000
                  |L125.16|
                          DCD      ||.data||

                          AREA ||i.chkBLE_LL_State_Init||, CODE, READONLY, ALIGN=2

                  chkBLE_LL_State_Init PROC
;;;9341   
;;;9342   Uint8 chkBLE_LL_State_Init(void)
000000  b672              CPSID    i
;;;9343   {
;;;9344       Uint8 i;
;;;9345       InterruptDisable();
;;;9346       i = LL_Msg_AdvScnConnUpd;
000002  4803              LDR      r0,|L126.16|
000004  7a80              LDRB     r0,[r0,#0xa]  ; LL_Msg_AdvScnConnUpd
;;;9347       InterruptEnable();
000006  b662              CPSIE    i
;;;9348   
;;;9349       return (i&(LL_MSG_ADVSCNCONN_INIT_EN));
000008  2104              MOVS     r1,#4
00000a  4008              ANDS     r0,r0,r1
;;;9350   }   //0: Stanby, not 0: Creating connection init. state.
00000c  4770              BX       lr
;;;9351   
                          ENDP

00000e  0000              DCW      0x0000
                  |L126.16|
                          DCD      ||.data||

                          AREA ||i.chkBLE_LL_State_Scan||, CODE, READONLY, ALIGN=2

                  chkBLE_LL_State_Scan PROC
;;;9330   
;;;9331   Uint8 chkBLE_LL_State_Scan(void)
000000  b672              CPSID    i
;;;9332   {
;;;9333       Uint8 i;
;;;9334       InterruptDisable();
;;;9335       i = LL_Msg_AdvScnConnUpd;
000002  4803              LDR      r0,|L127.16|
000004  7a80              LDRB     r0,[r0,#0xa]  ; LL_Msg_AdvScnConnUpd
;;;9336       InterruptEnable();
000006  b662              CPSIE    i
;;;9337   
;;;9338       return (i&(LL_MSG_ADVSCNCONN_SCN_EN));
000008  2102              MOVS     r1,#2
00000a  4008              ANDS     r0,r0,r1
;;;9339   }   //0: Stanby, not 0: Scan state.
00000c  4770              BX       lr
;;;9340   
                          ENDP

00000e  0000              DCW      0x0000
                  |L127.16|
                          DCD      ||.data||

                          AREA ||i.initLL||, CODE, READONLY, ALIGN=2

                  initLL PROC
;;;4214   #pragma Ospace
;;;4215   void initLL(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4216   {
;;;4217       Uint8 i;
;;;4218   
;;;4219       for(i=0; i<MAX_NUM_CONN_HDL; i++)
;;;4220       {
;;;4221           LL_ConnDataQ[i].QOut = (MBLK *)0;                           //initialization
000002  4e45              LDR      r6,|L128.280|
000004  2500              MOVS     r5,#0                 ;4219
;;;4222           LL_ConnDataQ[i].QIn = (MBLK *)0;                            //initialization
;;;4223           LL_ConnCtrlQ[i].QOut = (MBLK *)0;                           //initialization
;;;4224           LL_ConnCtrlQ[i].QIn = (MBLK *)0;                            //initialization
;;;4225           LL_ConnDataInQ[i].QOut = (MBLK *)0;                         //initialization
000006  4637              MOV      r7,r6
000008  3750              ADDS     r7,r7,#0x50
00000a  462c              MOV      r4,r5
                  |L128.12|
00000c  00e9              LSLS     r1,r5,#3              ;4221
00000e  1988              ADDS     r0,r1,r6              ;4221
000010  6044              STR      r4,[r0,#4]            ;4222
000012  4841              LDR      r0,|L128.280|
000014  5074              STR      r4,[r6,r1]            ;4222
000016  3028              ADDS     r0,r0,#0x28           ;4223
000018  180a              ADDS     r2,r1,r0              ;4223
00001a  6054              STR      r4,[r2,#4]            ;4224
00001c  5044              STR      r4,[r0,r1]            ;4224
00001e  19c8              ADDS     r0,r1,r7
;;;4226           LL_ConnDataInQ[i].QIn = (MBLK *)0;                          //initialization
000020  6044              STR      r4,[r0,#4]
000022  507c              STR      r4,[r7,r1]
;;;4227           LL_ConnBuffPt[i] = (MBLK *)0;                               //initialization
000024  493c              LDR      r1,|L128.280|
000026  00a8              LSLS     r0,r5,#2
000028  3178              ADDS     r1,r1,#0x78
00002a  500c              STR      r4,[r1,r0]
;;;4228           mblk_LL_conn_Para[i] = (MBLK *)0;                           //initialization
00002c  31ff              ADDS     r1,r1,#0xff
00002e  31d5              ADDS     r1,r1,#0xd5
000030  500c              STR      r4,[r1,r0]
;;;4229           LL_ReleaseConnID(i);                                        //initialization
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       LL_ReleaseConnID
000038  1c6d              ADDS     r5,r5,#1
00003a  b2ed              UXTB     r5,r5                 ;4219
00003c  2d05              CMP      r5,#5                 ;4219
00003e  d3e5              BCC      |L128.12|
;;;4230       }
;;;4231       LL_ConnID_Remaining = MAX_NUM_CONN_HDL;                         //initialization
;;;4232       LL_Scan_Para.LE_Set_Scan_Para.LL_AdvMap_ID = 0;                 //initialization
000040  4e37              LDR      r6,|L128.288|
000042  4836              LDR      r0,|L128.284|
;;;4233       LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_AdvMap_ID = 0;          //initialization
;;;4234       LL_Adv_Para.Adv_Para.LL_AdvMap_ID = 0;                          //initialization
000044  4632              MOV      r2,r6
000046  3ab8              SUBS     r2,r2,#0xb8
000048  2105              MOVS     r1,#5                 ;4231
00004a  70c1              STRB     r1,[r0,#3]            ;4231
00004c  4637              MOV      r7,r6                 ;4233
00004e  7034              STRB     r4,[r6,#0]            ;4232
000050  370c              ADDS     r7,r7,#0xc            ;4233
000052  703c              STRB     r4,[r7,#0]            ;4233
000054  7014              STRB     r4,[r2,#0]
;;;4235       LL_Adv_Para.Adv_Para.LL_AdvConn_ID = LL_CONN_ID_SLAVE_RSV;      //initialization
;;;4236       LL_Adv_Para.Adv_Para.LL_ScanRsp_Data_Length = 0;                //initialization
000056  4613              MOV      r3,r2
000058  7051              STRB     r1,[r2,#1]            ;4235
00005a  3340              ADDS     r3,r3,#0x40
00005c  76dc              STRB     r4,[r3,#0x1b]
;;;4237       LL_Adv_Para.Adv_Para.LL_Adv_Data_Length = LEN_BD_ADDR;          //initialization
00005e  4615              MOV      r5,r2
000060  2306              MOVS     r3,#6
000062  3520              ADDS     r5,r5,#0x20
000064  76eb              STRB     r3,[r5,#0x1b]
;;;4238       LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvMap_ID = 0;                       //initialization
000066  353c              ADDS     r5,r5,#0x3c
000068  702c              STRB     r4,[r5,#0]
;;;4239       LL_Adv_Para_UpdBuf.Adv_Para.LL_AdvConn_ID = LL_CONN_ID_SLAVE_RSV;   //initialization
00006a  7069              STRB     r1,[r5,#1]
;;;4240       LL_Adv_Para_UpdBuf.Adv_Para.LL_ScanRsp_Data_Length = 0;             //initialization
00006c  4611              MOV      r1,r2
00006e  319c              ADDS     r1,r1,#0x9c
000070  76cc              STRB     r4,[r1,#0x1b]
;;;4241       LL_Adv_Para_UpdBuf.Adv_Para.LL_Adv_Data_Length = LEN_BD_ADDR;       //initialization
000072  3920              SUBS     r1,r1,#0x20
000074  76cb              STRB     r3,[r1,#0x1b]
;;;4242       LL_Init_Para.LE_Init_Para.LL_Conn_ID = LL_CONN_ID_RSV;          //initialization
000076  4928              LDR      r1,|L128.280|
000078  23ff              MOVS     r3,#0xff
00007a  318c              ADDS     r1,r1,#0x8c
00007c  700b              STRB     r3,[r1,#0]
;;;4243       LL_Init_Para.LE_Init_Para.LL_AdvMap_ID = 0;                     //initialization
00007e  704c              STRB     r4,[r1,#1]
;;;4244       LL_Msg_AdvScnConn = 0;                                          //initialization
000080  7244              STRB     r4,[r0,#9]
;;;4245       LL_Msg_AdvScnConnUpd = 0;                                       //initialization
000082  7284              STRB     r4,[r0,#0xa]
;;;4246       LL_Msg_AdvScnConnUpdSts = 0;                                    //initialization
000084  72c4              STRB     r4,[r0,#0xb]
;;;4247       LL_Ref_Acs_Addr_ADVSCN = 0x8E89BED6;
000086  4b27              LDR      r3,|L128.292|
;;;4248       LL_Ref_crc_ini_ADVSCN = 0x55555555;
000088  6303              STR      r3,[r0,#0x30]  ; LL_Ref_Acs_Addr_ADVSCN
00008a  4b27              LDR      r3,|L128.296|
;;;4249       LL_ConnDataInTmp.QOut = (MBLK *)0;                              //initialization
00008c  6343              STR      r3,[r0,#0x34]  ; LL_Ref_crc_ini_ADVSCN
00008e  4603              MOV      r3,r0
000090  3354              ADDS     r3,r3,#0x54
;;;4250       LL_ConnDataInTmp.QIn = (MBLK *)0;                               //initialization
000092  605c              STR      r4,[r3,#4]  ; LL_ConnDataInTmp
;;;4251       LL_ConnDataTmpGate = 0;                                         //initialization
000094  601c              STR      r4,[r3,#0]  ; LL_ConnDataInTmp
000096  7084              STRB     r4,[r0,#2]
;;;4252   
;;;4253       // TX Power Initialization
;;;4254       LL_Adv_Para.Adv_Para.LL_Tx_PowerLevel = TX_POWER_8_DBM;
000098  2308              MOVS     r3,#8
00009a  7093              STRB     r3,[r2,#2]
;;;4255       LL_Adv_Para_UpdBuf.Adv_Para.LL_Tx_PowerLevel = TX_POWER_8_DBM;
00009c  70ab              STRB     r3,[r5,#2]
;;;4256       LL_Scan_Para.LE_Set_Scan_Para.LL_Tx_PowerLevel = TX_POWER_8_DBM;
00009e  72b3              STRB     r3,[r6,#0xa]
;;;4257       LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_Tx_PowerLevel = TX_POWER_8_DBM;
0000a0  72bb              STRB     r3,[r7,#0xa]
;;;4258       LL_Init_Para.LE_Init_Para.LL_Tx_PowerLevel = TX_POWER_8_DBM;
0000a2  744b              STRB     r3,[r1,#0x11]
;;;4259   
;;;4260   
;;;4261       for(i=0; i<MAX_TBLK_LL_NO; i++)
;;;4262       {
;;;4263           TmrBlk_LL[i].Next = i + 1;                      //initialization
0000a4  4b21              LDR      r3,|L128.300|
0000a6  2100              MOVS     r1,#0                 ;4261
                  |L128.168|
0000a8  1c4a              ADDS     r2,r1,#1
0000aa  00c9              LSLS     r1,r1,#3
0000ac  18c9              ADDS     r1,r1,r3
0000ae  708a              STRB     r2,[r1,#2]
0000b0  b2d1              UXTB     r1,r2                 ;4261
0000b2  290c              CMP      r1,#0xc               ;4261
0000b4  d3f8              BCC      |L128.168|
;;;4264       }
;;;4265       TBlk_Free_LL = 0;                                   //initialization
0000b6  7104              STRB     r4,[r0,#4]
;;;4266       TBlk_InUse_LL = MAX_TBLK_LL_NO;                     //initialization
0000b8  210c              MOVS     r1,#0xc
0000ba  7141              STRB     r1,[r0,#5]
;;;4267   
;;;4268       status_LL_Tmr = LL_INT_S0;                          //initialization
0000bc  71c4              STRB     r4,[r0,#7]
;;;4269       anchor_LL_Tmr = 0;                                  //initialization
0000be  7204              STRB     r4,[r0,#8]
;;;4270   
;;;4271       LL_SMP_DataCh = 0;                                  //initialization
0000c0  7184              STRB     r4,[r0,#6]
;;;4272   //    LL_Para_Interval.LL_SMP_DataCh = 0;                 //initialization
;;;4273   
;;;4274       //(void)setBLE_BleDeviceAddr(&bleAddr_param);        //initialization
;;;4275       //reset_BleDeviceParam(&ble_device_param);            // set default device information
;;;4276   
;;;4277       Knl_CodeCpy(LL_Ref_ChMap, LL_CHMAP_DEFAUT, LEN_LL_CH_MAP);                          //initialization
0000c2  4816              LDR      r0,|L128.284|
0000c4  2205              MOVS     r2,#5
0000c6  491a              LDR      r1,|L128.304|
0000c8  3040              ADDS     r0,r0,#0x40
0000ca  f7fffffe          BL       Knl_CodeCpy
;;;4278       if((ble_device_param.ble_deviceChipId&PHY_LIMIT_BY_IC_VERSION) == PHY_LIMIT_1M)
0000ce  4819              LDR      r0,|L128.308|
0000d0  7800              LDRB     r0,[r0,#0]  ; ble_device_param
0000d2  0640              LSLS     r0,r0,#25
0000d4  0f40              LSRS     r0,r0,#29
0000d6  2807              CMP      r0,#7
0000d8  d016              BEQ      |L128.264|
;;;4279       {
;;;4280           LL_Ref_Default_PHY.All_PHYs = LL_ALL_PHYS_PREFER_TX_Y_RX_Y;
;;;4281           LL_Ref_Default_PHY.Tx_PHYs = LL_TX_PHYS_1M_PHY;
;;;4282           LL_Ref_Default_PHY.Rx_PHYs = LL_RX_PHYS_1M_PHY;
;;;4283           LL_Ref_Default_PHY.PHY_options = LL_PHY_OPTIONS_CODED_PHY_PREPER_NONE;
;;;4284       }
;;;4285       else
;;;4286       {
;;;4287           Knl_CodeCpy(&LL_Ref_Default_PHY.All_PHYs, LL_DEFAULT_PHY, sizeof(LL_DEFAULT_PHY));  //initialization
0000da  4915              LDR      r1,|L128.304|
0000dc  480f              LDR      r0,|L128.284|
0000de  2204              MOVS     r2,#4
0000e0  390c              SUBS     r1,r1,#0xc
0000e2  3014              ADDS     r0,r0,#0x14
0000e4  f7fffffe          BL       Knl_CodeCpy
                  |L128.232|
;;;4288       }
;;;4289   
;;;4290       //*(uint32_t *)&LL_Ref_ChMap = 0xFFFFFFFF;
;;;4291   
;;;4292       /* Clear white list */
;;;4293       for(i=0; i<SIZE_WHITE_LIST_ENTRIES; i++)
;;;4294       {
;;;4295           LL_WhiteList_Para[i].LE_WhiteList_Para.AddrType = DEF_EMPTY_WHITE_LIST;         //initialization
0000e8  4a0b              LDR      r2,|L128.280|
0000ea  2000              MOVS     r0,#0                 ;4293
0000ec  21fc              MOVS     r1,#0xfc
0000ee  32a8              ADDS     r2,r2,#0xa8
                  |L128.240|
0000f0  00c3              LSLS     r3,r0,#3
0000f2  1a1b              SUBS     r3,r3,r0
0000f4  1c40              ADDS     r0,r0,#1
0000f6  b2c0              UXTB     r0,r0                 ;4293
0000f8  54d1              STRB     r1,[r2,r3]
0000fa  2804              CMP      r0,#4                 ;4293
0000fc  d3f8              BCC      |L128.240|
;;;4296       }
;;;4297       MsgQueueEC.QIn = (MBLK *)0;                         //initialization
0000fe  4807              LDR      r0,|L128.284|
000100  3078              ADDS     r0,r0,#0x78
;;;4298       MsgQueueEC.QOut = (MBLK *)0;                        //initialization
000102  6004              STR      r4,[r0,#0]  ; MsgQueueEC
;;;4299   }
000104  6044              STR      r4,[r0,#4]  ; MsgQueueEC
000106  bdf8              POP      {r3-r7,pc}
                  |L128.264|
000108  4804              LDR      r0,|L128.284|
00010a  3014              ADDS     r0,r0,#0x14           ;4280
00010c  7004              STRB     r4,[r0,#0]            ;4280
00010e  2101              MOVS     r1,#1                 ;4281
000110  7041              STRB     r1,[r0,#1]            ;4281
000112  7081              STRB     r1,[r0,#2]            ;4282
000114  70c4              STRB     r4,[r0,#3]            ;4283
000116  e7e7              B        |L128.232|
;;;4300   
                          ENDP

                  |L128.280|
                          DCD      ||.bss||+0x378
                  |L128.284|
                          DCD      ||.data||
                  |L128.288|
                          DCD      ||.bss||+0xb8
                  |L128.292|
                          DCD      0x8e89bed6
                  |L128.296|
                          DCD      0x55555555
                  |L128.300|
                          DCD      ||.bss||+0x564
                  |L128.304|
                          DCD      ||.constdata||+0xc
                  |L128.308|
                          DCD      ble_device_param

                          AREA ||i.setBLE_LL_TxPowerLevel_Adv||, CODE, READONLY, ALIGN=2

                  setBLE_LL_TxPowerLevel_Adv PROC
;;;9352   
;;;9353   Uint8 setBLE_LL_TxPowerLevel_Adv(Uint8 powerLevel)
000000  b672              CPSID    i
;;;9354   {
;;;9355       Uint8 i;
;;;9356       InterruptDisable();
;;;9357       i = LL_Msg_AdvScnConnUpd;
000002  4905              LDR      r1,|L129.24|
000004  7a89              LDRB     r1,[r1,#0xa]  ; LL_Msg_AdvScnConnUpd
;;;9358       InterruptEnable();
000006  b662              CPSIE    i
;;;9359   
;;;9360       if(i&(LL_MSG_ADVSCNCONN_ADV_EN))
000008  07c9              LSLS     r1,r1,#31
00000a  d001              BEQ      |L129.16|
;;;9361       {
;;;9362           return FAIL_;
00000c  2001              MOVS     r0,#1
;;;9363       }
;;;9364       else
;;;9365       {
;;;9366           LL_Adv_Para_UpdBuf.Adv_Para.LL_Tx_PowerLevel = powerLevel;
;;;9367           return SUCCESS_;
;;;9368       }
;;;9369   }   //0: SUCCESS, not 0: FAIL.
00000e  4770              BX       lr
                  |L129.16|
000010  4902              LDR      r1,|L129.28|
000012  7088              STRB     r0,[r1,#2]            ;9366
000014  2000              MOVS     r0,#0                 ;9367
000016  4770              BX       lr
;;;9370   
                          ENDP

                  |L129.24|
                          DCD      ||.data||
                  |L129.28|
                          DCD      ||.bss||+0x5c

                          AREA ||i.setBLE_LL_TxPowerLevel_Init||, CODE, READONLY, ALIGN=2

                  setBLE_LL_TxPowerLevel_Init PROC
;;;9390   
;;;9391   Uint8 setBLE_LL_TxPowerLevel_Init(Uint8 powerLevel)
000000  b672              CPSID    i
;;;9392   {
;;;9393       Uint8 i;
;;;9394       InterruptDisable();
;;;9395       i = LL_Msg_AdvScnConnUpd;
000002  4905              LDR      r1,|L130.24|
000004  7a89              LDRB     r1,[r1,#0xa]  ; LL_Msg_AdvScnConnUpd
;;;9396       InterruptEnable();
000006  b662              CPSIE    i
;;;9397   
;;;9398       if(i&(LL_MSG_ADVSCNCONN_INIT_EN))
000008  0749              LSLS     r1,r1,#29
00000a  d501              BPL      |L130.16|
;;;9399       {
;;;9400           return FAIL_;
00000c  2001              MOVS     r0,#1
;;;9401       }
;;;9402       else
;;;9403       {
;;;9404           LL_Init_Para.LE_Init_Para.LL_Tx_PowerLevel = powerLevel;
;;;9405           return SUCCESS_;
;;;9406       }
;;;9407   }   //0: SUCCESS, not 0: FAIL.
00000e  4770              BX       lr
                  |L130.16|
000010  4902              LDR      r1,|L130.28|
000012  7448              STRB     r0,[r1,#0x11]         ;9404
000014  2000              MOVS     r0,#0                 ;9405
000016  4770              BX       lr
;;;9408   
                          ENDP

                  |L130.24|
                          DCD      ||.data||
                  |L130.28|
                          DCD      ||.bss||+0x404

                          AREA ||i.setBLE_LL_TxPowerLevel_Scan||, CODE, READONLY, ALIGN=2

                  setBLE_LL_TxPowerLevel_Scan PROC
;;;9371   
;;;9372   Uint8 setBLE_LL_TxPowerLevel_Scan(Uint8 powerLevel)
000000  b672              CPSID    i
;;;9373   {
;;;9374       Uint8 i;
;;;9375       InterruptDisable();
;;;9376       i = LL_Msg_AdvScnConnUpd;
000002  4905              LDR      r1,|L131.24|
000004  7a89              LDRB     r1,[r1,#0xa]  ; LL_Msg_AdvScnConnUpd
;;;9377       InterruptEnable();
000006  b662              CPSIE    i
;;;9378   
;;;9379       if(i&(LL_MSG_ADVSCNCONN_SCN_EN))
000008  0789              LSLS     r1,r1,#30
00000a  d501              BPL      |L131.16|
;;;9380       {
;;;9381           return FAIL_;
00000c  2001              MOVS     r0,#1
;;;9382       }
;;;9383       else
;;;9384       {
;;;9385           LL_Scan_Para_UpdBuf.LE_Set_Scan_Para.LL_Tx_PowerLevel = powerLevel;
;;;9386           return SUCCESS_;
;;;9387       }
;;;9388   }   //0: SUCCESS, not 0: FAIL.
00000e  4770              BX       lr
                  |L131.16|
000010  4902              LDR      r1,|L131.28|
000012  7288              STRB     r0,[r1,#0xa]          ;9385
000014  2000              MOVS     r0,#0                 ;9386
000016  4770              BX       lr
;;;9389   
                          ENDP

                  |L131.24|
                          DCD      ||.data||
                  |L131.28|
                          DCD      ||.bss||+0xc4

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  LL_Adv_Para
                          %        92
                  LL_Adv_Para_UpdBuf
                          %        92
                  LL_Scan_Para
                          %        12
                  LL_Scan_Para_UpdBuf
                          %        12
                  LL_Conn_Para
                          %        680
                  LL_ConnDataQ
                          %        40
                  LL_ConnCtrlQ
                          %        40
                  LL_ConnDataInQ
                          %        40
                  LL_ConnBuffPt
                          %        20
                  LL_Init_Para
                          %        28
                  LL_WhiteList_Para
                          %        28
                  LL_Para_Interval
                          %        36
                  LL_Para_IntervalR
                          %        260
                  TmrBlk_LL
                          %        96
                  mblk_LL_conn_Para
                          %        20
                  LL_Length_Prefer
                          %        40

                          AREA ||area_number.134||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.134||, ||.bss||
                  ram_Tab
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  LL_DEFAULT_PHY
000000  00030300          DCB      0x00,0x03,0x03,0x00
                  CH_ADV_SEL_TABLE
000004  00252627          DCB      0x00,0x25,0x26,0x27
                  LL_ACK_FLOW_RE_TO
000008  02030001          DCB      0x02,0x03,0x00,0x01
                  LL_CHMAP_DEFAUT
00000c  ffffffff          DCB      0xff,0xff,0xff,0xff
000010  1f                DCB      0x1f
                  LL_VERSION
000011  096408            DCB      0x09,0x64,0x08
000014  0000              DCB      0x00,0x00
                  TABLE_CONV_ADV_TYPE_HCI_LL
000016  0001              DCB      0x00,0x01
000018  060201            DCB      0x06,0x02,0x01
                  LL_DUR_RSV
00001b  0e                DCB      0x0e
00001c  0b070e0e          DCB      0x0b,0x07,0x0e,0x0e
000020  0b0e              DCB      0x0b,0x0e
                  LE_LOCAL_VER_INFO
000022  0901              DCB      0x09,0x01
000024  00096408          DCB      0x00,0x09,0x64,0x08
000028  0000              DCB      0x00,0x00
                  LL_FEATURE
00002a  2d01              DCB      0x2d,0x01
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  0000              DCB      0x00,0x00
                  LL_LENGTH_DEFAULT
000032  00fb              DCW      0x00fb
000034  084800fb          DCW      0x0848,0x00fb
000038  0848              DCW      0x0848
                  PRIME_NUM
00003a  0507              DCB      0x05,0x07
00003c  08090b0d          DCB      0x08,0x09,0x0b,0x0d
000040  11130000          DCB      0x11,0x13,0x00,0x00
                  LL_REF_ACS_ADDR
                          DCD      0x50829aaf
                          DCD      0x60859aae
                          DCD      0x90a3655c
                          DCD      0xa093655a
                  LL_REF_CRC_INI
000054  1acbbfc4          DCB      0x1a,0xcb,0xbf,0xc4
000058  1a43e0c0          DCB      0x1a,0x43,0xe0,0xc0
00005c  69cbc362          DCB      0x69,0xcb,0xc3,0x62
                  LL_RF_PARA_TX_WIN_SIZE_MAP
000060  003e0091          DCW      0x003e,0x0091
000064  00e50138          DCW      0x00e5,0x0138
000068  018b01df          DCW      0x018b,0x01df
00006c  0232              DCW      0x0232
00006e  0000              DCB      0x00,0x00
                  LL_RF_PARA_WIN_WIDTH_CNVT
                          DCD      0x00020c49
                          DCD      0x00018937
                          DCD      0x000154c9
                          DCD      0x00013a92
                          DCD      0x00012d77
                          DCD      0x0001205b
                          DCD      0x000115df
                          DCD      0x000110a1
                  LL_RF_DATA_CH
000090  00010203          DCB      0x00,0x01,0x02,0x03
000094  04050607          DCB      0x04,0x05,0x06,0x07
000098  08090a0b          DCB      0x08,0x09,0x0a,0x0b
00009c  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
0000a0  10111213          DCB      0x10,0x11,0x12,0x13
0000a4  14151617          DCB      0x14,0x15,0x16,0x17
0000a8  18191a1b          DCB      0x18,0x19,0x1a,0x1b
0000ac  1c1d1e1f          DCB      0x1c,0x1d,0x1e,0x1f
0000b0  20212223          DCB      0x20,0x21,0x22,0x23
0000b4  24000102          DCB      0x24,0x00,0x01,0x02
0000b8  03040506          DCB      0x03,0x04,0x05,0x06
0000bc  0708090a          DCB      0x07,0x08,0x09,0x0a
0000c0  0b0c0d0e          DCB      0x0b,0x0c,0x0d,0x0e
0000c4  0f101112          DCB      0x0f,0x10,0x11,0x12
0000c8  13141516          DCB      0x13,0x14,0x15,0x16
0000cc  1718191a          DCB      0x17,0x18,0x19,0x1a
0000d0  1b1c1d1e          DCB      0x1b,0x1c,0x1d,0x1e
0000d4  1f202122          DCB      0x1f,0x20,0x21,0x22
0000d8  2324              DCB      0x23,0x24
                  CH_ADV_CH_HOP_BY_MAP_TABLE
0000da  0000              DCB      0x00,0x00
0000dc  00000100          DCB      0x00,0x00,0x01,0x00
0000e0  00000200          DCB      0x00,0x00,0x02,0x00
0000e4  00000102          DCB      0x00,0x00,0x01,0x02
0000e8  00000300          DCB      0x00,0x00,0x03,0x00
0000ec  00000103          DCB      0x00,0x00,0x01,0x03
0000f0  00000200          DCB      0x00,0x00,0x02,0x00
0000f4  03000102          DCB      0x03,0x00,0x01,0x02
0000f8  0300              DCB      0x03,0x00
                  RAND_INI32
0000fa  8b14              DCB      0x8b,0x14
0000fc  917a9c20          DCB      0x91,0x7a,0x9c,0x20
000100  0b090a05          DCB      0x0b,0x09,0x0a,0x05
000104  f78ce893          DCB      0xf7,0x8c,0xe8,0x93
000108  a431a6a9          DCB      0xa4,0x31,0xa6,0xa9
00010c  f256458e          DCB      0xf2,0x56,0x45,0x8e
000110  1e368d81          DCB      0x1e,0x36,0x8d,0x81
000114  e4be35b7          DCB      0xe4,0xbe,0x35,0xb7
000118  a566              DCB      0xa5,0x66
                  LL_ACK_FLOW
00011a  44cc              DCB      0x44,0xcc
00011c  0088048c          DCB      0x00,0x88,0x04,0x8c
000120  40c8c44c          DCB      0x40,0xc8,0xc4,0x4c
000124  8008840c          DCB      0x80,0x08,0x84,0x0c
000128  c048              DCB      0xc0,0x48
                  LL_PR_CONN_ID_PAIR
00012a  0000              DCB      0x00,0x00
00012c  02040506          DCB      0x02,0x04,0x05,0x06
000130  06000900          DCB      0x06,0x00,0x09,0x00
000134  0b0b0c00          DCB      0x0b,0x0b,0x0c,0x00
000138  09500000          DCB      0x09,0x50,0x00,0x00
00013c  13001500          DCB      0x13,0x00,0x15,0x00
000140  18180000          DCB      0x18,0x18,0x00,0x00
                  LL_RX_CONN_ID_INIT
000144  80818204          DCB      0x80,0x81,0x82,0x04
000148  04040404          DCB      0x04,0x04,0x04,0x04
00014c  04040404          DCB      0x04,0x04,0x04,0x04
000150  8c040404          DCB      0x8c,0x04,0x04,0x04
000154  04040404          DCB      0x04,0x04,0x04,0x04
000158  04040404          DCB      0x04,0x04,0x04,0x04
00015c  9804              DCB      0x98,0x04
                  LL_TX_CONN_ID_INIT
00015e  4041              DCB      0x40,0x41
000160  42430445          DCB      0x42,0x43,0x04,0x45
000164  46044804          DCB      0x46,0x04,0x48,0x04
000168  4a4b4c04          DCB      0x4a,0x4b,0x4c,0x04
00016c  4e4f0404          DCB      0x4e,0x4f,0x04,0x04
000170  52045404          DCB      0x52,0x04,0x54,0x04
000174  56575804          DCB      0x56,0x57,0x58,0x04
                  LL_RX_CONN_ID_MASTER_SIDE_ONLY
000178  1a1a021a          DCB      0x1a,0x1a,0x02,0x1a
00017c  04050607          DCB      0x04,0x05,0x06,0x07
000180  1a091a0b          DCB      0x1a,0x09,0x1a,0x0b
000184  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
000188  10111213          DCB      0x10,0x11,0x12,0x13
00018c  14151617          DCB      0x14,0x15,0x16,0x17
000190  1a19              DCB      0x1a,0x19
                  LL_RX_CONN_ID_SLAVE_SIDE_ONLY
000192  0001              DCB      0x00,0x01
000194  02031a1a          DCB      0x02,0x03,0x1a,0x1a
000198  06070809          DCB      0x06,0x07,0x08,0x09
00019c  0a0b0c0d          DCB      0x0a,0x0b,0x0c,0x0d
0001a0  1a0f1a11          DCB      0x1a,0x0f,0x1a,0x11
0001a4  12131415          DCB      0x12,0x13,0x14,0x15
0001a8  161a181a          DCB      0x16,0x1a,0x18,0x1a
                  LL_RX_CONN_ID_OP_LENGTH
0001ac  0b070116          DCB      0x0b,0x07,0x01,0x16
0001b0  0c000001          DCB      0x0c,0x00,0x00,0x01
0001b4  08080000          DCB      0x08,0x08,0x00,0x00
0001b8  05010817          DCB      0x05,0x01,0x08,0x17
0001bc  17020000          DCB      0x17,0x02,0x00,0x00
0001c0  08080202          DCB      0x08,0x08,0x02,0x02
0001c4  0402              DCB      0x04,0x02
                  TAB_ZERO_128
0001c6  0000              DCB      0x00,0x00
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  00000000          DCB      0x00,0x00,0x00,0x00
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000000          DCB      0x00,0x00,0x00,0x00
000208  00000000          DCB      0x00,0x00,0x00,0x00
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  00000000          DCB      0x00,0x00,0x00,0x00
000218  00000000          DCB      0x00,0x00,0x00,0x00
00021c  00000000          DCB      0x00,0x00,0x00,0x00
000220  00000000          DCB      0x00,0x00,0x00,0x00
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000000          DCB      0x00,0x00,0x00,0x00
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  00000000          DCB      0x00,0x00,0x00,0x00
000234  00000000          DCB      0x00,0x00,0x00,0x00
000238  00000000          DCB      0x00,0x00,0x00,0x00
00023c  00000000          DCB      0x00,0x00,0x00,0x00
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  0000              DCB      0x00,0x00
                  LL_LEN_OFFSET_1M
00024e  0f1f              DCB      0x0f,0x1f
000250  2e3e4e5d          DCB      0x2e,0x3e,0x4e,0x5d
000254  6d7d8c9c          DCB      0x6d,0x7d,0x8c,0x9c
000258  abbbcbda          DCB      0xab,0xbb,0xcb,0xda
00025c  eafaff            DCB      0xea,0xfa,0xff
                  LL_LEN_OFFSET_2M
00025f  1f                DCB      0x1f
000260  3e5d7d9c          DCB      0x3e,0x5d,0x7d,0x9c
000264  bbdafaff          DCB      0xbb,0xda,0xfa,0xff
                  LL_fsm
                          DCD      MLL_HCI_Null
                          DCD      HCLL_Disconnect
                          DCD      HCLL_Read_Remote_Ver_Info
                          DCD      HCLL_Set_Event_Mask
                          DCD      HCLL_Reset
                          DCD      HCLL_Read_Transmit_Pwr_Level
                          DCD      HCLL_Set_Ctrler_to_Host_Flow_Ctrl
                          DCD      HCLL_Host_Buffer_Size
                          DCD      HCLL_Host_Num_of_Completed_Packets
                          DCD      HCLL_Set_Event_Mask_Page_2
                          DCD      HCLL_Read_Le_Host_Support
                          DCD      HCLL_Write_Le_Host_Support
                          DCD      HCLL_Read_authen_payload_timeout
                          DCD      HCLL_Write_authen_payload_timeout
                          DCD      HCLL_Read_Local_Ver_Info
                          DCD      HCLL_Read_Local_Supported_Cmd
                          DCD      HCLL_Read_Local_Supported_Feat
                          DCD      HCLL_Read_buffer_size
                          DCD      HCLL_Read_BD_Addr
                          DCD      HCLL_Read_rssi
                          DCD      HCLL_LE_Set_Event_Mask
                          DCD      HCLL_LE_Read_Buffer_Size
                          DCD      HCLL_LE_Read_Local_Supported_Feat
                          DCD      HCLL_LE_Set_Random_Address
                          DCD      HCLL_LE_Set_Adv_Param
                          DCD      HCLL_LE_Read_Adv_Ch_Tx_Pwr
                          DCD      HCLL_LE_Set_Adv_Data
                          DCD      HCLL_LE_Set_Scan_Response_Data
                          DCD      HCLL_LE_Set_Advertise_Enable
                          DCD      HCLL_LE_Set_scan_param
                          DCD      HCLL_LE_Set_scan_enable
                          DCD      HCLL_LE_Create_Conn
                          DCD      HCLL_LE_Create_conn_cancel
                          DCD      HCLL_LE_Read_White_List_Size
                          DCD      HCLL_LE_Clear_White_List
                          DCD      HCLL_LE_Add_Device_to_White_List
                          DCD      HCLL_LE_Rmv_Device_from_White_List
                          DCD      HCLL_LE_Conn_update
                          DCD      HCLL_LE_Set_Host_Ch_Classification
                          DCD      HCLL_LE_Read_ch_map
                          DCD      HCLL_LE_Read_Remote_Used_Feat
                          DCD      HCLL_LE_Encrypt
                          DCD      HCLL_LE_Rand
                          DCD      HCLL_LE_Start_encryption
                          DCD      HCLL_LE_Long_term_key_req_reply
                          DCD      HCLL_LE_Long_term_key_req_neg_reply
                          DCD      HCLL_LE_Read_supported_states
                          DCD      HCLL_LE_Receiver_test
                          DCD      HCLL_LE_Transmitter_test
                          DCD      HCLL_LE_Test_end
                          DCD      HCLL_LE_Remote_conn_param_req_reply
                          DCD      HCLL_LE_Remote_conn_param_req_neg_reply
                          DCD      LLHC_ERR_CODE_Unknown_Hci_Command
                          DCD      LLHC_ERR_CODE_Invalid_Lmp_Parameters
                          DCD      HCLL_LE_ACL_Data_Pkt
                          DCD      LLHC_LE_Ctrl_Pkt
                          DCD      HCLL_LE_Ctrl_Pkt
                          DCD      MLL_LL_CHN_Map_Upd
                          DCD      MLL_LL_Enc_Req
                          DCD      HCLL_LE_Read_Phy
                          DCD      HCLL_LE_Set_Default_Phy
                          DCD      HCLL_LE_Set_Phy
                          DCD      HCLL_LE_Set_Data_Length
                          DCD      MLL_LE_Ctrl_Pkt
                          DCD      HCLL_LE_ACL_Data_Pkt_Extend
                  EC_fsm
                          DCD      MEC_HCI_Null
                          DCD      LLEC_LE_Encrypt
                          DCD      LLEC_LE_Rand
                          DCD      LLEC_LE_Start_encryption
                          DCD      LLEC_LE_Long_term_key_req_reply
                          DCD      ECHC_LE_Ctrl_Pkt
                          DCD      SMEC_LE_CODE_SMP_Pairing_Confirm
                          DCD      SMEC_LE_CODE_SMP_Pairing_Random
                          DCD      SMEC_LE_SMP_Key_Gen
                          DCD      LLEC_LE_CCM_Manual

                          AREA ||area_number.137||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.137||, ||.constdata||
                  LL_LENGTH
000000  00200170          DCW      0x0020,0x0170
000004  00200170          DCW      0x0020,0x0170

                          AREA ||.data||, DATA, ALIGN=3

                  RX_CRC_valid_flag
000000  01                DCB      0x01
                  FT_WakeupFlag
000001  00                DCB      0x00
                  LL_ConnDataTmpGate
000002  00                DCB      0x00
                  LL_ConnID_Remaining
000003  00                DCB      0x00
                  TBlk_Free_LL
000004  00                DCB      0x00
                  TBlk_InUse_LL
000005  00                DCB      0x00
                  LL_SMP_DataCh
000006  00                DCB      0x00
                  status_LL_Tmr
000007  00                DCB      0x00
                  anchor_LL_Tmr
000008  00                DCB      0x00
                  LL_Msg_AdvScnConn
000009  00                DCB      0x00
                  LL_Msg_AdvScnConnUpd
00000a  00                DCB      0x00
                  LL_Msg_AdvScnConnUpdSts
00000b  00                DCB      0x00
                  RF_Msg_RF0INT
00000c  0000              DCB      0x00,0x00
                  LL_DurRxPktAccu
00000e  0000              DCB      0x00,0x00
                  LL_Adv_Data_Buf
                          DCD      0x00000000
                  LL_Ref_Default_PHY
                          DCD      0x00000000
                  tblk_LL_pi
                          DCD      0x00000000
                  tblk_LL_pi2
                          DCD      0x00000000
                  LL_conn_pi
                          DCD      0x00000000
                  LL_Slv_Win_Width
                          DCD      0x00000000
                  LL_Slv_Win_Width_Base
                          DCD      0x00000000
                  seedR16
                          DCD      0x00000000
                  LL_Ref_Acs_Addr_ADVSCN
                          DCD      0x00000000
                  LL_Ref_crc_ini_ADVSCN
                          DCD      0x00000000
                  Ch_ADV_Ch_Hop_Table
                          DCD      0x00000000
                  Ch_ADV_Ch_Hop_TableBuf
                          DCD      0x00000000
                  LL_Ref_ChMap
                          DCD      0x00000000
000044  00                DCB      0x00
                  BD_Rand_Addr
000045  000000            DCB      0x00,0x00,0x00
000048  000000            DCB      0x00,0x00,0x00
                  BD_Rand_AddrBuf
00004b  00                DCB      0x00
                          DCD      0x00000000
000050  00000000          DCB      0x00,0x00,0x00,0x00
                  LL_ConnDataInTmp
                          %        8
                  LL_ConnBuffPrcs
                          %        8
                  LL_ConnBuffPrcsR
                          %        8
                          DCD      0x00000000
                  Tmr37
                          %        8
                  MsgQueueEC
                          %        8

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L776.16|
00000e  461d              MOV      r5,r3
                  |L776.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\LL.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___4_LL_c_e8a55184____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___4_LL_c_e8a55184____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___4_LL_c_e8a55184____REVSH|
#line 402
|__asm___4_LL_c_e8a55184____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

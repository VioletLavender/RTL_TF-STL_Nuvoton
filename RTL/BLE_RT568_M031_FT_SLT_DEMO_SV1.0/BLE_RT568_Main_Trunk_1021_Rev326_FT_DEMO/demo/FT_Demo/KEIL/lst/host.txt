; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\host.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\host.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\..\..\Library\CMSIS\Include -I..\..\..\..\..\..\Library\StdDriver\inc -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\host.crf ..\..\..\source\host.c]
                          THUMB

                          AREA ||i.ATT_HDL_Indicate||, CODE, READONLY, ALIGN=2

                  ATT_HDL_Indicate PROC
;;;264    ***********************************************************************/
;;;265    BleStackStatus ATT_HDL_Indicate(uint8_t connID, uint8_t *addrATT_HDL_INIT, uint8_t *addrATT_HDL_clientCFG, uint8_t *data, uint8_t dataLength)
000000  b5ff              PUSH     {r0-r7,lr}
;;;266    {
000002  b081              SUB      sp,sp,#4
;;;267        uint8_t i;
;;;268        extern Uint8 LL_CheckConnExist(Uint8 LL_Conn_ID);
;;;269        extern Uint8 ATT_INDICATION_Packet_Sent;
;;;270    
;;;271        // temp to check connection ID
;;;272        if((connID < MAX_NUM_CONN_MAS_HDL) ||
000004  9801              LDR      r0,[sp,#4]
000006  9c0a              LDR      r4,[sp,#0x28]
000008  461d              MOV      r5,r3                 ;266
00000a  460f              MOV      r7,r1                 ;266
00000c  2804              CMP      r0,#4
00000e  d108              BNE      |L1.34|
;;;273                (connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED) ||
;;;274                (LL_CheckConnExist(BLE_ROLESLAVE_ONELINK_CONNID_FIXED) == NO_)) // temp to check is in connection state, only one link
000010  f7fffffe          BL       LL_CheckConnExist
000014  2800              CMP      r0,#0
000016  d004              BEQ      |L1.34|
;;;275        {
;;;276            return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;277        }
;;;278    
;;;279    #ifdef _SMP_ON_
;;;280        if(smp_Phase)
000018  481b              LDR      r0,|L1.136|
00001a  7800              LDRB     r0,[r0,#0]  ; smp_Phase
00001c  2800              CMP      r0,#0
00001e  d12a              BNE      |L1.118|
000020  e002              B        |L1.40|
                  |L1.34|
000022  2005              MOVS     r0,#5                 ;276
                  |L1.36|
;;;281        {
;;;282            return BLESTACK_STATUS_ERR_BUSY;
;;;283        }
;;;284    #endif
;;;285        if(ATT_INDICATION_Packet_Sent != 0)
;;;286        {
;;;287            return BLESTACK_STATUS_ERR_BUSY;
;;;288        }
;;;289        if((*addrATT_HDL_clientCFG)&GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION)
;;;290        {
;;;291            SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_HANDlE_VAlUE_INDICATION;
;;;292            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = (3+dataLength);
;;;293            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;294            SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;295            SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;296            SPIBuffer[TAB_ATTRIBUTE_HANDLE_L] = *(addrATT_HDL_INIT+TAB_ATTRIBUTE_SERVER_HANDLE_L);
;;;297            SPIBuffer[TAB_ATTRIBUTE_HANDLE_H] = *(addrATT_HDL_INIT+TAB_ATTRIBUTE_SERVER_HANDLE_H);
;;;298            for(i=0; i<dataLength; i++)
;;;299            {
;;;300                SPIBuffer[TAB_ATTRIBUTE_HANDLE_H+1+i] = *(data+i);
;;;301            }
;;;302    
;;;303            if(setBLE_ConnTxData(connID, SPIBuffer, (dataLength+(3+SIZE_BASIC_L2CAP_HEADER))) == SUCCESS_)
;;;304            {
;;;305                ATT_INDICATION_Packet_Sent++;
;;;306                return BLESTACK_STATUS_SUCCESS;
;;;307            }
;;;308            else
;;;309            {
;;;310                return BLESTACK_STATUS_ERR_BUSY;
;;;311            }
;;;312        }
;;;313        else
;;;314        {
;;;315            return BLESTACK_STATUS_ERR_CLIENT_CONFIGURATION_DISABLE;
;;;316        }
;;;317    }
000024  b005              ADD      sp,sp,#0x14
000026  bdf0              POP      {r4-r7,pc}
                  |L1.40|
000028  4e18              LDR      r6,|L1.140|
00002a  7830              LDRB     r0,[r6,#0]            ;285  ; ATT_INDICATION_Packet_Sent
00002c  2800              CMP      r0,#0                 ;285
00002e  d122              BNE      |L1.118|
000030  9803              LDR      r0,[sp,#0xc]          ;289
000032  7800              LDRB     r0,[r0,#0]            ;289
000034  0780              LSLS     r0,r0,#30             ;289
000036  d525              BPL      |L1.132|
000038  4915              LDR      r1,|L1.144|
00003a  201d              MOVS     r0,#0x1d              ;291
00003c  7108              STRB     r0,[r1,#4]            ;291
00003e  1ce0              ADDS     r0,r4,#3              ;292
000040  7008              STRB     r0,[r1,#0]            ;292
000042  2000              MOVS     r0,#0                 ;293
000044  7048              STRB     r0,[r1,#1]            ;293
000046  2204              MOVS     r2,#4                 ;294
000048  708a              STRB     r2,[r1,#2]            ;294
00004a  70c8              STRB     r0,[r1,#3]            ;295
00004c  7878              LDRB     r0,[r7,#1]            ;296
00004e  7148              STRB     r0,[r1,#5]            ;296
000050  7838              LDRB     r0,[r7,#0]            ;297
000052  7188              STRB     r0,[r1,#6]            ;297
000054  2000              MOVS     r0,#0                 ;298
000056  e004              B        |L1.98|
                  |L1.88|
000058  5c2a              LDRB     r2,[r5,r0]            ;300
00005a  180b              ADDS     r3,r1,r0              ;300
00005c  1c40              ADDS     r0,r0,#1              ;300
00005e  71da              STRB     r2,[r3,#7]            ;300
000060  b2c0              UXTB     r0,r0                 ;298
                  |L1.98|
000062  42a0              CMP      r0,r4                 ;298
000064  d3f8              BCC      |L1.88|
000066  1de4              ADDS     r4,r4,#7              ;298
000068  b2e2              UXTB     r2,r4                 ;303
00006a  4909              LDR      r1,|L1.144|
00006c  9801              LDR      r0,[sp,#4]            ;303
00006e  f7fffffe          BL       setBLE_ConnTxData
000072  2800              CMP      r0,#0                 ;303
000074  d001              BEQ      |L1.122|
                  |L1.118|
000076  2001              MOVS     r0,#1                 ;310
000078  e7d4              B        |L1.36|
                  |L1.122|
00007a  7830              LDRB     r0,[r6,#0]            ;305  ; ATT_INDICATION_Packet_Sent
00007c  1c40              ADDS     r0,r0,#1              ;305
00007e  7030              STRB     r0,[r6,#0]            ;305
000080  2000              MOVS     r0,#0                 ;306
000082  e7cf              B        |L1.36|
                  |L1.132|
000084  2008              MOVS     r0,#8                 ;315
000086  e7cd              B        |L1.36|
;;;318    
                          ENDP

                  |L1.136|
                          DCD      smp_Phase
                  |L1.140|
                          DCD      ATT_INDICATION_Packet_Sent
                  |L1.144|
                          DCD      SPIBuffer

                          AREA ||i.ATT_HDL_Notify||, CODE, READONLY, ALIGN=2

                  ATT_HDL_Notify PROC
;;;201    ***********************************************************************/
;;;202    BleStackStatus ATT_HDL_Notify(uint8_t connID, uint8_t *addrATT_HDL_INIT, uint8_t *addrATT_HDL_clientCFG, uint8_t *data, uint8_t dataLength)
000000  b5ff              PUSH     {r0-r7,lr}
;;;203    {
000002  b081              SUB      sp,sp,#4
;;;204        uint8_t i;
;;;205        extern Uint8 LL_CheckConnExist(Uint8 LL_Conn_ID);
;;;206    
;;;207        // temp to check connection ID
;;;208        if((connID < MAX_NUM_CONN_MAS_HDL) ||
000004  9801              LDR      r0,[sp,#4]
000006  9c0a              LDR      r4,[sp,#0x28]
000008  461d              MOV      r5,r3                 ;203
00000a  4617              MOV      r7,r2                 ;203
00000c  460e              MOV      r6,r1                 ;203
00000e  2804              CMP      r0,#4
000010  d108              BNE      |L2.36|
;;;209                (connID > BLE_ROLESLAVE_ONELINK_CONNID_FIXED) ||
;;;210                (LL_CheckConnExist(BLE_ROLESLAVE_ONELINK_CONNID_FIXED) == NO_)) // temp to check is in connection state, only one link
000012  f7fffffe          BL       LL_CheckConnExist
000016  2800              CMP      r0,#0
000018  d004              BEQ      |L2.36|
;;;211        {
;;;212            return BLESTACK_STATUS_ERR_INVALID_CONNID;
;;;213        }
;;;214    
;;;215    #ifdef _SMP_ON_
;;;216        if(smp_Phase)
00001a  4817              LDR      r0,|L2.120|
00001c  7800              LDRB     r0,[r0,#0]  ; smp_Phase
00001e  2800              CMP      r0,#0
000020  d125              BNE      |L2.110|
000022  e002              B        |L2.42|
                  |L2.36|
000024  2005              MOVS     r0,#5                 ;212
                  |L2.38|
;;;217        {
;;;218            return BLESTACK_STATUS_ERR_BUSY;
;;;219        }
;;;220    #endif
;;;221        if((*addrATT_HDL_clientCFG)&GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION)
;;;222        {
;;;223            SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_HANDlE_VAlUE_NOTIFICATION;                //SPIBuffer[4]=0x1B  (1st attribute MTU data byte. OP code)
;;;224            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = (3+dataLength);                                //SPIBuffer[0]=3+4=7 (Length low byte, Length=HRS attribute length=7)(OP 1, handle 2, value 4)
;;;225            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;                                             //SPIBuffer[1]=0     (Length high byte)
;;;226            SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;                         //SPIBuffer[2]=4     (CID low byte, CID=4, attribute protocpl)
;;;227            SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;                                                    //SPIBuffer[3]=0     (CID high byte)
;;;228            SPIBuffer[TAB_ATTRIBUTE_HANDLE_L] = *(addrATT_HDL_INIT+TAB_ATTRIBUTE_SERVER_HANDLE_L);   //SPIBuffer[5]=ATT_HDL_HRS_HEART_RATE_MEASUREMENT_INIT[1] in BleApp_Main() HRP profile
;;;229            SPIBuffer[TAB_ATTRIBUTE_HANDLE_H] = *(addrATT_HDL_INIT+TAB_ATTRIBUTE_SERVER_HANDLE_H);   //SPIBuffer[6]=ATT_HDL_HRS_HEART_RATE_MEASUREMENT_INIT[0] in BleApp_Main() HRP profile
;;;230            //1+11+4+23+2=41  (attribute handle, 41 is ATT_HDL_HRS_HEART_RATE_MEASUREMENT_INIT)
;;;231            for(i=0; i<dataLength; i++)   //for HRS measurement size=4, i=0~3
;;;232            {
;;;233                SPIBuffer[TAB_ATTRIBUTE_HANDLE_H+1+i] = *(data+i);  //SPIBuffer[i+7]= att_HDL_HRS_HEART_RATE_MEASUREMENT[i]
;;;234            }
;;;235    
;;;236            if(setBLE_ConnTxData(connID, SPIBuffer, (dataLength+(3+SIZE_BASIC_L2CAP_HEADER))) == SUCCESS_)    //5: 2Byte Opcode, 2Bytes Handle, 2Bytes Value
;;;237            {
;;;238                return BLESTACK_STATUS_SUCCESS;
;;;239            }
;;;240            else
;;;241            {
;;;242                return BLESTACK_STATUS_ERR_BUSY;
;;;243            }
;;;244        }
;;;245        else
;;;246        {
;;;247            return BLESTACK_STATUS_ERR_CLIENT_CONFIGURATION_DISABLE;
;;;248        }
;;;249    }
000026  b005              ADD      sp,sp,#0x14
000028  bdf0              POP      {r4-r7,pc}
                  |L2.42|
00002a  7838              LDRB     r0,[r7,#0]            ;221
00002c  07c0              LSLS     r0,r0,#31             ;221
00002e  d020              BEQ      |L2.114|
000030  4a12              LDR      r2,|L2.124|
000032  201b              MOVS     r0,#0x1b              ;223
000034  7110              STRB     r0,[r2,#4]            ;223
000036  1ce0              ADDS     r0,r4,#3              ;224
000038  7010              STRB     r0,[r2,#0]            ;224
00003a  2000              MOVS     r0,#0                 ;225
00003c  7050              STRB     r0,[r2,#1]            ;225
00003e  2104              MOVS     r1,#4                 ;226
000040  7091              STRB     r1,[r2,#2]            ;226
000042  70d0              STRB     r0,[r2,#3]            ;227
000044  7870              LDRB     r0,[r6,#1]            ;228
000046  7150              STRB     r0,[r2,#5]            ;228
000048  7830              LDRB     r0,[r6,#0]            ;229
00004a  7190              STRB     r0,[r2,#6]            ;229
00004c  2000              MOVS     r0,#0                 ;231
00004e  e004              B        |L2.90|
                  |L2.80|
000050  5c29              LDRB     r1,[r5,r0]            ;233
000052  1813              ADDS     r3,r2,r0              ;233
000054  1c40              ADDS     r0,r0,#1              ;233
000056  71d9              STRB     r1,[r3,#7]            ;233
000058  b2c0              UXTB     r0,r0                 ;231
                  |L2.90|
00005a  42a0              CMP      r0,r4                 ;231
00005c  d3f8              BCC      |L2.80|
00005e  1de4              ADDS     r4,r4,#7              ;231
000060  b2e2              UXTB     r2,r4                 ;236
000062  4906              LDR      r1,|L2.124|
000064  9801              LDR      r0,[sp,#4]            ;236
000066  f7fffffe          BL       setBLE_ConnTxData
00006a  2800              CMP      r0,#0                 ;236
00006c  d0db              BEQ      |L2.38|
                  |L2.110|
00006e  2001              MOVS     r0,#1                 ;242
000070  e7d9              B        |L2.38|
                  |L2.114|
000072  2008              MOVS     r0,#8                 ;247
000074  e7d7              B        |L2.38|
;;;250    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      smp_Phase
                  |L2.124|
                          DCD      SPIBuffer

                          AREA ||i.ATT_HDL_ValueSet||, CODE, READONLY, ALIGN=2

                  ATT_HDL_ValueSet PROC
;;;320    
;;;321    void ATT_HDL_ValueSet(uint8_t *addr_attHDL, uint8_t *data, uint8_t dataLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;322    {
000002  460f              MOV      r7,r1
;;;323        int i = 0;
;;;324        int index;
;;;325        int uuidLen;
;;;326        int maxDataLen;
;;;327    
;;;328        // find the index of "addr_attHDL" in ATTRIBUTE_SERVER_PARAM (ATTRIBUTE_SERVER_PARAM Length = size_ATTRIBUTE_SERVER)
;;;329        for(i = 0; i<size_ATTRIBUTE_SERVER; i++)
000004  4910              LDR      r1,|L3.72|
000006  4616              MOV      r6,r2                 ;322
000008  4605              MOV      r5,r0                 ;322
00000a  2000              MOVS     r0,#0                 ;323
;;;330        {
;;;331            if(&(*ATTRIBUTE_SERVER_PARAM[i]) == (&addr_attHDL[0]))
00000c  4a0d              LDR      r2,|L3.68|
00000e  7809              LDRB     r1,[r1,#0]            ;329
000010  e006              B        |L3.32|
                  |L3.18|
000012  0083              LSLS     r3,r0,#2
000014  58d3              LDR      r3,[r2,r3]
000016  42ab              CMP      r3,r5
000018  d101              BNE      |L3.30|
;;;332            {
;;;333                index = i;
00001a  4604              MOV      r4,r0
;;;334                break;
00001c  e002              B        |L3.36|
                  |L3.30|
00001e  1c40              ADDS     r0,r0,#1
                  |L3.32|
000020  4288              CMP      r0,r1                 ;329
000022  dbf6              BLT      |L3.18|
                  |L3.36|
;;;335            }
;;;336        }
;;;337    
;;;338        // Using index to find the UUID length
;;;339        uuidLen = getBLE_ATTRIBUTE_TYPE_Size(index);
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
;;;340    
;;;341        // Using index and UUID length to find the maximum data length
;;;342        maxDataLen = ATTRIBUTE_SERVER[index][(2 + uuidLen)] ;
00002a  4a08              LDR      r2,|L3.76|
00002c  00a1              LSLS     r1,r4,#2
00002e  5851              LDR      r1,[r2,r1]
000030  1c80              ADDS     r0,r0,#2
000032  5c0c              LDRB     r4,[r1,r0]
;;;343    
;;;344        // Copy data to addr_attHDL
;;;345        Knl_MemCpy(addr_attHDL,data,dataLength);
000034  4632              MOV      r2,r6
000036  4639              MOV      r1,r7
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       Knl_MemCpy
;;;346    
;;;347        // Set the data length to the last byte of addr_attHDL
;;;348        addr_attHDL[maxDataLen] = dataLength;
00003e  552e              STRB     r6,[r5,r4]
;;;349    
;;;350    }
000040  bdf8              POP      {r3-r7,pc}
;;;351    
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L3.72|
                          DCD      size_ATTRIBUTE_SERVER
                  |L3.76|
                          DCD      ATTRIBUTE_SERVER

                          AREA ||i.ATT_HDL_WriteCmd||, CODE, READONLY, ALIGN=2

                  ATT_HDL_WriteCmd PROC
;;;364    ***********************************************************************/
;;;365    BleStackStatus ATT_HDL_WriteCmd(uint8_t connID, uint16_t handle, uint8_t *data, uint8_t dataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;366    {
;;;367        uint8_t i;
;;;368    #ifdef _SMP_ON_
;;;369        if(smp_Phase)
000002  4c11              LDR      r4,|L4.72|
000004  7824              LDRB     r4,[r4,#0]  ; smp_Phase
000006  2c00              CMP      r4,#0
000008  d11c              BNE      |L4.68|
;;;370        {
;;;371            return BLESTACK_STATUS_ERR_BUSY;
;;;372        }
;;;373    #endif
;;;374        SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_WRITE_COMMAND;
00000a  4c10              LDR      r4,|L4.76|
00000c  2552              MOVS     r5,#0x52
00000e  7125              STRB     r5,[r4,#4]
;;;375        SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = (3+dataLength);
000010  1cdd              ADDS     r5,r3,#3
000012  7025              STRB     r5,[r4,#0]
;;;376        SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
000014  2500              MOVS     r5,#0
000016  7065              STRB     r5,[r4,#1]
;;;377        SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
000018  2604              MOVS     r6,#4
00001a  70a6              STRB     r6,[r4,#2]
;;;378        SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
00001c  70e5              STRB     r5,[r4,#3]
;;;379        SPIBuffer[TAB_ATTRIBUTE_HANDLE_L] = handle;  //TRSPX UART handle
00001e  7161              STRB     r1,[r4,#5]
;;;380        SPIBuffer[TAB_ATTRIBUTE_HANDLE_H] = handle>>8;
000020  0a09              LSRS     r1,r1,#8
000022  71a1              STRB     r1,[r4,#6]
;;;381    
;;;382        for(i=0; i<dataLength; i++)
000024  4629              MOV      r1,r5
000026  e004              B        |L4.50|
                  |L4.40|
;;;383        {
;;;384            SPIBuffer[TAB_ATTRIBUTE_HANDLE_H+1+i] = *(data+i);
000028  5c55              LDRB     r5,[r2,r1]
00002a  1866              ADDS     r6,r4,r1
00002c  1c49              ADDS     r1,r1,#1
00002e  71f5              STRB     r5,[r6,#7]
000030  b2c9              UXTB     r1,r1                 ;382
                  |L4.50|
000032  4299              CMP      r1,r3                 ;382
000034  d3f8              BCC      |L4.40|
000036  1ddb              ADDS     r3,r3,#7              ;382
;;;385        }
;;;386    
;;;387        if(setBLE_ConnTxData(connID, SPIBuffer, (dataLength+(3+SIZE_BASIC_L2CAP_HEADER))) == SUCCESS_)    //5: 2Byte Opcode, 2Bytes Handle, 2Bytes Value
000038  b2da              UXTB     r2,r3
00003a  4904              LDR      r1,|L4.76|
00003c  f7fffffe          BL       setBLE_ConnTxData
000040  2800              CMP      r0,#0
000042  d000              BEQ      |L4.70|
                  |L4.68|
;;;388        {
;;;389            return BLESTACK_STATUS_SUCCESS;
;;;390        }
;;;391        else
;;;392        {
;;;393            return BLESTACK_STATUS_ERR_BUSY;
000044  2001              MOVS     r0,#1
                  |L4.70|
;;;394        }
;;;395    }
000046  bd70              POP      {r4-r6,pc}
;;;396    
                          ENDP

                  |L4.72|
                          DCD      smp_Phase
                  |L4.76|
                          DCD      SPIBuffer

                          AREA ||i.ATT_HDL_WriteRequest||, CODE, READONLY, ALIGN=2

                  ATT_HDL_WriteRequest PROC
;;;409    ***********************************************************************/
;;;410    BleStackStatus ATT_HDL_WriteRequest(uint8_t connID, uint16_t handle, uint8_t *data, uint8_t dataLength)
000000  b5f8              PUSH     {r3-r7,lr}
;;;411    {
;;;412        uint8_t i;
;;;413        extern Uint8 ATT_WRITE_REQUEST_Packet_Sent;
;;;414    #ifdef _SMP_ON_
;;;415        if(smp_Phase)
000002  4c16              LDR      r4,|L5.92|
000004  7824              LDRB     r4,[r4,#0]  ; smp_Phase
000006  2c00              CMP      r4,#0
000008  d120              BNE      |L5.76|
;;;416        {
;;;417            return BLESTACK_STATUS_ERR_BUSY;
;;;418        }
;;;419    #endif
;;;420        if(ATT_WRITE_REQUEST_Packet_Sent != 0)
00000a  4c15              LDR      r4,|L5.96|
00000c  7825              LDRB     r5,[r4,#0]  ; ATT_WRITE_REQUEST_Packet_Sent
00000e  2d00              CMP      r5,#0
000010  d11c              BNE      |L5.76|
;;;421        {
;;;422            return BLESTACK_STATUS_ERR_BUSY;
;;;423        }
;;;424        SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_WRITE_REQUEST;
000012  4e14              LDR      r6,|L5.100|
000014  2512              MOVS     r5,#0x12
000016  7135              STRB     r5,[r6,#4]
;;;425        SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = (3+dataLength);
000018  1cdd              ADDS     r5,r3,#3
00001a  7035              STRB     r5,[r6,#0]
;;;426        SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
00001c  2700              MOVS     r7,#0
00001e  7077              STRB     r7,[r6,#1]
;;;427        SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
000020  2504              MOVS     r5,#4
000022  70b5              STRB     r5,[r6,#2]
;;;428        SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
000024  70f7              STRB     r7,[r6,#3]
;;;429        SPIBuffer[TAB_ATTRIBUTE_HANDLE_L] = handle;  //TRSPX UART handle
000026  7171              STRB     r1,[r6,#5]
;;;430        SPIBuffer[TAB_ATTRIBUTE_HANDLE_H] = handle >> 8;
000028  0a09              LSRS     r1,r1,#8
00002a  71b1              STRB     r1,[r6,#6]
;;;431    
;;;432        for(i=0; i<dataLength; i++)
00002c  4639              MOV      r1,r7
00002e  e004              B        |L5.58|
                  |L5.48|
;;;433        {
;;;434            SPIBuffer[TAB_ATTRIBUTE_HANDLE_H+1+i] = *(data+i);
000030  5c55              LDRB     r5,[r2,r1]
000032  1877              ADDS     r7,r6,r1
000034  1c49              ADDS     r1,r1,#1
000036  71fd              STRB     r5,[r7,#7]
000038  b2c9              UXTB     r1,r1                 ;432
                  |L5.58|
00003a  4299              CMP      r1,r3                 ;432
00003c  d3f8              BCC      |L5.48|
00003e  1ddb              ADDS     r3,r3,#7              ;432
;;;435        }
;;;436    
;;;437        if(setBLE_ConnTxData(connID, SPIBuffer, (dataLength+(3+SIZE_BASIC_L2CAP_HEADER))) == SUCCESS_)    //5: 2Byte Opcode, 2Bytes Handle, 2Bytes Value
000040  b2da              UXTB     r2,r3
000042  4908              LDR      r1,|L5.100|
000044  f7fffffe          BL       setBLE_ConnTxData
000048  2800              CMP      r0,#0
00004a  d001              BEQ      |L5.80|
                  |L5.76|
;;;438        {
;;;439            ATT_WRITE_REQUEST_Packet_Sent++;
;;;440            return BLESTACK_STATUS_SUCCESS;
;;;441        }
;;;442        else
;;;443        {
;;;444            return BLESTACK_STATUS_ERR_BUSY;
00004c  2001              MOVS     r0,#1
;;;445        }
;;;446    }
00004e  bdf8              POP      {r3-r7,pc}
                  |L5.80|
000050  7820              LDRB     r0,[r4,#0]            ;439  ; ATT_WRITE_REQUEST_Packet_Sent
000052  1c40              ADDS     r0,r0,#1              ;439
000054  7020              STRB     r0,[r4,#0]            ;439
000056  2000              MOVS     r0,#0                 ;440
000058  bdf8              POP      {r3-r7,pc}
;;;447    #ifdef _HOST_CLIENT_
                          ENDP

00005a  0000              DCW      0x0000
                  |L5.92|
                          DCD      smp_Phase
                  |L5.96|
                          DCD      ATT_WRITE_REQUEST_Packet_Sent
                  |L5.100|
                          DCD      SPIBuffer

                          AREA ||i.HSPF_Att_Read||, CODE, READONLY, ALIGN=2

                  HSPF_Att_Read PROC
;;;80     
;;;81     void HSPF_Att_Read(MBLK *pMBlk)
000000  7a41              LDRB     r1,[r0,#9]
;;;82     {
;;;83         extern void (* const ATT_Read[])(uint8_t connID, uint8_t *srcCMD);
;;;84     
;;;85         (*(ATT_Read[pMBlk->Para.HSPF_Att_Read_Para.HCI_Conn_Hdl_H]))(pMBlk->Para.HSPF_Att_Read_Para.HCI_Conn_Hdl_L, pMBlk->Para.HSPF_Att_Read_Para.HCI_DataPkt_Data);
000002  4a04              LDR      r2,|L6.20|
000004  0089              LSLS     r1,r1,#2
000006  5852              LDR      r2,[r2,r1]
000008  7a03              LDRB     r3,[r0,#8]
00000a  4601              MOV      r1,r0
00000c  310b              ADDS     r1,r1,#0xb
00000e  4618              MOV      r0,r3
000010  4710              BX       r2
;;;86     }
;;;87     
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      ATT_Read

                          AREA ||i.HSPF_Att_Write||, CODE, READONLY, ALIGN=2

                  HSPF_Att_Write PROC
;;;70     
;;;71     void HSPF_Att_Write(MBLK *pMBlk)
000000  b430              PUSH     {r4,r5}
;;;72     {
;;;73         extern void (* const ATT_Write[])(uint8_t connID, uint8_t length, uint8_t *srcCMD);
;;;74     
;;;75         //(*(ATT_Write[pMBlk->Para.HSPF_Att_Write_Para.HCI_Conn_Hdl_H]))(pMBlk->Para.HSPF_Att_Write_Para.HCI_Conn_Hdl_L, pMBlk->Para.HSPF_Att_Write_Para.HCI_DataPkt_Data);
;;;76         //(*(ATT_Write[pMBlk->Para.HSPF_Att_Write_Para.HCI_Conn_Hdl_H]))(pMBlk->Para.HSPF_Att_Write_Para.HCI_DataPkt_LthL, pMBlk->Para.HSPF_Att_Write_Para.HCI_DataPkt_Data);
;;;77         (*(ATT_Write[pMBlk->Para.HSPF_Att_Write_Para.HCI_Conn_Hdl_H]))(pMBlk->Para.HSPF_Att_Write_Para.HCI_Conn_Hdl_L, pMBlk->Para.HSPF_Att_Write_Para.HCI_DataPkt_LthL, pMBlk->Para.HSPF_Att_Write_Para.HCI_DataPkt_Data);
000002  7a42              LDRB     r2,[r0,#9]
000004  4b04              LDR      r3,|L7.24|
000006  0092              LSLS     r2,r2,#2
000008  589b              LDR      r3,[r3,r2]
00000a  7a04              LDRB     r4,[r0,#8]
00000c  4602              MOV      r2,r0
00000e  7a81              LDRB     r1,[r0,#0xa]
000010  4620              MOV      r0,r4
000012  bc30              POP      {r4,r5}
000014  320b              ADDS     r2,r2,#0xb
000016  4718              BX       r3
;;;78     }
;;;79     
                          ENDP

                  |L7.24|
                          DCD      ATT_Write

                          AREA ||i.Host_Root||, CODE, READONLY, ALIGN=2

                  Host_Root PROC
;;;171    
;;;172    void Host_Root(Uint8 QueueId)
000000  b510              PUSH     {r4,lr}
;;;173    {
;;;174        Uint8 event;
;;;175        MBLK *pmblk;
;;;176    
;;;177        pmblk = RcvMsgBlk(QueueId);
000002  f7fffffe          BL       RcvMsgBlk
000006  4604              MOV      r4,r0
;;;178    
;;;179        /* run LM finite state machine */
;;;180        event = pmblk->Primitive - HOST_E0;
000008  7900              LDRB     r0,[r0,#4]
;;;181        (*(HS_fsm[event]))(pmblk);
00000a  4905              LDR      r1,|L8.32|
00000c  3890              SUBS     r0,r0,#0x90           ;180
00000e  0600              LSLS     r0,r0,#24             ;180
000010  0d80              LSRS     r0,r0,#22
000012  5809              LDR      r1,[r1,r0]
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
;;;182    
;;;183        FreeMsgBlk(pmblk);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       FreeMsgBlk
;;;184    }
00001e  bd10              POP      {r4,pc}
;;;185    
                          ENDP

                  |L8.32|
                          DCD      ||area_number.14||

                          AREA ||i.MHS_Event_Null||, CODE, READONLY, ALIGN=1

                  MHS_Event_Null PROC
;;;64     
;;;65     void MHS_Event_Null(MBLK *pMBlk)
000000  4770              BX       lr
;;;66     {
;;;67         //pMBlk = pMBlk;
;;;68     }
;;;69     
                          ENDP


                          AREA ||i.initBleDeviceParam||, CODE, READONLY, ALIGN=2

                  initBleDeviceParam PROC
;;;57      *******************************************************************/
;;;58     void initBleDeviceParam(BLE_Device_Param *bleDevice)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60         bleDevice->ble_deviceChipId = 0x66;
000002  2166              MOVS     r1,#0x66
000004  7001              STRB     r1,[r0,#0]
;;;61         setBLE_BleDeviceAddr(&bleAddr_param);
000006  4802              LDR      r0,|L10.16|
000008  f7fffffe          BL       setBLE_BleDeviceAddr
;;;62     }
00000c  bd10              POP      {r4,pc}
;;;63     
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  ATT_READ_BY_GROUP_TYPE_REQUEST_BGN
000000  0100ffff          DCB      0x01,0x00,0xff,0xff
000004  0028              DCB      0x00,0x28

                          AREA ||area_number.14||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.constdata||
                  HS_fsm
                          DCD      MHS_Event_Null
                          DCD      HSPF_Att_Write
                          DCD      HSPF_Att_Read

                          AREA ||.data||, DATA, ALIGN=0

                  bleAddr_param
000000  01412207          DCB      0x01,0x41,0x22,0x07
000004  1d10c3            DCB      0x1d,0x10,0xc3

                          AREA ||area_number.16||, DATA, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.data||
                  ble_device_param
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\host.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_host_c_ada1d0a7____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_host_c_ada1d0a7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_host_c_ada1d0a7____REVSH|
#line 402
|__asm___6_host_c_ada1d0a7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

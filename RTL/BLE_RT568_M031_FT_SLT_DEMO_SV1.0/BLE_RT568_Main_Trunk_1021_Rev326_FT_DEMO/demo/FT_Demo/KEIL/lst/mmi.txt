; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mmi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\mmi.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\..\..\..\Library\CMSIS\Include -I..\..\..\..\..\..\Library\StdDriver\inc -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 --omf_browse=.\obj\mmi.crf ..\..\..\source\mmi.c]
                          THUMB

                          AREA ||i.PassEC_BLE_CODE_SMP||, CODE, READONLY, ALIGN=1

                  PassEC_BLE_CODE_SMP PROC
;;;2753   extern void SndMsgBlkEC(MBLK *pMsgBlk);
;;;2754   Uint8 PassEC_BLE_CODE_SMP(Uint8 connID, Uint8 Primitive, Uint8 *source, Uint8 length)
000000  b5ff              PUSH     {r0-r7,lr}
;;;2755   {
000002  4606              MOV      r6,r0
000004  b081              SUB      sp,sp,#4
000006  461f              MOV      r7,r3
000008  460d              MOV      r5,r1
;;;2756       MBLK *mblk;
;;;2757       mblk = GetMsgBlk_L2_wSize(SIZE_MBLK_ACL_DATA_UNIT);
00000a  2029              MOVS     r0,#0x29
00000c  f7fffffe          BL       GetMsgBlk_L2_wSize
000010  0004              MOVS     r4,r0
;;;2758       if(mblk == (MBLK *)0)
000012  d00d              BEQ      |L1.48|
;;;2759       {
;;;2760           return FAIL_;
;;;2761       }
;;;2762   
;;;2763       mblk->Primitive = Primitive;
000014  7125              STRB     r5,[r4,#4]
;;;2764       mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L = connID;
000016  7226              STRB     r6,[r4,#8]
;;;2765       Knl_MemCpy(mblk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data, source, length);
000018  4620              MOV      r0,r4
00001a  463a              MOV      r2,r7
00001c  300b              ADDS     r0,r0,#0xb
00001e  9903              LDR      r1,[sp,#0xc]
000020  f7fffffe          BL       Knl_MemCpy
;;;2766       SndMsgBlkEC(mblk);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       SndMsgBlkEC
;;;2767       return SUCCESS_;
00002a  2000              MOVS     r0,#0
                  |L1.44|
;;;2768   }
00002c  b005              ADD      sp,sp,#0x14
00002e  bdf0              POP      {r4-r7,pc}
                  |L1.48|
000030  2001              MOVS     r0,#1                 ;2760
000032  e7fb              B        |L1.44|
;;;2769   
                          ENDP


                          AREA ||i.Prcss_BLE_CODE_SMP_Encryption_Information||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Encryption_Information PROC
;;;2927   }
;;;2928   Uint8 Prcss_BLE_CODE_SMP_Encryption_Information(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;2929   {
;;;2930       Uint8 i;
;;;2931   
;;;2932       for(i=0; i<16; i++)
000002  2000              MOVS     r0,#0
;;;2933       {
;;;2934           smp_Temp16[i] = L2CAP_Buf.DataBuf[(TAB_BASIC_L2CAP_CODE_SMP+16)-i];     //LTK
000004  4b05              LDR      r3,|L2.28|
000006  4a06              LDR      r2,|L2.32|
000008  2114              MOVS     r1,#0x14
                  |L2.10|
00000a  1a0c              SUBS     r4,r1,r0
00000c  5d1c              LDRB     r4,[r3,r4]
00000e  5414              STRB     r4,[r2,r0]
000010  1c40              ADDS     r0,r0,#1
000012  b2c0              UXTB     r0,r0                 ;2932
000014  2810              CMP      r0,#0x10              ;2932
000016  d3f8              BCC      |L2.10|
;;;2935       }
;;;2936       return SUCCESS_;
000018  2000              MOVS     r0,#0
;;;2937   }
00001a  bd10              POP      {r4,pc}
;;;2938   
                          ENDP

                  |L2.28|
                          DCD      L2CAP_Buf
                  |L2.32|
                          DCD      smp_Temp16

                          AREA ||i.Prcss_BLE_CODE_SMP_Identity_Address_Information||, CODE, READONLY, ALIGN=1

                  Prcss_BLE_CODE_SMP_Identity_Address_Information PROC
;;;2968   
;;;2969   Uint8 Prcss_BLE_CODE_SMP_Identity_Address_Information(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2970   {
;;;2971       return SUCCESS_;
;;;2972   }
000002  4770              BX       lr
;;;2973   
                          ENDP


                          AREA ||i.Prcss_BLE_CODE_SMP_Identity_Information||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Identity_Information PROC
;;;2956   
;;;2957   Uint8 Prcss_BLE_CODE_SMP_Identity_Information(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;2958   {
;;;2959       Uint8 i;
;;;2960       for(i = 0; i<SIZE_SMP_IRK; i++)
000002  2000              MOVS     r0,#0
;;;2961       {
;;;2962           smp_IRKm[i] = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_CODE_SMP+SIZE_SMP_IRK-i];
000004  4b05              LDR      r3,|L4.28|
000006  4a06              LDR      r2,|L4.32|
000008  2114              MOVS     r1,#0x14
                  |L4.10|
00000a  1a0c              SUBS     r4,r1,r0
00000c  5d1c              LDRB     r4,[r3,r4]
00000e  5414              STRB     r4,[r2,r0]
000010  1c40              ADDS     r0,r0,#1
000012  b2c0              UXTB     r0,r0                 ;2960
000014  2810              CMP      r0,#0x10              ;2960
000016  d3f8              BCC      |L4.10|
;;;2963       }
;;;2964   
;;;2965       return SUCCESS_;
000018  2000              MOVS     r0,#0
;;;2966   }
00001a  bd10              POP      {r4,pc}
;;;2967   
                          ENDP

                  |L4.28|
                          DCD      L2CAP_Buf
                  |L4.32|
                          DCD      smp_IRKm

                          AREA ||i.Prcss_BLE_CODE_SMP_Master_Identification||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Master_Identification PROC
;;;2939   
;;;2940   Uint8 Prcss_BLE_CODE_SMP_Master_Identification(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;2941   {
;;;2942       Uint8 i;
;;;2943   
;;;2944       for(i = 0; i<SIZE_SMP_EDIV; i++)
000002  2000              MOVS     r0,#0
;;;2945       {
;;;2946           smp_EDIV[i] = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_CODE_SMP+SIZE_SMP_EDIV-i];
000004  490a              LDR      r1,|L5.48|
000006  4a0b              LDR      r2,|L5.52|
000008  2306              MOVS     r3,#6
                  |L5.10|
00000a  1a1c              SUBS     r4,r3,r0
00000c  5d14              LDRB     r4,[r2,r4]
00000e  540c              STRB     r4,[r1,r0]
000010  1c40              ADDS     r0,r0,#1
000012  b2c0              UXTB     r0,r0                 ;2944
000014  2802              CMP      r0,#2                 ;2944
000016  d3f8              BCC      |L5.10|
;;;2947       }
;;;2948       for(i = 0; i<SIZE_SMP_RAND; i++)
000018  2000              MOVS     r0,#0
;;;2949       {
;;;2950           smp_Rand[i] = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_CODE_SMP+1+SIZE_SMP_RAND-i];
00001a  4b07              LDR      r3,|L5.56|
00001c  210d              MOVS     r1,#0xd
                  |L5.30|
00001e  1a0c              SUBS     r4,r1,r0
000020  5d14              LDRB     r4,[r2,r4]
000022  541c              STRB     r4,[r3,r0]
000024  1c40              ADDS     r0,r0,#1
000026  b2c0              UXTB     r0,r0                 ;2948
000028  2808              CMP      r0,#8                 ;2948
00002a  d3f8              BCC      |L5.30|
;;;2951       }
;;;2952   
;;;2953       return SUCCESS_;
00002c  2000              MOVS     r0,#0
;;;2954   }
00002e  bd10              POP      {r4,pc}
;;;2955   
                          ENDP

                  |L5.48|
                          DCD      smp_EDIV
                  |L5.52|
                          DCD      L2CAP_Buf
                  |L5.56|
                          DCD      smp_Rand

                          AREA ||i.Prcss_BLE_CODE_SMP_Pairing_Confirm||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Pairing_Confirm PROC
;;;2850   
;;;2851   Uint8 Prcss_BLE_CODE_SMP_Pairing_Confirm(Uint8 connID)
000000  b570              PUSH     {r4-r6,lr}
;;;2852   {
;;;2853       MBLK *mblk;
;;;2854   
;;;2855       if(smp_TempDef == SMP_TEMPDEF_NONE)
000002  4d13              LDR      r5,|L6.80|
000004  4604              MOV      r4,r0                 ;2852
000006  7828              LDRB     r0,[r5,#0]  ; smp_TempDef
000008  2800              CMP      r0,#0
00000a  d106              BNE      |L6.26|
;;;2856       {
;;;2857           Knl_MemCpyInv(smp_Temp16, &L2CAP_Buf.DataBuf[(TAB_BASIC_L2CAP_CODE_SMP+1)], LEN_AES_KEY);
00000c  2210              MOVS     r2,#0x10
00000e  4911              LDR      r1,|L6.84|
000010  4811              LDR      r0,|L6.88|
000012  f7fffffe          BL       Knl_MemCpyInv
;;;2858           smp_TempDef = SMP_TEMPDEF_MCONFIRM;
000016  2001              MOVS     r0,#1
000018  7028              STRB     r0,[r5,#0]
                  |L6.26|
;;;2859       }
;;;2860       switch(smp_Para_Bond[SEL_STK_GEN_METHOD])
00001a  4810              LDR      r0,|L6.92|
00001c  7cc0              LDRB     r0,[r0,#0x13]  ; smp_Para_Bond
00001e  2801              CMP      r0,#1
000020  d009              BEQ      |L6.54|
000022  2802              CMP      r0,#2
000024  d007              BEQ      |L6.54|
;;;2861       {
;;;2862       case STK_GEN_MTHD_PASSKEY_ENTRY_DISP:
;;;2863       case STK_GEN_MTHD_PASSKEY_ENTRY:
;;;2864           mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.MHC_Le_Stk_Gen_Para));
;;;2865           if(mblk == (MBLK *)0)
;;;2866           {
;;;2867               return FAIL_;
;;;2868           }
;;;2869   
;;;2870           mblk->Primitive = MHC_EVENT_LE_WAIT_PASSKEY_CONFIRM;
;;;2871           mblk->Para.MHC_Le_Stk_Gen_Para.HCI_Conn_Hdl_L = connID;
;;;2872           SndMsgBlk(mblk, Q_2HCI);
;;;2873           return SUCCESS_;
;;;2874       //smpPasskey_init();
;;;2875       //smpPasskey_set(654321, connID);
;;;2876       //smpPasskey_set(HOGP_pairing_key, connID);
;;;2877       //break;
;;;2878   
;;;2879   //    case STK_GEN_MTHD_PASSKEY_ENTRY:
;;;2880   //        smpPasskey_req(connID);
;;;2881   //        break;
;;;2882   
;;;2883       default:                                //STK_GEN_MTHD_JUST_WORKS
;;;2884           if(smpPasskey_set(0, connID) == SUCCESS_)
000026  4621              MOV      r1,r4
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       smpPasskey_set
00002e  2800              CMP      r0,#0
000030  d000              BEQ      |L6.52|
                  |L6.50|
;;;2885           {
;;;2886               return SUCCESS_;
;;;2887           }
;;;2888           else
;;;2889           {
;;;2890               return FAIL_;
000032  2001              MOVS     r0,#1
                  |L6.52|
;;;2891           }
;;;2892           //break;
;;;2893       }
;;;2894   }
000034  bd70              POP      {r4-r6,pc}
                  |L6.54|
000036  2002              MOVS     r0,#2                 ;2864
000038  f7fffffe          BL       GetMsgBlk_L2_wSize
00003c  2800              CMP      r0,#0                 ;2865
00003e  d0f8              BEQ      |L6.50|
000040  2176              MOVS     r1,#0x76              ;2870
000042  7101              STRB     r1,[r0,#4]            ;2870
000044  7204              STRB     r4,[r0,#8]            ;2871
000046  2104              MOVS     r1,#4                 ;2872
000048  f7fffffe          BL       SndMsgBlk
00004c  2000              MOVS     r0,#0                 ;2873
00004e  bd70              POP      {r4-r6,pc}
;;;2895   
                          ENDP

                  |L6.80|
                          DCD      smp_TempDef
                  |L6.84|
                          DCD      L2CAP_Buf+0x5
                  |L6.88|
                          DCD      smp_Temp16
                  |L6.92|
                          DCD      smp_Para_Bond

                          AREA ||i.Prcss_BLE_CODE_SMP_Pairing_Failed||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Pairing_Failed PROC
;;;2910   
;;;2911   Uint8 Prcss_BLE_CODE_SMP_Pairing_Failed(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;2912   {
000002  4604              MOV      r4,r0
;;;2913       MBLK *mblk;
;;;2914   
;;;2915       mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.MHC_Le_Auth_status_Para));
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;2916       if(mblk == (MBLK *)0)
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L7.40|
;;;2917       {
;;;2918           return FAIL_;
;;;2919       }
;;;2920   
;;;2921       mblk->Primitive = MHC_EVENT_AUTH_STATUS;
00000e  2177              MOVS     r1,#0x77
000010  7101              STRB     r1,[r0,#4]
;;;2922       mblk->Para.MHC_Le_Auth_status_Para.HCI_Conn_Hdl_L = connID;
;;;2923       mblk->Para.MHC_Le_Auth_status_Para.HCI_AUTH_STATUS = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_CODE_SMP+1];
000012  4906              LDR      r1,|L7.44|
000014  7204              STRB     r4,[r0,#8]            ;2922
000016  7949              LDRB     r1,[r1,#5]  ; L2CAP_Buf
000018  7241              STRB     r1,[r0,#9]
;;;2924       SndMsgBlk(mblk, Q_2HCI);
00001a  2104              MOVS     r1,#4
00001c  f7fffffe          BL       SndMsgBlk
;;;2925       smp_Phase = 0;
000020  4903              LDR      r1,|L7.48|
000022  2000              MOVS     r0,#0
000024  7008              STRB     r0,[r1,#0]
;;;2926       return SUCCESS_;
;;;2927   }
000026  bd10              POP      {r4,pc}
                  |L7.40|
000028  2001              MOVS     r0,#1                 ;2918
00002a  bd10              POP      {r4,pc}
;;;2928   Uint8 Prcss_BLE_CODE_SMP_Encryption_Information(Uint8 connID)
                          ENDP

                  |L7.44|
                          DCD      L2CAP_Buf
                  |L7.48|
                          DCD      smp_Phase

                          AREA ||i.Prcss_BLE_CODE_SMP_Pairing_Random||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Pairing_Random PROC
;;;2897   
;;;2898   Uint8 Prcss_BLE_CODE_SMP_Pairing_Random(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;2899   {
;;;2900       if(PassEC_BLE_CODE_SMP(connID, SMEC_LE_CODE_SMP_PAIRING_RANDOM, L2CAP_Buf.DataBuf, (SIZE_BASIC_L2CAP_HEADER+1+LEN_AES_KEY)) == SUCCESS_)
000002  2315              MOVS     r3,#0x15
000004  4a03              LDR      r2,|L8.20|
000006  2157              MOVS     r1,#0x57
000008  f7fffffe          BL       PassEC_BLE_CODE_SMP
00000c  2800              CMP      r0,#0
00000e  d000              BEQ      |L8.18|
;;;2901       {
;;;2902           return SUCCESS_;
;;;2903       }
;;;2904       else
;;;2905       {
;;;2906           return FAIL_;
000010  2001              MOVS     r0,#1
                  |L8.18|
;;;2907       }
;;;2908   }
000012  bd10              POP      {r4,pc}
;;;2909   
                          ENDP

                  |L8.20|
                          DCD      L2CAP_Buf

                          AREA ||i.Prcss_BLE_CODE_SMP_Pairing_Request||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Pairing_Request PROC
;;;2770   
;;;2771   Uint8 Prcss_BLE_CODE_SMP_Pairing_Request(Uint8 connID)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2772   {
000002  4605              MOV      r5,r0
;;;2773       Uint8 i;
;;;2774       MBLK *mblk;
;;;2775   
;;;2776       if(L2CAP_Buf.DataBuf[TAB_MAX_ENCRYPTION_KEY_SIZE] < SIZE_MINIMUM_ENCRYPTION_KEY)
;;;2777       {
;;;2778   
;;;2779       }
;;;2780       smp_PReq_IO_Capab = L2CAP_Buf.DataBuf[TAB_IO_CAPABILITY];
000004  4831              LDR      r0,|L9.204|
000006  4932              LDR      r1,|L9.208|
000008  7943              LDRB     r3,[r0,#5]  ; L2CAP_Buf
00000a  700b              STRB     r3,[r1,#0]
;;;2781       smp_PReq_OOB_data = L2CAP_Buf.DataBuf[TAB_OOB_DATA_FLAG];
00000c  4a31              LDR      r2,|L9.212|
00000e  7981              LDRB     r1,[r0,#6]  ; L2CAP_Buf
000010  7011              STRB     r1,[r2,#0]
;;;2782       smp_Para_Bond[SMP_PREQ_AUTHREQ] = L2CAP_Buf.DataBuf[TAB_AUTHREQ];
000012  4931              LDR      r1,|L9.216|
000014  79c2              LDRB     r2,[r0,#7]  ; L2CAP_Buf
;;;2783   
;;;2784       smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE] = L2CAP_Buf.DataBuf[TAB_MAX_ENCRYPTION_KEY_SIZE];
000016  4e30              LDR      r6,|L9.216|
000018  710a              STRB     r2,[r1,#4]            ;2782
00001a  7a01              LDRB     r1,[r0,#8]  ; L2CAP_Buf
00001c  3e20              SUBS     r6,r6,#0x20
00001e  7471              STRB     r1,[r6,#0x11]
;;;2785       smp_PReq_Init_Key_Distr = L2CAP_Buf.DataBuf[TAB_INITIATOR_KEY_DISTRIBUTION];
000020  4f2e              LDR      r7,|L9.220|
000022  7a44              LDRB     r4,[r0,#9]  ; L2CAP_Buf
000024  703c              STRB     r4,[r7,#0]
;;;2786       smp_PReq_Resp_Key_Distr = L2CAP_Buf.DataBuf[TAB_RESPONDER_KEY_DISTRIBUTION];
000026  4c2e              LDR      r4,|L9.224|
000028  7a80              LDRB     r0,[r0,#0xa]  ; L2CAP_Buf
00002a  7020              STRB     r0,[r4,#0]
;;;2787   
;;;2788       if(((smp_Para_Bond[SMP_PREQ_AUTHREQ] | rsp_pairing_request_table[TAB_AUTHREQ]) & MITM_PROTECTION_YES) == 0)
00002c  482d              LDR      r0,|L9.228|
00002e  2700              MOVS     r7,#0
000030  79c4              LDRB     r4,[r0,#7]  ; rsp_pairing_request_table
000032  4322              ORRS     r2,r2,r4
000034  0752              LSLS     r2,r2,#29
000036  2a00              CMP      r2,#0
000038  db01              BLT      |L9.62|
;;;2789       {
;;;2790           smp_Para_Bond[SEL_STK_GEN_METHOD] = STK_GEN_MTHD_JUST_WORKS;
00003a  74f7              STRB     r7,[r6,#0x13]
00003c  e006              B        |L9.76|
                  |L9.62|
;;;2791       }
;;;2792       else
;;;2793       {
;;;2794           smp_Para_Bond[SEL_STK_GEN_METHOD] = SEL_STK_GEN_MTHD[(rsp_pairing_request_table[TAB_IO_CAPABILITY])][smp_PReq_IO_Capab];
00003e  7940              LDRB     r0,[r0,#5]  ; rsp_pairing_request_table
000040  0082              LSLS     r2,r0,#2
000042  1880              ADDS     r0,r0,r2
000044  4a28              LDR      r2,|L9.232|
000046  1880              ADDS     r0,r0,r2
000048  5cc0              LDRB     r0,[r0,r3]
00004a  74f0              STRB     r0,[r6,#0x13]
                  |L9.76|
00004c  1fc9              SUBS     r1,r1,#7
;;;2795       }
;;;2796   
;;;2797       if((smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE] > 6)&&(smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE] < 17))
00004e  290a              CMP      r1,#0xa
000050  d223              BCS      |L9.154|
;;;2798       {
;;;2799           mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.MHC_Le_Stk_Gen_Para));
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       GetMsgBlk_L2_wSize
000058  0004              MOVS     r4,r0
;;;2800           if(mblk == (MBLK *)0)
00005a  d035              BEQ      |L9.200|
;;;2801           {
;;;2802               return FAIL_;
;;;2803           }
;;;2804   
;;;2805           mblk->Primitive = MHC_EVENT_LE_STK_GEN_METHOD;
00005c  2075              MOVS     r0,#0x75
00005e  7120              STRB     r0,[r4,#4]
;;;2806           mblk->Para.MHC_Le_Stk_Gen_Para.HCI_Conn_Hdl_L = connID;
000060  7225              STRB     r5,[r4,#8]
;;;2807           mblk->Para.MHC_Le_Stk_Gen_Para.HCI_STK_GEN_MTHD = smp_Para_Bond[SEL_STK_GEN_METHOD];
000062  7cf0              LDRB     r0,[r6,#0x13]  ; smp_Para_Bond
000064  7260              STRB     r0,[r4,#9]
;;;2808           //SndMsgBlk(mblk, Q_2HCI);
;;;2809   
;;;2810           smpPasskey_init();
000066  f7fffffe          BL       smpPasskey_init
;;;2811           if(setBLE_ConnTxData(connID, (Uint8 *)rsp_pairing_request_table, (RSP_PAIRING_REQUEST[TAB_BASIC_L2CAP_PDU_LENGTH_L]+SIZE_BASIC_L2CAP_HEADER)) == SUCCESS_)
00006a  4820              LDR      r0,|L9.236|
00006c  491d              LDR      r1,|L9.228|
00006e  7800              LDRB     r0,[r0,#0]  ; RSP_PAIRING_REQUEST
000070  1d00              ADDS     r0,r0,#4
000072  b2c2              UXTB     r2,r0
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       setBLE_ConnTxData
00007a  2800              CMP      r0,#0
00007c  d003              BEQ      |L9.134|
;;;2812           {
;;;2813               smp_Phase = 1;      //Responder, slave
;;;2814               smp_TempDef = SMP_TEMPDEF_NONE;
;;;2815               SndMsgBlk(mblk, Q_2HCI);
;;;2816               return SUCCESS_;
;;;2817           }
;;;2818           else
;;;2819           {
;;;2820               FreeMsgBlk(mblk);
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       FreeMsgBlk
;;;2821               return FAIL_;
000084  e020              B        |L9.200|
                  |L9.134|
000086  491a              LDR      r1,|L9.240|
000088  2001              MOVS     r0,#1                 ;2813
00008a  7008              STRB     r0,[r1,#0]            ;2813
00008c  4819              LDR      r0,|L9.244|
00008e  2104              MOVS     r1,#4                 ;2815
000090  7007              STRB     r7,[r0,#0]            ;2814
000092  4620              MOV      r0,r4                 ;2815
000094  f7fffffe          BL       SndMsgBlk
000098  e014              B        |L9.196|
                  |L9.154|
;;;2822           }
;;;2823       }
;;;2824       else
;;;2825       {
;;;2826           i = ERR_CODE_SMP_ENCRYPTION_KEY_SIZE;
00009a  2406              MOVS     r4,#6
00009c  4668              MOV      r0,sp
00009e  7004              STRB     r4,[r0,#0]
;;;2827   
;;;2828           mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.MHC_Le_Auth_status_Para));
0000a0  2002              MOVS     r0,#2
0000a2  f7fffffe          BL       GetMsgBlk_L2_wSize
;;;2829           if(mblk == (MBLK *)0)
0000a6  2800              CMP      r0,#0
0000a8  d00e              BEQ      |L9.200|
;;;2830           {
;;;2831               return FAIL_;
;;;2832           }
;;;2833           mblk->Primitive = MHC_EVENT_AUTH_STATUS;
0000aa  2177              MOVS     r1,#0x77
0000ac  7101              STRB     r1,[r0,#4]
;;;2834           mblk->Para.MHC_Le_Auth_status_Para.HCI_Conn_Hdl_L = connID;
0000ae  7205              STRB     r5,[r0,#8]
;;;2835           mblk->Para.MHC_Le_Auth_status_Para.HCI_AUTH_STATUS = ERR_CODE_SMP_ENCRYPTION_KEY_SIZE;
0000b0  7244              STRB     r4,[r0,#9]
;;;2836           SndMsgBlk(mblk, Q_2HCI);
0000b2  2104              MOVS     r1,#4
0000b4  f7fffffe          BL       SndMsgBlk
;;;2837   
;;;2838           setBLE_ConnTxData_SMP(connID, CODE_SMP_PAIRING_FAIlED, &i, 1);
0000b8  2301              MOVS     r3,#1
0000ba  466a              MOV      r2,sp
0000bc  2105              MOVS     r1,#5
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       setBLE_ConnTxData_SMP
                  |L9.196|
;;;2839           return SUCCESS_;
0000c4  2000              MOVS     r0,#0
;;;2840       }
;;;2841   
;;;2842   }
0000c6  bdf8              POP      {r3-r7,pc}
                  |L9.200|
0000c8  2001              MOVS     r0,#1                 ;2831
0000ca  bdf8              POP      {r3-r7,pc}
;;;2843   
                          ENDP

                  |L9.204|
                          DCD      L2CAP_Buf
                  |L9.208|
                          DCD      smp_PReq_IO_Capab
                  |L9.212|
                          DCD      smp_PReq_OOB_data
                  |L9.216|
                          DCD      smp_Para_Bond+0x20
                  |L9.220|
                          DCD      smp_PReq_Init_Key_Distr
                  |L9.224|
                          DCD      smp_PReq_Resp_Key_Distr
                  |L9.228|
                          DCD      rsp_pairing_request_table
                  |L9.232|
                          DCD      SEL_STK_GEN_MTHD
                  |L9.236|
                          DCD      RSP_PAIRING_REQUEST
                  |L9.240|
                          DCD      smp_Phase
                  |L9.244|
                          DCD      smp_TempDef

                          AREA ||i.Prcss_BLE_CODE_SMP_Pairing_Response||, CODE, READONLY, ALIGN=1

                  Prcss_BLE_CODE_SMP_Pairing_Response PROC
;;;2844   
;;;2845   Uint8 Prcss_BLE_CODE_SMP_Pairing_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2846   {
;;;2847       return SUCCESS_;
;;;2848   }
000002  4770              BX       lr
;;;2849   
                          ENDP


                          AREA ||i.Prcss_BLE_CODE_SMP_Reserved||, CODE, READONLY, ALIGN=1

                  Prcss_BLE_CODE_SMP_Reserved PROC
;;;2746   #ifdef _SMP_ON_
;;;2747   Uint8 Prcss_BLE_CODE_SMP_Reserved(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2748   {
;;;2749       return SUCCESS_;
;;;2750   }
000002  4770              BX       lr
;;;2751   
                          ENDP


                          AREA ||i.Prcss_BLE_CODE_SMP_Security_Request||, CODE, READONLY, ALIGN=1

                  Prcss_BLE_CODE_SMP_Security_Request PROC
;;;2986   
;;;2987   Uint8 Prcss_BLE_CODE_SMP_Security_Request(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2988   {
;;;2989       return SUCCESS_;
;;;2990   }
000002  4770              BX       lr
;;;2991   
                          ENDP


                          AREA ||i.Prcss_BLE_CODE_SMP_Signing_Information||, CODE, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP_Signing_Information PROC
;;;2974   
;;;2975   Uint8 Prcss_BLE_CODE_SMP_Signing_Information(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;2976   {
;;;2977       Uint8 i;
;;;2978       for(i = 0; i<SIZE_SMP_CSRK; i++)
000002  2000              MOVS     r0,#0
;;;2979       {
;;;2980           smp_CSRKm[i] = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_CODE_SMP+SIZE_SMP_CSRK-i];
000004  4b05              LDR      r3,|L13.28|
000006  4a06              LDR      r2,|L13.32|
000008  2114              MOVS     r1,#0x14
                  |L13.10|
00000a  1a0c              SUBS     r4,r1,r0
00000c  5d1c              LDRB     r4,[r3,r4]
00000e  5414              STRB     r4,[r2,r0]
000010  1c40              ADDS     r0,r0,#1
000012  b2c0              UXTB     r0,r0                 ;2978
000014  2810              CMP      r0,#0x10              ;2978
000016  d3f8              BCC      |L13.10|
;;;2981       }
;;;2982   
;;;2983       return SUCCESS_;
000018  2000              MOVS     r0,#0
;;;2984   }
00001a  bd10              POP      {r4,pc}
;;;2985   
                          ENDP

                  |L13.28|
                          DCD      L2CAP_Buf
                  |L13.32|
                          DCD      smp_CSRKm

                          AREA ||i.Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL||, CODE, READONLY, ALIGN=1

                  Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL PROC
;;;424    
;;;425    Uint8 Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;426    {
;;;427        return SUCCESS_;
;;;428    }
000002  4770              BX       lr
;;;429    
                          ENDP


                          AREA ||i.Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL||, CODE, READONLY, ALIGN=2

                  Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL PROC
;;;430    
;;;431    Uint8 Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL(Uint8 connID)
000000  b508              PUSH     {r3,lr}
;;;432    {
;;;433        if((L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE] & 0xE0) == 0)
000002  490e              LDR      r1,|L15.60|
000004  7909              LDRB     r1,[r1,#4]  ; L2CAP_Buf
000006  094a              LSRS     r2,r1,#5
000008  d003              BEQ      |L15.18|
;;;434        {
;;;435            if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE] <= OPCODE_ATT_HANDlE_VAlUE_CONFIRMATION)
;;;436            {
;;;437                if((Prcss_BLE_OPCODE_ATT[L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE]](connID)) == SUCCESS_)
;;;438                {
;;;439                    return SUCCESS_;
;;;440                }
;;;441                else
;;;442                {
;;;443                    return FAIL_;
;;;444                }
;;;445            }
;;;446            else
;;;447            {
;;;448                if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE], 0, 0, ERR_CODE_ATT_REQUEST_NOT_SUPPORTED) == SUCCESS_)
;;;449                {
;;;450                    return SUCCESS_;
;;;451                }
;;;452                else
;;;453                {
;;;454                    return FAIL_;
;;;455                }
;;;456            }
;;;457        }
;;;458        else
;;;459        {
;;;460            //j = SPIBuffer[TAB_BASIC_L2CAP_OPCODE];
;;;461            switch(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE])
00000a  2952              CMP      r1,#0x52
00000c  d00f              BEQ      |L15.46|
;;;462            {
;;;463            case OPCODE_ATT_WRITE_COMMAND:
;;;464                if(Prcss_OPCODE_ATT_Write_Command(connID) == SUCCESS_)
;;;465                {
;;;466                    return SUCCESS_;
;;;467                }
;;;468                else
;;;469                {
;;;470                    return FAIL_;
;;;471                }
;;;472            //break;
;;;473    
;;;474            case OPCODE_ATT_SIGNED_WRITE_COMMAND:
;;;475                if(Prcss_OPCODE_ATT_Signed_Write_Command(connID) == SUCCESS_)
;;;476                {
;;;477                    return SUCCESS_;
;;;478                }
;;;479                else
;;;480                {
;;;481                    return FAIL_;
;;;482                }
;;;483            //break;
;;;484    
;;;485            default:
;;;486                return SUCCESS_;
00000e  2000              MOVS     r0,#0
                  |L15.16|
;;;487                //break;
;;;488            }
;;;489        }
;;;490    }
000010  bd08              POP      {r3,pc}
                  |L15.18|
000012  291e              CMP      r1,#0x1e              ;435
000014  d804              BHI      |L15.32|
000016  4a0a              LDR      r2,|L15.64|
000018  0089              LSLS     r1,r1,#2              ;437
00001a  5851              LDR      r1,[r2,r1]            ;437
00001c  4788              BLX      r1                    ;437
00001e  e008              B        |L15.50|
                  |L15.32|
000020  2206              MOVS     r2,#6                 ;448
000022  2300              MOVS     r3,#0                 ;448
000024  9200              STR      r2,[sp,#0]            ;448
000026  461a              MOV      r2,r3                 ;448
000028  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
00002c  e001              B        |L15.50|
                  |L15.46|
00002e  f7fffffe          BL       Prcss_OPCODE_ATT_Write_Command
                  |L15.50|
000032  2800              CMP      r0,#0                 ;464
000034  d0ec              BEQ      |L15.16|
000036  2001              MOVS     r0,#1                 ;470
000038  bd08              POP      {r3,pc}
;;;491    
                          ENDP

00003a  0000              DCW      0x0000
                  |L15.60|
                          DCD      L2CAP_Buf
                  |L15.64|
                          DCD      ||.constdata||+0x30

                          AREA ||i.Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL||, CODE, READONLY, ALIGN=1

                  Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL PROC
;;;418    
;;;419    Uint8 Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;420    {
;;;421        return SUCCESS_;
;;;422    }
000002  4770              BX       lr
;;;423    
                          ENDP


                          AREA ||i.Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL||, CODE, READONLY, ALIGN=1

                  Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL PROC
;;;412    
;;;413    Uint8 Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;414    {
;;;415        return SUCCESS_;
;;;416    }
000002  4770              BX       lr
;;;417    
                          ENDP


                          AREA ||i.Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL||, CODE, READONLY, ALIGN=2

                  Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL PROC
;;;492    
;;;493    Uint8 Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL(Uint8 connID)
000000  b5f8              PUSH     {r3-r7,lr}
;;;494    {
;;;495        Uint8 i;
;;;496    
;;;497        i = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE];
000002  4911              LDR      r1,|L18.72|
000004  2400              MOVS     r4,#0
000006  790b              LDRB     r3,[r1,#4]  ; L2CAP_Buf
000008  2701              MOVS     r7,#1
;;;498        if(i <= 0x13)
;;;499        {
;;;500            switch(i)
;;;501            {
;;;502            case CODE_SIGNL_CMD_CONNECTION_PARAMETER_UPDATE_RESPONSE:
;;;503                i = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_SIGNALING_IDENTIFIER];                //Identifier
;;;504                return SUCCESS_;
;;;505            //break;
;;;506    
;;;507            case CODE_SIGNL_CMD_COMMAND_REJECT:
;;;508                return SUCCESS_;
;;;509            //break;
;;;510    
;;;511            default:
;;;512                SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 6;                        // 1 Code, 1 Identifier, 2 Command Length, 2 Data:Reason code
00000a  2606              MOVS     r6,#6
00000c  490f              LDR      r1,|L18.76|
;;;513                SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = CODE_SIGNL_CMD_COMMAND_REJECT;
;;;514                SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_L] = 2;
00000e  2502              MOVS     r5,#2
;;;515                SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H] = 0;
;;;516                SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H+1] = 0x00;     //0x0000: Command not understood
;;;517                SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H+2] = 0x00;
;;;518                if(setBLE_ConnTxData(connID, SPIBuffer, (SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]+SIZE_BASIC_L2CAP_HEADER)) == SUCCESS_)
000010  220a              MOVS     r2,#0xa
000012  2b13              CMP      r3,#0x13              ;498
000014  d812              BHI      |L18.60|
000016  2b01              CMP      r3,#1                 ;500
000018  d00e              BEQ      |L18.56|
00001a  2b13              CMP      r3,#0x13              ;500
00001c  d00c              BEQ      |L18.56|
00001e  700e              STRB     r6,[r1,#0]            ;512
000020  710f              STRB     r7,[r1,#4]            ;513
000022  718d              STRB     r5,[r1,#6]            ;514
000024  71cc              STRB     r4,[r1,#7]            ;515
000026  720c              STRB     r4,[r1,#8]            ;516
                  |L18.40|
000028  724c              STRB     r4,[r1,#9]            ;517
00002a  4908              LDR      r1,|L18.76|
00002c  f7fffffe          BL       setBLE_ConnTxData
000030  2800              CMP      r0,#0
000032  d000              BEQ      |L18.54|
;;;519                {
;;;520                    return SUCCESS_;
;;;521                }
;;;522                else
;;;523                {
;;;524                    return FAIL_;
;;;525                }
;;;526            }
;;;527        }
;;;528        else
;;;529        {
;;;530            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 6;                        // 1 Code, 1 Identifier, 2 Command Length, 2 Data:Reason code
;;;531            SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = CODE_SIGNL_CMD_COMMAND_REJECT;
;;;532            SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_L] = 2;
;;;533            SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H] = 0;
;;;534            SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H+1] = 0x02;     //0x0002: Invalid CID in request
;;;535            SPIBuffer[TAB_BASIC_L2CAP_SIGNALING_COMMAND_LENGTH_H+2] = 0x00;
;;;536            if(setBLE_ConnTxData(connID, SPIBuffer, (SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]+SIZE_BASIC_L2CAP_HEADER)) == SUCCESS_)
;;;537            {
;;;538                return SUCCESS_;
;;;539            }
;;;540            else
;;;541            {
;;;542                return FAIL_;
000034  2001              MOVS     r0,#1
                  |L18.54|
;;;543            }
;;;544        }
;;;545    }
000036  bdf8              POP      {r3-r7,pc}
                  |L18.56|
000038  2000              MOVS     r0,#0                 ;508
00003a  bdf8              POP      {r3-r7,pc}
                  |L18.60|
00003c  700e              STRB     r6,[r1,#0]            ;530
00003e  710f              STRB     r7,[r1,#4]            ;531
000040  718d              STRB     r5,[r1,#6]            ;532
000042  71cc              STRB     r4,[r1,#7]            ;533
000044  720d              STRB     r5,[r1,#8]            ;534
000046  e7ef              B        |L18.40|
;;;546    
                          ENDP

                  |L18.72|
                          DCD      L2CAP_Buf
                  |L18.76|
                          DCD      SPIBuffer

                          AREA ||i.Prcss_L2CAP_CID_NULL_IDENTIFIER||, CODE, READONLY, ALIGN=1

                  Prcss_L2CAP_CID_NULL_IDENTIFIER PROC
;;;406    
;;;407    Uint8 Prcss_L2CAP_CID_NULL_IDENTIFIER(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;408    {
;;;409        return SUCCESS_;
;;;410    }
000002  4770              BX       lr
;;;411    
                          ENDP


                          AREA ||i.Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL||, CODE, READONLY, ALIGN=2

                  Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL PROC
;;;547    
;;;548    Uint8 Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;549    {
;;;550    #ifdef _SMP_ON_
;;;551        Uint8 i;
;;;552    
;;;553        i = L2CAP_Buf.DataBuf[4];
000002  4907              LDR      r1,|L20.32|
000004  7909              LDRB     r1,[r1,#4]  ; L2CAP_Buf
;;;554        if(i <= CODE_SMP_MAX_HANDLE_RANGE)
000006  290b              CMP      r1,#0xb
000008  d807              BHI      |L20.26|
;;;555        {
;;;556            if((Prcss_BLE_CODE_SMP[i](connID)) == SUCCESS_)
00000a  4a06              LDR      r2,|L20.36|
00000c  0089              LSLS     r1,r1,#2
00000e  5851              LDR      r1,[r2,r1]
000010  4788              BLX      r1
000012  2800              CMP      r0,#0
000014  d000              BEQ      |L20.24|
;;;557            {
;;;558                return SUCCESS_;
;;;559            }
;;;560            else
;;;561            {
;;;562                return FAIL_;
000016  2001              MOVS     r0,#1
                  |L20.24|
;;;563            }
;;;564        }
;;;565    
;;;566        return SUCCESS_;
;;;567    #else   //(#ifdef _SMP_ON_)
;;;568        //i = ERR_CODE_SMP_COMMAND_NOT_SUPPORTED;
;;;569        //setBLE_ConnTxData_SMP(connID, CODE_SMP_PAIRING_FAIlED, &i, 1);
;;;570        const Uint8 RSP_PAIRING_FAILED[] =
;;;571        {
;;;572            0x02, 0x00,                                                                         //PDU Length
;;;573            L2CAP_CID_SECURITY_MANAGER_PROTOCOL, 0x00,                                          //Attribute Protocol
;;;574            CODE_SMP_PAIRING_FAIlED,                                                            //Code
;;;575            ERR_CODE_SMP_COMMAND_NOT_SUPPORTED,
;;;576        };
;;;577    
;;;578        if(setBLE_ConnTxData(connID, (Uint8 *)RSP_PAIRING_FAILED, (2+SIZE_BASIC_L2CAP_HEADER)) == SUCCESS_)
;;;579        {
;;;580            return SUCCESS_;
;;;581        }
;;;582        else
;;;583        {
;;;584            return FAIL_;
;;;585        }
;;;586    #endif  //(#ifdef _SMP_ON_)
;;;587    }
000018  bd10              POP      {r4,pc}
                  |L20.26|
00001a  2000              MOVS     r0,#0                 ;566
00001c  bd10              POP      {r4,pc}
;;;588    
                          ENDP

00001e  0000              DCW      0x0000
                  |L20.32|
                          DCD      L2CAP_Buf
                  |L20.36|
                          DCD      ||.constdata||

                          AREA ||i.Prcss_OPCODE_ATT_Error_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Error_Response PROC
;;;596    
;;;597    Uint8 Prcss_OPCODE_ATT_Error_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;598    {
;;;599    #ifdef _HOST_CLIENT_
;;;600    
;;;601    
;;;602    
;;;603    #endif  //(#ifdef _HOST_CLIENT_)
;;;604        return SUCCESS_;
;;;605    }
000002  4770              BX       lr
;;;606    
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Exchange_MTU_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Exchange_MTU_Request PROC
;;;607    
;;;608    Uint8 Prcss_OPCODE_ATT_Exchange_MTU_Request(Uint8 connID)
000000  b570              PUSH     {r4-r6,lr}
;;;609    {
;;;610        Uint16 aTT_MTU_central;
;;;611    #ifndef _HCI_HW_
;;;612        extern void BleMHC_PostEvent(BleCmdEvent event, void *parms);
;;;613    #endif
;;;614        aTT_MTU_central = L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_SERVER_RX_MTU_L] | (L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_SERVER_RX_MTU_H] << 8);
000002  4911              LDR      r1,|L22.72|
000004  4604              MOV      r4,r0                 ;609
000006  7988              LDRB     r0,[r1,#6]  ; L2CAP_Buf
000008  794a              LDRB     r2,[r1,#5]  ; L2CAP_Buf
00000a  0201              LSLS     r1,r0,#8
00000c  4311              ORRS     r1,r1,r2
;;;615        if(aTT_MTU_central > SIZE_PLANNED_ATT_MTU)
00000e  29f7              CMP      r1,#0xf7
000010  d900              BLS      |L22.20|
;;;616        {
;;;617            aTT_MTU_central = SIZE_PLANNED_ATT_MTU;
000012  21f7              MOVS     r1,#0xf7
                  |L22.20|
;;;618        }
;;;619        aTT_MTU[connID] = aTT_MTU_central;
000014  4d0d              LDR      r5,|L22.76|
;;;620    
;;;621        SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_EXCHANGE_MTU_RESPONSE;
000016  480e              LDR      r0,|L22.80|
000018  5529              STRB     r1,[r5,r4]            ;619
00001a  2203              MOVS     r2,#3
00001c  7102              STRB     r2,[r0,#4]
;;;622        SPIBuffer[TAB_ATTRIBUTE_SERVER_RX_MTU_L] = aTT_MTU[connID];
00001e  7141              STRB     r1,[r0,#5]
;;;623        SPIBuffer[TAB_ATTRIBUTE_SERVER_RX_MTU_H] = 0x00;
000020  2100              MOVS     r1,#0
000022  7181              STRB     r1,[r0,#6]
;;;624        if(setBLE_ConnTxData(connID, SPIBuffer, (SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]+SIZE_BASIC_L2CAP_HEADER)) == SUCCESS_)
000024  7800              LDRB     r0,[r0,#0]  ; SPIBuffer
000026  490a              LDR      r1,|L22.80|
000028  1d00              ADDS     r0,r0,#4
00002a  b2c2              UXTB     r2,r0
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       setBLE_ConnTxData
000032  2800              CMP      r0,#0
000034  d001              BEQ      |L22.58|
;;;625        {
;;;626    #ifndef _HCI_HW_
;;;627            BleMHC_PostEvent(BLECMD_EVENT_EXCHANGE_MTU_SIZE,(void *)&aTT_MTU[connID]);
;;;628    #endif
;;;629            return SUCCESS_;
;;;630        }
;;;631        else
;;;632        {
;;;633            return FAIL_;
000036  2001              MOVS     r0,#1
;;;634        }
;;;635    }
000038  bd70              POP      {r4-r6,pc}
                  |L22.58|
00003a  1929              ADDS     r1,r5,r4              ;627
00003c  2010              MOVS     r0,#0x10              ;627
00003e  f7fffffe          BL       BleMHC_PostEvent
000042  2000              MOVS     r0,#0                 ;629
000044  bd70              POP      {r4-r6,pc}
;;;636    
                          ENDP

000046  0000              DCW      0x0000
                  |L22.72|
                          DCD      L2CAP_Buf
                  |L22.76|
                          DCD      aTT_MTU
                  |L22.80|
                          DCD      SPIBuffer

                          AREA ||i.Prcss_OPCODE_ATT_Exchange_MTU_Response||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Exchange_MTU_Response PROC
;;;637    
;;;638    Uint8 Prcss_OPCODE_ATT_Exchange_MTU_Response(Uint8 connID)
000000  b510              PUSH     {r4,lr}
;;;639    {
;;;640    #ifdef _HOST_CLIENT_
;;;641    #endif  //(#ifdef _HOST_CLIENT_)
;;;642        uint16_t aTT_MTU_peripheral;
;;;643    #ifndef _HCI_HW_
;;;644        extern void BleMHC_PostEvent(BleCmdEvent event, void *parms);
;;;645    #endif
;;;646        aTT_MTU_peripheral = L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_SERVER_RX_MTU_L] | (L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_SERVER_RX_MTU_H] << 8);
000002  4909              LDR      r1,|L23.40|
000004  798a              LDRB     r2,[r1,#6]  ; L2CAP_Buf
000006  794b              LDRB     r3,[r1,#5]  ; L2CAP_Buf
000008  0211              LSLS     r1,r2,#8
00000a  4319              ORRS     r1,r1,r3
;;;647        if(aTT_MTU_peripheral > SIZE_PLANNED_ATT_MTU)
00000c  29f7              CMP      r1,#0xf7
00000e  d900              BLS      |L23.18|
;;;648        {
;;;649            aTT_MTU_peripheral = SIZE_PLANNED_ATT_MTU;
000010  21f7              MOVS     r1,#0xf7
                  |L23.18|
;;;650        }
;;;651        if(aTT_MTU[connID] > aTT_MTU_peripheral)
000012  4a06              LDR      r2,|L23.44|
000014  5c13              LDRB     r3,[r2,r0]
000016  428b              CMP      r3,r1
000018  d900              BLS      |L23.28|
;;;652        {
;;;653            aTT_MTU[connID] = aTT_MTU_peripheral;
00001a  5411              STRB     r1,[r2,r0]
                  |L23.28|
;;;654        }
;;;655    #ifndef _HCI_HW_
;;;656        BleMHC_PostEvent(BLECMD_EVENT_EXCHANGE_MTU_SIZE,(void *)&aTT_MTU[connID]);
00001c  1811              ADDS     r1,r2,r0
00001e  2010              MOVS     r0,#0x10
000020  f7fffffe          BL       BleMHC_PostEvent
;;;657    #endif  //(#ifdef _HOST_CLIENT_)
;;;658        return SUCCESS_;
000024  2000              MOVS     r0,#0
;;;659    }
000026  bd10              POP      {r4,pc}
;;;660    
                          ENDP

                  |L23.40|
                          DCD      L2CAP_Buf
                  |L23.44|
                          DCD      aTT_MTU

                          AREA ||i.Prcss_OPCODE_ATT_Execute_Write_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Execute_Write_Request PROC
;;;2224   
;;;2225   Uint8 Prcss_OPCODE_ATT_Execute_Write_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;2226   {
;;;2227       Uint8 Rsp_Error;
;;;2228       Uint8 i;
;;;2229       Uint8 j;
;;;2230       Uint8 *pATT_param;
;;;2231   #ifdef _SMP_ON_
;;;2232   #ifdef _BOND_ON_
;;;2233   //    Uint8 *tmp;
;;;2234   //    Uint8 idx;
;;;2235   //    extern Uint8* cmd_FlashBond(uint8_t opcode, uint8_t * para_data);
;;;2236   #endif
;;;2237   #endif
;;;2238       extern void (* const ATT_Write[])(uint8_t connID, uint8_t length, uint8_t *srcCMD);
;;;2239       Rsp_Error = 0;
;;;2240       if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_VALUE] == 0x01)
000002  4836              LDR      r0,|L24.220|
000004  2500              MOVS     r5,#0                 ;2239
000006  7940              LDRB     r0,[r0,#5]  ; L2CAP_Buf
000008  b082              SUB      sp,sp,#8              ;2226
00000a  2801              CMP      r0,#1
00000c  d13a              BNE      |L24.132|
;;;2241       {
;;;2242           i = 0;
;;;2243           if((q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_HDL_L]!=0)||(q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_HDL_H]!=0))
00000e  4934              LDR      r1,|L24.224|
000010  2400              MOVS     r4,#0                 ;2242
000012  780f              LDRB     r7,[r1,#0]  ; q_att_HDL_PreWr
000014  4608              MOV      r0,r1
000016  7840              LDRB     r0,[r0,#1]
000018  2f00              CMP      r7,#0
00001a  d101              BNE      |L24.32|
00001c  2800              CMP      r0,#0
00001e  d031              BEQ      |L24.132|
                  |L24.32|
;;;2244           {
;;;2245               do
;;;2246               {
;;;2247                   if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] == q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_HDL_H])
;;;2248                   {
;;;2249                       if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] == q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_HDL_L])
;;;2250                       {
;;;2251                           j = *(*(ATTRIBUTE_SERVER+i)+(TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)));
;;;2252                           if(q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH] > j)
;;;2253                           {
;;;2254                               Rsp_Error = ERR_CODE_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH;
;;;2255                               break;
;;;2256                           }
;;;2257                           Knl_MemCpy((Uint8 *)(*(ATTRIBUTE_SERVER_PARAM+i)), &q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_VAL], q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH]);
;;;2258   //                        mblk = gen_mblk_HSPF_ATT_WRITE(connID, i, q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH], &q_att_HDL_PreWr[3]);
;;;2259   //                        if(mblk == (MBLK *)0)
;;;2260   //                        {
;;;2261   //                            return FAIL;
;;;2262   //                        }
;;;2263   
;;;2264   //                        (*(ATT_Write[i]))(connID, q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH], &q_att_HDL_PreWr[3]);
;;;2265   
;;;2266   //                        if((*(*(ATTRIBUTE_SERVER_PERMISSION+i)+TAB_ATTRIBUTE_SERVER_PERMISSION_ATT_TYPE_FORMAT) & ATT_TYPE_FORMAT_DYN_LLENGTH) != 0)
;;;2267   //                        {
;;;2268   //                            pATT_param = (Uint8 *)ATTRIBUTE_SERVER_PARAM[i];
;;;2269   //                            pATT_param[j] = q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH];
;;;2270   //                        }
;;;2271   #ifdef _SMP_ON_
;;;2272   #ifdef _BOND_ON_
;;;2273   #endif
;;;2274   #endif
;;;2275                           break;
;;;2276                       }
;;;2277                   }
;;;2278                   i++;
;;;2279               }
;;;2280               while(i != size_ATTRIBUTE_SERVER);
000020  4a30              LDR      r2,|L24.228|
000022  7813              LDRB     r3,[r2,#0]
                  |L24.36|
000024  00a2              LSLS     r2,r4,#2              ;2247
000026  4930              LDR      r1,|L24.232|
000028  9200              STR      r2,[sp,#0]            ;2247
00002a  5889              LDR      r1,[r1,r2]            ;2247
00002c  780a              LDRB     r2,[r1,#0]            ;2247
00002e  4282              CMP      r2,r0                 ;2247
000030  d117              BNE      |L24.98|
000032  7849              LDRB     r1,[r1,#1]            ;2249
000034  42b9              CMP      r1,r7                 ;2249
000036  d114              BNE      |L24.98|
000038  4620              MOV      r0,r4                 ;2251
00003a  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
00003e  492a              LDR      r1,|L24.232|
000040  00a2              LSLS     r2,r4,#2              ;2251
000042  5889              LDR      r1,[r1,r2]            ;2251
000044  1c80              ADDS     r0,r0,#2              ;2251
000046  5c0e              LDRB     r6,[r1,r0]            ;2251
000048  4925              LDR      r1,|L24.224|
00004a  788a              LDRB     r2,[r1,#2]            ;2252  ; q_att_HDL_PreWr
00004c  42b2              CMP      r2,r6                 ;2252
00004e  d901              BLS      |L24.84|
000050  250d              MOVS     r5,#0xd               ;2254
000052  e00c              B        |L24.110|
                  |L24.84|
000054  4b25              LDR      r3,|L24.236|
000056  9800              LDR      r0,[sp,#0]            ;2257
000058  1cc9              ADDS     r1,r1,#3              ;2257
00005a  5818              LDR      r0,[r3,r0]            ;2257
00005c  f7fffffe          BL       Knl_MemCpy
000060  e003              B        |L24.106|
                  |L24.98|
000062  1c64              ADDS     r4,r4,#1              ;2275
000064  b2e4              UXTB     r4,r4                 ;2278
000066  429c              CMP      r4,r3
000068  d1dc              BNE      |L24.36|
                  |L24.106|
;;;2281           }
;;;2282       }
;;;2283       if(Rsp_Error != 0)
00006a  2d00              CMP      r5,#0
00006c  d00a              BEQ      |L24.132|
                  |L24.110|
;;;2284       {
;;;2285           if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_H], Rsp_Error) == SUCCESS_)
00006e  4820              LDR      r0,|L24.240|
000070  9500              STR      r5,[sp,#0]
000072  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
000074  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
000076  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
000078  9802              LDR      r0,[sp,#8]
00007a  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
00007e  2800              CMP      r0,#0
000080  d028              BEQ      |L24.212|
000082  e010              B        |L24.166|
                  |L24.132|
;;;2286           {
;;;2287               init_q_att_HDL_PreWr();
;;;2288               return SUCCESS_;
;;;2289           }
;;;2290           else
;;;2291           {
;;;2292               return FAIL_;
;;;2293           }
;;;2294       }
;;;2295       else    //Rsp_Error == 0
;;;2296       {
;;;2297           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_EXECUTE_WRITE_RESPONSE;
000084  481a              LDR      r0,|L24.240|
000086  2119              MOVS     r1,#0x19
000088  7101              STRB     r1,[r0,#4]
;;;2298           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 1;
00008a  2101              MOVS     r1,#1
00008c  7001              STRB     r1,[r0,#0]
;;;2299           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
00008e  2100              MOVS     r1,#0
000090  7041              STRB     r1,[r0,#1]
;;;2300           SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
000092  2204              MOVS     r2,#4
000094  7082              STRB     r2,[r0,#2]
;;;2301           SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
000096  70c1              STRB     r1,[r0,#3]
;;;2302           if(setBLE_ConnTxData(connID, SPIBuffer, (1+4)) == SUCCESS_)    //1: Opcode
000098  4601              MOV      r1,r0
00009a  2205              MOVS     r2,#5
00009c  9802              LDR      r0,[sp,#8]
00009e  f7fffffe          BL       setBLE_ConnTxData
0000a2  2800              CMP      r0,#0
0000a4  d001              BEQ      |L24.170|
                  |L24.166|
;;;2303           {
;;;2304               if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_VALUE] == 0x01)
;;;2305               {
;;;2306                   (*(ATT_Write[i]))(connID, q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH], &q_att_HDL_PreWr[3]);
;;;2307   
;;;2308                   if((*(*(ATTRIBUTE_SERVER_PERMISSION+i)+TAB_ATTRIBUTE_SERVER_PERMISSION_ATT_TYPE_FORMAT) & ATT_TYPE_FORMAT_DYN_LLENGTH) != 0)
;;;2309                   {
;;;2310                       pATT_param = (Uint8 *)ATTRIBUTE_SERVER_PARAM[i];
;;;2311                       pATT_param[j] = q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH];
;;;2312                   }
;;;2313               }
;;;2314               init_q_att_HDL_PreWr();
;;;2315   //            SndMsgBlk(mblk, Q_2HOST);
;;;2316               return SUCCESS_;
;;;2317           }
;;;2318           else
;;;2319           {
;;;2320   //            FreeMsgBlk(mblk);
;;;2321               return FAIL_;
0000a6  2001              MOVS     r0,#1
;;;2322           }
;;;2323       }
;;;2324   }
0000a8  bdfe              POP      {r1-r7,pc}
                  |L24.170|
0000aa  480c              LDR      r0,|L24.220|
0000ac  7940              LDRB     r0,[r0,#5]            ;2304  ; L2CAP_Buf
0000ae  2801              CMP      r0,#1                 ;2304
0000b0  d110              BNE      |L24.212|
0000b2  4d0b              LDR      r5,|L24.224|
0000b4  00a4              LSLS     r4,r4,#2              ;2306
0000b6  480f              LDR      r0,|L24.244|
0000b8  78a9              LDRB     r1,[r5,#2]            ;2306  ; q_att_HDL_PreWr
0000ba  5903              LDR      r3,[r0,r4]            ;2306
0000bc  1cea              ADDS     r2,r5,#3              ;2306
0000be  9802              LDR      r0,[sp,#8]            ;2306
0000c0  4798              BLX      r3                    ;2306
0000c2  480d              LDR      r0,|L24.248|
0000c4  5900              LDR      r0,[r0,r4]            ;2308
0000c6  7840              LDRB     r0,[r0,#1]            ;2308
0000c8  0740              LSLS     r0,r0,#29             ;2308
0000ca  d503              BPL      |L24.212|
0000cc  4807              LDR      r0,|L24.236|
0000ce  78a9              LDRB     r1,[r5,#2]            ;2311  ; q_att_HDL_PreWr
0000d0  5900              LDR      r0,[r0,r4]            ;2310
0000d2  5581              STRB     r1,[r0,r6]            ;2311
                  |L24.212|
0000d4  f7fffffe          BL       init_q_att_HDL_PreWr
0000d8  2000              MOVS     r0,#0                 ;2316
0000da  bdfe              POP      {r1-r7,pc}
;;;2325   
                          ENDP

                  |L24.220|
                          DCD      L2CAP_Buf
                  |L24.224|
                          DCD      q_att_HDL_PreWr
                  |L24.228|
                          DCD      size_ATTRIBUTE_SERVER
                  |L24.232|
                          DCD      ATTRIBUTE_SERVER
                  |L24.236|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L24.240|
                          DCD      SPIBuffer
                  |L24.244|
                          DCD      ATT_Write
                  |L24.248|
                          DCD      ATTRIBUTE_SERVER_PERMISSION

                          AREA ||i.Prcss_OPCODE_ATT_Execute_Write_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Execute_Write_Response PROC
;;;2326   
;;;2327   Uint8 Prcss_OPCODE_ATT_Execute_Write_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2328   {
;;;2329   #ifdef _HOST_CLIENT_
;;;2330   #endif  //(#ifdef _HOST_CLIENT_)
;;;2331       return SUCCESS_;
;;;2332   }
000002  4770              BX       lr
;;;2333   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Find_By_Type_Value_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Find_By_Type_Value_Request PROC
;;;819    
;;;820    Uint8 Prcss_OPCODE_ATT_Find_By_Type_Value_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;821    {
;;;822        Uint8 Rsp_Error;
;;;823    
;;;824        Uint8 Handle_Att_RPT_S;     //Start
;;;825        Uint8 Handle_Att_RPT_E;     //End
;;;826        Uint8 size_uuid;
;;;827        Uint8 i, idx;
;;;828    
;;;829        Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;830        if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000002  4b4d              LDR      r3,|L26.312|
000004  2201              MOVS     r2,#1                 ;829
000006  7998              LDRB     r0,[r3,#6]  ; L2CAP_Buf
000008  7a19              LDRB     r1,[r3,#8]  ; L2CAP_Buf
00000a  461c              MOV      r4,r3
;;;831        {
;;;832            if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_L])
00000c  7967              LDRB     r7,[r4,#5]
00000e  b086              SUB      sp,sp,#0x18           ;821
000010  4684              MOV      r12,r0                ;830
000012  4288              CMP      r0,r1                 ;830
000014  d103              BNE      |L26.30|
000016  79d8              LDRB     r0,[r3,#7]  ; L2CAP_Buf
000018  4287              CMP      r7,r0
00001a  d902              BLS      |L26.34|
00001c  e002              B        |L26.36|
                  |L26.30|
;;;833            {
;;;834                Rsp_Error = 0;
;;;835            }
;;;836        }
;;;837        else if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] < L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
00001e  458c              CMP      r12,r1
000020  d200              BCS      |L26.36|
                  |L26.34|
;;;838        {
;;;839            Rsp_Error = 0;
000022  2200              MOVS     r2,#0
                  |L26.36|
;;;840        }
;;;841        if((L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] == 0)&&(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == 0))
000024  2f00              CMP      r7,#0
000026  d102              BNE      |L26.46|
000028  4660              MOV      r0,r12
00002a  2800              CMP      r0,#0
00002c  d002              BEQ      |L26.52|
                  |L26.46|
;;;842        {
;;;843            Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;844        }
;;;845        if(Rsp_Error == 0)
00002e  2a00              CMP      r2,#0
000030  d002              BEQ      |L26.56|
000032  e056              B        |L26.226|
                  |L26.52|
000034  2201              MOVS     r2,#1                 ;843
000036  e054              B        |L26.226|
                  |L26.56|
;;;846        {
;;;847            if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_H] != GATT_DECLARATIONS)
000038  7a98              LDRB     r0,[r3,#0xa]  ; L2CAP_Buf
00003a  9003              STR      r0,[sp,#0xc]
00003c  2828              CMP      r0,#0x28
00003e  d001              BEQ      |L26.68|
;;;848            {
;;;849                Rsp_Error = ERR_CODE_ATT_REQUEST_NOT_SUPPORTED;
000040  2206              MOVS     r2,#6
000042  e04e              B        |L26.226|
                  |L26.68|
;;;850            }
;;;851        }
;;;852        if(Rsp_Error == 0)
;;;853        {
;;;854            Rsp_Error = ERR_CODE_ATT_ATTRIBUTE_NOT_FOUND;
;;;855            if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] == 16+7)     //16: 128bit UUID, 7: others.
000044  7818              LDRB     r0,[r3,#0]  ; L2CAP_Buf
000046  220a              MOVS     r2,#0xa               ;854
000048  2817              CMP      r0,#0x17
00004a  d015              BEQ      |L26.120|
;;;856            {
;;;857                size_uuid = 16;
;;;858            }
;;;859            else
;;;860            {
;;;861                size_uuid = 2;
00004c  2402              MOVS     r4,#2
                  |L26.78|
;;;862            }
;;;863            i = 0;
00004e  493a              LDR      r1,|L26.312|
000050  2000              MOVS     r0,#0
;;;864            do
;;;865            {
;;;866                if((ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_TYPE_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_H])&&(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_TYPE_L] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_L]))
000052  7a49              LDRB     r1,[r1,#9]
;;;867                {
;;;868                    for(idx=0; idx<size_uuid; idx++)
;;;869                    {
;;;870                        if(*(*(ATTRIBUTE_SERVER_PARAM+i)+idx) != L2CAP_Buf.DataBuf[idx+(TAB_ATTRIBUTE_TYPE_H+1)])
;;;871                            break;
;;;872                    }
;;;873                    if(idx == size_uuid)
;;;874                        if((ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H])&&(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L]))
;;;875                        {
;;;876                            Handle_Att_RPT_S = i;
;;;877                            Handle_Att_RPT_E = i;
;;;878                            Rsp_Error = 0;
;;;879                            i++;
;;;880                            break;
;;;881                        }
;;;882                }
;;;883                i++;
;;;884            }
;;;885            while(i != size_ATTRIBUTE_SERVER);
000054  9102              STR      r1,[sp,#8]
000056  4939              LDR      r1,|L26.316|
000058  7809              LDRB     r1,[r1,#0]
00005a  468e              MOV      lr,r1
                  |L26.92|
00005c  0081              LSLS     r1,r0,#2              ;866
00005e  4b38              LDR      r3,|L26.320|
000060  9104              STR      r1,[sp,#0x10]         ;866
000062  585b              LDR      r3,[r3,r1]            ;866
000064  9903              LDR      r1,[sp,#0xc]          ;866
000066  789d              LDRB     r5,[r3,#2]            ;866
000068  428d              CMP      r5,r1                 ;866
00006a  d122              BNE      |L26.178|
00006c  78dd              LDRB     r5,[r3,#3]            ;866
00006e  9902              LDR      r1,[sp,#8]            ;866
000070  428d              CMP      r5,r1                 ;866
000072  d11e              BNE      |L26.178|
000074  2100              MOVS     r1,#0                 ;868
000076  e00c              B        |L26.146|
                  |L26.120|
000078  2410              MOVS     r4,#0x10              ;857
00007a  e7e8              B        |L26.78|
                  |L26.124|
00007c  4e31              LDR      r6,|L26.324|
00007e  9d04              LDR      r5,[sp,#0x10]         ;870
000080  5975              LDR      r5,[r6,r5]            ;870
000082  5c6e              LDRB     r6,[r5,r1]            ;870
000084  4d2c              LDR      r5,|L26.312|
000086  186d              ADDS     r5,r5,r1              ;870
000088  7aed              LDRB     r5,[r5,#0xb]          ;870
00008a  42ae              CMP      r6,r5                 ;870
00008c  d103              BNE      |L26.150|
00008e  1c49              ADDS     r1,r1,#1              ;870
000090  b2c9              UXTB     r1,r1                 ;868
                  |L26.146|
000092  42a1              CMP      r1,r4                 ;868
000094  d3f2              BCC      |L26.124|
                  |L26.150|
000096  42a1              CMP      r1,r4                 ;873
000098  d10b              BNE      |L26.178|
00009a  7819              LDRB     r1,[r3,#0]            ;874
00009c  4561              CMP      r1,r12                ;874
00009e  d308              BCC      |L26.178|
0000a0  7859              LDRB     r1,[r3,#1]            ;874
0000a2  42b9              CMP      r1,r7                 ;874
0000a4  d305              BCC      |L26.178|
0000a6  9000              STR      r0,[sp,#0]            ;877
0000a8  2200              MOVS     r2,#0                 ;878
0000aa  9001              STR      r0,[sp,#4]            ;878
0000ac  1c40              ADDS     r0,r0,#1              ;878
0000ae  b2c0              UXTB     r0,r0                 ;879
0000b0  e005              B        |L26.190|
                  |L26.178|
0000b2  1c40              ADDS     r0,r0,#1              ;880
0000b4  b2c0              UXTB     r0,r0                 ;883
0000b6  4570              CMP      r0,lr
0000b8  d1d0              BNE      |L26.92|
;;;886        }
;;;887    
;;;888        if(Rsp_Error == 0)
0000ba  2a00              CMP      r2,#0
0000bc  d111              BNE      |L26.226|
                  |L26.190|
0000be  4b20              LDR      r3,|L26.320|
                  |L26.192|
;;;889        {
;;;890            do
;;;891            {
;;;892                if((ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_TYPE_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_H])&&(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_TYPE_L] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_L]))
0000c0  0081              LSLS     r1,r0,#2
0000c2  5859              LDR      r1,[r3,r1]
0000c4  9c03              LDR      r4,[sp,#0xc]
0000c6  788d              LDRB     r5,[r1,#2]
0000c8  42a5              CMP      r5,r4
0000ca  d103              BNE      |L26.212|
0000cc  78cc              LDRB     r4,[r1,#3]
0000ce  9902              LDR      r1,[sp,#8]
0000d0  428c              CMP      r4,r1
0000d2  d004              BEQ      |L26.222|
                  |L26.212|
;;;893                {
;;;894                    break;
;;;895                }
;;;896                Handle_Att_RPT_E = i;
0000d4  9001              STR      r0,[sp,#4]
0000d6  1c40              ADDS     r0,r0,#1
;;;897                i++;
0000d8  b2c0              UXTB     r0,r0
;;;898            }
;;;899            while(i != size_ATTRIBUTE_SERVER);
0000da  4570              CMP      r0,lr
0000dc  d1f0              BNE      |L26.192|
                  |L26.222|
;;;900        }
;;;901    
;;;902        //generate response to client
;;;903        if(Rsp_Error == 0)
0000de  2a00              CMP      r2,#0
0000e0  d00c              BEQ      |L26.252|
                  |L26.226|
;;;904        {
;;;905            SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_FIND_BY_TYPE_VAlUE_RESPONSE;
;;;906            SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_L] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_L];
;;;907            SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_H] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_H];
;;;908            SPIBuffer[TAB_ATTRIBUTE_HANDLE_END_L] = ATTRIBUTE_SERVER[Handle_Att_RPT_E][TAB_ATTRIBUTE_SERVER_HANDLE_L];
;;;909            SPIBuffer[TAB_ATTRIBUTE_HANDLE_END_H] = ATTRIBUTE_SERVER[Handle_Att_RPT_E][TAB_ATTRIBUTE_SERVER_HANDLE_H];
;;;910            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 5;
;;;911            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;912            SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;913            SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;914            if(setBLE_ConnTxData(connID, SPIBuffer, (5+4)) == SUCCESS_)
;;;915            {
;;;916                return SUCCESS_;
;;;917            }
;;;918            else
;;;919            {
;;;920                return FAIL_;
;;;921            }
;;;922        }
;;;923        else
;;;924        {
;;;925            if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_H], Rsp_Error) == SUCCESS_)
0000e2  4819              LDR      r0,|L26.328|
0000e4  9200              STR      r2,[sp,#0]
0000e6  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
0000e8  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
0000ea  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
0000ec  9806              LDR      r0,[sp,#0x18]
0000ee  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
                  |L26.242|
0000f2  2800              CMP      r0,#0
0000f4  d000              BEQ      |L26.248|
;;;926            {
;;;927                return SUCCESS_;
;;;928            }
;;;929            else
;;;930            {
;;;931                return FAIL_;
0000f6  2001              MOVS     r0,#1
                  |L26.248|
;;;932            }
;;;933        }
;;;934    }
0000f8  b007              ADD      sp,sp,#0x1c
0000fa  bdf0              POP      {r4-r7,pc}
                  |L26.252|
0000fc  4812              LDR      r0,|L26.328|
0000fe  2107              MOVS     r1,#7                 ;905
000100  7101              STRB     r1,[r0,#4]            ;905
000102  9900              LDR      r1,[sp,#0]            ;906
000104  0089              LSLS     r1,r1,#2              ;906
000106  5859              LDR      r1,[r3,r1]            ;906
000108  784a              LDRB     r2,[r1,#1]            ;906
00010a  7142              STRB     r2,[r0,#5]            ;906
00010c  7809              LDRB     r1,[r1,#0]            ;907
00010e  7181              STRB     r1,[r0,#6]            ;907
000110  9901              LDR      r1,[sp,#4]            ;908
000112  0089              LSLS     r1,r1,#2              ;908
000114  5859              LDR      r1,[r3,r1]            ;908
000116  784a              LDRB     r2,[r1,#1]            ;908
000118  71c2              STRB     r2,[r0,#7]            ;908
00011a  7809              LDRB     r1,[r1,#0]            ;909
00011c  7201              STRB     r1,[r0,#8]            ;909
00011e  2105              MOVS     r1,#5                 ;910
000120  7001              STRB     r1,[r0,#0]            ;910
000122  2100              MOVS     r1,#0                 ;911
000124  7041              STRB     r1,[r0,#1]            ;911
000126  2204              MOVS     r2,#4                 ;912
000128  7082              STRB     r2,[r0,#2]            ;912
00012a  70c1              STRB     r1,[r0,#3]            ;913
00012c  4601              MOV      r1,r0                 ;914
00012e  2209              MOVS     r2,#9                 ;914
000130  9806              LDR      r0,[sp,#0x18]         ;914
000132  f7fffffe          BL       setBLE_ConnTxData
000136  e7dc              B        |L26.242|
;;;935    
                          ENDP

                  |L26.312|
                          DCD      L2CAP_Buf
                  |L26.316|
                          DCD      size_ATTRIBUTE_SERVER
                  |L26.320|
                          DCD      ATTRIBUTE_SERVER
                  |L26.324|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L26.328|
                          DCD      SPIBuffer

                          AREA ||i.Prcss_OPCODE_ATT_Find_By_Type_Value_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Find_By_Type_Value_Response PROC
;;;936    
;;;937    Uint8 Prcss_OPCODE_ATT_Find_By_Type_Value_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;938    {
;;;939    #ifdef _HOST_CLIENT_
;;;940    #endif  //(#ifdef _HOST_CLIENT_)
;;;941        return SUCCESS_;
;;;942    }
000002  4770              BX       lr
;;;943    
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Find_Information_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Find_Information_Request PROC
;;;661    
;;;662    Uint8 Prcss_OPCODE_ATT_Find_Information_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;663    {
;;;664        Uint8 Rsp_Error;
;;;665    
;;;666        Uint8 Handle_Att_RPT_S;     //Start
;;;667        Uint8 Handle_Att_RPT_E;     //End
;;;668        Uint8 sizeRSP_PDUlgth;
;;;669        Uint8 i, j, idx, att_format;                    //temp
;;;670    
;;;671        Rsp_Error = 1;
;;;672        if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000002  4e4f              LDR      r6,|L28.320|
000004  2001              MOVS     r0,#1                 ;671
000006  7a34              LDRB     r4,[r6,#8]  ; L2CAP_Buf
000008  4632              MOV      r2,r6
00000a  79b3              LDRB     r3,[r6,#6]  ; L2CAP_Buf
;;;673        {
;;;674            if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_L])
00000c  79d1              LDRB     r1,[r2,#7]
00000e  7952              LDRB     r2,[r2,#5]
000010  b082              SUB      sp,sp,#8              ;663
000012  46a4              MOV      r12,r4                ;672
000014  42a3              CMP      r3,r4                 ;672
000016  d102              BNE      |L28.30|
000018  428a              CMP      r2,r1
00001a  d902              BLS      |L28.34|
00001c  e002              B        |L28.36|
                  |L28.30|
;;;675            {
;;;676                Rsp_Error = 0;
;;;677            }
;;;678        }
;;;679        else if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] < L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
00001e  4563              CMP      r3,r12
000020  d200              BCS      |L28.36|
                  |L28.34|
;;;680        {
;;;681            Rsp_Error = 0;
000022  2000              MOVS     r0,#0
                  |L28.36|
;;;682        }
;;;683        if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] == 0)
000024  2a00              CMP      r2,#0
000026  d101              BNE      |L28.44|
;;;684        {
;;;685            if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == 0)
000028  2b00              CMP      r3,#0
00002a  d001              BEQ      |L28.48|
                  |L28.44|
;;;686            {
;;;687                Rsp_Error = 1;
;;;688            }
;;;689        }
;;;690        //Starting Handle parameter can't greater than the Ending Handle parameter or equal to 0x0000
;;;691        if(Rsp_Error != 0)  //generate response to client, "Invalid Handle"
00002c  2800              CMP      r0,#0
00002e  d003              BEQ      |L28.56|
                  |L28.48|
;;;692        {
;;;693            if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE], L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L], L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H], ERR_CODE_ATT_INVALID_HANDLE) == SUCCESS_)
000030  2001              MOVS     r0,#1
000032  9000              STR      r0,[sp,#0]
000034  7931              LDRB     r1,[r6,#4]  ; L2CAP_Buf
000036  e02f              B        |L28.152|
                  |L28.56|
;;;694            {
;;;695                return SUCCESS_;
;;;696            }
;;;697            else
;;;698            {
;;;699                return FAIL_;
;;;700            }
;;;701        }
;;;702        else
;;;703        {
;;;704            Rsp_Error = 1;
000038  2001              MOVS     r0,#1
00003a  4686              MOV      lr,r0
;;;705            i = 0;
;;;706            do
;;;707            {
;;;708                if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H])
;;;709                {
;;;710                    if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L])
;;;711                    {
;;;712                        Handle_Att_RPT_S = i;
;;;713                        Rsp_Error = 0;
;;;714                        break;
;;;715                    }
;;;716                }
;;;717                i++;
;;;718            }
;;;719            while(i != size_ATTRIBUTE_SERVER);
00003c  4841              LDR      r0,|L28.324|
00003e  2400              MOVS     r4,#0                 ;705
000040  7800              LDRB     r0,[r0,#0]
                  |L28.66|
000042  4e41              LDR      r6,|L28.328|
000044  00a7              LSLS     r7,r4,#2              ;708
000046  59f7              LDR      r7,[r6,r7]            ;708
000048  783e              LDRB     r6,[r7,#0]            ;708
00004a  429e              CMP      r6,r3                 ;708
00004c  d304              BCC      |L28.88|
00004e  787e              LDRB     r6,[r7,#1]            ;710
000050  4296              CMP      r6,r2                 ;710
000052  d301              BCC      |L28.88|
000054  4625              MOV      r5,r4                 ;712
000056  e006              B        |L28.102|
                  |L28.88|
000058  1c64              ADDS     r4,r4,#1              ;714
00005a  b2e4              UXTB     r4,r4                 ;717
00005c  4284              CMP      r4,r0
00005e  d1f0              BNE      |L28.66|
;;;720    
;;;721        }
;;;722        if(Rsp_Error == 0)
000060  4672              MOV      r2,lr
000062  2a00              CMP      r2,#0
000064  d112              BNE      |L28.140|
                  |L28.102|
;;;723        {
;;;724            Rsp_Error = 1;
000066  2301              MOVS     r3,#1
                  |L28.104|
;;;725            do
;;;726            {
;;;727                if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000068  4a37              LDR      r2,|L28.328|
00006a  00a6              LSLS     r6,r4,#2
00006c  5992              LDR      r2,[r2,r6]
00006e  7816              LDRB     r6,[r2,#0]
000070  4566              CMP      r6,r12
000072  d809              BHI      |L28.136|
;;;728                {
;;;729                    if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_L])
000074  7852              LDRB     r2,[r2,#1]
000076  428a              CMP      r2,r1
000078  d806              BHI      |L28.136|
;;;730                    {
;;;731                        Handle_Att_RPT_E = i;
;;;732                        Rsp_Error = 0;
00007a  9401              STR      r4,[sp,#4]
00007c  1c64              ADDS     r4,r4,#1
00007e  2300              MOVS     r3,#0
;;;733                    }
;;;734                    else
;;;735                    {
;;;736                        break;
;;;737                    }
;;;738                    i++;
000080  b2e4              UXTB     r4,r4
;;;739                }
;;;740                else
;;;741                {
;;;742                    break;
;;;743                }
;;;744            }
;;;745            while(i != size_ATTRIBUTE_SERVER);
000082  4284              CMP      r4,r0
000084  d1f0              BNE      |L28.104|
000086  e00b              B        |L28.160|
                  |L28.136|
;;;746        }
;;;747    
;;;748        //generate response to client
;;;749        if(Rsp_Error == 0)
000088  2b00              CMP      r3,#0
00008a  d009              BEQ      |L28.160|
                  |L28.140|
;;;750        {
;;;751            SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_FIND_INFORMATION_RESPONSE;
;;;752            SPIBuffer[TAB_BASIC_L2CAP_FORMAT] = (ATTRIBUTE_SERVER_PERMISSION[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_PERMISSION_ATT_TYPE_FORMAT] & 0x03);   //Handle(s) and 16/128-bit Bluetooth UUID(s)
;;;753            att_format = SPIBuffer[TAB_BASIC_L2CAP_FORMAT];
;;;754            sizeRSP_PDUlgth = 2;                  //Now: Opcode 1 byte, Format 1byte
;;;755            i = (TAB_BASIC_L2CAP_FORMAT+1);
;;;756            do
;;;757            {
;;;758                if(att_format != (ATTRIBUTE_SERVER_PERMISSION[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_PERMISSION_ATT_TYPE_FORMAT] & 0x03))
;;;759                    break;
;;;760                idx = getBLE_ATTRIBUTE_TYPE_Size(Handle_Att_RPT_S);
;;;761                j = (sizeRSP_PDUlgth+idx+2);
;;;762                if(aTT_MTU[connID] < j)
;;;763                    break;
;;;764                sizeRSP_PDUlgth = j;
;;;765                SPIBuffer[i] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_L];
;;;766                i++;
;;;767                SPIBuffer[i] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_H];
;;;768                i++;
;;;769                j = i+idx;
;;;770                idx = idx + (TAB_ATTRIBUTE_SERVER_TYPE_H - 1);
;;;771                while(i < j)
;;;772                {
;;;773                    SPIBuffer[i] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][idx];
;;;774                    //sizeRSP_PDUlgth++;
;;;775                    i++;
;;;776                    idx--;
;;;777                }
;;;778                Handle_Att_RPT_S++;
;;;779            }
;;;780            while(Handle_Att_RPT_S <= Handle_Att_RPT_E);
;;;781            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = sizeRSP_PDUlgth;
;;;782            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;783            SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;784            SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;785            if(setBLE_ConnTxData(connID, SPIBuffer, (sizeRSP_PDUlgth+4)) == SUCCESS_)
;;;786            {
;;;787                return SUCCESS_;
;;;788            }
;;;789            else
;;;790            {
;;;791                return FAIL_;
;;;792            }
;;;793        }
;;;794        else
;;;795        {
;;;796            if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_H], ERR_CODE_ATT_ATTRIBUTE_NOT_FOUND) == SUCCESS_)
00008c  200a              MOVS     r0,#0xa
00008e  9000              STR      r0,[sp,#0]
000090  482e              LDR      r0,|L28.332|
000092  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
000094  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
000096  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
                  |L28.152|
000098  9802              LDR      r0,[sp,#8]            ;693
00009a  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
00009e  e04a              B        |L28.310|
                  |L28.160|
0000a0  492a              LDR      r1,|L28.332|
0000a2  2005              MOVS     r0,#5                 ;751
0000a4  7108              STRB     r0,[r1,#4]            ;751
0000a6  4a2a              LDR      r2,|L28.336|
0000a8  00a8              LSLS     r0,r5,#2              ;752
0000aa  5810              LDR      r0,[r2,r0]            ;752
0000ac  2602              MOVS     r6,#2                 ;754
0000ae  7840              LDRB     r0,[r0,#1]            ;752
0000b0  0780              LSLS     r0,r0,#30             ;752
0000b2  0f80              LSRS     r0,r0,#30             ;752
0000b4  7148              STRB     r0,[r1,#5]            ;752
0000b6  2406              MOVS     r4,#6                 ;755
0000b8  9000              STR      r0,[sp,#0]            ;755
                  |L28.186|
0000ba  4825              LDR      r0,|L28.336|
0000bc  00af              LSLS     r7,r5,#2              ;758
0000be  59c0              LDR      r0,[r0,r7]            ;758
0000c0  7840              LDRB     r0,[r0,#1]            ;758
0000c2  0781              LSLS     r1,r0,#30             ;758
0000c4  9800              LDR      r0,[sp,#0]            ;758
0000c6  0f89              LSRS     r1,r1,#30             ;758
0000c8  4281              CMP      r1,r0                 ;758
0000ca  d127              BNE      |L28.284|
0000cc  4628              MOV      r0,r5                 ;760
0000ce  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
0000d2  4b20              LDR      r3,|L28.340|
0000d4  9a02              LDR      r2,[sp,#8]            ;762
0000d6  1831              ADDS     r1,r6,r0              ;761
0000d8  1c89              ADDS     r1,r1,#2              ;761
0000da  5c9a              LDRB     r2,[r3,r2]            ;762
0000dc  b2c9              UXTB     r1,r1                 ;761
0000de  428a              CMP      r2,r1                 ;762
0000e0  d31c              BCC      |L28.284|
0000e2  460e              MOV      r6,r1                 ;764
0000e4  4918              LDR      r1,|L28.328|
0000e6  4a19              LDR      r2,|L28.332|
0000e8  59c9              LDR      r1,[r1,r7]            ;765
0000ea  784b              LDRB     r3,[r1,#1]            ;765
0000ec  5513              STRB     r3,[r2,r4]            ;765
0000ee  1c64              ADDS     r4,r4,#1              ;765
0000f0  b2e3              UXTB     r3,r4                 ;766
0000f2  780c              LDRB     r4,[r1,#0]            ;767
0000f4  54d4              STRB     r4,[r2,r3]            ;767
0000f6  1c5b              ADDS     r3,r3,#1              ;767
0000f8  b2dc              UXTB     r4,r3                 ;768
0000fa  1823              ADDS     r3,r4,r0              ;769
0000fc  b2db              UXTB     r3,r3                 ;769
0000fe  1c40              ADDS     r0,r0,#1              ;769
000100  e004              B        |L28.268|
                  |L28.258|
000102  5c0f              LDRB     r7,[r1,r0]            ;773
000104  5517              STRB     r7,[r2,r4]            ;773
000106  1c64              ADDS     r4,r4,#1              ;773
000108  b2e4              UXTB     r4,r4                 ;775
00010a  1e40              SUBS     r0,r0,#1              ;775
                  |L28.268|
00010c  b2c0              UXTB     r0,r0                 ;770
00010e  429c              CMP      r4,r3                 ;771
000110  d3f7              BCC      |L28.258|
000112  1c6d              ADDS     r5,r5,#1              ;771
000114  9801              LDR      r0,[sp,#4]            ;780
000116  b2ed              UXTB     r5,r5                 ;778
000118  4285              CMP      r5,r0                 ;780
00011a  d9ce              BLS      |L28.186|
                  |L28.284|
00011c  480b              LDR      r0,|L28.332|
00011e  2100              MOVS     r1,#0                 ;782
000120  7006              STRB     r6,[r0,#0]            ;781
000122  7041              STRB     r1,[r0,#1]            ;782
000124  2204              MOVS     r2,#4                 ;783
000126  7082              STRB     r2,[r0,#2]            ;783
000128  70c1              STRB     r1,[r0,#3]            ;784
00012a  1d36              ADDS     r6,r6,#4              ;784
00012c  4601              MOV      r1,r0                 ;785
00012e  b2f2              UXTB     r2,r6                 ;785
000130  9802              LDR      r0,[sp,#8]            ;785
000132  f7fffffe          BL       setBLE_ConnTxData
                  |L28.310|
000136  2800              CMP      r0,#0                 ;785
000138  d000              BEQ      |L28.316|
;;;797            {
;;;798                return SUCCESS_;
;;;799            }
;;;800            else
;;;801            {
;;;802                return FAIL_;
00013a  2001              MOVS     r0,#1
                  |L28.316|
;;;803            }
;;;804        }
;;;805    }
00013c  bdfe              POP      {r1-r7,pc}
;;;806    
                          ENDP

00013e  0000              DCW      0x0000
                  |L28.320|
                          DCD      L2CAP_Buf
                  |L28.324|
                          DCD      size_ATTRIBUTE_SERVER
                  |L28.328|
                          DCD      ATTRIBUTE_SERVER
                  |L28.332|
                          DCD      SPIBuffer
                  |L28.336|
                          DCD      ATTRIBUTE_SERVER_PERMISSION
                  |L28.340|
                          DCD      aTT_MTU

                          AREA ||i.Prcss_OPCODE_ATT_Find_Information_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Find_Information_Response PROC
;;;807    
;;;808    Uint8 Prcss_OPCODE_ATT_Find_Information_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;809    {
;;;810    #ifdef _HOST_CLIENT_
;;;811        extern const ATTRIBUTE_CLIENT *ATT_SERVER_CLIENT[];
;;;812        extern void ATT_Request(uint8_t connID, uint8_t AttOpcode, uint8_t *paramGroup,  uint8_t dataLength);
;;;813        extern MBLK *mblk_cli_HDL_Srv[];
;;;814        extern MBLK *mblk_cli_HDL_Charc[];
;;;815    #endif  //(#ifdef _HOST_CLIENT_)
;;;816        return SUCCESS_;
;;;817    }
000002  4770              BX       lr
;;;818    
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Handle_Value_Confirmation||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Handle_Value_Confirmation PROC
;;;2439   
;;;2440   Uint8 Prcss_OPCODE_ATT_Handle_Value_Confirmation(Uint8 connID)
000000  4802              LDR      r0,|L30.12|
;;;2441   {
;;;2442       ATT_INDICATION_Packet_Sent--;
000002  7801              LDRB     r1,[r0,#0]  ; ATT_INDICATION_Packet_Sent
000004  1e49              SUBS     r1,r1,#1
000006  7001              STRB     r1,[r0,#0]
;;;2443       return SUCCESS_;
000008  2000              MOVS     r0,#0
;;;2444   //    switch (STATE_Program)
;;;2445   //    {
;;;2446   //    case PROGRAM_S2:
;;;2447   //    case PROGRAM_S3:
;;;2448   //    case PROGRAM_S6:
;;;2449   //#ifdef _PROFILE_BLP_
;;;2450   //        if((att_HDL_BLS_BLOOD_PRESSURE_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
;;;2451   //        {
;;;2452   //            j = 0;
;;;2453   //            while(idx_ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_DATABASE[j] == 0)
;;;2454   //            {
;;;2455   //                j++;
;;;2456   //                if(j == 6)
;;;2457   //                {
;;;2458   //                    break;
;;;2459   //                }
;;;2460   //            }
;;;2461   //            if(j == 6)
;;;2462   //            {
;;;2463   //                SPIBuffer[0] = LL_TERMINATE_IND;     //LL_TERMINATE_IND
;;;2464   //                SPIBuffer[1] = HCI_ERR_CODE_REMOTE_USER_TERMINATED_CONNECTION;                    //reason
;;;2465   //                setBLE_ConnTxCtrl(connID, SPIBuffer, 2);
;;;2466   //                break;
;;;2467   //            }
;;;2468   
;;;2469   //            SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_HANDlE_VAlUE_INDICATION;
;;;2470   //            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = (3+ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE]);
;;;2471   //            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;2472   //            SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;2473   //            SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;2474   //            SPIBuffer[TAB_ATTRIBUTE_HANDLE_L] = ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_L];
;;;2475   //            SPIBuffer[TAB_ATTRIBUTE_HANDLE_H] = ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_H];
;;;2476   //            for(i=0; i<ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE]; i++)
;;;2477   //            {
;;;2478   //                SPIBuffer[TAB_ATTRIBUTE_HANDLE_H+1+i] = ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_DATABASE[j][i];
;;;2479   //            }
;;;2480   //            setBLE_ConnTxData(connID, SPIBuffer, (3+ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE]+SIZE_BASIC_L2CAP_HEADER));    //5: 2Byte Opcode, 2Bytes Handle, 2Bytes Value
;;;2481   //            ATT_INDICATION_Packet_Sent++;
;;;2482   //            idx_ATT_HDL_BLS_BLOOD_PRESSURE_MEASUREMENT_DATABASE[j] = 0;
;;;2483   //        }
;;;2484   //#endif
;;;2485   //#ifdef _PROFILE_HTP_
;;;2486   //        if((att_HDL_HTS_TEMPERATURE_MEASUREMENT_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
;;;2487   //        {
;;;2488   //            j = 0;
;;;2489   //            while(idx_ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_DATABASE[j] == 0)
;;;2490   //            {
;;;2491   //                j++;
;;;2492   //                if(j == 6)
;;;2493   //                {
;;;2494   //                    break;
;;;2495   //                }
;;;2496   //            }
;;;2497   //            if(j == 6)
;;;2498   //            {
;;;2499   //                SPIBuffer[0] = LL_TERMINATE_IND;     //LL_TERMINATE_IND
;;;2500   //                SPIBuffer[1] = HCI_ERR_CODE_REMOTE_USER_TERMINATED_CONNECTION;                    //reason
;;;2501   //                setBLE_ConnTxCtrl(connID, SPIBuffer, 2);
;;;2502   //                break;
;;;2503   //            }
;;;2504   
;;;2505   //            SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_HANDlE_VAlUE_INDICATION;
;;;2506   //            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = (3+ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE]);
;;;2507   //            SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;2508   //            SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;2509   //            SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;2510   //            SPIBuffer[TAB_ATTRIBUTE_HANDLE_L] = ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_L];
;;;2511   //            SPIBuffer[TAB_ATTRIBUTE_HANDLE_H] = ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_H];
;;;2512   //            for(i=0; i<ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE]; i++)
;;;2513   //            {
;;;2514   //                SPIBuffer[TAB_ATTRIBUTE_HANDLE_H+1+i] = ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_DATABASE[j][i];
;;;2515   //            }
;;;2516   //            setBLE_ConnTxData(connID, SPIBuffer, (3+ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_INIT[TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE]+SIZE_BASIC_L2CAP_HEADER));    //5: 2Byte Opcode, 2Bytes Handle, 2Bytes Value
;;;2517   //            ATT_INDICATION_Packet_Sent++;
;;;2518   //            idx_ATT_HDL_HTS_TEMPERATURE_MEASUREMENT_DATABASE[j] = 0;
;;;2519   //        }
;;;2520   //#endif
;;;2521   
;;;2522   //#ifdef _PROFILE_LNS_
;;;2523   //        if((STATE_LNS_LN_cp & STATE_LNS_LN_CP_OP_INDICATED) != 0)
;;;2524   //        {
;;;2525   //            STATE_LNS_LN_cp = (STATE_LNS_LN_cp & (~STATE_LNS_LN_CP_OP_INDICATED));
;;;2526   //        }
;;;2527   //#endif
;;;2528   
;;;2529   //#ifdef _PROFILE_GLS_
;;;2530   //        if((STATE_GLS_RA_cp & STATE_GLS_RA_CP_OP_INDICATED) != 0)
;;;2531   //        {
;;;2532   //            STATE_GLS_RA_cp = (STATE_GLS_RA_cp & (~STATE_GLS_RA_CP_OP_INDICATED));
;;;2533   //        }
;;;2534   //#endif
;;;2535   
;;;2536   //#ifdef _PROFILE_CPS_
;;;2537   //        if((STATE_CPS_CP_cp & STATE_CPS_CP_CP_OP_INDICATED) != 0)
;;;2538   //        {
;;;2539   //            STATE_CPS_CP_cp = (STATE_CPS_CP_cp & (~STATE_CPS_CP_CP_OP_INDICATED));
;;;2540   //        }
;;;2541   //#endif
;;;2542   
;;;2543   //#ifdef _PROFILE_OTA_
;;;2544   //        if((state0_OTA_CMD & STATE_OTA_CMD_CP_OP_INDICATED) != 0)
;;;2545   //        {
;;;2546   //            state0_OTA_CMD = (state0_OTA_CMD & (~STATE_OTA_CMD_CP_OP_INDICATED));
;;;2547   //        }
;;;2548   //#endif
;;;2549   //        break;
;;;2550   
;;;2551   //    default:
;;;2552   //        break;
;;;2553   
;;;2554   }
00000a  4770              BX       lr
;;;2555   
                          ENDP

                  |L30.12|
                          DCD      ||.data||

                          AREA ||i.Prcss_OPCODE_ATT_Handle_Value_Indication||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Handle_Value_Indication PROC
;;;2400   
;;;2401   Uint8 Prcss_OPCODE_ATT_Handle_Value_Indication(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2402   {
;;;2403   #ifdef _HOST_CLIENT_
;;;2404       Uint8 Rsp_Error;
;;;2405       Uint8 i;
;;;2406       MBLK *mblk;
;;;2407       extern const ATTRIBUTE_CLIENT *ATT_SERVER_CLIENT[];
;;;2408   
;;;2409       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;2410       i = 0;
;;;2411       do
;;;2412       {
;;;2413           if(Knl_MemComp(&L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L], (Uint8 *)&ATT_SERVER_CLIENT[i]->handle->handle_Num, 2))
;;;2414           {
;;;2415               Rsp_Error = 0;
;;;2416               break;
;;;2417           }
;;;2418           i++;
;;;2419       }
;;;2420       while(i != size_ATTRIBUTE_SERVER);
;;;2421   
;;;2422       if(Rsp_Error)
;;;2423       {
;;;2424           return;
;;;2425       }
;;;2426       mblk = GetMsgBlk();
;;;2427   
;;;2428       mblk->Primitive = HSPF_ATT_INDICATE;
;;;2429       mblk->Para.HSPF_Att_Write_Para.HCI_DataPkt_LthL = (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]);
;;;2430       mblk->Para.HSPF_Att_Write_Para.HCI_Conn_Hdl_L = connID;
;;;2431       mblk->Para.HSPF_Att_Write_Para.HCI_Conn_Hdl_H = i;
;;;2432       Knl_MemCpy(mblk->Para.HSPF_Att_Write_Para.HCI_DataPkt_Data, &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE], (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]));
;;;2433   
;;;2434       SndMsgBlk(mblk, Q_2HOST);
;;;2435   #endif  //(#ifdef _HOST_CLIENT_)
;;;2436       return SUCCESS_;
;;;2437   }
000002  4770              BX       lr
;;;2438   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Handle_Value_Notification||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Handle_Value_Notification PROC
;;;2334   
;;;2335   Uint8 Prcss_OPCODE_ATT_Handle_Value_Notification(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2336   {
;;;2337   #ifdef _HOST_CLIENT_
;;;2338       Uint8 Rsp_Error;
;;;2339       Uint8 i;
;;;2340       MBLK *mblk;
;;;2341       extern const ATTRIBUTE_CLIENT *ATT_SERVER_CLIENT[];
;;;2342   
;;;2343   
;;;2344       //ATT_SERVER_CLIENT[]
;;;2345   
;;;2346       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;2347       i = 0;
;;;2348       do
;;;2349       {
;;;2350           if(Knl_MemComp(&L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L], (Uint8 *)&ATT_SERVER_CLIENT[i]->handle->handle_Num, 2))
;;;2351           {
;;;2352               Rsp_Error = 0;
;;;2353               break;
;;;2354           }
;;;2355           /*
;;;2356           //if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] == SPIBuffer[TAB_ATTRIBUTE_HANDLE_H])
;;;2357           if(ATT_SERVER_CLIENT[i]->handle->handle_Num == SPIBuffer[TAB_ATTRIBUTE_HANDLE_H])
;;;2358           {
;;;2359               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] == SPIBuffer[TAB_ATTRIBUTE_HANDLE_L])
;;;2360               {
;;;2361                   Rsp_Error = 0;
;;;2362                   break;
;;;2363               }
;;;2364           }
;;;2365           */
;;;2366           i++;
;;;2367       }
;;;2368       while(i != size_ATTRIBUTE_SERVER);
;;;2369   
;;;2370       if(Rsp_Error)
;;;2371       {
;;;2372           return;
;;;2373       }
;;;2374       mblk = GetMsgBlk();
;;;2375   
;;;2376       mblk->Primitive = HSPF_ATT_NOTIFY;
;;;2377       mblk->Para.HSPF_Att_Notify_Para.HCI_DataPkt_LthL = (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]);
;;;2378       mblk->Para.HSPF_Att_Notify_Para.HCI_Conn_Hdl_L = connID;
;;;2379       mblk->Para.HSPF_Att_Notify_Para.HCI_Conn_Hdl_H = i;
;;;2380       Knl_MemCpy(mblk->Para.HSPF_Att_Notify_Para.HCI_DataPkt_Data, &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE], (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]));
;;;2381   
;;;2382       SndMsgBlk(mblk, Q_2HOST);
;;;2383   #endif  //(#ifdef _HOST_CLIENT_)
;;;2384   
;;;2385   #ifdef __Temp_Master__
;;;2386       extern void (* const ATT_GetNotify[])(uint8_t connID, uint8_t length, uint8_t *srcCMD);
;;;2387   
;;;2388       if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] > aTT_MTU[connID])
;;;2389       {
;;;2390           (*(ATT_GetNotify[0]))(connID, aTT_MTU[connID]-3, &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE+3]);
;;;2391       }
;;;2392       else
;;;2393       {
;;;2394           (*(ATT_GetNotify[0]))(connID, (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3), &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE+3]);
;;;2395       }
;;;2396   #endif
;;;2397       return SUCCESS_;
;;;2398   }
000002  4770              BX       lr
;;;2399   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_NULL||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_NULL PROC
;;;590    
;;;591    Uint8 Prcss_OPCODE_ATT_NULL(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;592    {
;;;593        return SUCCESS_;
;;;594    }
000002  4770              BX       lr
;;;595    
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Prepare_Write_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Prepare_Write_Request PROC
;;;2132   
;;;2133   Uint8 Prcss_OPCODE_ATT_Prepare_Write_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;2134   {
;;;2135       Uint8 Rsp_Error;
;;;2136       Uint8 i, j;
;;;2137   
;;;2138       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;2139       i = 0;
;;;2140       do
;;;2141       {
;;;2142           if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_H])
000002  4d3b              LDR      r5,|L34.240|
;;;2143           {
;;;2144               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L])
;;;2145               {
;;;2146                   if((q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_HDL_L]==0)&&(q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_HDL_H]==0))
;;;2147                   {
;;;2148                       Knl_MemCpy(q_att_HDL_PreWr, &L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L], 2);
;;;2149                   }
;;;2150                   else
;;;2151                   {
;;;2152                       if(Knl_MemComp(q_att_HDL_PreWr, &L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L], 2) != SUCCESS_)
;;;2153                       {
;;;2154                           Rsp_Error = ERR_CODE_ATT_APPLICATION_ERROR;
;;;2155                           break;
;;;2156                       }
;;;2157                   }
;;;2158                   Rsp_Error = 0;
;;;2159                   break;
;;;2160               }
;;;2161           }
;;;2162           i++;
;;;2163       }
;;;2164       while(i != size_ATTRIBUTE_SERVER);
000004  493b              LDR      r1,|L34.244|
000006  2001              MOVS     r0,#1                 ;2138
000008  79ae              LDRB     r6,[r5,#6]            ;2142
00000a  796b              LDRB     r3,[r5,#5]            ;2144
00000c  7809              LDRB     r1,[r1,#0]
00000e  b082              SUB      sp,sp,#8              ;2134
000010  2400              MOVS     r4,#0                 ;2139
                  |L34.18|
000012  4a39              LDR      r2,|L34.248|
000014  00a7              LSLS     r7,r4,#2              ;2142
000016  59d2              LDR      r2,[r2,r7]            ;2142
000018  7817              LDRB     r7,[r2,#0]            ;2142
00001a  42b7              CMP      r7,r6                 ;2142
00001c  d118              BNE      |L34.80|
00001e  7852              LDRB     r2,[r2,#1]            ;2144
000020  429a              CMP      r2,r3                 ;2144
000022  d115              BNE      |L34.80|
000024  4835              LDR      r0,|L34.252|
000026  7801              LDRB     r1,[r0,#0]            ;2146  ; q_att_HDL_PreWr
000028  2900              CMP      r1,#0                 ;2146
00002a  d102              BNE      |L34.50|
00002c  7840              LDRB     r0,[r0,#1]            ;2146  ; q_att_HDL_PreWr
00002e  2800              CMP      r0,#0                 ;2146
000030  d008              BEQ      |L34.68|
                  |L34.50|
000032  2202              MOVS     r2,#2                 ;2152
000034  1d69              ADDS     r1,r5,#5              ;2152
000036  4831              LDR      r0,|L34.252|
000038  f7fffffe          BL       Knl_MemComp
00003c  2800              CMP      r0,#0                 ;2152
00003e  d00d              BEQ      |L34.92|
000040  2080              MOVS     r0,#0x80              ;2154
000042  e02e              B        |L34.162|
                  |L34.68|
000044  2202              MOVS     r2,#2                 ;2148
000046  1d69              ADDS     r1,r5,#5              ;2148
000048  482c              LDR      r0,|L34.252|
00004a  f7fffffe          BL       Knl_MemCpy
00004e  e005              B        |L34.92|
                  |L34.80|
000050  1c64              ADDS     r4,r4,#1              ;2148
000052  b2e4              UXTB     r4,r4                 ;2162
000054  428c              CMP      r4,r1
000056  d1dc              BNE      |L34.18|
;;;2165       if(Rsp_Error == 0)
000058  2800              CMP      r0,#0
00005a  d122              BNE      |L34.162|
                  |L34.92|
;;;2166       {
;;;2167           Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Write(i);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Write
;;;2168       }
;;;2169       if(Rsp_Error == 0)
000062  2800              CMP      r0,#0
000064  d11d              BNE      |L34.162|
;;;2170       {
;;;2171           Rsp_Error = chkIfBLE_ATT_Chr_Acss_ByUser(i);
000066  4620              MOV      r0,r4
000068  f7fffffe          BL       chkIfBLE_ATT_Chr_Acss_ByUser
;;;2172           if(Rsp_Error != NO_)
00006c  2800              CMP      r0,#0
00006e  d007              BEQ      |L34.128|
;;;2173           {
;;;2174               Rsp_Error = chkBLE_ATT_Chr_AcssWr_ByUser((Uint8 *)*(ATTRIBUTE_SERVER_PARAM+i), &(L2CAP_Buf.DataBuf[(TAB_ATTRIBUTE_HANDLE_H+1)]));
000070  4923              LDR      r1,|L34.256|
000072  00a0              LSLS     r0,r4,#2
000074  5808              LDR      r0,[r1,r0]
000076  1de9              ADDS     r1,r5,#7
000078  f7fffffe          BL       chkBLE_ATT_Chr_AcssWr_ByUser
;;;2175           }
;;;2176       }
;;;2177       if(Rsp_Error == 0)
00007c  2800              CMP      r0,#0
00007e  d110              BNE      |L34.162|
                  |L34.128|
;;;2178       {
;;;2179           j = L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]+L2CAP_Buf.DataBuf[TAB_ATT_VALUE_OFFSET_L]-5;
000080  7828              LDRB     r0,[r5,#0]  ; L2CAP_Buf
000082  79e9              LDRB     r1,[r5,#7]  ; L2CAP_Buf
000084  462e              MOV      r6,r5
000086  1840              ADDS     r0,r0,r1
000088  1f40              SUBS     r0,r0,#5
00008a  b2c5              UXTB     r5,r0
;;;2180           if(j > *(*(ATTRIBUTE_SERVER+i)+(TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i))))
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
000092  4919              LDR      r1,|L34.248|
000094  00a2              LSLS     r2,r4,#2
000096  5889              LDR      r1,[r1,r2]
000098  1c80              ADDS     r0,r0,#2
00009a  5c08              LDRB     r0,[r1,r0]
00009c  42a8              CMP      r0,r5
00009e  d209              BCS      |L34.180|
;;;2181           {
;;;2182               Rsp_Error = ERR_CODE_ATT_PREPARE_QUEUE_FULL;
0000a0  2009              MOVS     r0,#9
                  |L34.162|
;;;2183           }
;;;2184           else
;;;2185           {
;;;2186               if(j > q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH])
;;;2187                   q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_LTH] = j;
;;;2188           }
;;;2189       }
;;;2190       if(Rsp_Error != 0)
;;;2191       {
;;;2192           if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_H], Rsp_Error) == SUCCESS_)
0000a2  9000              STR      r0,[sp,#0]
0000a4  4817              LDR      r0,|L34.260|
0000a6  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
0000a8  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
0000aa  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
0000ac  9802              LDR      r0,[sp,#8]
0000ae  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
0000b2  e019              B        |L34.232|
                  |L34.180|
0000b4  4811              LDR      r0,|L34.252|
0000b6  7881              LDRB     r1,[r0,#2]            ;2186  ; q_att_HDL_PreWr
0000b8  42a9              CMP      r1,r5                 ;2186
0000ba  d200              BCS      |L34.190|
0000bc  7085              STRB     r5,[r0,#2]            ;2187
                  |L34.190|
;;;2193           {
;;;2194               return SUCCESS_;
;;;2195           }
;;;2196           else
;;;2197           {
;;;2198               return FAIL_;
;;;2199           }
;;;2200       }
;;;2201       else    //Rsp_Error == 0
;;;2202       {
;;;2203           Knl_MemCpy(&q_att_HDL_PreWr[TAB_Q_ATT_HDL_PREWR_VAL+L2CAP_Buf.DataBuf[TAB_ATT_VALUE_OFFSET_L]], &L2CAP_Buf.DataBuf[TAB_ATT_VALUE_VALUE_BGN], (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-5));
0000be  7830              LDRB     r0,[r6,#0]  ; L2CAP_Buf
0000c0  79f1              LDRB     r1,[r6,#7]  ; L2CAP_Buf
0000c2  1f40              SUBS     r0,r0,#5
0000c4  b2c2              UXTB     r2,r0
0000c6  480d              LDR      r0,|L34.252|
0000c8  1cc0              ADDS     r0,r0,#3
0000ca  1808              ADDS     r0,r1,r0
0000cc  4908              LDR      r1,|L34.240|
0000ce  3109              ADDS     r1,r1,#9
0000d0  f7fffffe          BL       Knl_MemCpy
;;;2204           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_PREPARE_WRITE_RESPONSE;
0000d4  480b              LDR      r0,|L34.260|
0000d6  2117              MOVS     r1,#0x17
0000d8  7101              STRB     r1,[r0,#4]
;;;2205           if(setBLE_ConnTxData(connID, SPIBuffer, (SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]+4)) == SUCCESS_)    //1: Opcode
0000da  7800              LDRB     r0,[r0,#0]  ; SPIBuffer
0000dc  4909              LDR      r1,|L34.260|
0000de  1d00              ADDS     r0,r0,#4
0000e0  b2c2              UXTB     r2,r0
0000e2  9802              LDR      r0,[sp,#8]
0000e4  f7fffffe          BL       setBLE_ConnTxData
                  |L34.232|
0000e8  2800              CMP      r0,#0
0000ea  d000              BEQ      |L34.238|
;;;2206           {
;;;2207               return SUCCESS_;
;;;2208           }
;;;2209           else
;;;2210           {
;;;2211               return FAIL_;
0000ec  2001              MOVS     r0,#1
                  |L34.238|
;;;2212           }
;;;2213       }
;;;2214   }
0000ee  bdfe              POP      {r1-r7,pc}
;;;2215   
                          ENDP

                  |L34.240|
                          DCD      L2CAP_Buf
                  |L34.244|
                          DCD      size_ATTRIBUTE_SERVER
                  |L34.248|
                          DCD      ATTRIBUTE_SERVER
                  |L34.252|
                          DCD      q_att_HDL_PreWr
                  |L34.256|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L34.260|
                          DCD      SPIBuffer

                          AREA ||i.Prcss_OPCODE_ATT_Prepare_Write_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Prepare_Write_Response PROC
;;;2216   
;;;2217   Uint8 Prcss_OPCODE_ATT_Prepare_Write_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2218   {
;;;2219   #ifdef _HOST_CLIENT_
;;;2220   #endif  //(#ifdef _HOST_CLIENT_)
;;;2221       return SUCCESS_;
;;;2222   }
000002  4770              BX       lr
;;;2223   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Read_Blob_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Read_Blob_Request PROC
;;;1313   
;;;1314   Uint8 Prcss_OPCODE_ATT_Read_Blob_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1315   {
;;;1316       Uint8 Rsp_Error;
;;;1317       Uint8 i, idx, idx_AttTypeSize;
;;;1318       Uint8 sizeRSP_PDUlgth;
;;;1319   
;;;1320       Uint8 j;
;;;1321   
;;;1322       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;1323       i = 0;
;;;1324       do
;;;1325       {
;;;1326           if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_H])
000002  4d3f              LDR      r5,|L36.256|
;;;1327           {
;;;1328               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L])
;;;1329               {
;;;1330                   Rsp_Error = 0;
;;;1331                   break;
;;;1332               }
;;;1333           }
;;;1334           i++;
;;;1335       }
;;;1336       while(i != size_ATTRIBUTE_SERVER);
000004  493f              LDR      r1,|L36.260|
000006  2001              MOVS     r0,#1                 ;1322
000008  79ae              LDRB     r6,[r5,#6]            ;1326
00000a  796b              LDRB     r3,[r5,#5]            ;1328
00000c  780a              LDRB     r2,[r1,#0]
00000e  b082              SUB      sp,sp,#8              ;1315
000010  2400              MOVS     r4,#0                 ;1323
                  |L36.18|
000012  493d              LDR      r1,|L36.264|
000014  00a7              LSLS     r7,r4,#2              ;1326
000016  59c9              LDR      r1,[r1,r7]            ;1326
000018  780f              LDRB     r7,[r1,#0]            ;1326
00001a  42b7              CMP      r7,r6                 ;1326
00001c  d102              BNE      |L36.36|
00001e  7849              LDRB     r1,[r1,#1]            ;1328
000020  4299              CMP      r1,r3                 ;1328
000022  d005              BEQ      |L36.48|
                  |L36.36|
000024  1c64              ADDS     r4,r4,#1              ;1328
000026  b2e4              UXTB     r4,r4                 ;1334
000028  4294              CMP      r4,r2
00002a  d1f2              BNE      |L36.18|
;;;1337       if(Rsp_Error == 0)
00002c  2800              CMP      r0,#0
00002e  d12a              BNE      |L36.134|
                  |L36.48|
;;;1338       {
;;;1339           ///*****Check permission**************************************************************************************************************//
;;;1340           Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Read(i);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Read
;;;1341           ///***********************************************************************************************************************************//
;;;1342       }
;;;1343       if(Rsp_Error == 0)
000036  2800              CMP      r0,#0
000038  d125              BNE      |L36.134|
;;;1344       {
;;;1345           Rsp_Error = chkIfBLE_ATT_Chr_Acss_ByUser(i);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       chkIfBLE_ATT_Chr_Acss_ByUser
;;;1346           if(Rsp_Error != NO_)
;;;1347           {
;;;1348               //Rsp_Error = chkBLE_ATT_Chr_AcssRd_ByUser(*(ATTRIBUTE_SERVER_PARAM+i));
;;;1349               Rsp_Error = chkBLE_ATT_Chr_AcssRd_ByUser((Uint8 *)*(ATTRIBUTE_SERVER_PARAM+i));
000040  4e32              LDR      r6,|L36.268|
000042  2800              CMP      r0,#0                 ;1346
000044  d005              BEQ      |L36.82|
000046  00a0              LSLS     r0,r4,#2
000048  5830              LDR      r0,[r6,r0]
00004a  f7fffffe          BL       chkBLE_ATT_Chr_AcssRd_ByUser
;;;1350           }
;;;1351       }
;;;1352       if(Rsp_Error == 0)
00004e  2800              CMP      r0,#0
000050  d119              BNE      |L36.134|
                  |L36.82|
;;;1353       {
;;;1354           idx_AttTypeSize = ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)];
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
000058  492b              LDR      r1,|L36.264|
00005a  00a7              LSLS     r7,r4,#2
00005c  59c9              LDR      r1,[r1,r7]
00005e  1c80              ADDS     r0,r0,#2
000060  5c09              LDRB     r1,[r1,r0]
;;;1355           idx_AttTypeSize = getBLE_ATTRIBUTE_Value_DynmcLngth(i, idx_AttTypeSize);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       getBLE_ATTRIBUTE_Value_DynmcLngth
;;;1356           if(idx_AttTypeSize <= (aTT_MTU[connID] - 3))
000068  4929              LDR      r1,|L36.272|
00006a  9a02              LDR      r2,[sp,#8]
00006c  5c8b              LDRB     r3,[r1,r2]
00006e  1ed9              SUBS     r1,r3,#3
000070  4281              CMP      r1,r0
000072  db04              BLT      |L36.126|
;;;1357           {
;;;1358               if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_VALUE_OFFSET] != 0)
000074  79e9              LDRB     r1,[r5,#7]  ; L2CAP_Buf
000076  2900              CMP      r1,#0
000078  d001              BEQ      |L36.126|
;;;1359               {
;;;1360                   Rsp_Error = ERR_CODE_ATT_ATTRIBUTE_NOT_LONG;
00007a  200b              MOVS     r0,#0xb
00007c  e003              B        |L36.134|
                  |L36.126|
;;;1361               }
;;;1362           }
;;;1363       }
;;;1364       if(Rsp_Error == 0)
;;;1365       {
;;;1366           if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_VALUE_OFFSET] > idx_AttTypeSize)
00007e  79ed              LDRB     r5,[r5,#7]  ; L2CAP_Buf
000080  4285              CMP      r5,r0
000082  d909              BLS      |L36.152|
;;;1367           {
;;;1368               Rsp_Error = ERR_CODE_ATT_INVALID_OFFSET;
000084  2007              MOVS     r0,#7
                  |L36.134|
;;;1369           }
;;;1370           else
;;;1371           {
;;;1372               if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_VALUE_OFFSET] == idx_AttTypeSize)
;;;1373               {
;;;1374                   SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_READ_BlOB_RESPONSE;
;;;1375                   SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 1;    //Opcode
;;;1376                   SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;1377                   SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;1378                   SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;1379                   if(setBLE_ConnTxData(connID, SPIBuffer, (1+4)) == SUCCESS_)
;;;1380                   {
;;;1381                       return SUCCESS_;
;;;1382                   }
;;;1383                   else
;;;1384                   {
;;;1385                       return FAIL_;
;;;1386                   }
;;;1387                   //Rsp_Error = 1;
;;;1388               }       //Bluetooth Spec. Ver4.0 [Vol 3] page 496 of 656
;;;1389           }
;;;1390       }
;;;1391       if(Rsp_Error != 0)
;;;1392       {
;;;1393           if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_H], Rsp_Error) == SUCCESS_)
000086  9000              STR      r0,[sp,#0]
000088  4822              LDR      r0,|L36.276|
00008a  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
00008c  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
00008e  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
000090  9802              LDR      r0,[sp,#8]
000092  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
000096  e02f              B        |L36.248|
                  |L36.152|
000098  4285              CMP      r5,r0                 ;1372
00009a  d10b              BNE      |L36.180|
00009c  481d              LDR      r0,|L36.276|
00009e  210d              MOVS     r1,#0xd               ;1374
0000a0  7101              STRB     r1,[r0,#4]            ;1374
0000a2  2101              MOVS     r1,#1                 ;1375
0000a4  7001              STRB     r1,[r0,#0]            ;1375
0000a6  2100              MOVS     r1,#0                 ;1376
0000a8  7041              STRB     r1,[r0,#1]            ;1376
0000aa  2204              MOVS     r2,#4                 ;1377
0000ac  7082              STRB     r2,[r0,#2]            ;1377
0000ae  70c1              STRB     r1,[r0,#3]            ;1378
0000b0  2205              MOVS     r2,#5                 ;1379
0000b2  e01d              B        |L36.240|
                  |L36.180|
;;;1394           {
;;;1395               return SUCCESS_;
;;;1396           }
;;;1397           else
;;;1398           {
;;;1399               return FAIL_;
;;;1400           }
;;;1401       }
;;;1402       else    //Rsp_Error == 0
;;;1403       {
;;;1404           idx = 0;
0000b4  2200              MOVS     r2,#0
;;;1405           sizeRSP_PDUlgth = 1;    //Tab Opcode
0000b6  2101              MOVS     r1,#1
;;;1406           j = L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_VALUE_OFFSET];
;;;1407           while((j+idx) < idx_AttTypeSize)
0000b8  e00c              B        |L36.212|
                  |L36.186|
;;;1408           {
;;;1409               SPIBuffer[(TAB_ATTRIBUTE_VALUE+idx)] = *(*(ATTRIBUTE_SERVER_PARAM+i)+(TAB_ATTRIBUTE_PARAMETER_SERVER_VALUE+j+idx));
0000ba  4e14              LDR      r6,|L36.268|
;;;1410               idx++;
0000bc  1c49              ADDS     r1,r1,#1
0000be  59f6              LDR      r6,[r6,r7]            ;1409
;;;1411               sizeRSP_PDUlgth++;
0000c0  b2c9              UXTB     r1,r1
0000c2  5d36              LDRB     r6,[r6,r4]            ;1409
0000c4  4c13              LDR      r4,|L36.276|
0000c6  18a4              ADDS     r4,r4,r2              ;1409
0000c8  7166              STRB     r6,[r4,#5]            ;1409
0000ca  1c52              ADDS     r2,r2,#1              ;1409
;;;1412               if(sizeRSP_PDUlgth > (aTT_MTU[connID] - 1))
0000cc  1e5c              SUBS     r4,r3,#1
0000ce  b2d2              UXTB     r2,r2                 ;1410
0000d0  428c              CMP      r4,r1
0000d2  db02              BLT      |L36.218|
                  |L36.212|
0000d4  18ac              ADDS     r4,r5,r2              ;1407
0000d6  4284              CMP      r4,r0                 ;1407
0000d8  d3ef              BCC      |L36.186|
                  |L36.218|
;;;1413               {
;;;1414                   break;
;;;1415               }
;;;1416           }
;;;1417   
;;;1418           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_READ_BlOB_RESPONSE;
0000da  480e              LDR      r0,|L36.276|
0000dc  220d              MOVS     r2,#0xd
0000de  7102              STRB     r2,[r0,#4]
;;;1419           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = sizeRSP_PDUlgth;
0000e0  7001              STRB     r1,[r0,#0]
;;;1420           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
0000e2  2200              MOVS     r2,#0
;;;1421           SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
0000e4  2304              MOVS     r3,#4
0000e6  7042              STRB     r2,[r0,#1]            ;1420
0000e8  7083              STRB     r3,[r0,#2]
;;;1422           SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
0000ea  70c2              STRB     r2,[r0,#3]
0000ec  1d09              ADDS     r1,r1,#4
;;;1423           if(setBLE_ConnTxData(connID, SPIBuffer, (sizeRSP_PDUlgth+4)) == SUCCESS_)
0000ee  b2ca              UXTB     r2,r1
                  |L36.240|
0000f0  4908              LDR      r1,|L36.276|
0000f2  9802              LDR      r0,[sp,#8]            ;1379
0000f4  f7fffffe          BL       setBLE_ConnTxData
                  |L36.248|
0000f8  2800              CMP      r0,#0
0000fa  d000              BEQ      |L36.254|
;;;1424           {
;;;1425               return SUCCESS_;
;;;1426           }
;;;1427           else
;;;1428           {
;;;1429               return FAIL_;
0000fc  2001              MOVS     r0,#1
                  |L36.254|
;;;1430           }
;;;1431       }
;;;1432   }
0000fe  bdfe              POP      {r1-r7,pc}
;;;1433   
                          ENDP

                  |L36.256|
                          DCD      L2CAP_Buf
                  |L36.260|
                          DCD      size_ATTRIBUTE_SERVER
                  |L36.264|
                          DCD      ATTRIBUTE_SERVER
                  |L36.268|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L36.272|
                          DCD      aTT_MTU
                  |L36.276|
                          DCD      SPIBuffer

                          AREA ||i.Prcss_OPCODE_ATT_Read_Blob_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Read_Blob_Response PROC
;;;1434   
;;;1435   Uint8 Prcss_OPCODE_ATT_Read_Blob_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;1436   {
;;;1437   #ifdef _HOST_CLIENT_
;;;1438   #endif  //(#ifdef _HOST_CLIENT_)
;;;1439       return SUCCESS_;
;;;1440   }
000002  4770              BX       lr
;;;1441   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Read_By_Type_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Read_By_Type_Request PROC
;;;944    
;;;945    Uint8 Prcss_OPCODE_ATT_Read_By_Type_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;946    {
;;;947        Uint8 Rsp_Error;
;;;948    
;;;949        Uint8 size;     //Start
;;;950        Uint8 Handle_Att_RPT_S;     //Start
;;;951        Uint8 Handle_Att_RPT_E;     //End
;;;952        Uint8 uuid[16];
;;;953    
;;;954        Uint8 size_temp;     //End
;;;955        Uint8 size_uuid;
;;;956        Uint8 sizeRSP_PDUlgth;
;;;957        Uint8 i, idx;                    //temp
;;;958    
;;;959    
;;;960        Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;961        if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000002  4e8f              LDR      r6,|L38.576|
000004  2401              MOVS     r4,#1                 ;960
000006  4633              MOV      r3,r6
000008  7a30              LDRB     r0,[r6,#8]  ; L2CAP_Buf
;;;962        {
;;;963            if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_L])
00000a  7959              LDRB     r1,[r3,#5]
00000c  79b2              LDRB     r2,[r6,#6]            ;961  ; L2CAP_Buf
00000e  79db              LDRB     r3,[r3,#7]
000010  b088              SUB      sp,sp,#0x20           ;946
000012  4686              MOV      lr,r0                 ;961
000014  469c              MOV      r12,r3
000016  4282              CMP      r2,r0                 ;961
000018  d102              BNE      |L38.32|
00001a  4561              CMP      r1,r12
00001c  d902              BLS      |L38.36|
00001e  e002              B        |L38.38|
                  |L38.32|
;;;964            {
;;;965                Rsp_Error = 0;
;;;966            }
;;;967        }
;;;968        else
;;;969        {
;;;970            if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] < L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000020  4572              CMP      r2,lr
000022  d200              BCS      |L38.38|
                  |L38.36|
;;;971            {
;;;972                Rsp_Error = 0;
000024  2400              MOVS     r4,#0
                  |L38.38|
;;;973            }
;;;974        }
;;;975        if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] == 0)
000026  2900              CMP      r1,#0
000028  d101              BNE      |L38.46|
;;;976        {
;;;977            if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == 0)
00002a  2a00              CMP      r2,#0
00002c  d002              BEQ      |L38.52|
                  |L38.46|
;;;978            {
;;;979                Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;980            }
;;;981        }
;;;982        if(Rsp_Error == 0)
00002e  2c00              CMP      r4,#0
000030  d002              BEQ      |L38.56|
                  |L38.50|
000032  e0dd              B        |L38.496|
                  |L38.52|
000034  2401              MOVS     r4,#1                 ;979
000036  e0db              B        |L38.496|
                  |L38.56|
;;;983        {
;;;984            Rsp_Error = ERR_CODE_ATT_ATTRIBUTE_NOT_FOUND;
;;;985            i = 0;
;;;986            do
;;;987            {
;;;988                if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H])
;;;989                {
;;;990                    if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L])
;;;991                    {
;;;992                        Handle_Att_RPT_S = i;
;;;993                        Rsp_Error = 0;
;;;994                        break;
;;;995                    }
;;;996                }
;;;997                i++;
;;;998            }
;;;999            while(i != size_ATTRIBUTE_SERVER);
000038  4b82              LDR      r3,|L38.580|
00003a  240a              MOVS     r4,#0xa               ;984
00003c  781b              LDRB     r3,[r3,#0]
00003e  2000              MOVS     r0,#0                 ;985
                  |L38.64|
000040  4e81              LDR      r6,|L38.584|
000042  0087              LSLS     r7,r0,#2              ;988
000044  59f6              LDR      r6,[r6,r7]            ;988
000046  7837              LDRB     r7,[r6,#0]            ;988
000048  4297              CMP      r7,r2                 ;988
00004a  d304              BCC      |L38.86|
00004c  7876              LDRB     r6,[r6,#1]            ;990
00004e  428e              CMP      r6,r1                 ;990
000050  d301              BCC      |L38.86|
000052  4605              MOV      r5,r0                 ;992
000054  e005              B        |L38.98|
                  |L38.86|
000056  1c40              ADDS     r0,r0,#1              ;994
000058  b2c0              UXTB     r0,r0                 ;997
00005a  4298              CMP      r0,r3
00005c  d1f0              BNE      |L38.64|
;;;1000       }
;;;1001       if(Rsp_Error == 0)
00005e  2c00              CMP      r4,#0
000060  d1e7              BNE      |L38.50|
                  |L38.98|
000062  4f79              LDR      r7,|L38.584|
;;;1002       {
;;;1003           Rsp_Error = ERR_CODE_ATT_ATTRIBUTE_NOT_FOUND;
000064  240a              MOVS     r4,#0xa
                  |L38.102|
;;;1004           do
;;;1005           {
;;;1006               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000066  0081              LSLS     r1,r0,#2
000068  5879              LDR      r1,[r7,r1]
00006a  780a              LDRB     r2,[r1,#0]
00006c  4572              CMP      r2,lr
00006e  d809              BHI      |L38.132|
;;;1007               {
;;;1008                   if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_L])
000070  7849              LDRB     r1,[r1,#1]
000072  4561              CMP      r1,r12
000074  d806              BHI      |L38.132|
;;;1009                   {
;;;1010                       Handle_Att_RPT_E = i;
;;;1011                       Rsp_Error = 0;
000076  9007              STR      r0,[sp,#0x1c]
000078  1c40              ADDS     r0,r0,#1
00007a  2400              MOVS     r4,#0
;;;1012                   }
;;;1013                   else
;;;1014                   {
;;;1015                       break;
;;;1016                   }
;;;1017               }
;;;1018               else
;;;1019               {
;;;1020                   break;
;;;1021               }
;;;1022               i++;
00007c  b2c0              UXTB     r0,r0
;;;1023           }
;;;1024           while(i != size_ATTRIBUTE_SERVER);
00007e  4298              CMP      r0,r3
000080  d1f1              BNE      |L38.102|
000082  e001              B        |L38.136|
                  |L38.132|
;;;1025       }
;;;1026       if(Rsp_Error == 0)
000084  2c00              CMP      r4,#0
000086  d106              BNE      |L38.150|
                  |L38.136|
;;;1027       {
;;;1028           if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] == (5+2))        //2: 16Bit UUID
000088  496d              LDR      r1,|L38.576|
00008a  7808              LDRB     r0,[r1,#0]  ; L2CAP_Buf
00008c  2807              CMP      r0,#7
00008e  d003              BEQ      |L38.152|
;;;1029           {
;;;1030               size_uuid = 2;
;;;1031           }
;;;1032           else if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] == (5+16))  //128bit UUID
000090  2815              CMP      r0,#0x15
000092  d003              BEQ      |L38.156|
;;;1033           {
;;;1034               size_uuid = 16;
;;;1035           }
;;;1036           else
;;;1037           {
;;;1038               Rsp_Error = ERR_CODE_ATT_INVALID_PDU;
000094  2404              MOVS     r4,#4
                  |L38.150|
000096  e0ab              B        |L38.496|
                  |L38.152|
000098  2002              MOVS     r0,#2                 ;1030
00009a  e000              B        |L38.158|
                  |L38.156|
00009c  2010              MOVS     r0,#0x10              ;1034
                  |L38.158|
;;;1039           }
;;;1040       }
;;;1041       if(Rsp_Error == 0)
;;;1042       {
;;;1043           Rsp_Error = ERR_CODE_ATT_ATTRIBUTE_NOT_FOUND;
00009e  240a              MOVS     r4,#0xa
0000a0  9000              STR      r0,[sp,#0]
0000a2  e01c              B        |L38.222|
                  |L38.164|
;;;1044           while(Handle_Att_RPT_S <= Handle_Att_RPT_E)
;;;1045           {
;;;1046               i = 0;
0000a4  2000              MOVS     r0,#0
;;;1047               idx = size_uuid;
;;;1048               while(i!=size_uuid)
;;;1049               {
;;;1050                   idx--;
;;;1051                   if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_L+i] != ATTRIBUTE_SERVER[Handle_Att_RPT_S][(TAB_ATTRIBUTE_SERVER_TYPE_H+idx)])
0000a6  00af              LSLS     r7,r5,#2
0000a8  9900              LDR      r1,[sp,#0]            ;1048
0000aa  e00e              B        |L38.202|
                  |L38.172|
0000ac  4b66              LDR      r3,|L38.584|
0000ae  1e49              SUBS     r1,r1,#1              ;1048
0000b0  4a63              LDR      r2,|L38.576|
0000b2  b2c9              UXTB     r1,r1                 ;1050
0000b4  59de              LDR      r6,[r3,r7]
0000b6  1812              ADDS     r2,r2,r0
0000b8  1c8b              ADDS     r3,r1,#2
0000ba  7a52              LDRB     r2,[r2,#9]
0000bc  5cf3              LDRB     r3,[r6,r3]
0000be  429a              CMP      r2,r3
0000c0  d106              BNE      |L38.208|
;;;1052                   {
;;;1053                       break;
;;;1054                   }
;;;1055                   else
;;;1056                   {
;;;1057                       uuid[idx] = L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_L+i];
0000c2  ab03              ADD      r3,sp,#0xc
0000c4  1c40              ADDS     r0,r0,#1
0000c6  545a              STRB     r2,[r3,r1]
;;;1058                   }
;;;1059                   i++;
0000c8  b2c0              UXTB     r0,r0
                  |L38.202|
0000ca  9a00              LDR      r2,[sp,#0]            ;1048
0000cc  4290              CMP      r0,r2                 ;1048
0000ce  d1ed              BNE      |L38.172|
                  |L38.208|
;;;1060               }
;;;1061   
;;;1062               if(i == size_uuid)
0000d0  9900              LDR      r1,[sp,#0]
0000d2  4288              CMP      r0,r1
0000d4  d101              BNE      |L38.218|
;;;1063               {
;;;1064                   {
;;;1065                       Rsp_Error = 0;
0000d6  2400              MOVS     r4,#0
;;;1066                       break;
0000d8  e006              B        |L38.232|
                  |L38.218|
0000da  1c6d              ADDS     r5,r5,#1
;;;1067                   }
;;;1068               }
;;;1069               Handle_Att_RPT_S++;
0000dc  b2ed              UXTB     r5,r5
                  |L38.222|
0000de  9807              LDR      r0,[sp,#0x1c]         ;1044
0000e0  4285              CMP      r5,r0                 ;1044
0000e2  d9df              BLS      |L38.164|
;;;1070           }
;;;1071       }
;;;1072       if(Rsp_Error == 0)
0000e4  2c00              CMP      r4,#0
0000e6  d17d              BNE      |L38.484|
                  |L38.232|
;;;1073       {
;;;1074           sizeRSP_PDUlgth = 2;        //opcode & length
0000e8  2002              MOVS     r0,#2
;;;1075           idx = (TAB_ATTRIBUTE_LENGTH+1);
0000ea  2606              MOVS     r6,#6
;;;1076           i = 0;
;;;1077           while(Handle_Att_RPT_S <= Handle_Att_RPT_E)
0000ec  9001              STR      r0,[sp,#4]
0000ee  e078              B        |L38.482|
                  |L38.240|
;;;1078           {
;;;1079               size_temp = (size_uuid+1);
;;;1080               if(getBLE_ATTRIBUTE_TYPE_Size(Handle_Att_RPT_S) == size_uuid)
0000f0  9f00              LDR      r7,[sp,#0]
0000f2  4628              MOV      r0,r5
0000f4  1c7f              ADDS     r7,r7,#1
0000f6  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
0000fa  4601              MOV      r1,r0
0000fc  9800              LDR      r0,[sp,#0]
0000fe  4281              CMP      r1,r0
000100  d100              BNE      |L38.260|
;;;1081                   size_temp = 0;
000102  2700              MOVS     r7,#0
                  |L38.260|
000104  00a8              LSLS     r0,r5,#2              ;1051
000106  a903              ADD      r1,sp,#0xc            ;952
000108  9002              STR      r0,[sp,#8]            ;1051
                  |L38.266|
;;;1082               while(size_temp < size_uuid)
00010a  9800              LDR      r0,[sp,#0]
00010c  4287              CMP      r7,r0
00010e  d20a              BCS      |L38.294|
;;;1083               {
;;;1084                   if(uuid[size_temp] != ATTRIBUTE_SERVER[Handle_Att_RPT_S][(TAB_ATTRIBUTE_SERVER_TYPE_H+size_temp)])
000110  4b4d              LDR      r3,|L38.584|
000112  9802              LDR      r0,[sp,#8]
000114  5dca              LDRB     r2,[r1,r7]
000116  5818              LDR      r0,[r3,r0]
000118  1cbb              ADDS     r3,r7,#2
00011a  5cc0              LDRB     r0,[r0,r3]
00011c  4282              CMP      r2,r0
00011e  d102              BNE      |L38.294|
000120  1c7f              ADDS     r7,r7,#1
;;;1085                       break;
;;;1086                   size_temp++;
000122  b2ff              UXTB     r7,r7
000124  e7f1              B        |L38.266|
                  |L38.294|
;;;1087               }
;;;1088               if(size_temp == size_uuid)
000126  9800              LDR      r0,[sp,#0]
000128  4287              CMP      r7,r0
00012a  d158              BNE      |L38.478|
;;;1089               {
;;;1090                   ///*****Check permission**************************************************************************************************************//
;;;1091                   Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Read(Handle_Att_RPT_S);
00012c  4628              MOV      r0,r5
00012e  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Read
000132  0004              MOVS     r4,r0
;;;1092                   ///***********************************************************************************************************************************//
;;;1093                   if(Rsp_Error == 0)
000134  d15c              BNE      |L38.496|
;;;1094                   {
;;;1095                       Rsp_Error = chkIfBLE_ATT_Chr_Acss_ByUser(Handle_Att_RPT_S);
000136  4628              MOV      r0,r5
000138  f7fffffe          BL       chkIfBLE_ATT_Chr_Acss_ByUser
00013c  0004              MOVS     r4,r0
;;;1096                       if(Rsp_Error != NO_)
00013e  d006              BEQ      |L38.334|
;;;1097                       {
;;;1098                           Rsp_Error = chkBLE_ATT_Chr_AcssRd_ByUser((Uint8 *)*(ATTRIBUTE_SERVER_PARAM+Handle_Att_RPT_S));
000140  4942              LDR      r1,|L38.588|
000142  9802              LDR      r0,[sp,#8]
000144  5808              LDR      r0,[r1,r0]
000146  f7fffffe          BL       chkBLE_ATT_Chr_AcssRd_ByUser
00014a  0004              MOVS     r4,r0
00014c  d150              BNE      |L38.496|
                  |L38.334|
;;;1099                       }
;;;1100                   }
;;;1101                   if(Rsp_Error != 0)
;;;1102                   {
;;;1103                       break;
;;;1104                   }
;;;1105                   else
;;;1106                   {
;;;1107                       size = (ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(Handle_Att_RPT_S)] + 2);
00014e  4628              MOV      r0,r5
000150  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
000154  4f3c              LDR      r7,|L38.584|
000156  9902              LDR      r1,[sp,#8]
000158  1c80              ADDS     r0,r0,#2
00015a  5879              LDR      r1,[r7,r1]
00015c  5c08              LDRB     r0,[r1,r0]
00015e  1c80              ADDS     r0,r0,#2
000160  b2c1              UXTB     r1,r0
;;;1108                       size = getBLE_ATTRIBUTE_Value_DynmcLngth(Handle_Att_RPT_S, size);
000162  4628              MOV      r0,r5
000164  f7fffffe          BL       getBLE_ATTRIBUTE_Value_DynmcLngth
;;;1109                       if(size < (aTT_MTU[connID]+5-idx))
000168  4939              LDR      r1,|L38.592|
00016a  9a08              LDR      r2,[sp,#0x20]
00016c  5c89              LDRB     r1,[r1,r2]
00016e  1b8a              SUBS     r2,r1,r6
000170  1d52              ADDS     r2,r2,#5
000172  4282              CMP      r2,r0
000174  dd01              BLE      |L38.378|
;;;1110                       {
;;;1111                           size_temp = size;
000176  4601              MOV      r1,r0
;;;1112                           i = Handle_Att_RPT_S;
000178  e003              B        |L38.386|
                  |L38.378|
;;;1113                       }
;;;1114                       else
;;;1115                       {
;;;1116                           if(idx == (TAB_ATTRIBUTE_LENGTH+1))
00017a  2e06              CMP      r6,#6
00017c  d141              BNE      |L38.514|
00017e  1e89              SUBS     r1,r1,#2
;;;1117                           {
;;;1118                               size_temp = (aTT_MTU[connID] -2);
000180  b2c9              UXTB     r1,r1
                  |L38.386|
;;;1119                               i = Handle_Att_RPT_S;
;;;1120                           }
;;;1121                           else
;;;1122                           {
;;;1123                               break;
;;;1124                           }
;;;1125                       }
;;;1126                       if(i != 0)
000182  2d00              CMP      r5,#0
000184  d02b              BEQ      |L38.478|
;;;1127                       {
;;;1128                           if(idx != (TAB_ATTRIBUTE_LENGTH+1))
;;;1129                           {
;;;1130                               if(size != SPIBuffer[TAB_ATTRIBUTE_LENGTH])
;;;1131                               {
;;;1132                                   break;
;;;1133                               }
;;;1134                           }
;;;1135                           else
;;;1136                           {
;;;1137                               SPIBuffer[TAB_ATTRIBUTE_LENGTH] = size;//(ATTRIBUTE_SERVER[(i)][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)]) + 2;  //2: 2Bytes Attribute Handle
000186  4a33              LDR      r2,|L38.596|
000188  2e06              CMP      r6,#6                 ;1128
00018a  d003              BEQ      |L38.404|
00018c  7952              LDRB     r2,[r2,#5]            ;1130  ; SPIBuffer
00018e  4282              CMP      r2,r0                 ;1130
000190  d137              BNE      |L38.514|
000192  e000              B        |L38.406|
                  |L38.404|
000194  7150              STRB     r0,[r2,#5]
                  |L38.406|
;;;1138                           }
;;;1139                           SPIBuffer[idx] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_L];
000196  9802              LDR      r0,[sp,#8]
000198  4a2e              LDR      r2,|L38.596|
00019a  583b              LDR      r3,[r7,r0]
00019c  4f2b              LDR      r7,|L38.588|
00019e  7858              LDRB     r0,[r3,#1]
0001a0  5590              STRB     r0,[r2,r6]
0001a2  1c76              ADDS     r6,r6,#1
;;;1140                           idx++;
0001a4  b2f0              UXTB     r0,r6
;;;1141                           SPIBuffer[idx] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_H];
0001a6  781b              LDRB     r3,[r3,#0]
0001a8  5413              STRB     r3,[r2,r0]
0001aa  1c40              ADDS     r0,r0,#1
;;;1142                           idx++;
0001ac  b2c6              UXTB     r6,r0
;;;1143                           sizeRSP_PDUlgth = (sizeRSP_PDUlgth+2);
0001ae  9801              LDR      r0,[sp,#4]
0001b0  1c80              ADDS     r0,r0,#2
0001b2  b2c0              UXTB     r0,r0
0001b4  1e89              SUBS     r1,r1,#2
;;;1144                           size_temp = (size_temp-2);
;;;1145                           size = 0;
0001b6  9001              STR      r0,[sp,#4]
0001b8  b2c9              UXTB     r1,r1                 ;1144
0001ba  2000              MOVS     r0,#0
;;;1146                           while(size_temp != 0)
0001bc  e00d              B        |L38.474|
                  |L38.446|
;;;1147                           {
;;;1148                               SPIBuffer[idx] = *(*(ATTRIBUTE_SERVER_PARAM+Handle_Att_RPT_S)+(TAB_ATTRIBUTE_PARAMETER_SERVER_VALUE+size));
0001be  9b02              LDR      r3,[sp,#8]
0001c0  58fb              LDR      r3,[r7,r3]
0001c2  5c1b              LDRB     r3,[r3,r0]
0001c4  5593              STRB     r3,[r2,r6]
;;;1149                               idx++;
;;;1150                               sizeRSP_PDUlgth++;
0001c6  9b01              LDR      r3,[sp,#4]
0001c8  1c76              ADDS     r6,r6,#1              ;1148
0001ca  1c5b              ADDS     r3,r3,#1
0001cc  1c40              ADDS     r0,r0,#1
0001ce  b2db              UXTB     r3,r3
;;;1151                               size++;
0001d0  1e49              SUBS     r1,r1,#1
0001d2  b2f6              UXTB     r6,r6                 ;1149
0001d4  b2c0              UXTB     r0,r0
;;;1152                               size_temp--;
0001d6  b2c9              UXTB     r1,r1
0001d8  9301              STR      r3,[sp,#4]
                  |L38.474|
0001da  2900              CMP      r1,#0                 ;1146
0001dc  d1ef              BNE      |L38.446|
                  |L38.478|
0001de  1c6d              ADDS     r5,r5,#1              ;1146
;;;1153                           }
;;;1154                       }
;;;1155                   }
;;;1156               }
;;;1157               Handle_Att_RPT_S++;
0001e0  b2ed              UXTB     r5,r5
                  |L38.482|
0001e2  e000              B        |L38.486|
                  |L38.484|
0001e4  e004              B        |L38.496|
                  |L38.486|
0001e6  9807              LDR      r0,[sp,#0x1c]         ;1077
0001e8  4285              CMP      r5,r0                 ;1077
0001ea  d981              BLS      |L38.240|
;;;1158           }
;;;1159       }
;;;1160       if(Rsp_Error == 0)
0001ec  2c00              CMP      r4,#0
0001ee  d008              BEQ      |L38.514|
                  |L38.496|
;;;1161       {
;;;1162           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = sizeRSP_PDUlgth;
;;;1163           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;1164           SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;1165           SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;1166           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_READ_BY_TYPE_RESPONSE;
;;;1167           //SPIBuffer[TAB_ATTRIBUTE_LENGTH] = (ATTRIBUTE_SERVER[(i)][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)]) + 2;  //2: 2Bytes Attribute Handle
;;;1168           if(SPIBuffer[TAB_ATTRIBUTE_LENGTH] > (aTT_MTU[connID] - 2))
;;;1169           {
;;;1170               SPIBuffer[TAB_ATTRIBUTE_LENGTH] = (aTT_MTU[connID] -2);
;;;1171           }
;;;1172           if(setBLE_ConnTxData(connID, SPIBuffer, (sizeRSP_PDUlgth+4)) == SUCCESS_)
;;;1173           {
;;;1174               return SUCCESS_;
;;;1175           }
;;;1176           else
;;;1177           {
;;;1178               return FAIL_;
;;;1179           }
;;;1180       }
;;;1181       else
;;;1182       {
;;;1183           if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_H], Rsp_Error) == SUCCESS_)
0001f0  4818              LDR      r0,|L38.596|
0001f2  9400              STR      r4,[sp,#0]
0001f4  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
0001f6  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
0001f8  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
0001fa  9808              LDR      r0,[sp,#0x20]
0001fc  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
000200  e018              B        |L38.564|
                  |L38.514|
000202  4814              LDR      r0,|L38.596|
000204  9901              LDR      r1,[sp,#4]            ;1162
000206  7001              STRB     r1,[r0,#0]            ;1162
000208  2100              MOVS     r1,#0                 ;1163
00020a  7041              STRB     r1,[r0,#1]            ;1163
00020c  2204              MOVS     r2,#4                 ;1164
00020e  7082              STRB     r2,[r0,#2]            ;1164
000210  70c1              STRB     r1,[r0,#3]            ;1165
000212  2109              MOVS     r1,#9                 ;1166
000214  7101              STRB     r1,[r0,#4]            ;1166
000216  490e              LDR      r1,|L38.592|
000218  9a08              LDR      r2,[sp,#0x20]         ;1168
00021a  7943              LDRB     r3,[r0,#5]            ;1168  ; SPIBuffer
00021c  5c89              LDRB     r1,[r1,r2]            ;1168
00021e  1e89              SUBS     r1,r1,#2              ;1168
000220  428b              CMP      r3,r1                 ;1168
000222  dd00              BLE      |L38.550|
000224  7141              STRB     r1,[r0,#5]            ;1170
                  |L38.550|
000226  9801              LDR      r0,[sp,#4]            ;1172
000228  490a              LDR      r1,|L38.596|
00022a  1d00              ADDS     r0,r0,#4              ;1172
00022c  b2c2              UXTB     r2,r0                 ;1172
00022e  9808              LDR      r0,[sp,#0x20]         ;1172
000230  f7fffffe          BL       setBLE_ConnTxData
                  |L38.564|
000234  2800              CMP      r0,#0                 ;1172
000236  d000              BEQ      |L38.570|
;;;1184           {
;;;1185               return SUCCESS_;
;;;1186           }
;;;1187           else
;;;1188           {
;;;1189               return FAIL_;
000238  2001              MOVS     r0,#1
                  |L38.570|
;;;1190           }
;;;1191       }
;;;1192   }
00023a  b009              ADD      sp,sp,#0x24
00023c  bdf0              POP      {r4-r7,pc}
;;;1193   
                          ENDP

00023e  0000              DCW      0x0000
                  |L38.576|
                          DCD      L2CAP_Buf
                  |L38.580|
                          DCD      size_ATTRIBUTE_SERVER
                  |L38.584|
                          DCD      ATTRIBUTE_SERVER
                  |L38.588|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L38.592|
                          DCD      aTT_MTU
                  |L38.596|
                          DCD      SPIBuffer

                          AREA ||i.Prcss_OPCODE_ATT_Read_By_Type_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Read_By_Type_Response PROC
;;;1194   
;;;1195   Uint8 Prcss_OPCODE_ATT_Read_By_Type_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;1196   {
;;;1197   #ifdef _HOST_CLIENT_
;;;1198       extern const ATTRIBUTE_CLIENT *ATT_SERVER_CLIENT[];
;;;1199       extern void ATT_Request(uint8_t connID, uint8_t AttOpcode, uint8_t *paramGroup,  uint8_t dataLength);
;;;1200       extern MBLK *mblk_cli_HDL_Srv[];
;;;1201       extern MBLK *mblk_cli_HDL_Charc[];
;;;1202   
;;;1203   
;;;1204   #endif  //(#ifdef _HOST_CLIENT_)
;;;1205       return SUCCESS_;
;;;1206   }
000002  4770              BX       lr
;;;1207   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Read_Multiple_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Read_Multiple_Request PROC
;;;1442   
;;;1443   Uint8 Prcss_OPCODE_ATT_Read_Multiple_Request(Uint8 connID)
000000  b508              PUSH     {r3,lr}
;;;1444   {
;;;1445       if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], 0, 0, ERR_CODE_ATT_REQUEST_NOT_SUPPORTED) == SUCCESS_)
000002  2106              MOVS     r1,#6
000004  9100              STR      r1,[sp,#0]
000006  4905              LDR      r1,|L40.28|
000008  2300              MOVS     r3,#0
00000a  7909              LDRB     r1,[r1,#4]  ; SPIBuffer
00000c  461a              MOV      r2,r3
00000e  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
000012  2800              CMP      r0,#0
000014  d000              BEQ      |L40.24|
;;;1446       {
;;;1447           return SUCCESS_;
;;;1448       }
;;;1449       else
;;;1450       {
;;;1451           return FAIL_;
000016  2001              MOVS     r0,#1
                  |L40.24|
;;;1452       }
;;;1453   }
000018  bd08              POP      {r3,pc}
;;;1454   
                          ENDP

00001a  0000              DCW      0x0000
                  |L40.28|
                          DCD      SPIBuffer

                          AREA ||i.Prcss_OPCODE_ATT_Read_Multiple_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Read_Multiple_Response PROC
;;;1455   
;;;1456   Uint8 Prcss_OPCODE_ATT_Read_Multiple_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;1457   {
;;;1458   #ifdef _HOST_CLIENT_
;;;1459   #endif  //(#ifdef _HOST_CLIENT_)
;;;1460       return SUCCESS_;
;;;1461   }
000002  4770              BX       lr
;;;1462   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Read_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Read_Request PROC
;;;1208   
;;;1209   Uint8 Prcss_OPCODE_ATT_Read_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1210   {
;;;1211       Uint8 Rsp_Error;
;;;1212       Uint8 i, idx;
;;;1213       Uint8 sizeRSP_PDUlgth;
;;;1214       MBLK *mblk;
;;;1215   
;;;1216       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;1217       i = 0;
;;;1218       do
;;;1219       {
;;;1220           if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_H])
000002  4942              LDR      r1,|L42.268|
000004  2001              MOVS     r0,#1                 ;1216
000006  798d              LDRB     r5,[r1,#6]
;;;1221           {
;;;1222               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L])
000008  794b              LDRB     r3,[r1,#5]
;;;1223               {
;;;1224                   Rsp_Error = 0;
;;;1225                   break;
;;;1226               }
;;;1227           }
;;;1228           i++;
;;;1229       }
;;;1230       while(i != size_ATTRIBUTE_SERVER);
00000a  4941              LDR      r1,|L42.272|
00000c  b082              SUB      sp,sp,#8              ;1210
00000e  780a              LDRB     r2,[r1,#0]
000010  2400              MOVS     r4,#0                 ;1217
                  |L42.18|
000012  4940              LDR      r1,|L42.276|
000014  00a6              LSLS     r6,r4,#2              ;1220
000016  5989              LDR      r1,[r1,r6]            ;1220
000018  780e              LDRB     r6,[r1,#0]            ;1220
00001a  42ae              CMP      r6,r5                 ;1220
00001c  d102              BNE      |L42.36|
00001e  7849              LDRB     r1,[r1,#1]            ;1222
000020  4299              CMP      r1,r3                 ;1222
000022  d005              BEQ      |L42.48|
                  |L42.36|
000024  1c64              ADDS     r4,r4,#1              ;1222
000026  b2e4              UXTB     r4,r4                 ;1228
000028  4294              CMP      r4,r2
00002a  d1f2              BNE      |L42.18|
;;;1231       if(Rsp_Error == 0)
00002c  2800              CMP      r0,#0
00002e  d110              BNE      |L42.82|
                  |L42.48|
;;;1232       {
;;;1233           ///*****Check permission**************************************************************************************************************//
;;;1234           ///***********************************************************************************************************************************//
;;;1235           Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Read(i);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Read
;;;1236       }
;;;1237       if(Rsp_Error == 0)
000036  2800              CMP      r0,#0
000038  d10b              BNE      |L42.82|
;;;1238       {
;;;1239           Rsp_Error = chkIfBLE_ATT_Chr_Acss_ByUser(i);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       chkIfBLE_ATT_Chr_Acss_ByUser
;;;1240           if(Rsp_Error != NO_)
000040  2800              CMP      r0,#0
000042  d011              BEQ      |L42.104|
;;;1241           {
;;;1242               //Rsp_Error = chkBLE_ATT_Chr_AcssRd_ByUser(*(ATTRIBUTE_SERVER_PARAM+i));
;;;1243               Rsp_Error = chkBLE_ATT_Chr_AcssRd_ByUser((Uint8 *)*(ATTRIBUTE_SERVER_PARAM+i));
000044  4834              LDR      r0,|L42.280|
000046  00a1              LSLS     r1,r4,#2
000048  5840              LDR      r0,[r0,r1]
00004a  f7fffffe          BL       chkBLE_ATT_Chr_AcssRd_ByUser
;;;1244           }
;;;1245       }
;;;1246       if(Rsp_Error != 0)
00004e  2800              CMP      r0,#0
000050  d00a              BEQ      |L42.104|
                  |L42.82|
;;;1247       {
;;;1248           if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_H], Rsp_Error) == SUCCESS_)
000052  9000              STR      r0,[sp,#0]
000054  4831              LDR      r0,|L42.284|
000056  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
000058  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
00005a  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
00005c  9802              LDR      r0,[sp,#8]
00005e  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
000062  2800              CMP      r0,#0
000064  d026              BEQ      |L42.180|
000066  e024              B        |L42.178|
                  |L42.104|
;;;1249           {
;;;1250               return SUCCESS_;
;;;1251           }
;;;1252           else
;;;1253           {
;;;1254               return FAIL_;
;;;1255           }
;;;1256       }
;;;1257       else    //Rsp_Error == 0
;;;1258       {
;;;1259           mblk = GetMsgBlk_L2_wSize(sizeof(mblk->Para.HSPF_Att_Read_Para.HCI_DataPkt_Data));
000068  2029              MOVS     r0,#0x29
00006a  f7fffffe          BL       GetMsgBlk_L2_wSize
00006e  0007              MOVS     r7,r0
;;;1260           if(mblk == (MBLK *)0)
000070  d01f              BEQ      |L42.178|
;;;1261           {
;;;1262               return FAIL_;
;;;1263           }
;;;1264   
;;;1265           mblk->Primitive = HSPF_ATT_READ;
000072  2092              MOVS     r0,#0x92
000074  7138              STRB     r0,[r7,#4]
;;;1266           mblk->Para.HSPF_Att_Read_Para.HCI_DataPkt_LthL = 3;
000076  2003              MOVS     r0,#3
000078  72b8              STRB     r0,[r7,#0xa]
;;;1267           mblk->Para.HSPF_Att_Read_Para.HCI_Conn_Hdl_L = connID;
00007a  9802              LDR      r0,[sp,#8]
00007c  7238              STRB     r0,[r7,#8]
;;;1268           mblk->Para.HSPF_Att_Read_Para.HCI_Conn_Hdl_H = i;
;;;1269           Knl_MemCpy(mblk->Para.HSPF_Att_Read_Para.HCI_DataPkt_Data, &SPIBuffer[TAB_BASIC_L2CAP_OPCODE], 3);
00007e  4927              LDR      r1,|L42.284|
000080  4638              MOV      r0,r7
000082  727c              STRB     r4,[r7,#9]            ;1268
000084  2203              MOVS     r2,#3
000086  1d09              ADDS     r1,r1,#4
000088  300b              ADDS     r0,r0,#0xb
00008a  f7fffffe          BL       Knl_MemCpy
;;;1270   
;;;1271           //SndMsgBlk(mblk, Q_2HOST);
;;;1272   
;;;1273           idx = 0;
00008e  2500              MOVS     r5,#0
;;;1274           sizeRSP_PDUlgth = 1;    //Tab Opcode
000090  2601              MOVS     r6,#1
;;;1275           Rsp_Error = ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)];
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
000098  1c81              ADDS     r1,r0,#2
00009a  00a0              LSLS     r0,r4,#2
00009c  4a1d              LDR      r2,|L42.276|
00009e  9000              STR      r0,[sp,#0]
0000a0  5810              LDR      r0,[r2,r0]
0000a2  5c41              LDRB     r1,[r0,r1]
;;;1276           Rsp_Error = getBLE_ATTRIBUTE_Value_DynmcLngth(i, Rsp_Error);
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       getBLE_ATTRIBUTE_Value_DynmcLngth
0000aa  4601              MOV      r1,r0
0000ac  4a1a              LDR      r2,|L42.280|
0000ae  481b              LDR      r0,|L42.284|
;;;1277           while(idx < Rsp_Error)
0000b0  e010              B        |L42.212|
                  |L42.178|
0000b2  2001              MOVS     r0,#1                 ;1262
                  |L42.180|
;;;1278           {
;;;1279               SPIBuffer[(TAB_ATTRIBUTE_VALUE+idx)] = *(*(ATTRIBUTE_SERVER_PARAM+i)+(TAB_ATTRIBUTE_PARAMETER_SERVER_VALUE+idx));
;;;1280               idx++;
;;;1281               sizeRSP_PDUlgth++;
;;;1282               if(sizeRSP_PDUlgth > (aTT_MTU[connID] - 1))
;;;1283               {
;;;1284                   break;
;;;1285               }
;;;1286           }
;;;1287           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_READ_RESPONSE;
;;;1288           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = sizeRSP_PDUlgth;
;;;1289           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
;;;1290           SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
;;;1291           SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
;;;1292           if(setBLE_ConnTxData(connID, SPIBuffer, (sizeRSP_PDUlgth+4)) == SUCCESS_)
;;;1293           {
;;;1294               SndMsgBlk(mblk, Q_2HOST);
;;;1295               return SUCCESS_;
;;;1296           }
;;;1297           else
;;;1298           {
;;;1299               FreeMsgBlk(mblk);
;;;1300               return FAIL_;
;;;1301           }
;;;1302       }
;;;1303   }
0000b4  bdfe              POP      {r1-r7,pc}
                  |L42.182|
0000b6  9b00              LDR      r3,[sp,#0]            ;1279
0000b8  1944              ADDS     r4,r0,r5              ;1279
0000ba  58d3              LDR      r3,[r2,r3]            ;1279
0000bc  1c76              ADDS     r6,r6,#1              ;1280
0000be  5d5b              LDRB     r3,[r3,r5]            ;1279
0000c0  7163              STRB     r3,[r4,#5]            ;1279
0000c2  4b17              LDR      r3,|L42.288|
0000c4  9c02              LDR      r4,[sp,#8]            ;1282
0000c6  1c6d              ADDS     r5,r5,#1              ;1279
0000c8  5d1b              LDRB     r3,[r3,r4]            ;1282
0000ca  b2f6              UXTB     r6,r6                 ;1281
0000cc  1e5b              SUBS     r3,r3,#1              ;1282
0000ce  b2ed              UXTB     r5,r5                 ;1280
0000d0  42b3              CMP      r3,r6                 ;1282
0000d2  db01              BLT      |L42.216|
                  |L42.212|
0000d4  428d              CMP      r5,r1                 ;1277
0000d6  d3ee              BCC      |L42.182|
                  |L42.216|
0000d8  210b              MOVS     r1,#0xb               ;1287
0000da  7101              STRB     r1,[r0,#4]            ;1287
0000dc  7006              STRB     r6,[r0,#0]            ;1288
0000de  2100              MOVS     r1,#0                 ;1289
0000e0  7041              STRB     r1,[r0,#1]            ;1289
0000e2  2204              MOVS     r2,#4                 ;1290
0000e4  7082              STRB     r2,[r0,#2]            ;1290
0000e6  70c1              STRB     r1,[r0,#3]            ;1291
0000e8  1d36              ADDS     r6,r6,#4              ;1291
0000ea  b2f2              UXTB     r2,r6                 ;1292
0000ec  490b              LDR      r1,|L42.284|
0000ee  9802              LDR      r0,[sp,#8]            ;1292
0000f0  f7fffffe          BL       setBLE_ConnTxData
0000f4  2800              CMP      r0,#0                 ;1292
0000f6  d003              BEQ      |L42.256|
0000f8  4638              MOV      r0,r7                 ;1299
0000fa  f7fffffe          BL       FreeMsgBlk
0000fe  e7d8              B        |L42.178|
                  |L42.256|
000100  2102              MOVS     r1,#2                 ;1294
000102  4638              MOV      r0,r7                 ;1294
000104  f7fffffe          BL       SndMsgBlk
000108  2000              MOVS     r0,#0                 ;1295
00010a  bdfe              POP      {r1-r7,pc}
;;;1304   
                          ENDP

                  |L42.268|
                          DCD      L2CAP_Buf
                  |L42.272|
                          DCD      size_ATTRIBUTE_SERVER
                  |L42.276|
                          DCD      ATTRIBUTE_SERVER
                  |L42.280|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L42.284|
                          DCD      SPIBuffer
                  |L42.288|
                          DCD      aTT_MTU

                          AREA ||i.Prcss_OPCODE_ATT_Read_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Read_Response PROC
;;;1305   
;;;1306   Uint8 Prcss_OPCODE_ATT_Read_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;1307   {
;;;1308   #ifdef _HOST_CLIENT_
;;;1309   #endif  //(#ifdef _HOST_CLIENT_)
;;;1310       return SUCCESS_;
;;;1311   }
000002  4770              BX       lr
;;;1312   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Read_by_Group_Type_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Read_by_Group_Type_Request PROC
;;;1463   
;;;1464   Uint8 Prcss_OPCODE_ATT_Read_by_Group_Type_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1465   {
;;;1466       Uint8 Rsp_Error;
;;;1467   
;;;1468       Uint8 size_each_Att_Data;
;;;1469       Uint8 Handle_Att_RPT_S;     //Start
;;;1470       Uint8 Handle_Att_RPT_E;     //End
;;;1471       Uint8 uuid[16];
;;;1472   
;;;1473       Uint8 size_temp, size_uuid;
;;;1474       Uint8 sizeRSP_PDUlgth;
;;;1475       Uint8 i, idx;                    //temp
;;;1476   
;;;1477       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;1478       if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000002  49ad              LDR      r1,|L44.696|
000004  b088              SUB      sp,sp,#0x20           ;1465
000006  798b              LDRB     r3,[r1,#6]  ; L2CAP_Buf
000008  7a08              LDRB     r0,[r1,#8]  ; L2CAP_Buf
00000a  460e              MOV      r6,r1
;;;1479       {
;;;1480           if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_L])
00000c  9000              STR      r0,[sp,#0]
00000e  7972              LDRB     r2,[r6,#5]
000010  79f6              LDRB     r6,[r6,#7]
000012  2501              MOVS     r5,#1                 ;1477
000014  46b4              MOV      r12,r6
000016  4283              CMP      r3,r0                 ;1478
000018  d102              BNE      |L44.32|
00001a  4562              CMP      r2,r12
00001c  d902              BLS      |L44.36|
00001e  e002              B        |L44.38|
                  |L44.32|
;;;1481           {
;;;1482               Rsp_Error = 0;
;;;1483           }
;;;1484       }
;;;1485       else if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] < L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000020  4283              CMP      r3,r0
000022  d200              BCS      |L44.38|
                  |L44.36|
;;;1486       {
;;;1487           Rsp_Error = 0;
000024  2500              MOVS     r5,#0
                  |L44.38|
;;;1488       }
;;;1489       if((L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L] == 0)&&(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H] == 0))
000026  2a00              CMP      r2,#0
000028  d101              BNE      |L44.46|
00002a  2b00              CMP      r3,#0
00002c  d002              BEQ      |L44.52|
                  |L44.46|
;;;1490       {
;;;1491           Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;1492       }
;;;1493       if(Rsp_Error == 0)
00002e  2d00              CMP      r5,#0
000030  d002              BEQ      |L44.56|
000032  e08e              B        |L44.338|
                  |L44.52|
000034  2501              MOVS     r5,#1                 ;1491
000036  e08c              B        |L44.338|
                  |L44.56|
;;;1494       {
;;;1495           Rsp_Error = ERR_CODE_ATT_ATTRIBUTE_NOT_FOUND;
;;;1496           i = 0;
000038  49a0              LDR      r1,|L44.700|
00003a  250a              MOVS     r5,#0xa               ;1495
;;;1497           do
;;;1498           {
;;;1499               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_H])
;;;1500               {
;;;1501                   if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] >= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_START_L])
;;;1502                   {
;;;1503                       Handle_Att_RPT_S = i;
;;;1504                       break;
;;;1505                   }
;;;1506               }
;;;1507               i++;
;;;1508           }
;;;1509           while(i != size_ATTRIBUTE_SERVER);
00003c  7809              LDRB     r1,[r1,#0]
00003e  2000              MOVS     r0,#0                 ;1496
                  |L44.64|
000040  4e9f              LDR      r6,|L44.704|
000042  0087              LSLS     r7,r0,#2              ;1499
000044  59f7              LDR      r7,[r6,r7]            ;1499
000046  783e              LDRB     r6,[r7,#0]            ;1499
000048  429e              CMP      r6,r3                 ;1499
00004a  d304              BCC      |L44.86|
00004c  787e              LDRB     r6,[r7,#1]            ;1501
00004e  4296              CMP      r6,r2                 ;1501
000050  d301              BCC      |L44.86|
000052  4604              MOV      r4,r0                 ;1503
000054  e003              B        |L44.94|
                  |L44.86|
000056  1c40              ADDS     r0,r0,#1              ;1504
000058  b2c0              UXTB     r0,r0                 ;1507
00005a  4288              CMP      r0,r1
00005c  d1f0              BNE      |L44.64|
                  |L44.94|
;;;1510           if(i != size_ATTRIBUTE_SERVER)
00005e  4288              CMP      r0,r1
000060  d010              BEQ      |L44.132|
000062  4f97              LDR      r7,|L44.704|
                  |L44.100|
;;;1511           {
;;;1512               do
;;;1513               {
;;;1514                   if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_H])
000064  0082              LSLS     r2,r0,#2
000066  58ba              LDR      r2,[r7,r2]
000068  9b00              LDR      r3,[sp,#0]
00006a  7816              LDRB     r6,[r2,#0]
00006c  429e              CMP      r6,r3
00006e  d809              BHI      |L44.132|
;;;1515                   {
;;;1516                       if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] <= L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_END_L])
000070  7853              LDRB     r3,[r2,#1]
000072  4563              CMP      r3,r12
000074  d806              BHI      |L44.132|
;;;1517                       {
;;;1518                           Handle_Att_RPT_E = i;
;;;1519                           Rsp_Error = 0;
000076  9005              STR      r0,[sp,#0x14]
000078  1c40              ADDS     r0,r0,#1
00007a  2500              MOVS     r5,#0
;;;1520                       }
;;;1521                       else
;;;1522                       {
;;;1523                           break;
;;;1524                       }
;;;1525                   }
;;;1526                   else
;;;1527                   {
;;;1528                       break;
;;;1529                   }
;;;1530                   i++;
00007c  b2c0              UXTB     r0,r0
;;;1531               }
;;;1532               while(i != size_ATTRIBUTE_SERVER);
00007e  4288              CMP      r0,r1
000080  d1f0              BNE      |L44.100|
000082  e001              B        |L44.136|
                  |L44.132|
;;;1533           }
;;;1534       }
;;;1535       if(Rsp_Error == 0)
000084  2d00              CMP      r5,#0
000086  d164              BNE      |L44.338|
                  |L44.136|
;;;1536       {
;;;1537           if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] == (5+2))        //2: 16Bit UUID
000088  4b8b              LDR      r3,|L44.696|
00008a  7818              LDRB     r0,[r3,#0]  ; L2CAP_Buf
00008c  2807              CMP      r0,#7
00008e  d003              BEQ      |L44.152|
;;;1538           {
;;;1539               size_uuid = 2;
;;;1540           }
;;;1541           else if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] == (5+16))  //128bit UUID
000090  2815              CMP      r0,#0x15
000092  d003              BEQ      |L44.156|
;;;1542           {
;;;1543               size_uuid = 16;
;;;1544           }
;;;1545           else
;;;1546           {
;;;1547               Rsp_Error = ERR_CODE_ATT_INVALID_PDU;
000094  2504              MOVS     r5,#4
000096  e05c              B        |L44.338|
                  |L44.152|
000098  2202              MOVS     r2,#2                 ;1539
00009a  e000              B        |L44.158|
                  |L44.156|
00009c  2210              MOVS     r2,#0x10              ;1543
                  |L44.158|
;;;1548           }
;;;1549       }
;;;1550       if(Rsp_Error == 0)
;;;1551       {
;;;1552           Rsp_Error = ERR_CODE_ATT_UNSUPPORTED_GROUP_TYPE;
00009e  2510              MOVS     r5,#0x10
;;;1553           i = 0;
0000a0  2000              MOVS     r0,#0
;;;1554           idx = size_uuid;
0000a2  4611              MOV      r1,r2
0000a4  af01              ADD      r7,sp,#4              ;1471
0000a6  461e              MOV      r6,r3                 ;1478
;;;1555           while(i!=size_uuid)
0000a8  e006              B        |L44.184|
                  |L44.170|
0000aa  1e49              SUBS     r1,r1,#1
;;;1556           {
;;;1557               idx--;
;;;1558               uuid[idx] = L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_TYPE_L+i];
0000ac  1833              ADDS     r3,r6,r0
0000ae  b2c9              UXTB     r1,r1                 ;1557
0000b0  7a5b              LDRB     r3,[r3,#9]
0000b2  1c40              ADDS     r0,r0,#1
0000b4  547b              STRB     r3,[r7,r1]
;;;1559               i++;
0000b6  b2c0              UXTB     r0,r0
                  |L44.184|
0000b8  4290              CMP      r0,r2                 ;1555
0000ba  d1f6              BNE      |L44.170|
;;;1560           }
;;;1561           if(size_uuid == 2)                                          //2: 16Bit UUID
0000bc  2a02              CMP      r2,#2
;;;1562           {
;;;1563               if((uuid[0]==GATT_DECLARATIONS)&&(uuid[1]<=GATT_DECLARATIONS_SECONDARY_SERVICE))
;;;1564               {
;;;1565                   Rsp_Error = 0;
;;;1566               }
;;;1567           }
;;;1568           else                                                        //128Bit UUID
;;;1569           {
;;;1570               if((uuid[2]==GATT_DECLARATIONS)&&(uuid[3]<=GATT_DECLARATIONS_SECONDARY_SERVICE))
0000be  4668              MOV      r0,sp
0000c0  d003              BEQ      |L44.202|
0000c2  7986              LDRB     r6,[r0,#6]
0000c4  2e28              CMP      r6,#0x28
0000c6  d008              BEQ      |L44.218|
0000c8  e01d              B        |L44.262|
                  |L44.202|
0000ca  7900              LDRB     r0,[r0,#4]            ;1563
0000cc  2828              CMP      r0,#0x28              ;1563
0000ce  d11a              BNE      |L44.262|
0000d0  4668              MOV      r0,sp                 ;1563
0000d2  7940              LDRB     r0,[r0,#5]            ;1563
0000d4  2801              CMP      r0,#1                 ;1563
0000d6  d91c              BLS      |L44.274|
0000d8  e015              B        |L44.262|
                  |L44.218|
0000da  79c3              LDRB     r3,[r0,#7]
0000dc  2b01              CMP      r3,#1
0000de  d812              BHI      |L44.262|
;;;1571               {
;;;1572                   if((uuid[0] == 0)&&(uuid[1] == 0))                  //UUID_BLUETOOTH_BASE[0] & UUID_BLUETOOTH_BASE[1] ==0
0000e0  7900              LDRB     r0,[r0,#4]
0000e2  2800              CMP      r0,#0
0000e4  d10f              BNE      |L44.262|
0000e6  4668              MOV      r0,sp
0000e8  7940              LDRB     r0,[r0,#5]
0000ea  2800              CMP      r0,#0
0000ec  d10b              BNE      |L44.262|
;;;1573                   {
;;;1574                       for(i=4; i<16; i++)
0000ee  2004              MOVS     r0,#4
                  |L44.240|
;;;1575                       {
;;;1576                           if(uuid[i] != UUID_BLUETOOTH_BASE[i])
0000f0  4974              LDR      r1,|L44.708|
0000f2  5c3a              LDRB     r2,[r7,r0]
0000f4  5c09              LDRB     r1,[r1,r0]
0000f6  428a              CMP      r2,r1
0000f8  d103              BNE      |L44.258|
0000fa  1c40              ADDS     r0,r0,#1
0000fc  b2c0              UXTB     r0,r0                 ;1574
0000fe  2810              CMP      r0,#0x10              ;1574
000100  d3f6              BCC      |L44.240|
                  |L44.258|
;;;1577                               break;
;;;1578                       }
;;;1579                       if(i==16)
000102  2810              CMP      r0,#0x10
000104  d002              BEQ      |L44.268|
                  |L44.262|
;;;1580                       {
;;;1581                           Rsp_Error = 0;
;;;1582                           uuid[0] = uuid[2];
;;;1583                           uuid[1] = uuid[3];
;;;1584                       }
;;;1585                   }
;;;1586               }
;;;1587           }
;;;1588       }
;;;1589       if(Rsp_Error == 0)
000106  2d00              CMP      r5,#0
000108  d003              BEQ      |L44.274|
00010a  e022              B        |L44.338|
                  |L44.268|
00010c  4668              MOV      r0,sp                 ;1582
00010e  7106              STRB     r6,[r0,#4]            ;1582
000110  7143              STRB     r3,[r0,#5]            ;1583
                  |L44.274|
;;;1590       {
;;;1591           Rsp_Error = ERR_CODE_ATT_ATTRIBUTE_NOT_FOUND;
000112  250a              MOVS     r5,#0xa
;;;1592           while(Handle_Att_RPT_S <= Handle_Att_RPT_E)
000114  e018              B        |L44.328|
                  |L44.278|
;;;1593           {
;;;1594               if(getBLE_ATTRIBUTE_TYPE_Size(Handle_Att_RPT_S) == 2)
000116  4620              MOV      r0,r4
000118  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
00011c  2802              CMP      r0,#2
00011e  d111              BNE      |L44.324|
;;;1595               {
;;;1596                   if((uuid[0] == ATTRIBUTE_SERVER[Handle_Att_RPT_S][(TAB_ATTRIBUTE_SERVER_TYPE_H)])&&(uuid[1] == ATTRIBUTE_SERVER[Handle_Att_RPT_S][(TAB_ATTRIBUTE_SERVER_TYPE_L)]))
000120  4668              MOV      r0,sp
000122  7901              LDRB     r1,[r0,#4]
000124  4866              LDR      r0,|L44.704|
000126  00a2              LSLS     r2,r4,#2
000128  5880              LDR      r0,[r0,r2]
00012a  7882              LDRB     r2,[r0,#2]
00012c  4291              CMP      r1,r2
00012e  d109              BNE      |L44.324|
000130  4669              MOV      r1,sp
000132  7949              LDRB     r1,[r1,#5]
000134  78c0              LDRB     r0,[r0,#3]
000136  4281              CMP      r1,r0
000138  d104              BNE      |L44.324|
;;;1597                   {
;;;1598                       Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Read(Handle_Att_RPT_S);
00013a  4620              MOV      r0,r4
00013c  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Read
000140  4605              MOV      r5,r0
;;;1599                       break;
000142  e004              B        |L44.334|
                  |L44.324|
000144  1c64              ADDS     r4,r4,#1
;;;1600                   }
;;;1601               }
;;;1602               Handle_Att_RPT_S++;
000146  b2e4              UXTB     r4,r4
                  |L44.328|
000148  9805              LDR      r0,[sp,#0x14]         ;1592
00014a  4284              CMP      r4,r0                 ;1592
00014c  d9e3              BLS      |L44.278|
                  |L44.334|
;;;1603           }
;;;1604   
;;;1605       }
;;;1606       if(Rsp_Error != 0)
00014e  2d00              CMP      r5,#0
000150  d008              BEQ      |L44.356|
                  |L44.338|
;;;1607       {
;;;1608           if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_START_H], Rsp_Error) == SUCCESS_)
000152  485d              LDR      r0,|L44.712|
000154  9500              STR      r5,[sp,#0]
000156  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
000158  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
00015a  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
00015c  9808              LDR      r0,[sp,#0x20]
00015e  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
000162  e0a3              B        |L44.684|
                  |L44.356|
;;;1609           {
;;;1610               return SUCCESS_;
;;;1611           }
;;;1612           else
;;;1613           {
;;;1614               return FAIL_;
;;;1615           }
;;;1616       }
;;;1617       else    //Rsp_Error == 0
;;;1618       {
;;;1619           //generate response to client
;;;1620           sizeRSP_PDUlgth = 2;        //opcode & length
000164  2602              MOVS     r6,#2
;;;1621           idx = (TAB_ATTRIBUTE_LENGTH+1);
000166  2506              MOVS     r5,#6
;;;1622           while(Handle_Att_RPT_S <= Handle_Att_RPT_E)
000168  e08d              B        |L44.646|
                  |L44.362|
;;;1623           {
;;;1624               if(getBLE_ATTRIBUTE_TYPE_Size(Handle_Att_RPT_S) == 2)   //16bit UUID
00016a  4620              MOV      r0,r4
00016c  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
000170  2802              CMP      r0,#2
000172  d17d              BNE      |L44.624|
;;;1625               {
;;;1626                   if((ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_TYPE_H] == uuid[0])&&(ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_TYPE_L] == uuid[1]))
000174  00a0              LSLS     r0,r4,#2
000176  4f52              LDR      r7,|L44.704|
000178  9000              STR      r0,[sp,#0]
00017a  5838              LDR      r0,[r7,r0]
00017c  466a              MOV      r2,sp
00017e  7881              LDRB     r1,[r0,#2]
000180  7912              LDRB     r2,[r2,#4]
000182  4291              CMP      r1,r2
000184  d17d              BNE      |L44.642|
000186  4669              MOV      r1,sp
000188  78c0              LDRB     r0,[r0,#3]
00018a  7949              LDRB     r1,[r1,#5]
00018c  4288              CMP      r0,r1
00018e  d178              BNE      |L44.642|
;;;1627                   {
;;;1628                       Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Read(Handle_Att_RPT_S);
000190  4620              MOV      r0,r4
000192  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Read
;;;1629                       if(Rsp_Error != 0)
000196  2800              CMP      r0,#0
000198  d179              BNE      |L44.654|
;;;1630                       {
;;;1631                           break;
;;;1632                       }
;;;1633                       else
;;;1634                       {
;;;1635                           size_each_Att_Data = (ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(Handle_Att_RPT_S)] + 4); //4: 2Bytes Attribute Start Handle & 2Bytes Attribute End Handle
00019a  4620              MOV      r0,r4
00019c  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
0001a0  9900              LDR      r1,[sp,#0]
0001a2  1c80              ADDS     r0,r0,#2
0001a4  5879              LDR      r1,[r7,r1]
0001a6  5c08              LDRB     r0,[r1,r0]
0001a8  1d00              ADDS     r0,r0,#4
0001aa  b2c0              UXTB     r0,r0
;;;1636                           if(idx != (TAB_ATTRIBUTE_LENGTH+1))
0001ac  2d06              CMP      r5,#6
0001ae  d003              BEQ      |L44.440|
;;;1637                           {
;;;1638                               if(size_each_Att_Data != SPIBuffer[TAB_ATTRIBUTE_LENGTH])
0001b0  4a45              LDR      r2,|L44.712|
0001b2  7952              LDRB     r2,[r2,#5]  ; SPIBuffer
0001b4  4282              CMP      r2,r0
0001b6  d16a              BNE      |L44.654|
                  |L44.440|
;;;1639                               {
;;;1640                                   break;
;;;1641                               }
;;;1642                           }
;;;1643                           if(idx < (aTT_MTU[connID]+4-size_each_Att_Data))
0001b8  4b44              LDR      r3,|L44.716|
0001ba  9a08              LDR      r2,[sp,#0x20]
0001bc  5c9a              LDRB     r2,[r3,r2]
0001be  1a12              SUBS     r2,r2,r0
0001c0  1d12              ADDS     r2,r2,#4
0001c2  42aa              CMP      r2,r5
0001c4  dd63              BLE      |L44.654|
;;;1644                           {
;;;1645                               size_temp = size_each_Att_Data;
0001c6  4684              MOV      r12,r0
;;;1646                               SPIBuffer[idx] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_L];
0001c8  4a3f              LDR      r2,|L44.712|
0001ca  7848              LDRB     r0,[r1,#1]
0001cc  5550              STRB     r0,[r2,r5]
0001ce  1c6d              ADDS     r5,r5,#1
;;;1647                               idx++;
0001d0  b2e8              UXTB     r0,r5
;;;1648                               SPIBuffer[idx] = ATTRIBUTE_SERVER[Handle_Att_RPT_S][TAB_ATTRIBUTE_SERVER_HANDLE_H];
0001d2  7809              LDRB     r1,[r1,#0]
0001d4  5411              STRB     r1,[r2,r0]
0001d6  1c40              ADDS     r0,r0,#1
;;;1649                               idx++;
0001d8  b2c1              UXTB     r1,r0
0001da  1cb6              ADDS     r6,r6,#2
;;;1650                               sizeRSP_PDUlgth = (sizeRSP_PDUlgth+2);
0001dc  b2f0              UXTB     r0,r6
;;;1651                               if(Handle_Att_RPT_S != (size_ATTRIBUTE_SERVER-1))
0001de  9006              STR      r0,[sp,#0x18]
0001e0  4836              LDR      r0,|L44.700|
0001e2  7803              LDRB     r3,[r0,#0]  ; size_ATTRIBUTE_SERVER
0001e4  1e5b              SUBS     r3,r3,#1
0001e6  429c              CMP      r4,r3
0001e8  d016              BEQ      |L44.536|
0001ea  466a              MOV      r2,sp                 ;1563
;;;1652                               {
;;;1653                                   i = Handle_Att_RPT_S+1;
0001ec  1c60              ADDS     r0,r4,#1
0001ee  b2c0              UXTB     r0,r0
0001f0  7916              LDRB     r6,[r2,#4]            ;1563
0001f2  7955              LDRB     r5,[r2,#5]            ;1563
;;;1654                                   while(i < (size_ATTRIBUTE_SERVER-1))
0001f4  e00d              B        |L44.530|
                  |L44.502|
;;;1655                                   {
;;;1656                                       if((ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_TYPE_H] == uuid[0])&&(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_TYPE_L] == uuid[1]))
0001f6  4a32              LDR      r2,|L44.704|
0001f8  0087              LSLS     r7,r0,#2
0001fa  59d2              LDR      r2,[r2,r7]
0001fc  7897              LDRB     r7,[r2,#2]
0001fe  42b7              CMP      r7,r6
000200  d105              BNE      |L44.526|
000202  78d2              LDRB     r2,[r2,#3]
000204  42aa              CMP      r2,r5
000206  d102              BNE      |L44.526|
000208  1e40              SUBS     r0,r0,#1
;;;1657                                       {
;;;1658                                           i = i-1;
00020a  b2c0              UXTB     r0,r0
;;;1659                                           break;
00020c  e005              B        |L44.538|
                  |L44.526|
00020e  1c40              ADDS     r0,r0,#1
;;;1660                                       }
;;;1661                                       i++;
000210  b2c0              UXTB     r0,r0
                  |L44.530|
000212  4298              CMP      r0,r3                 ;1654
000214  dbef              BLT      |L44.502|
000216  e000              B        |L44.538|
                  |L44.536|
;;;1662                                   }
;;;1663                               }
;;;1664                               else
;;;1665                               {
;;;1666                                   i = Handle_Att_RPT_S;
000218  4620              MOV      r0,r4
                  |L44.538|
;;;1667                               }
;;;1668                               SPIBuffer[idx] = ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L];
00021a  4a29              LDR      r2,|L44.704|
00021c  0083              LSLS     r3,r0,#2
00021e  58d3              LDR      r3,[r2,r3]
000220  4a29              LDR      r2,|L44.712|
000222  785d              LDRB     r5,[r3,#1]
000224  5455              STRB     r5,[r2,r1]
000226  1c49              ADDS     r1,r1,#1
;;;1669                               idx++;
000228  b2c9              UXTB     r1,r1
;;;1670                               SPIBuffer[idx] = ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H];
00022a  781b              LDRB     r3,[r3,#0]
00022c  5453              STRB     r3,[r2,r1]
00022e  1c49              ADDS     r1,r1,#1
;;;1671                               idx++;
000230  b2cd              UXTB     r5,r1
;;;1672                               sizeRSP_PDUlgth = (sizeRSP_PDUlgth+2);
000232  9906              LDR      r1,[sp,#0x18]
000234  1c89              ADDS     r1,r1,#2
000236  b2ce              UXTB     r6,r1
;;;1673                               size_temp = (size_temp-4);  //4: 2Bytes Attribute Start Handle & 2Bytes Attribute End Handle
000238  4661              MOV      r1,r12
00023a  1f09              SUBS     r1,r1,#4
00023c  b2cb              UXTB     r3,r1
;;;1674                               size_each_Att_Data = 0;
00023e  2100              MOVS     r1,#0
;;;1675                               while(size_temp != 0)
000240  e00d              B        |L44.606|
                  |L44.578|
;;;1676                               {
;;;1677                                   SPIBuffer[idx] = *(*(ATTRIBUTE_SERVER_PARAM+Handle_Att_RPT_S)+(TAB_ATTRIBUTE_PARAMETER_SERVER_VALUE+size_each_Att_Data));
000242  4f23              LDR      r7,|L44.720|
000244  9a00              LDR      r2,[sp,#0]
;;;1678                                   idx++;
000246  1c76              ADDS     r6,r6,#1
000248  58ba              LDR      r2,[r7,r2]            ;1677
;;;1679                                   sizeRSP_PDUlgth++;
00024a  b2f6              UXTB     r6,r6
00024c  5c57              LDRB     r7,[r2,r1]            ;1677
00024e  4a1e              LDR      r2,|L44.712|
000250  1c49              ADDS     r1,r1,#1
000252  5557              STRB     r7,[r2,r5]            ;1677
000254  1c6d              ADDS     r5,r5,#1              ;1677
;;;1680                                   size_each_Att_Data++;
000256  1e5b              SUBS     r3,r3,#1
000258  b2ed              UXTB     r5,r5                 ;1678
00025a  b2c9              UXTB     r1,r1
;;;1681                                   size_temp--;
00025c  b2db              UXTB     r3,r3
                  |L44.606|
00025e  2b00              CMP      r3,#0                 ;1675
000260  d1ef              BNE      |L44.578|
;;;1682                               }
;;;1683                               size_each_Att_Data = i;
000262  4607              MOV      r7,r0
;;;1684                               i = Handle_Att_RPT_S;
000264  4620              MOV      r0,r4
;;;1685                               SPIBuffer[TAB_ATTRIBUTE_LENGTH] = (ATTRIBUTE_SERVER[(i)][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)]) + 4;    //4: 2Bytes Attribute Start Handle & 2Bytes Attribute End Handle
000266  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
00026a  4a15              LDR      r2,|L44.704|
00026c  9900              LDR      r1,[sp,#0]
00026e  e001              B        |L44.628|
                  |L44.624|
000270  e007              B        |L44.642|
000272  e00c              B        |L44.654|
                  |L44.628|
000274  5851              LDR      r1,[r2,r1]
000276  1c80              ADDS     r0,r0,#2
000278  5c08              LDRB     r0,[r1,r0]
00027a  4913              LDR      r1,|L44.712|
00027c  1d00              ADDS     r0,r0,#4
00027e  7148              STRB     r0,[r1,#5]
;;;1686                               Handle_Att_RPT_S = size_each_Att_Data;
000280  463c              MOV      r4,r7
                  |L44.642|
000282  1c64              ADDS     r4,r4,#1
;;;1687                           }
;;;1688                           else
;;;1689                           {
;;;1690                               break;
;;;1691                           }
;;;1692                       }
;;;1693                   }
;;;1694               }
;;;1695               Handle_Att_RPT_S++;
000284  b2e4              UXTB     r4,r4
                  |L44.646|
000286  9805              LDR      r0,[sp,#0x14]         ;1622
000288  4284              CMP      r4,r0                 ;1622
00028a  d800              BHI      |L44.654|
00028c  e76d              B        |L44.362|
                  |L44.654|
;;;1696           }
;;;1697           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_READ_BY_GROUP_TYPE_RESPONSE;
00028e  480e              LDR      r0,|L44.712|
000290  2111              MOVS     r1,#0x11
000292  7101              STRB     r1,[r0,#4]
;;;1698           //SPIBuffer[TAB_ATTRIBUTE_LENGTH] = (ATTRIBUTE_SERVER[(i)][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)]) + 4;    //4: 2Bytes Attribute Start Handle & 2Bytes Attribute End Handle
;;;1699           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = sizeRSP_PDUlgth;
000294  7006              STRB     r6,[r0,#0]
;;;1700           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
000296  2100              MOVS     r1,#0
000298  7041              STRB     r1,[r0,#1]
;;;1701           SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
00029a  2204              MOVS     r2,#4
00029c  7082              STRB     r2,[r0,#2]
;;;1702           SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
00029e  70c1              STRB     r1,[r0,#3]
0002a0  1d36              ADDS     r6,r6,#4
;;;1703   
;;;1704           if(setBLE_ConnTxData(connID, SPIBuffer, (sizeRSP_PDUlgth+4)) == SUCCESS_)
0002a2  4601              MOV      r1,r0
0002a4  b2f2              UXTB     r2,r6
0002a6  9808              LDR      r0,[sp,#0x20]
0002a8  f7fffffe          BL       setBLE_ConnTxData
                  |L44.684|
0002ac  2800              CMP      r0,#0
0002ae  d000              BEQ      |L44.690|
;;;1705           {
;;;1706               return SUCCESS_;
;;;1707           }
;;;1708           else
;;;1709           {
;;;1710               return FAIL_;
0002b0  2001              MOVS     r0,#1
                  |L44.690|
;;;1711           }
;;;1712       }
;;;1713   }
0002b2  b009              ADD      sp,sp,#0x24
0002b4  bdf0              POP      {r4-r7,pc}
;;;1714   
                          ENDP

0002b6  0000              DCW      0x0000
                  |L44.696|
                          DCD      L2CAP_Buf
                  |L44.700|
                          DCD      size_ATTRIBUTE_SERVER
                  |L44.704|
                          DCD      ATTRIBUTE_SERVER
                  |L44.708|
                          DCD      UUID_BLUETOOTH_BASE
                  |L44.712|
                          DCD      SPIBuffer
                  |L44.716|
                          DCD      aTT_MTU
                  |L44.720|
                          DCD      ATTRIBUTE_SERVER_PARAM

                          AREA ||i.Prcss_OPCODE_ATT_Read_by_Group_Type_Response||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Read_by_Group_Type_Response PROC
;;;1715   
;;;1716   Uint8 Prcss_OPCODE_ATT_Read_by_Group_Type_Response(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;1717   {
;;;1718   #ifdef _HOST_CLIENT_
;;;1719   #define LEN_GRP_RBGT_UUID       6
;;;1720   #define LEN_GRP_RBGT_UUID128    LEN_GRP_RBGT_UUID+(16-2)
;;;1721       //Uint8 Rsp_Error;
;;;1722       Uint8 i, j;
;;;1723       MBLK *mblk;
;;;1724       ATT_Rsp_RbGT *GrpRbGT;
;;;1725       ATT_Rsp_RbGT_128 *GrpRbGT_128;
;;;1726   
;;;1727       extern const ATTRIBUTE_CLIENT *ATT_SERVER_CLIENT[];
;;;1728       extern void ATT_Request(uint8_t connID, uint8_t AttOpcode, uint8_t *paramGroup,  uint8_t dataLength);
;;;1729       extern MBLK *mblk_cli_HDL_Srv[];
;;;1730       extern MBLK *mblk_cli_HDL_Charc[];
;;;1731   
;;;1732       mblk = GetMsgBlk();
;;;1733   
;;;1734       mblk->Primitive = MHS_EVENT_NULL;
;;;1735       j = 0;
;;;1736       i = TAB_ATTRIBUTE_HANDLE_START_H;
;;;1737       if(L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_LENGTH]==LEN_GRP_RBGT_UUID)
;;;1738       {
;;;1739           while(i<=L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L])
;;;1740           {
;;;1741               GrpRbGT = (ATT_Rsp_RbGT *)&mblk->Para.Data[j];
;;;1742               Knl_MemCpy((Uint8 *)&GrpRbGT->HDL_start, &L2CAP_Buf.DataBuf[i], 2);
;;;1743               i+=2;
;;;1744               Knl_MemCpy((Uint8 *)&GrpRbGT->HDL_end, &L2CAP_Buf.DataBuf[i], 2);
;;;1745               i+=2;
;;;1746               Knl_MemCpy((Uint8 *)&GrpRbGT->UUID[0], &L2CAP_Buf.DataBuf[i], 2);
;;;1747               i+=2;
;;;1748               j+=(sizeof(ATT_Rsp_RbGT));
;;;1749           }
;;;1750       }
;;;1751       else
;;;1752       {
;;;1753           while(i<=L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L])
;;;1754           {
;;;1755               GrpRbGT_128 = (ATT_Rsp_RbGT_128 *)&mblk->Para.Data[j];
;;;1756               Knl_MemCpy((Uint8 *)&GrpRbGT_128->HDL_start, &L2CAP_Buf.DataBuf[i], 2);
;;;1757               i+=2;
;;;1758               Knl_MemCpy((Uint8 *)&GrpRbGT_128->HDL_end, &L2CAP_Buf.DataBuf[i], 2);
;;;1759               i+=2;
;;;1760               Knl_MemCpy((Uint8 *)&GrpRbGT_128->UUID[0], &L2CAP_Buf.DataBuf[i], 16);
;;;1761               i+=16;
;;;1762               j+=(sizeof(ATT_Rsp_RbGT_128));
;;;1763           }
;;;1764       }
;;;1765       //mblk_cli_HDL_Srv[connID] = mblk;
;;;1766   
;;;1767   
;;;1768       //status_cli_HDL_Srv = SPIBuffer+1;
;;;1769       //status_cli_HDL_Charc = HS_ATT_CLI_CHR_S0;
;;;1770   
;;;1771       //ATT_Request(connID, OPCODE_ATT_READ_BY_GROUP_TYPE_REQUEST, (Uint8 *)ATT_READ_BY_GROUP_TYPE_REQUEST_BGN, (sizeof(ATT_READ_BY_GROUP_TYPE_REQUEST_BGN)));
;;;1772   #endif  //(#ifdef _HOST_CLIENT_)
;;;1773   
;;;1774       return SUCCESS_;
;;;1775   }
000002  4770              BX       lr
;;;1776   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Signed_Write_Command||, CODE, READONLY, ALIGN=1

                  Prcss_OPCODE_ATT_Signed_Write_Command PROC
;;;2739   
;;;2740   Uint8 Prcss_OPCODE_ATT_Signed_Write_Command(Uint8 connID)
000000  2000              MOVS     r0,#0
;;;2741   {
;;;2742       return SUCCESS_;
;;;2743   }
000002  4770              BX       lr
;;;2744   
                          ENDP


                          AREA ||i.Prcss_OPCODE_ATT_Write_Command||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Write_Command PROC
;;;2557   
;;;2558   Uint8 Prcss_OPCODE_ATT_Write_Command(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;2559   {
;;;2560       Uint8 Rsp_Error;
;;;2561       Uint8 i, idx;
;;;2562       Uint8 *pATT_param;
;;;2563   #ifdef _SMP_ON_
;;;2564   #ifdef _BOND_ON_
;;;2565       Uint8 *tmp;
;;;2566       extern Uint8* cmd_FlashBond(uint8_t opcode, uint8_t * para_data);
;;;2567   #endif
;;;2568   #endif
;;;2569       extern void (* const ATT_Write[])(uint8_t connID, uint8_t length, uint8_t *srcCMD);
;;;2570   
;;;2571       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
000002  2001              MOVS     r0,#1
000004  4684              MOV      r12,r0
;;;2572       i = 0;
;;;2573       do
;;;2574       {
;;;2575           if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_H])
000006  4d7e              LDR      r5,|L47.512|
;;;2576           {
;;;2577               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L])
;;;2578               {
;;;2579                   Rsp_Error = 0;
;;;2580                   break;
;;;2581               }
;;;2582           }
;;;2583           i++;
;;;2584       }
;;;2585       while(i != size_ATTRIBUTE_SERVER);
000008  487e              LDR      r0,|L47.516|
00000a  79a9              LDRB     r1,[r5,#6]            ;2575
00000c  796e              LDRB     r6,[r5,#5]            ;2577
00000e  7803              LDRB     r3,[r0,#0]
000010  4f7d              LDR      r7,|L47.520|
000012  b082              SUB      sp,sp,#8              ;2559
000014  2400              MOVS     r4,#0                 ;2572
                  |L47.22|
000016  00a0              LSLS     r0,r4,#2              ;2575
000018  5838              LDR      r0,[r7,r0]            ;2575
00001a  7802              LDRB     r2,[r0,#0]            ;2575
00001c  428a              CMP      r2,r1                 ;2575
00001e  d102              BNE      |L47.38|
000020  7840              LDRB     r0,[r0,#1]            ;2577
000022  42b0              CMP      r0,r6                 ;2577
000024  d006              BEQ      |L47.52|
                  |L47.38|
000026  1c64              ADDS     r4,r4,#1              ;2577
000028  b2e4              UXTB     r4,r4                 ;2583
00002a  429c              CMP      r4,r3
00002c  d1f3              BNE      |L47.22|
;;;2586       if(Rsp_Error == 0)
00002e  4660              MOV      r0,r12
000030  2800              CMP      r0,#0
                  |L47.50|
000032  d176              BNE      |L47.290|
                  |L47.52|
;;;2587       {
;;;2588           Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Write(i);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Write
;;;2589       }
;;;2590       if(Rsp_Error == 0)
00003a  2800              CMP      r0,#0
00003c  d1f9              BNE      |L47.50|
;;;2591       {
;;;2592           if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] > (*(*(ATTRIBUTE_SERVER+i)+(TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i))) + 3))
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
000044  00a6              LSLS     r6,r4,#2
000046  59b9              LDR      r1,[r7,r6]
000048  1c80              ADDS     r0,r0,#2
00004a  5c08              LDRB     r0,[r1,r0]
00004c  7829              LDRB     r1,[r5,#0]  ; L2CAP_Buf
00004e  1cc0              ADDS     r0,r0,#3
000050  4288              CMP      r0,r1
000052  d366              BCC      |L47.290|
;;;2593           {
;;;2594               Rsp_Error = ERR_CODE_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH;
;;;2595           }
;;;2596       }
;;;2597   
;;;2598   //#ifdef _PROFILE_OTA_
;;;2599   //    if(Rsp_Error == 0)
;;;2600   //    {
;;;2601   //        if((state0_OTA_DATA & STATE_OTA_DATA_NOTIFIED) == 0)
;;;2602   //        {
;;;2603   //            if(ATT_HDL_OTA_OTA_DATA_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_H] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H])
;;;2604   //            {
;;;2605   //                if(ATT_HDL_OTA_OTA_DATA_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_L] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L])
;;;2606   //                {
;;;2607   //                    if((att_HDL_OTA_OTA_DATA_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_NOTIFICATION) != 0)
;;;2608   //                    {
;;;2609   //                        state0_OTA_DATA = (state0_OTA_DATA | STATE_OTA_DATA_WRITED);
;;;2610   //                    }
;;;2611   //                    else
;;;2612   //                    {
;;;2613   //                        Rsp_Error = ERR_CODE_ATT_CLIENT_CHAR_CONFIG_DESCRTR_IMPROPERLY_CONFIGURED;
;;;2614   //                    }
;;;2615   //                }
;;;2616   //            }
;;;2617   //        }
;;;2618   //        else
;;;2619   //        {
;;;2620   //            Rsp_Error = ERR_CODE_ATT_PROCEDURE_ALREADY_IN_PROGRESS;
;;;2621   //        }
;;;2622   //    }
;;;2623   //#endif
;;;2624       if(Rsp_Error == 0)
;;;2625       {
;;;2626           Rsp_Error = chkIfBLE_ATT_Chr_Acss_ByUser(i);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       chkIfBLE_ATT_Chr_Acss_ByUser
;;;2627           if(Rsp_Error != NO_)
00005a  2800              CMP      r0,#0
00005c  d006              BEQ      |L47.108|
;;;2628           {
;;;2629               Rsp_Error = chkBLE_ATT_Chr_AcssWr_ByUser((Uint8 *)*(ATTRIBUTE_SERVER_PARAM+i), &(L2CAP_Buf.DataBuf[(TAB_ATTRIBUTE_HANDLE_H+1)]));
00005e  486b              LDR      r0,|L47.524|
000060  1de9              ADDS     r1,r5,#7
000062  5980              LDR      r0,[r0,r6]
000064  f7fffffe          BL       chkBLE_ATT_Chr_AcssWr_ByUser
;;;2630           }
;;;2631       }
;;;2632       if(Rsp_Error != 0)
000068  2800              CMP      r0,#0
00006a  d1e2              BNE      |L47.50|
                  |L47.108|
;;;2633       {
;;;2634           return SUCCESS_;
;;;2635       }
;;;2636       else    //Rsp_Error == 0
;;;2637       {
;;;2638   //        mblk = gen_mblk_HSPF_ATT_WRITE(connID, i, (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3), &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE+3]);
;;;2639   //        if(mblk == (MBLK *)0)
;;;2640   //        {
;;;2641   //            return FAIL;
;;;2642   //        }
;;;2643   //        else
;;;2644   //        {
;;;2645   //            SndMsgBlk(mblk, Q_2HOST);
;;;2646   //        }
;;;2647           (*(ATT_Write[i]))(connID, (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3), &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE+3]);
00006c  4a64              LDR      r2,|L47.512|
00006e  7810              LDRB     r0,[r2,#0]  ; L2CAP_Buf
000070  1ec0              SUBS     r0,r0,#3
000072  b2c1              UXTB     r1,r0
000074  4866              LDR      r0,|L47.528|
000076  1dd2              ADDS     r2,r2,#7
000078  5983              LDR      r3,[r0,r6]
00007a  9802              LDR      r0,[sp,#8]
00007c  4798              BLX      r3
;;;2648   
;;;2649           for(idx=0; idx<(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3); idx++)
00007e  2500              MOVS     r5,#0
000080  4a62              LDR      r2,|L47.524|
000082  e005              B        |L47.144|
                  |L47.132|
;;;2650           {
;;;2651               pATT_param = (Uint8 *)(*(ATTRIBUTE_SERVER_PARAM+i));
000084  5990              LDR      r0,[r2,r6]
;;;2652               *(pATT_param+idx) = L2CAP_Buf.DataBuf[(idx+TAB_ATTRIBUTE_HANDLE_H+1)];     //Bluetooth Spec. Ver4.0 [Vol 3] page 502 of 656
000086  1949              ADDS     r1,r1,r5
000088  79c9              LDRB     r1,[r1,#7]
00008a  5541              STRB     r1,[r0,r5]
00008c  1c6d              ADDS     r5,r5,#1
00008e  b2ed              UXTB     r5,r5                 ;2649
                  |L47.144|
000090  495b              LDR      r1,|L47.512|
000092  7808              LDRB     r0,[r1,#0]            ;2649  ; L2CAP_Buf
000094  1ec0              SUBS     r0,r0,#3              ;2649
000096  42a8              CMP      r0,r5                 ;2649
000098  dcf4              BGT      |L47.132|
;;;2653           }
;;;2654           if((*(*(ATTRIBUTE_SERVER_PERMISSION+i)+TAB_ATTRIBUTE_SERVER_PERMISSION_ATT_TYPE_FORMAT) & ATT_TYPE_FORMAT_DYN_LLENGTH) != 0)
00009a  485e              LDR      r0,|L47.532|
00009c  5980              LDR      r0,[r0,r6]
00009e  7840              LDRB     r0,[r0,#1]
0000a0  0740              LSLS     r0,r0,#29
0000a2  d509              BPL      |L47.184|
;;;2655           {
;;;2656               pATT_param = (Uint8 *)(*(ATTRIBUTE_SERVER_PARAM+i));
0000a4  5990              LDR      r0,[r2,r6]
;;;2657               pATT_param[(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)])] = idx;
0000a6  9000              STR      r0,[sp,#0]
0000a8  4620              MOV      r0,r4
0000aa  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
0000ae  59b9              LDR      r1,[r7,r6]
0000b0  1c80              ADDS     r0,r0,#2
0000b2  5c09              LDRB     r1,[r1,r0]
0000b4  9800              LDR      r0,[sp,#0]
0000b6  5445              STRB     r5,[r0,r1]
                  |L47.184|
;;;2658           }
;;;2659   #ifdef _SMP_ON_
;;;2660   #ifdef _BOND_ON_
;;;2661           if(smp_Security_Mode >= SMP_SECURITY_MODE_MINIMUN)
0000b8  4857              LDR      r0,|L47.536|
0000ba  7800              LDRB     r0,[r0,#0]  ; smp_Security_Mode
0000bc  2800              CMP      r0,#0
0000be  d030              BEQ      |L47.290|
;;;2662           {
;;;2663               for(idx=0; idx<size_ATTRIBUTE_SERVER_BOND; idx++)
0000c0  4857              LDR      r0,|L47.544|
0000c2  2400              MOVS     r4,#0
;;;2664               {
;;;2665                   if(ATTRIBUTE_SERVER_BOND[idx][TAB_ATTRIBUTE_SERVER_HANDLE_H] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H])
0000c4  4d55              LDR      r5,|L47.540|
0000c6  7802              LDRB     r2,[r0,#0]            ;2663
0000c8  e00d              B        |L47.230|
                  |L47.202|
0000ca  494f              LDR      r1,|L47.520|
0000cc  00a0              LSLS     r0,r4,#2
0000ce  5828              LDR      r0,[r5,r0]
0000d0  5989              LDR      r1,[r1,r6]
0000d2  7803              LDRB     r3,[r0,#0]
0000d4  780f              LDRB     r7,[r1,#0]
0000d6  42bb              CMP      r3,r7
0000d8  d103              BNE      |L47.226|
;;;2666                   {
;;;2667                       if(ATTRIBUTE_SERVER_BOND[idx][TAB_ATTRIBUTE_SERVER_HANDLE_L] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L])
0000da  7840              LDRB     r0,[r0,#1]
0000dc  7849              LDRB     r1,[r1,#1]
0000de  4288              CMP      r0,r1
0000e0  d003              BEQ      |L47.234|
                  |L47.226|
0000e2  1c64              ADDS     r4,r4,#1
0000e4  b2e4              UXTB     r4,r4                 ;2663
                  |L47.230|
0000e6  4294              CMP      r4,r2                 ;2663
0000e8  d3ef              BCC      |L47.202|
                  |L47.234|
;;;2668                       {
;;;2669                           break;
;;;2670                       }
;;;2671                   }
;;;2672               }
;;;2673               if(idx != size_ATTRIBUTE_SERVER_BOND)
0000ea  4294              CMP      r4,r2
0000ec  d019              BEQ      |L47.290|
;;;2674               {
;;;2675                   tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
0000ee  494d              LDR      r1,|L47.548|
0000f0  2005              MOVS     r0,#5
0000f2  f7fffffe          BL       cmd_FlashBond
;;;2676                   if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
0000f6  7800              LDRB     r0,[r0,#0]
0000f8  2800              CMP      r0,#0
0000fa  d17e              BNE      |L47.506|
;;;2677                   {
;;;2678                       tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
0000fc  4949              LDR      r1,|L47.548|
0000fe  2007              MOVS     r0,#7
000100  f7fffffe          BL       cmd_FlashBond
;;;2679                       if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
000104  7801              LDRB     r1,[r0,#0]
;;;2680                       {
;;;2681                           if((*(tmp+TAB_PARA_DATA_DAT_START) + 2 + (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3)) > SIZE_OF_DAT_GRP_BLK)
;;;2682                           {
;;;2683                               tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
;;;2684                               tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_NXT_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
;;;2685                               if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
;;;2686                               {
;;;2687                                   for(idx=0; idx<size_ATTRIBUTE_SERVER_BOND; idx++)
;;;2688                                   {
;;;2689                                       for(i=0; i<(ATTRIBUTE_SERVER_BOND[idx][4]); i++)
;;;2690                                       {
;;;2691                                           *(tmp+(TAB_PARA_DATA_DAT+i)) = ATTRIBUTE_SERVER_BOND_PARAM[idx][i];
000106  4f48              LDR      r7,|L47.552|
000108  2900              CMP      r1,#0                 ;2679
00010a  d00b              BEQ      |L47.292|
;;;2692                                       }
;;;2693                                       *(tmp+TAB_PARA_DATA_DAT_PTR) = idx;
;;;2694                                       *(tmp+TAB_PARA_DATA_DAT_SIZE) = ATTRIBUTE_SERVER_BOND[idx][4];
;;;2695                                       tmp = cmd_FlashBond(CMD_FB_PSH_DATA_FLASHBOND_EXST_PBID_DBLK, (uint8_t*)smp_Para_Bond_tmp);
;;;2696                                       tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
;;;2697                                   }
;;;2698                               }
;;;2699                           }
;;;2700                           else
;;;2701                           {
;;;2702                               for(i=0; i<(ATTRIBUTE_SERVER_BOND[idx][4]); i++)
;;;2703                               {
;;;2704                                   *(tmp+(TAB_PARA_DATA_DAT+i)) = ATTRIBUTE_SERVER_BOND_PARAM[idx][i];
;;;2705                               }
;;;2706                               *(tmp+TAB_PARA_DATA_DAT_PTR) = idx;
;;;2707                               *(tmp+TAB_PARA_DATA_DAT_SIZE) = ATTRIBUTE_SERVER_BOND[idx][4];
;;;2708                               tmp = cmd_FlashBond(CMD_FB_PSH_DATA_FLASHBOND_EXST_PBID_DBLK, (uint8_t*)smp_Para_Bond_tmp);
;;;2709                           }
;;;2710                       }
;;;2711                       else
;;;2712                       {
;;;2713                           tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
00010c  4945              LDR      r1,|L47.548|
00010e  2005              MOVS     r0,#5
000110  f7fffffe          BL       cmd_FlashBond
;;;2714                           tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_NXT_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
000114  4943              LDR      r1,|L47.548|
000116  2008              MOVS     r0,#8
000118  f7fffffe          BL       cmd_FlashBond
;;;2715                           if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
00011c  7801              LDRB     r1,[r0,#0]
00011e  2900              CMP      r1,#0
000120  d04a              BEQ      |L47.440|
                  |L47.290|
000122  e06a              B        |L47.506|
                  |L47.292|
000124  4936              LDR      r1,|L47.512|
000126  78c2              LDRB     r2,[r0,#3]            ;2681
000128  7809              LDRB     r1,[r1,#0]            ;2681  ; L2CAP_Buf
00012a  1851              ADDS     r1,r2,r1              ;2681
00012c  1e49              SUBS     r1,r1,#1              ;2681
00012e  2980              CMP      r1,#0x80              ;2681
000130  dd2c              BLE      |L47.396|
000132  493c              LDR      r1,|L47.548|
000134  2005              MOVS     r0,#5                 ;2683
000136  f7fffffe          BL       cmd_FlashBond
00013a  493a              LDR      r1,|L47.548|
00013c  2008              MOVS     r0,#8                 ;2684
00013e  f7fffffe          BL       cmd_FlashBond
000142  7801              LDRB     r1,[r0,#0]            ;2685
000144  2900              CMP      r1,#0                 ;2685
000146  d158              BNE      |L47.506|
000148  2400              MOVS     r4,#0                 ;2687
00014a  e01a              B        |L47.386|
                  |L47.332|
00014c  2100              MOVS     r1,#0                 ;2689
00014e  00a2              LSLS     r2,r4,#2              ;2665
000150  e005              B        |L47.350|
                  |L47.338|
000152  58bb              LDR      r3,[r7,r2]            ;2691
000154  1846              ADDS     r6,r0,r1              ;2691
000156  5c5b              LDRB     r3,[r3,r1]            ;2691
000158  1c49              ADDS     r1,r1,#1              ;2691
00015a  71b3              STRB     r3,[r6,#6]            ;2691
00015c  b2c9              UXTB     r1,r1                 ;2689
                  |L47.350|
00015e  58ab              LDR      r3,[r5,r2]            ;2689
000160  791b              LDRB     r3,[r3,#4]            ;2689
000162  428b              CMP      r3,r1                 ;2689
000164  d8f5              BHI      |L47.338|
000166  7104              STRB     r4,[r0,#4]            ;2693
000168  58a9              LDR      r1,[r5,r2]            ;2694
00016a  7909              LDRB     r1,[r1,#4]            ;2694
00016c  7141              STRB     r1,[r0,#5]            ;2694
00016e  492d              LDR      r1,|L47.548|
000170  2009              MOVS     r0,#9                 ;2695
000172  f7fffffe          BL       cmd_FlashBond
000176  492b              LDR      r1,|L47.548|
000178  2007              MOVS     r0,#7                 ;2696
00017a  f7fffffe          BL       cmd_FlashBond
00017e  1c64              ADDS     r4,r4,#1              ;2696
000180  b2e4              UXTB     r4,r4                 ;2687
                  |L47.386|
000182  4927              LDR      r1,|L47.544|
000184  7809              LDRB     r1,[r1,#0]            ;2687  ; size_ATTRIBUTE_SERVER_BOND
000186  428c              CMP      r4,r1                 ;2687
000188  d3e0              BCC      |L47.332|
00018a  e036              B        |L47.506|
                  |L47.396|
00018c  2100              MOVS     r1,#0                 ;2702
00018e  00a2              LSLS     r2,r4,#2              ;2665
000190  e005              B        |L47.414|
                  |L47.402|
000192  58bb              LDR      r3,[r7,r2]            ;2704
000194  1846              ADDS     r6,r0,r1              ;2704
000196  5c5b              LDRB     r3,[r3,r1]            ;2704
000198  1c49              ADDS     r1,r1,#1              ;2704
00019a  71b3              STRB     r3,[r6,#6]            ;2704
00019c  b2c9              UXTB     r1,r1                 ;2702
                  |L47.414|
00019e  58ab              LDR      r3,[r5,r2]            ;2702
0001a0  791b              LDRB     r3,[r3,#4]            ;2702
0001a2  428b              CMP      r3,r1                 ;2702
0001a4  d8f5              BHI      |L47.402|
0001a6  7104              STRB     r4,[r0,#4]            ;2706
0001a8  58a9              LDR      r1,[r5,r2]            ;2707
0001aa  7909              LDRB     r1,[r1,#4]            ;2707
0001ac  7141              STRB     r1,[r0,#5]            ;2707
0001ae  491d              LDR      r1,|L47.548|
0001b0  2009              MOVS     r0,#9                 ;2708
0001b2  f7fffffe          BL       cmd_FlashBond
0001b6  e020              B        |L47.506|
                  |L47.440|
;;;2716                           {
;;;2717                               for(idx=0; idx<size_ATTRIBUTE_SERVER_BOND; idx++)
0001b8  2400              MOVS     r4,#0
0001ba  e01a              B        |L47.498|
                  |L47.444|
;;;2718                               {
;;;2719                                   for(i=0; i<(ATTRIBUTE_SERVER_BOND[idx][4]); i++)
0001bc  2100              MOVS     r1,#0
0001be  00a2              LSLS     r2,r4,#2              ;2665
0001c0  e005              B        |L47.462|
                  |L47.450|
;;;2720                                   {
;;;2721                                       *(tmp+(TAB_PARA_DATA_DAT+i)) = ATTRIBUTE_SERVER_BOND_PARAM[idx][i];
0001c2  58bb              LDR      r3,[r7,r2]
0001c4  1846              ADDS     r6,r0,r1
0001c6  5c5b              LDRB     r3,[r3,r1]
0001c8  1c49              ADDS     r1,r1,#1
0001ca  71b3              STRB     r3,[r6,#6]
0001cc  b2c9              UXTB     r1,r1                 ;2719
                  |L47.462|
0001ce  58ab              LDR      r3,[r5,r2]            ;2719
0001d0  791b              LDRB     r3,[r3,#4]            ;2719
0001d2  428b              CMP      r3,r1                 ;2719
0001d4  d8f5              BHI      |L47.450|
;;;2722                                   }
;;;2723                                   *(tmp+TAB_PARA_DATA_DAT_PTR) = idx;
0001d6  7104              STRB     r4,[r0,#4]
;;;2724                                   *(tmp+TAB_PARA_DATA_DAT_SIZE) = ATTRIBUTE_SERVER_BOND[idx][4];
0001d8  58a9              LDR      r1,[r5,r2]
0001da  7909              LDRB     r1,[r1,#4]
0001dc  7141              STRB     r1,[r0,#5]
;;;2725                                   tmp = cmd_FlashBond(CMD_FB_PSH_DATA_FLASHBOND_EXST_PBID_DBLK, (uint8_t*)smp_Para_Bond_tmp);
0001de  4911              LDR      r1,|L47.548|
0001e0  2009              MOVS     r0,#9
0001e2  f7fffffe          BL       cmd_FlashBond
;;;2726                                   tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
0001e6  490f              LDR      r1,|L47.548|
0001e8  2007              MOVS     r0,#7
0001ea  f7fffffe          BL       cmd_FlashBond
0001ee  1c64              ADDS     r4,r4,#1
0001f0  b2e4              UXTB     r4,r4                 ;2717
                  |L47.498|
0001f2  490b              LDR      r1,|L47.544|
0001f4  7809              LDRB     r1,[r1,#0]            ;2717  ; size_ATTRIBUTE_SERVER_BOND
0001f6  428c              CMP      r4,r1                 ;2717
0001f8  d3e0              BCC      |L47.444|
                  |L47.506|
;;;2727                               }
;;;2728                           }
;;;2729                       }
;;;2730                   }
;;;2731               }
;;;2732           }
;;;2733   #endif      //#ifdef _BOND_ON_
;;;2734   #endif  //ifdef _SMP_ON_
;;;2735           return SUCCESS_;
0001fa  2000              MOVS     r0,#0
;;;2736       }
;;;2737   }
0001fc  bdfe              POP      {r1-r7,pc}
;;;2738   
                          ENDP

0001fe  0000              DCW      0x0000
                  |L47.512|
                          DCD      L2CAP_Buf
                  |L47.516|
                          DCD      size_ATTRIBUTE_SERVER
                  |L47.520|
                          DCD      ATTRIBUTE_SERVER
                  |L47.524|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L47.528|
                          DCD      ATT_Write
                  |L47.532|
                          DCD      ATTRIBUTE_SERVER_PERMISSION
                  |L47.536|
                          DCD      smp_Security_Mode
                  |L47.540|
                          DCD      ATTRIBUTE_SERVER_BOND
                  |L47.544|
                          DCD      size_ATTRIBUTE_SERVER_BOND
                  |L47.548|
                          DCD      smp_Para_Bond_tmp
                  |L47.552|
                          DCD      ATTRIBUTE_SERVER_BOND_PARAM

                          AREA ||i.Prcss_OPCODE_ATT_Write_Request||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Write_Request PROC
;;;1777   
;;;1778   Uint8 Prcss_OPCODE_ATT_Write_Request(Uint8 connID)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;1779   {
;;;1780       Uint8 Rsp_Error;
;;;1781       //bit permit_Read;
;;;1782       Uint8 i, idx;
;;;1783       //Uint8 sizeRSP_PDUlgth;
;;;1784       Uint8 *pATT_param;
;;;1785   #ifdef _SMP_ON_
;;;1786   #ifdef _BOND_ON_
;;;1787       Uint8 *tmp;
;;;1788       extern Uint8* cmd_FlashBond(uint8_t opcode, uint8_t * para_data);
;;;1789   #endif
;;;1790   #endif
;;;1791       extern void (* const ATT_Write[])(uint8_t connID, uint8_t length, uint8_t *srcCMD);
;;;1792   
;;;1793       Rsp_Error = ERR_CODE_ATT_INVALID_HANDLE;
;;;1794       i = 0;
;;;1795       do
;;;1796       {
;;;1797           if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_H])
000002  498e              LDR      r1,|L48.572|
000004  2001              MOVS     r0,#1                 ;1793
000006  798c              LDRB     r4,[r1,#6]
;;;1798           {
;;;1799               if(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L] == L2CAP_Buf.DataBuf[TAB_ATTRIBUTE_HANDLE_L])
000008  794b              LDRB     r3,[r1,#5]
;;;1800               {
;;;1801                   Rsp_Error = 0;
;;;1802                   break;
;;;1803               }
;;;1804           }
;;;1805           i++;
;;;1806       }
;;;1807       while(i != size_ATTRIBUTE_SERVER);
00000a  498d              LDR      r1,|L48.576|
00000c  4f8d              LDR      r7,|L48.580|
00000e  780a              LDRB     r2,[r1,#0]
000010  b082              SUB      sp,sp,#8              ;1779
000012  2500              MOVS     r5,#0                 ;1794
                  |L48.20|
000014  00a9              LSLS     r1,r5,#2              ;1797
000016  5879              LDR      r1,[r7,r1]            ;1797
000018  780e              LDRB     r6,[r1,#0]            ;1797
00001a  42a6              CMP      r6,r4                 ;1797
00001c  d102              BNE      |L48.36|
00001e  7849              LDRB     r1,[r1,#1]            ;1799
000020  4299              CMP      r1,r3                 ;1799
000022  d005              BEQ      |L48.48|
                  |L48.36|
000024  1c6d              ADDS     r5,r5,#1              ;1799
000026  b2ed              UXTB     r5,r5                 ;1805
000028  4295              CMP      r5,r2
00002a  d1f3              BNE      |L48.20|
;;;1808       if(Rsp_Error == 0)
00002c  2800              CMP      r0,#0
00002e  d11e              BNE      |L48.110|
                  |L48.48|
;;;1809       {
;;;1810           Rsp_Error = chkBLE_ATTRIBUTE_PERMISSION_Write(i);
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       chkBLE_ATTRIBUTE_PERMISSION_Write
;;;1811       }
;;;1812       if(Rsp_Error == 0)
000036  2800              CMP      r0,#0
000038  d119              BNE      |L48.110|
;;;1813       {
;;;1814           if(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L] > (*(*(ATTRIBUTE_SERVER+i)+(TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i))) + 3))
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
000040  00ae              LSLS     r6,r5,#2
000042  59b9              LDR      r1,[r7,r6]
000044  1c80              ADDS     r0,r0,#2
000046  4c7d              LDR      r4,|L48.572|
000048  5c08              LDRB     r0,[r1,r0]
00004a  7821              LDRB     r1,[r4,#0]  ; L2CAP_Buf
00004c  1cc0              ADDS     r0,r0,#3
00004e  4288              CMP      r0,r1
000050  d201              BCS      |L48.86|
;;;1815           {
;;;1816               Rsp_Error = ERR_CODE_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH;
000052  200d              MOVS     r0,#0xd
000054  e00b              B        |L48.110|
                  |L48.86|
;;;1817           }
;;;1818       }
;;;1819   //    if(Rsp_Error == 0)  //131113 add for CSCS/RSCS Profile Qualification
;;;1820   //    {
;;;1821   //        if(*(*(ATTRIBUTE_SERVER+i)+3) == GATT_SPEC_CHARACTERISTIC_SC_CONTROL_POINT)
;;;1822   //        {
;;;1823   //            if((*(*(ATTRIBUTE_SERVER_PERMISSION+i)+0)==ATT_PERMISSION_AUTHE_WRITE)||(*(*(ATTRIBUTE_SERVER_PERMISSION+i)+0)==ATT_PERMISSION_WRITE))
;;;1824   //            {
;;;1825   //                if(*(*(ATTRIBUTE_SERVER+i+1)+3)==GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION)
;;;1826   //                {
;;;1827   //                    if(*(*(ATTRIBUTE_SERVER_PARAM+i+1)+0)==0)
;;;1828   //                    {
;;;1829   //                        Rsp_Error = (ERR_CODE_ATT_APPLICATION_ERROR + 0x01);
;;;1830   //                    }
;;;1831   //                    else
;;;1832   //                    {
;;;1833   //                        if(ATT_INDICATION_Packet_Sent != 0)
;;;1834   //                        {
;;;1835   //                            Rsp_Error = (ERR_CODE_ATT_APPLICATION_ERROR);
;;;1836   //                        }
;;;1837   //                    }
;;;1838   //                }
;;;1839   //            }
;;;1840   //        }
;;;1841   //    }
;;;1842   
;;;1843   
;;;1844   //#ifdef _PROFILE_LNS_
;;;1845   //    if(Rsp_Error == 0)
;;;1846   //    {
;;;1847   //        if((STATE_LNS_LN_cp & STATE_LNS_LN_CP_OP_INDICATED) ==0)
;;;1848   //        {
;;;1849   //            if(ATT_HDL_LNS_LN_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_H] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H])
;;;1850   //            {
;;;1851   //                if(ATT_HDL_LNS_LN_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_L] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L])
;;;1852   //                {
;;;1853   //                    if((att_HDL_LNS_LN_CONTROL_POINT_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
;;;1854   //                    {
;;;1855   //                        STATE_LNS_LN_cp = (STATE_LNS_LN_cp | STATE_LNS_LN_CP_OP_WRITED);
;;;1856   //                        STATE_LNS_LN_cp = (STATE_LNS_LN_cp | SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]);
;;;1857   //                    }
;;;1858   //                    else
;;;1859   //                    {
;;;1860   //                        Rsp_Error = ERR_CODE_ATT_CLIENT_CHAR_CONFIG_DESCRTR_IMPROPERLY_CONFIGURED;
;;;1861   //                    }
;;;1862   //                }
;;;1863   //            }
;;;1864   //        }
;;;1865   //        else
;;;1866   //        {
;;;1867   //            Rsp_Error = ERR_CODE_ATT_PROCEDURE_ALREADY_IN_PROGRESS;
;;;1868   //        }
;;;1869   //    }
;;;1870   //#endif
;;;1871   
;;;1872   
;;;1873   //#ifdef _PROFILE_GLS_
;;;1874   //    if(Rsp_Error == 0)
;;;1875   //    {
;;;1876   //        if((STATE_GLS_RA_cp & STATE_GLS_RA_CP_OP_INDICATED) == 0)
;;;1877   //        {
;;;1878   //            if(ATT_HDL_GLS_RECORD_ACCESS_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_H] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H])
;;;1879   //            {
;;;1880   //                if(ATT_HDL_GLS_RECORD_ACCESS_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_L] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L])
;;;1881   //                {
;;;1882   //                    if((att_HDL_GLS_RECORD_ACCESS_CONTROL_POINT_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
;;;1883   //                    {
;;;1884   //                        if((STATE_GLS_RA_cp & STATE2_GLS_RA_CP_OP_PRCSS_RUN) == 0)
;;;1885   //                        {
;;;1886   //                            STATE_GLS_RA_cp = (STATE_GLS_RA_cp | STATE_GLS_RA_CP_OP_WRITED);
;;;1887   //                            STATE_GLS_RA_cp = (STATE_GLS_RA_cp | SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]);
;;;1888   //                        }
;;;1889   //                        else
;;;1890   //                        {
;;;1891   //                            switch(SPIBuffer[(TAB_ATTRIBUTE_HANDLE_H+1)])
;;;1892   //                            {
;;;1893   //                            case OP_CODE_GLS_REC_ACCESS_CTRL_PNT_ABORT_OPERATION:
;;;1894   //                                STATE_GLS_RA_cp = (STATE_GLS_RA_cp | STATE_GLS_RA_CP_OP_WRITED);
;;;1895   //                                STATE_GLS_RA_cp = (STATE_GLS_RA_cp | SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]);
;;;1896   //                                break;
;;;1897   
;;;1898   //                            default:
;;;1899   //                                Rsp_Error = ERR_CODE_ATT_PROCEDURE_ALREADY_IN_PROGRESS;
;;;1900   //                                break;
;;;1901   //                            }
;;;1902   //                        }
;;;1903   //                    }
;;;1904   //                    else
;;;1905   //                    {
;;;1906   //                        Rsp_Error = ERR_CODE_ATT_CLIENT_CHAR_CONFIG_DESCRTR_IMPROPERLY_CONFIGURED;
;;;1907   //                    }
;;;1908   //                }
;;;1909   //            }
;;;1910   //        }
;;;1911   //        else
;;;1912   //        {
;;;1913   //            Rsp_Error = ERR_CODE_ATT_PROCEDURE_ALREADY_IN_PROGRESS;
;;;1914   //        }
;;;1915   //    }
;;;1916   //#endif
;;;1917   
;;;1918   //#ifdef _PROFILE_CPS_
;;;1919   //    if(Rsp_Error == 0)
;;;1920   //    {
;;;1921   //        if((STATE_CPS_CP_cp & STATE_CPS_CP_CP_OP_INDICATED) == 0)
;;;1922   //        {
;;;1923   //            if(ATT_HDL_CPS_CYCLING_POWER_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_H] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H])
;;;1924   //            {
;;;1925   //                if(ATT_HDL_CPS_CYCLING_POWER_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_L] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L])
;;;1926   //                {
;;;1927   //                    if((att_HDL_CPS_CYCLING_POWER_CONTROL_POINT_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
;;;1928   //                    {
;;;1929   //                        STATE_CPS_CP_cp = (STATE_CPS_CP_cp | STATE_CPS_CP_CP_OP_WRITED);
;;;1930   //                        STATE_CPS_CP_cp = (STATE_CPS_CP_cp | SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L]);
;;;1931   //                    }
;;;1932   //                    else
;;;1933   //                    {
;;;1934   //                        Rsp_Error = ERR_CODE_ATT_CLIENT_CHAR_CONFIG_DESCRTR_IMPROPERLY_CONFIGURED;
;;;1935   //                    }
;;;1936   //                }
;;;1937   //            }
;;;1938   //        }
;;;1939   //        else
;;;1940   //        {
;;;1941   //            Rsp_Error = ERR_CODE_ATT_PROCEDURE_ALREADY_IN_PROGRESS;
;;;1942   //        }
;;;1943   //    }
;;;1944   //#endif
;;;1945   
;;;1946   //#ifdef _PROFILE_OTA_
;;;1947   //    if(Rsp_Error == 0)
;;;1948   //    {
;;;1949   //        if((state0_OTA_CMD & STATE_OTA_CMD_CP_OP_INDICATED) == 0)
;;;1950   //        {
;;;1951   //            if(ATT_HDL_OTA_OTA_CMD_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_H] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H])
;;;1952   //            {
;;;1953   //                if(ATT_HDL_OTA_OTA_CMD_CONTROL_POINT_INIT[TAB_ATTRIBUTE_SERVER_HANDLE_L] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L])
;;;1954   //                {
;;;1955   //                    if((att_HDL_OTA_OTA_CMD_CONTROL_POINT_CLIENT_CHARACTERISTIC_CONFIGURATION[0] & GATT_DESCRIPTORS_CLIENT_CHARACTERISTIC_CONFIGURATION_INDICATION) != 0)
;;;1956   //                    {
;;;1957   //                        state0_OTA_CMD = (state0_OTA_CMD | STATE_OTA_CMD_CP_OP_WRITED);
;;;1958   //                    }
;;;1959   //                    else
;;;1960   //                    {
;;;1961   //                        Rsp_Error = ERR_CODE_ATT_CLIENT_CHAR_CONFIG_DESCRTR_IMPROPERLY_CONFIGURED;
;;;1962   //                    }
;;;1963   //                }
;;;1964   //            }
;;;1965   //        }
;;;1966   //        else
;;;1967   //        {
;;;1968   //            Rsp_Error = ERR_CODE_ATT_PROCEDURE_ALREADY_IN_PROGRESS;
;;;1969   //        }
;;;1970   //    }
;;;1971   //#endif
;;;1972       if(Rsp_Error == 0)
;;;1973       {
;;;1974           Rsp_Error = chkIfBLE_ATT_Chr_Acss_ByUser(i);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       chkIfBLE_ATT_Chr_Acss_ByUser
;;;1975           if(Rsp_Error != NO_)
00005c  2800              CMP      r0,#0
00005e  d011              BEQ      |L48.132|
;;;1976           {
;;;1977               Rsp_Error = chkBLE_ATT_Chr_AcssWr_ByUser((Uint8 *)*(ATTRIBUTE_SERVER_PARAM+i), &(L2CAP_Buf.DataBuf[(TAB_ATTRIBUTE_HANDLE_H+1)]));
000060  4879              LDR      r0,|L48.584|
000062  1de1              ADDS     r1,r4,#7
000064  5980              LDR      r0,[r0,r6]
000066  f7fffffe          BL       chkBLE_ATT_Chr_AcssWr_ByUser
;;;1978           }
;;;1979       }
;;;1980       if(Rsp_Error != 0)
00006a  2800              CMP      r0,#0
00006c  d00a              BEQ      |L48.132|
                  |L48.110|
;;;1981       {
;;;1982           if(setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_H], Rsp_Error) == SUCCESS_)
00006e  9000              STR      r0,[sp,#0]
000070  4876              LDR      r0,|L48.588|
000072  7983              LDRB     r3,[r0,#6]  ; SPIBuffer
000074  7942              LDRB     r2,[r0,#5]  ; SPIBuffer
000076  7901              LDRB     r1,[r0,#4]  ; SPIBuffer
000078  9802              LDR      r0,[sp,#8]
00007a  f7fffffe          BL       setBLE_ConnTxData_ATT_ERROR_RESPONSE
00007e  2800              CMP      r0,#0
000080  d012              BEQ      |L48.168|
000082  e010              B        |L48.166|
                  |L48.132|
;;;1983           {
;;;1984               return SUCCESS_;
;;;1985           }
;;;1986           else
;;;1987           {
;;;1988               return FAIL_;
;;;1989           }
;;;1990       }
;;;1991       else    //Rsp_Error == 0
;;;1992       {
;;;1993   //#ifdef _PROFILE_CPS_CN_BI_01_
;;;1994   //        setBLE_ConnTxData_ATT_ERROR_RESPONSE(connID, SPIBuffer[TAB_BASIC_L2CAP_OPCODE], SPIBuffer[TAB_ATTRIBUTE_HANDLE_L], SPIBuffer[TAB_ATTRIBUTE_HANDLE_H], ERR_CODE_ATT_APPLICATION_ERROR);
;;;1995   
;;;1996   //#else
;;;1997   //        mblk = gen_mblk_HSPF_ATT_WRITE(connID, i, (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3), &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE+3]);
;;;1998   //        if(mblk == (MBLK *)0)
;;;1999   //        {
;;;2000   //            return FAIL;
;;;2001   //        }
;;;2002   //        (*(ATT_Write[i]))(connID, (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3), &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE+3]);
;;;2003   
;;;2004   //        for(idx=0; idx<(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3); idx++)
;;;2005   //        {
;;;2006   //            pATT_param = (Uint8 *)(*(ATTRIBUTE_SERVER_PARAM+i));
;;;2007   //            *(pATT_param+idx) = L2CAP_Buf.DataBuf[(idx+TAB_ATTRIBUTE_HANDLE_H+1)];     //Bluetooth Spec. Ver4.0 [Vol 3] page 502 of 656
;;;2008   //        }
;;;2009   //        if((*(*(ATTRIBUTE_SERVER_PERMISSION+i)+TAB_ATTRIBUTE_SERVER_PERMISSION_ATT_TYPE_FORMAT) & ATT_TYPE_FORMAT_DYN_LLENGTH) != 0)
;;;2010   //        {
;;;2011   //            pATT_param = (Uint8 *)(*(ATTRIBUTE_SERVER_PARAM+i));
;;;2012   //            pATT_param[(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)])] = idx;
;;;2013   //        }
;;;2014           SPIBuffer[TAB_BASIC_L2CAP_OPCODE] = OPCODE_ATT_WRITE_RESPONSE;
000084  4871              LDR      r0,|L48.588|
000086  2113              MOVS     r1,#0x13
000088  7101              STRB     r1,[r0,#4]
;;;2015           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_L] = 1;
00008a  2101              MOVS     r1,#1
00008c  7001              STRB     r1,[r0,#0]
;;;2016           SPIBuffer[TAB_BASIC_L2CAP_PDU_LENGTH_H] = 0;
00008e  2100              MOVS     r1,#0
000090  7041              STRB     r1,[r0,#1]
;;;2017           SPIBuffer[TAB_BASIC_L2CAP_CID_L] = L2CAP_CID_ATTRIBUTE_PROTOCOL;
000092  2204              MOVS     r2,#4
000094  7082              STRB     r2,[r0,#2]
;;;2018           SPIBuffer[TAB_BASIC_L2CAP_CID_H] = 0;
000096  70c1              STRB     r1,[r0,#3]
;;;2019           if(setBLE_ConnTxData(connID, SPIBuffer, (1+4)) == SUCCESS_)     //1: Opcode
000098  4601              MOV      r1,r0
00009a  2205              MOVS     r2,#5
00009c  9802              LDR      r0,[sp,#8]
00009e  f7fffffe          BL       setBLE_ConnTxData
0000a2  2800              CMP      r0,#0
0000a4  d001              BEQ      |L48.170|
                  |L48.166|
;;;2020           {
;;;2021               (*(ATT_Write[i]))(connID, (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3), &L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_OPCODE+3]);
;;;2022   
;;;2023               for(idx=0; idx<(L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3); idx++)
;;;2024               {
;;;2025                   pATT_param = (Uint8 *)(*(ATTRIBUTE_SERVER_PARAM+i));
;;;2026                   *(pATT_param+idx) = L2CAP_Buf.DataBuf[(idx+TAB_ATTRIBUTE_HANDLE_H+1)];     //Bluetooth Spec. Ver4.0 [Vol 3] page 502 of 656
;;;2027               }
;;;2028               if((*(*(ATTRIBUTE_SERVER_PERMISSION+i)+TAB_ATTRIBUTE_SERVER_PERMISSION_ATT_TYPE_FORMAT) & ATT_TYPE_FORMAT_DYN_LLENGTH) != 0)
;;;2029               {
;;;2030                   pATT_param = (Uint8 *)(*(ATTRIBUTE_SERVER_PARAM+i));
;;;2031                   pATT_param[(ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_SIZE_OF_VALUE-2+getBLE_ATTRIBUTE_TYPE_Size(i)])] = idx;
;;;2032               }
;;;2033   
;;;2034   #ifdef _SMP_ON_
;;;2035   #ifdef _BOND_ON_
;;;2036               if(smp_Security_Mode >= SMP_SECURITY_MODE_MINIMUN)
;;;2037               {
;;;2038                   for(idx=0; idx<size_ATTRIBUTE_SERVER_BOND; idx++)
;;;2039                   {
;;;2040                       if(ATTRIBUTE_SERVER_BOND[idx][TAB_ATTRIBUTE_SERVER_HANDLE_H] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_H])
;;;2041                       {
;;;2042                           if(ATTRIBUTE_SERVER_BOND[idx][TAB_ATTRIBUTE_SERVER_HANDLE_L] == ATTRIBUTE_SERVER[i][TAB_ATTRIBUTE_SERVER_HANDLE_L])
;;;2043                           {
;;;2044                               break;
;;;2045                           }
;;;2046                       }
;;;2047                   }
;;;2048                   if(idx != size_ATTRIBUTE_SERVER_BOND)
;;;2049                   {
;;;2050                       tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
;;;2051                       if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
;;;2052                       {
;;;2053                           tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
;;;2054                           if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
;;;2055                           {
;;;2056                               if((*(tmp+TAB_PARA_DATA_DAT_START) + 2 + (L2CAP_Buf.DataBuf[TAB_BASIC_L2CAP_PDU_LENGTH_L]-3)) > SIZE_OF_DAT_GRP_BLK)
;;;2057                               {
;;;2058                                   tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
;;;2059                                   tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_NXT_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
;;;2060   
;;;2061                                   if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
;;;2062                                   {
;;;2063                                       for(idx=0; idx<size_ATTRIBUTE_SERVER_BOND; idx++)
;;;2064                                       {
;;;2065                                           for(i=0; i<(ATTRIBUTE_SERVER_BOND[idx][4]); i++)
;;;2066                                           {
;;;2067                                               *(tmp+(TAB_PARA_DATA_DAT+i)) = ATTRIBUTE_SERVER_BOND_PARAM[idx][i];
;;;2068                                           }
;;;2069                                           *(tmp+TAB_PARA_DATA_DAT_PTR) = idx;
;;;2070                                           *(tmp+TAB_PARA_DATA_DAT_SIZE) = ATTRIBUTE_SERVER_BOND[idx][4];
;;;2071                                           tmp = cmd_FlashBond(CMD_FB_PSH_DATA_FLASHBOND_EXST_PBID_DBLK, (uint8_t*)smp_Para_Bond_tmp);
;;;2072                                           tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
;;;2073                                       }
;;;2074                                   }
;;;2075                               }
;;;2076                               else
;;;2077                               {
;;;2078                                   for(i=0; i<(ATTRIBUTE_SERVER_BOND[idx][4]); i++)
;;;2079                                   {
;;;2080                                       *(tmp+(TAB_PARA_DATA_DAT+i)) = ATTRIBUTE_SERVER_BOND_PARAM[idx][i];
;;;2081                                   }
;;;2082                                   *(tmp+TAB_PARA_DATA_DAT_PTR) = idx;
;;;2083                                   *(tmp+TAB_PARA_DATA_DAT_SIZE) = ATTRIBUTE_SERVER_BOND[idx][4];
;;;2084                                   tmp = cmd_FlashBond(CMD_FB_PSH_DATA_FLASHBOND_EXST_PBID_DBLK, (uint8_t*)smp_Para_Bond_tmp);
;;;2085                               }
;;;2086                           }
;;;2087                           else
;;;2088                           {
;;;2089                               tmp = cmd_FlashBond(CMD_FB_GET_EXST_PBID, (uint8_t*)smp_Para_Bond_tmp);
;;;2090                               tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_NXT_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
;;;2091                               if(*tmp == FLH_BND_ERR_CODE_NO_ERR)
;;;2092                               {
;;;2093                                   for(idx=0; idx<size_ATTRIBUTE_SERVER_BOND; idx++)
;;;2094                                   {
;;;2095                                       for(i=0; i<(ATTRIBUTE_SERVER_BOND[idx][4]); i++)
;;;2096                                       {
;;;2097                                           *(tmp+(TAB_PARA_DATA_DAT+i)) = ATTRIBUTE_SERVER_BOND_PARAM[idx][i];
;;;2098                                       }
;;;2099                                       *(tmp+TAB_PARA_DATA_DAT_PTR) = idx;
;;;2100                                       *(tmp+TAB_PARA_DATA_DAT_SIZE) = ATTRIBUTE_SERVER_BOND[idx][4];
;;;2101                                       tmp = cmd_FlashBond(CMD_FB_PSH_DATA_FLASHBOND_EXST_PBID_DBLK, (uint8_t*)smp_Para_Bond_tmp);
;;;2102                                       tmp = cmd_FlashBond(CMD_FB_GET_DATA_FLASHBOND_EXST_PBID_DBLK_START, (uint8_t*)smp_Para_Bond_tmp);
;;;2103                                   }
;;;2104                               }
;;;2105                           }
;;;2106                       }
;;;2107                   }
;;;2108               }
;;;2109   #endif
;;;2110   #endif
;;;2111   //            SndMsgBlk(mblk, Q_2HOST);
;;;2112               return SUCCESS_;
;;;2113           }
;;;2114           else
;;;2115           {
;;;2116   //            FreeMsgBlk(mblk);
;;;2117               return FAIL_;
0000a6  2001              MOVS     r0,#1
                  |L48.168|
;;;2118           }
;;;2119   //#endif //#ifdef _PROFILE_CPS_CN_BI_01_
;;;2120       }
;;;2121   }
0000a8  bdfe              POP      {r1-r7,pc}
                  |L48.170|
0000aa  4a64              LDR      r2,|L48.572|
0000ac  7810              LDRB     r0,[r2,#0]            ;2021  ; L2CAP_Buf
0000ae  1ec0              SUBS     r0,r0,#3              ;2021
0000b0  b2c1              UXTB     r1,r0                 ;2021
0000b2  4867              LDR      r0,|L48.592|
0000b4  1dd2              ADDS     r2,r2,#7              ;2021
0000b6  5983              LDR      r3,[r0,r6]            ;2021
0000b8  9802              LDR      r0,[sp,#8]            ;2021
0000ba  4798              BLX      r3                    ;2021
0000bc  2400              MOVS     r4,#0                 ;2023
0000be  4962              LDR      r1,|L48.584|
0000c0  e005              B        |L48.206|
                  |L48.194|
0000c2  5988              LDR      r0,[r1,r6]            ;2025
0000c4  1912              ADDS     r2,r2,r4              ;2026
0000c6  79d2              LDRB     r2,[r2,#7]            ;2026
0000c8  5502              STRB     r2,[r0,r4]            ;2026
0000ca  1c64              ADDS     r4,r4,#1              ;2026
0000cc  b2e4              UXTB     r4,r4                 ;2023
                  |L48.206|
0000ce  4a5b              LDR      r2,|L48.572|
0000d0  7810              LDRB     r0,[r2,#0]            ;2023  ; L2CAP_Buf
0000d2  1ec0              SUBS     r0,r0,#3              ;2023
0000d4  42a0              CMP      r0,r4                 ;2023
0000d6  dcf4              BGT      |L48.194|
0000d8  485e              LDR      r0,|L48.596|
0000da  5980              LDR      r0,[r0,r6]            ;2028
0000dc  7840              LDRB     r0,[r0,#1]            ;2028
0000de  0740              LSLS     r0,r0,#29             ;2028
0000e0  d509              BPL      |L48.246|
0000e2  5988              LDR      r0,[r1,r6]            ;2030
0000e4  9000              STR      r0,[sp,#0]            ;2031
0000e6  4628              MOV      r0,r5                 ;2031
0000e8  f7fffffe          BL       getBLE_ATTRIBUTE_TYPE_Size
0000ec  59b9              LDR      r1,[r7,r6]            ;2031
0000ee  1c80              ADDS     r0,r0,#2              ;2031
0000f0  5c09              LDRB     r1,[r1,r0]            ;2031
0000f2  9800              LDR      r0,[sp,#0]            ;2031
0000f4  5444              STRB     r4,[r0,r1]            ;2031
                  |L48.246|
0000f6  4858              LDR      r0,|L48.600|
0000f8  7800              LDRB     r0,[r0,#0]            ;2036  ; smp_Security_Mode
0000fa  2800              CMP      r0,#0                 ;2036
0000fc  d030              BEQ      |L48.352|
0000fe  4858              LDR      r0,|L48.608|
000100  2400              MOVS     r4,#0                 ;2038
000102  4d56              LDR      r5,|L48.604|
000104  7802              LDRB     r2,[r0,#0]            ;2038
000106  e00d              B        |L48.292|
                  |L48.264|
000108  494e              LDR      r1,|L48.580|
00010a  00a0              LSLS     r0,r4,#2              ;2040
00010c  5828              LDR      r0,[r5,r0]            ;2040
00010e  5989              LDR      r1,[r1,r6]            ;2040
000110  7803              LDRB     r3,[r0,#0]            ;2040
000112  780f              LDRB     r7,[r1,#0]            ;2040
000114  42bb              CMP      r3,r7                 ;2040
000116  d103              BNE      |L48.288|
000118  7840              LDRB     r0,[r0,#1]            ;2042
00011a  7849              LDRB     r1,[r1,#1]            ;2042
00011c  4288              CMP      r0,r1                 ;2042
00011e  d003              BEQ      |L48.296|
                  |L48.288|
000120  1c64              ADDS     r4,r4,#1              ;2042
000122  b2e4              UXTB     r4,r4                 ;2038
                  |L48.292|
000124  4294              CMP      r4,r2                 ;2038
000126  d3ef              BCC      |L48.264|
                  |L48.296|
000128  4294              CMP      r4,r2                 ;2048
00012a  d019              BEQ      |L48.352|
00012c  494d              LDR      r1,|L48.612|
00012e  2005              MOVS     r0,#5                 ;2050
000130  f7fffffe          BL       cmd_FlashBond
000134  7800              LDRB     r0,[r0,#0]            ;2051
000136  2800              CMP      r0,#0                 ;2051
000138  d17e              BNE      |L48.568|
00013a  494a              LDR      r1,|L48.612|
00013c  2007              MOVS     r0,#7                 ;2053
00013e  f7fffffe          BL       cmd_FlashBond
000142  7801              LDRB     r1,[r0,#0]            ;2054
000144  4f48              LDR      r7,|L48.616|
000146  2900              CMP      r1,#0                 ;2054
000148  d00b              BEQ      |L48.354|
00014a  4946              LDR      r1,|L48.612|
00014c  2005              MOVS     r0,#5                 ;2089
00014e  f7fffffe          BL       cmd_FlashBond
000152  4944              LDR      r1,|L48.612|
000154  2008              MOVS     r0,#8                 ;2090
000156  f7fffffe          BL       cmd_FlashBond
00015a  7801              LDRB     r1,[r0,#0]            ;2091
00015c  2900              CMP      r1,#0                 ;2091
00015e  d04a              BEQ      |L48.502|
                  |L48.352|
000160  e06a              B        |L48.568|
                  |L48.354|
000162  4936              LDR      r1,|L48.572|
000164  78c2              LDRB     r2,[r0,#3]            ;2056
000166  7809              LDRB     r1,[r1,#0]            ;2056  ; L2CAP_Buf
000168  1851              ADDS     r1,r2,r1              ;2056
00016a  1e49              SUBS     r1,r1,#1              ;2056
00016c  2980              CMP      r1,#0x80              ;2056
00016e  dd2c              BLE      |L48.458|
000170  493c              LDR      r1,|L48.612|
000172  2005              MOVS     r0,#5                 ;2058
000174  f7fffffe          BL       cmd_FlashBond
000178  493a              LDR      r1,|L48.612|
00017a  2008              MOVS     r0,#8                 ;2059
00017c  f7fffffe          BL       cmd_FlashBond
000180  7801              LDRB     r1,[r0,#0]            ;2061
000182  2900              CMP      r1,#0                 ;2061
000184  d158              BNE      |L48.568|
000186  2400              MOVS     r4,#0                 ;2063
000188  e01a              B        |L48.448|
                  |L48.394|
00018a  2100              MOVS     r1,#0                 ;2065
00018c  00a2              LSLS     r2,r4,#2              ;2040
00018e  e005              B        |L48.412|
                  |L48.400|
000190  58bb              LDR      r3,[r7,r2]            ;2067
000192  1846              ADDS     r6,r0,r1              ;2067
000194  5c5b              LDRB     r3,[r3,r1]            ;2067
000196  1c49              ADDS     r1,r1,#1              ;2067
000198  71b3              STRB     r3,[r6,#6]            ;2067
00019a  b2c9              UXTB     r1,r1                 ;2065
                  |L48.412|
00019c  58ab              LDR      r3,[r5,r2]            ;2065
00019e  791b              LDRB     r3,[r3,#4]            ;2065
0001a0  428b              CMP      r3,r1                 ;2065
0001a2  d8f5              BHI      |L48.400|
0001a4  7104              STRB     r4,[r0,#4]            ;2069
0001a6  58a9              LDR      r1,[r5,r2]            ;2070
0001a8  7909              LDRB     r1,[r1,#4]            ;2070
0001aa  7141              STRB     r1,[r0,#5]            ;2070
0001ac  492d              LDR      r1,|L48.612|
0001ae  2009              MOVS     r0,#9                 ;2071
0001b0  f7fffffe          BL       cmd_FlashBond
0001b4  492b              LDR      r1,|L48.612|
0001b6  2007              MOVS     r0,#7                 ;2072
0001b8  f7fffffe          BL       cmd_FlashBond
0001bc  1c64              ADDS     r4,r4,#1              ;2072
0001be  b2e4              UXTB     r4,r4                 ;2063
                  |L48.448|
0001c0  4927              LDR      r1,|L48.608|
0001c2  7809              LDRB     r1,[r1,#0]            ;2063  ; size_ATTRIBUTE_SERVER_BOND
0001c4  428c              CMP      r4,r1                 ;2063
0001c6  d3e0              BCC      |L48.394|
0001c8  e036              B        |L48.568|
                  |L48.458|
0001ca  2100              MOVS     r1,#0                 ;2078
0001cc  00a2              LSLS     r2,r4,#2              ;2040
0001ce  e005              B        |L48.476|
                  |L48.464|
0001d0  58bb              LDR      r3,[r7,r2]            ;2080
0001d2  1846              ADDS     r6,r0,r1              ;2080
0001d4  5c5b              LDRB     r3,[r3,r1]            ;2080
0001d6  1c49              ADDS     r1,r1,#1              ;2080
0001d8  71b3              STRB     r3,[r6,#6]            ;2080
0001da  b2c9              UXTB     r1,r1                 ;2078
                  |L48.476|
0001dc  58ab              LDR      r3,[r5,r2]            ;2078
0001de  791b              LDRB     r3,[r3,#4]            ;2078
0001e0  428b              CMP      r3,r1                 ;2078
0001e2  d8f5              BHI      |L48.464|
0001e4  7104              STRB     r4,[r0,#4]            ;2082
0001e6  58a9              LDR      r1,[r5,r2]            ;2083
0001e8  7909              LDRB     r1,[r1,#4]            ;2083
0001ea  7141              STRB     r1,[r0,#5]            ;2083
0001ec  491d              LDR      r1,|L48.612|
0001ee  2009              MOVS     r0,#9                 ;2084
0001f0  f7fffffe          BL       cmd_FlashBond
0001f4  e020              B        |L48.568|
                  |L48.502|
0001f6  2400              MOVS     r4,#0                 ;2093
0001f8  e01a              B        |L48.560|
                  |L48.506|
0001fa  2100              MOVS     r1,#0                 ;2095
0001fc  00a2              LSLS     r2,r4,#2              ;2040
0001fe  e005              B        |L48.524|
                  |L48.512|
000200  58bb              LDR      r3,[r7,r2]            ;2097
000202  1846              ADDS     r6,r0,r1              ;2097
000204  5c5b              LDRB     r3,[r3,r1]            ;2097
000206  1c49              ADDS     r1,r1,#1              ;2097
000208  71b3              STRB     r3,[r6,#6]            ;2097
00020a  b2c9              UXTB     r1,r1                 ;2095
                  |L48.524|
00020c  58ab              LDR      r3,[r5,r2]            ;2095
00020e  791b              LDRB     r3,[r3,#4]            ;2095
000210  428b              CMP      r3,r1                 ;2095
000212  d8f5              BHI      |L48.512|
000214  7104              STRB     r4,[r0,#4]            ;2099
000216  58a9              LDR      r1,[r5,r2]            ;2100
000218  7909              LDRB     r1,[r1,#4]            ;2100
00021a  7141              STRB     r1,[r0,#5]            ;2100
00021c  4911              LDR      r1,|L48.612|
00021e  2009              MOVS     r0,#9                 ;2101
000220  f7fffffe          BL       cmd_FlashBond
000224  490f              LDR      r1,|L48.612|
000226  2007              MOVS     r0,#7                 ;2102
000228  f7fffffe          BL       cmd_FlashBond
00022c  1c64              ADDS     r4,r4,#1              ;2102
00022e  b2e4              UXTB     r4,r4                 ;2093
                  |L48.560|
000230  490b              LDR      r1,|L48.608|
000232  7809              LDRB     r1,[r1,#0]            ;2093  ; size_ATTRIBUTE_SERVER_BOND
000234  428c              CMP      r4,r1                 ;2093
000236  d3e0              BCC      |L48.506|
                  |L48.568|
000238  2000              MOVS     r0,#0                 ;2112
00023a  bdfe              POP      {r1-r7,pc}
;;;2122   
                          ENDP

                  |L48.572|
                          DCD      L2CAP_Buf
                  |L48.576|
                          DCD      size_ATTRIBUTE_SERVER
                  |L48.580|
                          DCD      ATTRIBUTE_SERVER
                  |L48.584|
                          DCD      ATTRIBUTE_SERVER_PARAM
                  |L48.588|
                          DCD      SPIBuffer
                  |L48.592|
                          DCD      ATT_Write
                  |L48.596|
                          DCD      ATTRIBUTE_SERVER_PERMISSION
                  |L48.600|
                          DCD      smp_Security_Mode
                  |L48.604|
                          DCD      ATTRIBUTE_SERVER_BOND
                  |L48.608|
                          DCD      size_ATTRIBUTE_SERVER_BOND
                  |L48.612|
                          DCD      smp_Para_Bond_tmp
                  |L48.616|
                          DCD      ATTRIBUTE_SERVER_BOND_PARAM

                          AREA ||i.Prcss_OPCODE_ATT_Write_Response||, CODE, READONLY, ALIGN=2

                  Prcss_OPCODE_ATT_Write_Response PROC
;;;2123   
;;;2124   Uint8 Prcss_OPCODE_ATT_Write_Response(Uint8 connID)
000000  4901              LDR      r1,|L49.8|
;;;2125   {
;;;2126       ATT_WRITE_REQUEST_Packet_Sent = 0;
000002  2000              MOVS     r0,#0
000004  7048              STRB     r0,[r1,#1]
;;;2127   #ifdef _HOST_CLIENT_
;;;2128   #endif  //(#ifdef _HOST_CLIENT_)
;;;2129       return SUCCESS_;
;;;2130   }
000006  4770              BX       lr
;;;2131   
                          ENDP

                  |L49.8|
                          DCD      ||.data||

                          AREA ||i.SMEC_LE_CODE_SMP_Pairing_Confirm||, CODE, READONLY, ALIGN=2

                  SMEC_LE_CODE_SMP_Pairing_Confirm PROC
;;;2993   
;;;2994   void SMEC_LE_CODE_SMP_Pairing_Confirm(MBLK *pMBlk)
000000  b510              PUSH     {r4,lr}
;;;2995   {
000002  4604              MOV      r4,r0
;;;2996       smpC1(k_AES_passkey, r_AES, SECBuffer);    //Srand: r_AES
000004  4a07              LDR      r2,|L50.36|
000006  4908              LDR      r1,|L50.40|
000008  4808              LDR      r0,|L50.44|
00000a  f7fffffe          BL       smpC1
;;;2997   
;;;2998       setBLE_ConnTxData_SMP_Isr(pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L, CODE_SMP_PAIRING_CONFIRM, SECBuffer, SIZE_AES_KEY);
00000e  7a20              LDRB     r0,[r4,#8]
000010  2310              MOVS     r3,#0x10
000012  4a04              LDR      r2,|L50.36|
000014  2103              MOVS     r1,#3
000016  f7fffffe          BL       setBLE_ConnTxData_SMP_Isr
;;;2999       smp_Phase = 2;
00001a  4905              LDR      r1,|L50.48|
00001c  2002              MOVS     r0,#2
00001e  7008              STRB     r0,[r1,#0]
;;;3000   }
000020  bd10              POP      {r4,pc}
;;;3001   
                          ENDP

000022  0000              DCW      0x0000
                  |L50.36|
                          DCD      SECBuffer
                  |L50.40|
                          DCD      r_AES
                  |L50.44|
                          DCD      k_AES_passkey
                  |L50.48|
                          DCD      smp_Phase

                          AREA ||i.SMEC_LE_CODE_SMP_Pairing_Random||, CODE, READONLY, ALIGN=2

                  SMEC_LE_CODE_SMP_Pairing_Random PROC
;;;3002   
;;;3003   void SMEC_LE_CODE_SMP_Pairing_Random(MBLK *pMBlk)
000000  b5f0              PUSH     {r4-r7,lr}
;;;3004   {
;;;3005       Uint8 i;
;;;3006       MBLK *mblk;
;;;3007       Uint8 Mrand[16];
;;;3008   
;;;3009       Knl_MemCpyInv_Isr(Mrand, &pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data[(TAB_BASIC_L2CAP_CODE_SMP+1)], SIZE_AES_KEY);
000002  2210              MOVS     r2,#0x10
000004  b085              SUB      sp,sp,#0x14           ;3004
000006  4604              MOV      r4,r0                 ;3004
000008  1881              ADDS     r1,r0,r2
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       Knl_MemCpyInv_Isr
;;;3010       smpC1(k_AES_passkey, Mrand, SECBuffer);
000010  4a1c              LDR      r2,|L51.132|
000012  4669              MOV      r1,sp
000014  481c              LDR      r0,|L51.136|
000016  f7fffffe          BL       smpC1
;;;3011   
;;;3012       if(smp_TempDef == SMP_TEMPDEF_MCONFIRM)
00001a  4d1c              LDR      r5,|L51.140|
00001c  7828              LDRB     r0,[r5,#0]  ; smp_TempDef
00001e  2801              CMP      r0,#1
000020  d11d              BNE      |L51.94|
;;;3013       {
;;;3014           if(Knl_MemComp_Isr(SECBuffer, smp_Temp16, SIZE_AES_KEY)==SUCCESS_)
000022  2210              MOVS     r2,#0x10
000024  491a              LDR      r1,|L51.144|
000026  4817              LDR      r0,|L51.132|
000028  f7fffffe          BL       Knl_MemComp_Isr
00002c  2700              MOVS     r7,#0
00002e  2800              CMP      r0,#0
000030  d017              BEQ      |L51.98|
;;;3015           {
;;;3016               setBLE_ConnTxData_SMP_Isr(pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L, CODE_SMP_PAIRING_RANDOM, r_AES, SIZE_AES_KEY);
;;;3017   
;;;3018               //Knl_MemCpy_Isr(smp_Temp16, Mrand, SIZE_AES_KEY);
;;;3019               //smpS1(k_AES_passkey, r_AES, smp_Temp16);                                                    //STK gen, smp_Temp16: MRAND
;;;3020               smpS1(k_AES_passkey, r_AES, Mrand, smp_Temp16);                                                         //STK gen, smp_Temp16: MRAND
;;;3021   
;;;3022               smp_TempDef = SMP_TEMPDEF_MRAND;
;;;3023               smp_Para_Bond[SMP_KEY_USE] = SMP_KEY_USE_STK;
;;;3024           }
;;;3025           else                                                                                            //failed, generate error response
;;;3026           {
;;;3027               i = ERR_CODE_SMP_CONFIRM_VALUE_FAILED;
000032  2604              MOVS     r6,#4
000034  4668              MOV      r0,sp
000036  7406              STRB     r6,[r0,#0x10]
;;;3028               setBLE_ConnTxData_SMP_Isr(pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L, CODE_SMP_PAIRING_FAIlED, &i, 1);
000038  7a20              LDRB     r0,[r4,#8]
00003a  2301              MOVS     r3,#1
00003c  aa04              ADD      r2,sp,#0x10
00003e  2105              MOVS     r1,#5
000040  f7fffffe          BL       setBLE_ConnTxData_SMP_Isr
;;;3029               smp_TempDef = SMP_TEMPDEF_NONE;
;;;3030               smp_Phase = 0;
000044  4813              LDR      r0,|L51.148|
000046  702f              STRB     r7,[r5,#0]            ;3029
000048  7007              STRB     r7,[r0,#0]
;;;3031               mblk = GetMsgBlk_Isr();
00004a  f7fffffe          BL       GetMsgBlk_Isr
;;;3032               mblk->Primitive = MHC_EVENT_AUTH_STATUS;
00004e  2177              MOVS     r1,#0x77
000050  7101              STRB     r1,[r0,#4]
;;;3033               mblk->Para.MHC_Le_Auth_status_Para.HCI_Conn_Hdl_L = pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_Conn_Hdl_L;
000052  7a21              LDRB     r1,[r4,#8]
000054  7201              STRB     r1,[r0,#8]
;;;3034               mblk->Para.MHC_Le_Auth_status_Para.HCI_AUTH_STATUS = ERR_CODE_SMP_CONFIRM_VALUE_FAILED;
000056  7246              STRB     r6,[r0,#9]
;;;3035               SndMsgBlk_Isr(mblk, Q_2HCI);
000058  2104              MOVS     r1,#4
00005a  f7fffffe          BL       SndMsgBlk_Isr
                  |L51.94|
;;;3036           }
;;;3037       }
;;;3038   }
00005e  b005              ADD      sp,sp,#0x14
000060  bdf0              POP      {r4-r7,pc}
                  |L51.98|
000062  7a20              LDRB     r0,[r4,#8]            ;3016
000064  2310              MOVS     r3,#0x10              ;3016
000066  4a0c              LDR      r2,|L51.152|
000068  2104              MOVS     r1,#4                 ;3016
00006a  f7fffffe          BL       setBLE_ConnTxData_SMP_Isr
00006e  4b08              LDR      r3,|L51.144|
000070  466a              MOV      r2,sp                 ;3020
000072  4909              LDR      r1,|L51.152|
000074  4804              LDR      r0,|L51.136|
000076  f7fffffe          BL       smpS1
00007a  2002              MOVS     r0,#2                 ;3022
00007c  7028              STRB     r0,[r5,#0]            ;3022
00007e  4807              LDR      r0,|L51.156|
000080  7487              STRB     r7,[r0,#0x12]         ;3023
000082  e7ec              B        |L51.94|
;;;3039   
                          ENDP

                  |L51.132|
                          DCD      SECBuffer
                  |L51.136|
                          DCD      k_AES_passkey
                  |L51.140|
                          DCD      smp_TempDef
                  |L51.144|
                          DCD      smp_Temp16
                  |L51.148|
                          DCD      smp_Phase
                  |L51.152|
                          DCD      r_AES
                  |L51.156|
                          DCD      smp_Para_Bond

                          AREA ||i.SMEC_LE_SMP_Key_Gen||, CODE, READONLY, ALIGN=2

                  SMEC_LE_SMP_Key_Gen PROC
;;;3040   
;;;3041   void SMEC_LE_SMP_Key_Gen(MBLK *pMBlk)
000000  b510              PUSH     {r4,lr}
;;;3042   {
000002  300b              ADDS     r0,r0,#0xb
;;;3043       extern Uint32 seedR16;
;;;3044   
;;;3045       smpAES_in_key(pMBlk->Para.HCLL_LE_ACL_Data_Pkt_Para.HCI_DataPkt_Data);
000004  f7fffffe          BL       smpAES_in_key
;;;3046       smpAES_in_PlainText((Uint8 *)r_AES_INI);
000008  481a              LDR      r0,|L52.116|
00000a  f7fffffe          BL       smpAES_in_PlainText
;;;3047       smpAES_En();
00000e  f7fffffe          BL       smpAES_En
;;;3048   
;;;3049       smpAES_out(r_AES);      //initialization
000012  4819              LDR      r0,|L52.120|
000014  f7fffffe          BL       smpAES_out
;;;3050   
;;;3051       smpAES_in_PlainText((Uint8 *)LTK_FIXED);
000018  4818              LDR      r0,|L52.124|
00001a  f7fffffe          BL       smpAES_in_PlainText
;;;3052   
;;;3053       Knl_MemCpy_Isr(LTK, &r_AES[(r_AES[0]&0x03)], 10);
00001e  4c16              LDR      r4,|L52.120|
000020  220a              MOVS     r2,#0xa
000022  7820              LDRB     r0,[r4,#0]  ; r_AES
000024  0780              LSLS     r0,r0,#30
000026  0f80              LSRS     r0,r0,#30
000028  1901              ADDS     r1,r0,r4
00002a  4815              LDR      r0,|L52.128|
00002c  f7fffffe          BL       Knl_MemCpy_Isr
;;;3054       Knl_MemCpy_Isr(LTK_SEED, &r_AES[(r_AES[0]&0x03)], 10);
000030  7820              LDRB     r0,[r4,#0]  ; r_AES
000032  220a              MOVS     r2,#0xa
000034  0780              LSLS     r0,r0,#30
000036  0f80              LSRS     r0,r0,#30
000038  1901              ADDS     r1,r0,r4
00003a  4812              LDR      r0,|L52.132|
00003c  f7fffffe          BL       Knl_MemCpy_Isr
;;;3055       Knl_CodeCpy_Isr(&LTK[10], &RAND_FIXED[(LTK[0]&0x03)], 5);
000040  4c0f              LDR      r4,|L52.128|
000042  4911              LDR      r1,|L52.136|
000044  7820              LDRB     r0,[r4,#0]  ; LTK
000046  2205              MOVS     r2,#5
000048  0780              LSLS     r0,r0,#30
00004a  0f80              LSRS     r0,r0,#30
00004c  1841              ADDS     r1,r0,r1
00004e  4620              MOV      r0,r4
000050  300a              ADDS     r0,r0,#0xa
000052  f7fffffe          BL       Knl_CodeCpy_Isr
;;;3056       LTK[15] = EDIV_FIXED[(LTK[0]&0x01)];
000056  7820              LDRB     r0,[r4,#0]  ; LTK
000058  490c              LDR      r1,|L52.140|
00005a  07c0              LSLS     r0,r0,#31
00005c  0fc0              LSRS     r0,r0,#31
00005e  5c08              LDRB     r0,[r1,r0]
000060  73e0              STRB     r0,[r4,#0xf]
;;;3057   
;;;3058       smpAES_in_key(LTK);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       smpAES_in_key
;;;3059       smpAES_En();
000068  f7fffffe          BL       smpAES_En
;;;3060       smpAES_out(LTK);        //initialization
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       smpAES_out
;;;3061   }
000072  bd10              POP      {r4,pc}
;;;3062   
                          ENDP

                  |L52.116|
                          DCD      r_AES_INI
                  |L52.120|
                          DCD      r_AES
                  |L52.124|
                          DCD      LTK_FIXED
                  |L52.128|
                          DCD      LTK
                  |L52.132|
                          DCD      LTK_SEED
                  |L52.136|
                          DCD      RAND_FIXED
                  |L52.140|
                          DCD      EDIV_FIXED

                          AREA ||i.initBLEsmp||, CODE, READONLY, ALIGN=2

                  initBLEsmp PROC
;;;3079   
;;;3080   void initBLEsmp(void)
000000  b510              PUSH     {r4,lr}
;;;3081   {
;;;3082       Uint8 i;
;;;3083       //extern const Uint8 TAB_ZERO_128[];
;;;3084   
;;;3085       for(i=0; i<11; i++) //size of RSP_PAIRING_REQUEST
;;;3086       {
;;;3087           rsp_pairing_request_table[i] = RSP_PAIRING_REQUEST[i];
000002  4a0a              LDR      r2,|L53.44|
000004  490a              LDR      r1,|L53.48|
000006  2000              MOVS     r0,#0                 ;3085
                  |L53.8|
000008  5c13              LDRB     r3,[r2,r0]
00000a  540b              STRB     r3,[r1,r0]
00000c  1c40              ADDS     r0,r0,#1
00000e  b2c0              UXTB     r0,r0                 ;3085
000010  280b              CMP      r0,#0xb               ;3085
000012  d3f9              BCC      |L53.8|
;;;3088       }
;;;3089   
;;;3090   
;;;3091       smp_TempDef = SMP_TEMPDEF_NONE;                 //initialization
000014  4907              LDR      r1,|L53.52|
000016  2000              MOVS     r0,#0
000018  7008              STRB     r0,[r1,#0]
;;;3092       smp_Authorization = 0;                          //initialization
00001a  4907              LDR      r1,|L53.56|
00001c  7008              STRB     r0,[r1,#0]
;;;3093   
;;;3094       smp_Para_Bond[SMP_KEY_USE] = SMP_KEY_USE_STK;
00001e  4907              LDR      r1,|L53.60|
000020  7488              STRB     r0,[r1,#0x12]
;;;3095       initBLEsmp_Re();                                //initialization
000022  f7fffffe          BL       initBLEsmp_Re
;;;3096       //initialization, smp_Para_Bond[SMP_PREQ_MAX_ENCR_KEY_SIZE] = 0;
;;;3097       //initialization, smp_Para_Bond[SMP_KEY_USE] = SMP_KEY_USE_STK;
;;;3098       //initialization, smp_Para_Bond[SEL_STK_GEN_METHOD] = STK_GEN_MTHD_JUST_WORKS;
;;;3099   
;;;3100       smpPasskey_init();
000026  f7fffffe          BL       smpPasskey_init
;;;3101   }
00002a  bd10              POP      {r4,pc}
;;;3102   #else   //(#ifdef _SMP_ON_)
                          ENDP

                  |L53.44|
                          DCD      RSP_PAIRING_REQUEST
                  |L53.48|
                          DCD      rsp_pairing_request_table
                  |L53.52|
                          DCD      smp_TempDef
                  |L53.56|
                          DCD      smp_Authorization
                  |L53.60|
                          DCD      smp_Para_Bond

                          AREA ||i.initBLEsmp_Re||, CODE, READONLY, ALIGN=2

                  initBLEsmp_Re PROC
;;;3064   
;;;3065   void initBLEsmp_Re(void)
000000  b510              PUSH     {r4,lr}
;;;3066   {
;;;3067       extern const Uint8 TAB_ZERO_128[];
;;;3068   
;;;3069       smp_Security_Mode = SMP_SECURITY_MODE_1_NO_SECURITY;    //initialization, 131218
000002  4908              LDR      r1,|L54.36|
000004  2000              MOVS     r0,#0
000006  7008              STRB     r0,[r1,#0]
;;;3070       smp_Encryption = 0;                     //initialization
000008  4907              LDR      r1,|L54.40|
00000a  7008              STRB     r0,[r1,#0]
;;;3071       smp_Phase = 0;                          //initialization
00000c  4907              LDR      r1,|L54.44|
00000e  7008              STRB     r0,[r1,#0]
;;;3072   
;;;3073       if(smp_Para_Bond[SMP_KEY_USE]!=SMP_KEY_USE_LTK)
000010  4807              LDR      r0,|L54.48|
000012  7c80              LDRB     r0,[r0,#0x12]  ; smp_Para_Bond
000014  2801              CMP      r0,#1
000016  d004              BEQ      |L54.34|
;;;3074       {
;;;3075           Knl_CodeCpy(smp_Para_Bond, TAB_ZERO_128, SMP_PARA_BOND_SIZE);   //initialization
000018  2225              MOVS     r2,#0x25
00001a  4906              LDR      r1,|L54.52|
00001c  4804              LDR      r0,|L54.48|
00001e  f7fffffe          BL       Knl_CodeCpy
                  |L54.34|
;;;3076       }
;;;3077   }
000022  bd10              POP      {r4,pc}
;;;3078   
                          ENDP

                  |L54.36|
                          DCD      smp_Security_Mode
                  |L54.40|
                          DCD      smp_Encryption
                  |L54.44|
                          DCD      smp_Phase
                  |L54.48|
                          DCD      smp_Para_Bond
                  |L54.52|
                          DCD      TAB_ZERO_128

                          AREA ||i.initBLEsw||, CODE, READONLY, ALIGN=2

                  initBLEsw PROC
;;;3114   
;;;3115   void initBLEsw(void)
000000  b510              PUSH     {r4,lr}
;;;3116   {
;;;3117   #ifdef _HOST_CLIENT_
;;;3118       extern void init_ATT_SERVER_CLIENT(void);
;;;3119   
;;;3120       init_ATT_SERVER_CLIENT();
;;;3121   #endif  //(#ifdef _HOST_CLIENT_)
;;;3122   //#ifdef _PROFILE_HOGP_
;;;3123   //#ifdef _PROFILE_HOGP_KEYBOARD_
;;;3124   //    STATE_HID_reportKB = STATE_HID_REPORT_KB_INITIAL;           //initialization
;;;3125   //    HID_report_KB_key_temp = 0;
;;;3126   //#endif
;;;3127   //#ifdef _PROFILE_HOGP_COMSUMER_
;;;3128   //    STATE_HID_reportCS = STATE_HID_REPORT_CS_INITIAL;           //initialization
;;;3129   //    HID_report_CS_key_temp[0] = 0;
;;;3130   //    HID_report_CS_key_temp[1] = 0;
;;;3131   //#endif
;;;3132   //#ifdef _PROFILE_HOGP_EMC_
;;;3133   //    STATE_HID_report81 = STATE_HID_REPORT_81_INITIAL;           //initialization
;;;3134   //    HID_report_81_key_temp = 0;
;;;3135   //#endif
;;;3136   //#ifdef _PROFILE_HOGP_MOUSE_
;;;3137   //    STATE_HID_reportMS = STATE_HID_REPORT_MS_INITIAL;           //initialization
;;;3138   //    HID_report_MS_key_temp = 0;
;;;3139   //#endif
;;;3140   //#endif      //#ifdef _PROFILE_HOGP_
;;;3141   //#ifdef _PROFILE_CSCP_
;;;3142   //    CSCS_report_temp = 0;
;;;3143   //#endif
;;;3144   //#ifdef _PROFILE_LNS_
;;;3145   //    STATE_LNS_LN_cp = STATE_LNS_LN_CP_INITIAL;                  //initialization
;;;3146   //    for(i=0; i<3; i++)
;;;3147   //    {
;;;3148   //        LNS_cumulative[i] = 0;                                  //initialization
;;;3149   //    }
;;;3150   //    mask_LNS[0] = 0;                                            //initialization
;;;3151   //#endif
;;;3152   //#ifdef _PROFILE_GLS_
;;;3153   //    STATE_GLS_RA_cp = STATE_GLS_RA_CP_INITIAL;                  //initialization
;;;3154   //    length_GLS_MEAS_REC = 0;                                    //initialization
;;;3155   //    sn_base_GLS_MEAS_REC = 0;                                   //initialization
;;;3156   //    tab_length_GLS_MEAS_REC = 0;                                //initialization
;;;3157   //    tab_length_max_GLS_MEAS_REC = 0;                            //initialization
;;;3158   //#endif
;;;3159   //#ifdef _PROFILE_CPS_
;;;3160   //    STATE_CPS_CP_cp = STATE_CPS_CP_CP_INITIAL;                  //initialization
;;;3161   //    for(i=0; i<2; i++)
;;;3162   //    {
;;;3163   //        CPS_crank_lgth[i] = 0;                                  //initialization
;;;3164   //    }
;;;3165   //#endif
;;;3166   //#ifdef _PROFILE_OTA_
;;;3167   //    state0_OTA_DATA = STATE_OTA_DATA_INITIAL;                   //initialization
;;;3168   //    state0_OTA_CMD = STATE_OTA_CMD_INITIAL;                    //initialization
;;;3169   //#endif
;;;3170   
;;;3171       ATT_INDICATION_Packet_Sent = 0; //initialization
000002  4903              LDR      r1,|L55.16|
000004  2000              MOVS     r0,#0
000006  7008              STRB     r0,[r1,#0]
;;;3172   //    aTT_MTU = SIZE_DEFAULT_ATT_MTU; //initialization
;;;3173   
;;;3174   #ifdef _SMP_ON_
;;;3175       initBLEsmp();
000008  f7fffffe          BL       initBLEsmp
;;;3176   #endif
;;;3177   }
00000c  bd10              POP      {r4,pc}
;;;3178   
                          ENDP

00000e  0000              DCW      0x0000
                  |L55.16|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Prcss_BLE_CODE_SMP
                          DCD      Prcss_BLE_CODE_SMP_Reserved
                          DCD      Prcss_BLE_CODE_SMP_Pairing_Request
                          DCD      Prcss_BLE_CODE_SMP_Pairing_Response
                          DCD      Prcss_BLE_CODE_SMP_Pairing_Confirm
                          DCD      Prcss_BLE_CODE_SMP_Pairing_Random
                          DCD      Prcss_BLE_CODE_SMP_Pairing_Failed
                          DCD      Prcss_BLE_CODE_SMP_Encryption_Information
                          DCD      Prcss_BLE_CODE_SMP_Master_Identification
                          DCD      Prcss_BLE_CODE_SMP_Identity_Information
                          DCD      Prcss_BLE_CODE_SMP_Identity_Address_Information
                          DCD      Prcss_BLE_CODE_SMP_Signing_Information
                          DCD      Prcss_BLE_CODE_SMP_Security_Request
                  Prcss_BLE_OPCODE_ATT
                          DCD      Prcss_OPCODE_ATT_NULL
                          DCD      Prcss_OPCODE_ATT_Error_Response
                          DCD      Prcss_OPCODE_ATT_Exchange_MTU_Request
                          DCD      Prcss_OPCODE_ATT_Exchange_MTU_Response
                          DCD      Prcss_OPCODE_ATT_Find_Information_Request
                          DCD      Prcss_OPCODE_ATT_Find_Information_Response
                          DCD      Prcss_OPCODE_ATT_Find_By_Type_Value_Request
                          DCD      Prcss_OPCODE_ATT_Find_By_Type_Value_Response
                          DCD      Prcss_OPCODE_ATT_Read_By_Type_Request
                          DCD      Prcss_OPCODE_ATT_Read_By_Type_Response
                          DCD      Prcss_OPCODE_ATT_Read_Request
                          DCD      Prcss_OPCODE_ATT_Read_Response
                          DCD      Prcss_OPCODE_ATT_Read_Blob_Request
                          DCD      Prcss_OPCODE_ATT_Read_Blob_Response
                          DCD      Prcss_OPCODE_ATT_Read_Multiple_Request
                          DCD      Prcss_OPCODE_ATT_Read_Multiple_Response
                          DCD      Prcss_OPCODE_ATT_Read_by_Group_Type_Request
                          DCD      Prcss_OPCODE_ATT_Read_by_Group_Type_Response
                          DCD      Prcss_OPCODE_ATT_Write_Request
                          DCD      Prcss_OPCODE_ATT_Write_Response
                          DCD      Prcss_OPCODE_ATT_NULL
                          DCD      Prcss_OPCODE_ATT_NULL
                          DCD      Prcss_OPCODE_ATT_Prepare_Write_Request
                          DCD      Prcss_OPCODE_ATT_Prepare_Write_Response
                          DCD      Prcss_OPCODE_ATT_Execute_Write_Request
                          DCD      Prcss_OPCODE_ATT_Execute_Write_Response
                          DCD      Prcss_OPCODE_ATT_NULL
                          DCD      Prcss_OPCODE_ATT_Handle_Value_Notification
                          DCD      Prcss_OPCODE_ATT_NULL
                          DCD      Prcss_OPCODE_ATT_Handle_Value_Indication
                          DCD      Prcss_OPCODE_ATT_Handle_Value_Confirmation

                          AREA ||area_number.59||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.59||, ||.constdata||
                  Prcss_L2CAP_CID
                          DCD      Prcss_L2CAP_CID_NULL_IDENTIFIER
                          DCD      Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL
                          DCD      Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL
                          DCD      Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL
                          DCD      Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL
                          DCD      Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL
                          DCD      Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL

                          AREA ||.data||, DATA, ALIGN=0

                  ATT_INDICATION_Packet_Sent
000000  00                DCB      0x00
                  ATT_WRITE_REQUEST_Packet_Sent
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\source\\mmi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_mmi_c_2f6ba1f2____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_mmi_c_2f6ba1f2____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_mmi_c_2f6ba1f2____REVSH|
#line 402
|__asm___5_mmi_c_2f6ba1f2____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;503      */
;;;504    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4906              LDR      r1,|L1.28|
;;;505    {
;;;506        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L1.32|
000008  6148              STR      r0,[r1,#0x14]
;;;507        SysTick->VAL  = (0x00);
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
;;;508        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L1.18|
;;;509    
;;;510        /* Waiting for down-count to zero */
;;;511        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L1.18|
;;;512    
;;;513        /* Disable SysTick counter */
;;;514        SysTick->CTRL = 0;
000018  610a              STR      r2,[r1,#0x10]
;;;515    }
00001a  4770              BX       lr
;;;516    
                          ENDP

                  |L1.28|
                          DCD      CyclesPerUs
                  |L1.32|
                          DCD      0xe000e000

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;687     */
;;;688    __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0783              LSLS     r3,r0,#30
;;;689    {
;;;690      if ((int32_t)(IRQn) < 0)
;;;691      {
;;;692        SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
000002  22ff              MOVS     r2,#0xff
000004  0edb              LSRS     r3,r3,#27
000006  409a              LSLS     r2,r2,r3
000008  0789              LSLS     r1,r1,#30
00000a  0e09              LSRS     r1,r1,#24
00000c  4099              LSLS     r1,r1,r3
00000e  2800              CMP      r0,#0                 ;690
000010  da0b              BGE      |L2.42|
000012  0700              LSLS     r0,r0,#28
000014  0f00              LSRS     r0,r0,#28
000016  3808              SUBS     r0,r0,#8
000018  0883              LSRS     r3,r0,#2
00001a  4808              LDR      r0,|L2.60|
00001c  009b              LSLS     r3,r3,#2
00001e  1818              ADDS     r0,r3,r0
000020  69c3              LDR      r3,[r0,#0x1c]
000022  4393              BICS     r3,r3,r2
000024  430b              ORRS     r3,r3,r1
000026  61c3              STR      r3,[r0,#0x1c]
;;;693           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;694      }
;;;695      else
;;;696      {
;;;697        NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
;;;698           (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
;;;699      }
;;;700    }
000028  4770              BX       lr
                  |L2.42|
00002a  0883              LSRS     r3,r0,#2              ;697
00002c  4804              LDR      r0,|L2.64|
00002e  009b              LSLS     r3,r3,#2              ;697
000030  1818              ADDS     r0,r3,r0              ;697
000032  6803              LDR      r3,[r0,#0]            ;697
000034  4393              BICS     r3,r3,r2              ;697
000036  430b              ORRS     r3,r3,r1              ;697
000038  6003              STR      r3,[r0,#0]            ;697
00003a  4770              BX       lr
;;;701    
                          ENDP

                  |L2.60|
                          DCD      0xe000ed00
                  |L2.64|
                          DCD      0xe000e400

                          AREA ||i.RF_Open||, CODE, READONLY, ALIGN=2

                  RF_Open PROC
;;;130    
;;;131    void RF_Open()
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133    #ifndef _TMR_USE_INTERNAL_
;;;134        MCU_Timer0Enable();    //new add, Init Timer0
;;;135    #endif  //(#ifndef _TMR_USE_INTERNAL_)
;;;136    
;;;137        /* Wait RF PHY stable */
;;;138        CLK_SysTickDelay(25000);
000002  4807              LDR      r0,|L3.32|
000004  f7fffffe          BL       CLK_SysTickDelay
;;;139    
;;;140        /* Initialize Gpio reset pin */
;;;141        MCU_GpioResetInit();
000008  f7fffffe          BL       MCU_GpioResetInit
;;;142    
;;;143        /* Do Gpio Reset */
;;;144        MCU_GpioReset();
00000c  f7fffffe          BL       MCU_GpioReset
;;;145        CLK_SysTickDelay(50000);     //HW 32K clk count 15ms, but need to consider 32K deviation & MCU HIRC deviation
000010  4804              LDR      r0,|L3.36|
000012  f7fffffe          BL       CLK_SysTickDelay
;;;146    
;;;147        /* SPI IO remapping */
;;;148        RF_SpiIoMapping();
000016  f7fffffe          BL       RF_SpiIoMapping
;;;149    
;;;150        /* initial SPI PDMA */
;;;151        SPI_PDMA_Init();
00001a  f7fffffe          BL       SPI_PDMA_Init
;;;152    }
00001e  bd10              POP      {r4,pc}
;;;153    
                          ENDP

                  |L3.32|
                          DCD      0x000061a8
                  |L3.36|
                          DCD      0x0000c350

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;19     */
;;;20     void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2259              MOVS     r2,#0x59
000004  4d26              LDR      r5,|L4.160|
000006  2016              MOVS     r0,#0x16
000008  2188              MOVS     r1,#0x88
                  |L4.10|
00000a  602a              STR      r2,[r5,#0]
00000c  6028              STR      r0,[r5,#0]
00000e  6029              STR      r1,[r5,#0]
000010  682b              LDR      r3,[r5,#0]
000012  2b00              CMP      r3,#0
000014  d0f9              BEQ      |L4.10|
;;;21     {
;;;22         int8_t irqno;
;;;23     
;;;24         /* Unlock protected registers */
;;;25         SYS_UnlockReg();
;;;26     
;;;27         /*---------------------------------------------------------------------------------------------------------*/
;;;28         /* Init System Clock                                                                                       */
;;;29         /*---------------------------------------------------------------------------------------------------------*/
;;;30     
;;;31     #if (_BOARD_SELECTION_==_BOARD_NUVOTON_M031TD2AE_QFN33_)   //HIRC
;;;32         //GPIO_SetMode(PF, (BIT2|BIT3), GPIO_MODE_INPUT);
;;;33         // Enable HIRC
;;;34         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;35         // Waiting for HIRC clock ready
;;;36         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;37     #elif (_BOARD_SELECTION_==_BOARD_NUVOTON_M031_SIP_)
;;;38     #if (_USE_MCU_CLK_==MCU_CLK_SOURCE_HXT) //HXT
;;;39         GPIO_SetMode(PF, (BIT2|BIT3), GPIO_MODE_INPUT);
;;;40         CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk|CLK_PWRCTL_HIRCEN_Msk);
;;;41         CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk|CLK_STATUS_HIRCSTB_Msk);
;;;42     #else                                   //HIRC   
;;;43         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
;;;44         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
;;;45     #endif
;;;46     #else
;;;47         //GPIO_SetMode(PF, (BIT2|BIT3), GPIO_MODE_INPUT);
;;;48         // Enable HXT
;;;49         CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
;;;50         // Waiting for HXT clock ready
;;;51         CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
;;;52     #endif
;;;53     
;;;54         /* Set core clock as PLL_CLOCK from PLL */
;;;55         //CLK_SetCoreClock(CPU_CLOCK_RATE);  //48MHz for M0, 64MHz for M4
;;;56         CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC, CLK_CLKDIV0_HCLK(1));
000022  2100              MOVS     r1,#0
000024  2007              MOVS     r0,#7
000026  f7fffffe          BL       CLK_SetHCLK
;;;57     
;;;58     #if (_BOARD_SELECTION_==_BOARD_NUVOTON_M487JIDAE_B3_)  //M487
;;;59         /* Set both PCLK0 and PCLK1 as HCLK/PCLK_DIV */
;;;60     #if (PCLK_DIV==4)
;;;61         CLK->PCLKDIV = CLK_PCLKDIV_PCLK0DIV4 | CLK_PCLKDIV_PCLK1DIV4;  //96/4=24MHz
;;;62     #elif (PCLK_DIV==2)
;;;63         CLK->PCLKDIV = CLK_PCLKDIV_PCLK0DIV2 | CLK_PCLKDIV_PCLK1DIV2;  //64/2=32MHz
;;;64     #elif (PCLK_DIV==1)
;;;65         CLK->PCLKDIV = CLK_PCLKDIV_PCLK0DIV1 | CLK_PCLKDIV_PCLK1DIV1;
;;;66     #endif //(PCLK_DIV==4)
;;;67     
;;;68     #else //M031 series
;;;69         /* Set both PCLK0 and PCLK1 as HCLK/PCLK_DIV */
;;;70     #if (PCLK_DIV==4)
;;;71         CLK->PCLKDIV = CLK_PCLKDIV_APB0DIV_DIV4 | CLK_PCLKDIV_APB1DIV_DIV4;
;;;72     #elif (PCLK_DIV==2)
;;;73         CLK->PCLKDIV = CLK_PCLKDIV_APB0DIV_DIV2 | CLK_PCLKDIV_APB1DIV_DIV2;  //48/2=24MHz
00002a  491e              LDR      r1,|L4.164|
00002c  2011              MOVS     r0,#0x11
00002e  6348              STR      r0,[r1,#0x34]
;;;74     #elif (PCLK_DIV==1)
;;;75         CLK->PCLKDIV = CLK_PCLKDIV_APB0DIV_DIV1 | CLK_PCLKDIV_APB1DIV_DIV1;
;;;76     #endif //(PCLK_DIV==4)
;;;77     
;;;78     #endif //(_BOARD_SELECTION_==_BOARD_NUVOTON_M487JIDAE_B3_))
;;;79     
;;;80     
;;;81         //debug print use UART0
;;;82         /* Select HIRC as the clock source of UART0 */
;;;83         CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
000030  4c1d              LDR      r4,|L4.168|
000032  2103              MOVS     r1,#3
000034  2200              MOVS     r2,#0
000036  0609              LSLS     r1,r1,#24
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       CLK_SetModuleClock
;;;84         /* Select HIRC as the clock source of UART1 */
;;;85         CLK_SetModuleClock(UART1_MODULE, CLK_CLKSEL1_UART1SEL_HIRC, CLK_CLKDIV0_UART1(1));
00003e  4e1b              LDR      r6,|L4.172|
000040  2103              MOVS     r1,#3
000042  2200              MOVS     r2,#0
000044  0709              LSLS     r1,r1,#28
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       CLK_SetModuleClock
;;;86     
;;;87         /* Enable UART peripheral clock */
;;;88         CLK_EnableModuleClock(UART0_MODULE);
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       CLK_EnableModuleClock
;;;89         CLK_EnableModuleClock(UART1_MODULE);
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       CLK_EnableModuleClock
;;;90     
;;;91         /*---------------------------------------------------------------------------------------------------------*/
;;;92         /* Init I/O Multi-function                                                                                 */
;;;93         /*---------------------------------------------------------------------------------------------------------*/
;;;94     #if (_BOARD_SELECTION_==_BOARD_NUVOTON_M031_SIP_)   //Nuvoton SIP EVK
;;;95         /* Set PA multi-function pins for UART0 RXD=PA.0 and TXD=PA.1 */
;;;96         SYS->GPA_MFPL = (SYS->GPA_MFPL & ~(SYS_GPA_MFPL_PA0MFP_Msk | SYS_GPA_MFPL_PA1MFP_Msk)) |
;;;97                         (SYS_GPA_MFPL_PA0MFP_UART0_RXD | SYS_GPA_MFPL_PA1MFP_UART0_TXD);
;;;98     #else
;;;99         /* Set PB multi-function pins for UART0 RXD=PB.12 and TXD=PB.13 */
;;;100        SYS->GPB_MFPH = (SYS->GPB_MFPH & ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk)) |     //It is also VCOM TX/RX port
000058  06a0              LSLS     r0,r4,#26
00005a  6bc1              LDR      r1,[r0,#0x3c]
00005c  22ff              MOVS     r2,#0xff
00005e  0412              LSLS     r2,r2,#16
000060  4391              BICS     r1,r1,r2
000062  2233              MOVS     r2,#0x33
000064  0452              LSLS     r2,r2,#17
000066  1889              ADDS     r1,r1,r2
000068  63c1              STR      r1,[r0,#0x3c]
;;;101                        (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
;;;102    #endif
;;;103    
;;;104    
;;;105    #if (_BOARD_SELECTION_==_BOARD_NUVOTON_M031TD2AE_QFN33_)   //Nuvoton SIP EVK
;;;106        // UART1
;;;107        SYS->GPB_MFPL = (SYS->GPB_MFPL & ~(SYS_GPB_MFPL_PB2MFP_Msk | SYS_GPB_MFPL_PB3MFP_Msk)) |
00006a  6b81              LDR      r1,[r0,#0x38]
00006c  22ff              MOVS     r2,#0xff
00006e  0212              LSLS     r2,r2,#8
000070  4391              BICS     r1,r1,r2
000072  2233              MOVS     r2,#0x33
000074  0252              LSLS     r2,r2,#9
000076  1889              ADDS     r1,r1,r2
000078  6381              STR      r1,[r0,#0x38]
;;;108                        (SYS_GPB_MFPL_PB2MFP_UART1_RXD | SYS_GPB_MFPL_PB3MFP_UART1_TXD);
;;;109    #endif
;;;110    
;;;111        /* Set only BLE interrupt with the highest priority to mkae sure RF can handle event in time */
;;;112        for(irqno = BOD_IRQn; irqno <= RTC_IRQn; irqno++)
00007a  2400              MOVS     r4,#0
                  |L4.124|
;;;113        {
;;;114            NVIC_SetPriority((IRQn_Type)irqno, 1);
00007c  2101              MOVS     r1,#1
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       NVIC_SetPriority
000084  1c64              ADDS     r4,r4,#1
000086  b264              SXTB     r4,r4                 ;112
000088  2c1f              CMP      r4,#0x1f              ;112
00008a  ddf7              BLE      |L4.124|
;;;115        }
;;;116    
;;;117    #if ((_BOARD_SELECTION_ == _BOARD_NUVOTON_M031SE_)||(_BOARD_SELECTION_ == _BOARD_NUVOTON_M032SE3AE_))
;;;118        NVIC_SetPriority(GPIO_PAPB_IRQn, 0);
;;;119        NVIC_SetPriority(GPIO_PAPBPGPH_IRQn, 0);
;;;120    #else
;;;121        NVIC_SetPriority(GPIO_PCPDPEPF_IRQn, 0);
00008c  2100              MOVS     r1,#0
00008e  2005              MOVS     r0,#5
000090  f7fffffe          BL       NVIC_SetPriority
;;;122    #endif
;;;123    
;;;124        /* Update System Core Clock */
;;;125        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock and CyclesPerUs automatically. */
;;;126        SystemCoreClockUpdate();
000094  f7fffffe          BL       SystemCoreClockUpdate
000098  2000              MOVS     r0,#0
00009a  6028              STR      r0,[r5,#0]
;;;127        /* Lock protected registers */
;;;128        SYS_LockReg();
;;;129    }
00009c  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

00009e  0000              DCW      0x0000
                  |L4.160|
                          DCD      0x40000100
                  |L4.164|
                          DCD      0x40000200
                  |L4.168|
                          DCD      0x5f803d10
                  |L4.172|
                          DCD      0x5fc03d91

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                  UART0_Init PROC
;;;153    
;;;154    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;155    {
;;;156        UART_Open(UART0, 115200);
000002  4c07              LDR      r4,|L5.32|
000004  21e1              MOVS     r1,#0xe1
000006  0249              LSLS     r1,r1,#9
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       UART_Open
;;;157        UART_EnableInt(UART0,(UART_INTEN_RDAIEN_Msk|UART_INTEN_RXTOIEN_Msk));
00000e  2111              MOVS     r1,#0x11
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       UART_EnableInt
000016  2001              MOVS     r0,#1
000018  4902              LDR      r1,|L5.36|
00001a  0300              LSLS     r0,r0,#12
00001c  6008              STR      r0,[r1,#0]
;;;158        NVIC_EnableIRQ(UART02_IRQn);
;;;159    }
00001e  bd10              POP      {r4,pc}
;;;160    
                          ENDP

                  |L5.32|
                          DCD      0x40070000
                  |L5.36|
                          DCD      0xe000e100

                          AREA ||i.UART1_Init||, CODE, READONLY, ALIGN=2

                  UART1_Init PROC
;;;161    
;;;162    void UART1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;163    {
;;;164        UART_Open(UART1, 115200);
000002  4c07              LDR      r4,|L6.32|
000004  21e1              MOVS     r1,#0xe1
000006  0249              LSLS     r1,r1,#9
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       UART_Open
;;;165        UART_EnableInt(UART1,(UART_INTEN_RDAIEN_Msk|UART_INTEN_RXTOIEN_Msk));
00000e  2111              MOVS     r1,#0x11
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       UART_EnableInt
000016  2001              MOVS     r0,#1
000018  4902              LDR      r1,|L6.36|
00001a  0340              LSLS     r0,r0,#13
00001c  6008              STR      r0,[r1,#0]
;;;166        NVIC_EnableIRQ(UART1_IRQn);
;;;167    }
00001e  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L6.32|
                          DCD      0x40071000
                  |L6.36|
                          DCD      0xe000e100

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  main PROC
;;;172    */
;;;173    int main(void)
000000  f7fffffe          BL       SYS_Init
;;;174    {
;;;175        extern BleStackStatus Ble_Kernel_Root(void);
;;;176        extern void BleApp_Main(void);
;;;177        extern void BleApp_Init(void);
;;;178    
;;;179        /* Init System, IP clock and multi-function I/O. */
;;;180        SYS_Init();
;;;181    
;;;182        /* Init UART0 - for control test item and debug message */
;;;183        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;184    
;;;185        /* Init UART0 - for connecting to golden dongle */
;;;186        UART1_Init();
000008  f7fffffe          BL       UART1_Init
;;;187    
;;;188        /* Enable the BLE RF PHY */
;;;189        RF_Open();
00000c  f7fffffe          BL       RF_Open
;;;190    
;;;191        D_msg("-------------------\n");
000010  a010              ADR      r0,|L7.84|
000012  f7fffffe          BL       __2printf
;;;192        D_msg("  FT Test          \n");
000016  a015              ADR      r0,|L7.108|
000018  f7fffffe          BL       __2printf
;;;193        D_msg("-------------------\n");
00001c  a00d              ADR      r0,|L7.84|
00001e  f7fffffe          BL       __2printf
;;;194    
;;;195        D_msg("Chip_ID=0x%x\n",ChipId_Get());
000022  f7fffffe          BL       ChipId_Get
000026  4601              MOV      r1,r0
000028  a016              ADR      r0,|L7.132|
00002a  f7fffffe          BL       __2printf
;;;196    
;;;197        if(WDT_GET_RESET_FLAG() == 1)
00002e  4819              LDR      r0,|L7.148|
000030  6801              LDR      r1,[r0,#0]
000032  0749              LSLS     r1,r1,#29
000034  d505              BPL      |L7.66|
;;;198        {
;;;199            WDT_CLEAR_RESET_FLAG();
000036  6801              LDR      r1,[r0,#0]
000038  2228              MOVS     r2,#0x28
00003a  4391              BICS     r1,r1,r2
00003c  2204              MOVS     r2,#4
00003e  4311              ORRS     r1,r1,r2
000040  6001              STR      r1,[r0,#0]
                  |L7.66|
;;;200        }
;;;201    
;;;202        BleApp_Init();
000042  f7fffffe          BL       BleApp_Init
                  |L7.70|
;;;203    
;;;204        while(1)
;;;205        {
;;;206            /* Run BLE kernel, the task priority is LL > Host */
;;;207            if(Ble_Kernel_Root() == BLESTACK_STATUS_FREE)
000046  f7fffffe          BL       Ble_Kernel_Root
00004a  2809              CMP      r0,#9
00004c  d1fb              BNE      |L7.70|
;;;208            {
;;;209                BleApp_Main();
00004e  f7fffffe          BL       BleApp_Main
000052  e7f8              B        |L7.70|
;;;210            }
;;;211        }
;;;212    }
                          ENDP

                  |L7.84|
000054  2d2d2d2d          DCB      "-------------------\n",0
000058  2d2d2d2d
00005c  2d2d2d2d
000060  2d2d2d2d
000064  2d2d2d0a
000068  00      
000069  00                DCB      0
00006a  00                DCB      0
00006b  00                DCB      0
                  |L7.108|
00006c  20204654          DCB      "  FT Test          \n",0
000070  20546573
000074  74202020
000078  20202020
00007c  2020200a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L7.132|
000084  43686970          DCB      "Chip_ID=0x%x\n",0
000088  5f49443d
00008c  30782578
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L7.148|
                          DCD      0x40040000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_SYS_Init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_SYS_Init____REVSH|
#line 402
|__asm___6_main_c_SYS_Init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0

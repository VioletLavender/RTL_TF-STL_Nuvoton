; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ft_func.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ft_func.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\ft_func.crf ..\FT_Func\ft_func.c]
                          THUMB

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;503      */
;;;504    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4906              LDR      r1,|L1.28|
;;;505    {
;;;506        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L1.32|
000008  6148              STR      r0,[r1,#0x14]
;;;507        SysTick->VAL  = (0x00);
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
;;;508        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L1.18|
;;;509    
;;;510        /* Waiting for down-count to zero */
;;;511        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L1.18|
;;;512    
;;;513        /* Disable SysTick counter */
;;;514        SysTick->CTRL = 0;
000018  610a              STR      r2,[r1,#0x10]
;;;515    }
00001a  4770              BX       lr
;;;516    
                          ENDP

                  |L1.28|
                          DCD      CyclesPerUs
                  |L1.32|
                          DCD      0xe000e000

                          AREA ||i.RT568_16MCLK_Test||, CODE, READONLY, ALIGN=2

                  RT568_16MCLK_Test PROC
;;;504    */
;;;505    RT568FT_TestStatus RT568_16MCLK_Test(void)
000000  b510              PUSH     {r4,lr}
;;;506    {
;;;507        // disable MCU interrupts
;;;508        MCU_GpioIntDisable();
000002  f7fffffe          BL       MCU_GpioIntDisable
;;;509    
;;;510        RT568_SetCmd((uint32_t)Test_LDO_16MCLK_Reg);
000006  4804              LDR      r0,|L2.24|
000008  f7fffffe          BL       RT568_SetCmd
;;;511    
;;;512    
;;;513        Tiny_Delay(10);
00000c  200a              MOVS     r0,#0xa
00000e  f7fffffe          BL       CLK_SysTickDelay
;;;514        return RT568_TEST_OK;
000012  2000              MOVS     r0,#0
;;;515    }
000014  bd10              POP      {r4,pc}
;;;516    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      ||.constdata||+0x400

                          AREA ||i.RT568_CheckRssiValue||, CODE, READONLY, ALIGN=1

                  RT568_CheckRssiValue PROC
;;;597    
;;;598    static Uint8 RT568_CheckRssiValue(Sint8 rssiValue,Sint8 rssiBaseValue, Uint8 rssiRange)
000000  b252              SXTB     r2,r2
;;;599    {
;;;600        // check RSSI value
;;;601        if((rssiValue > (rssiBaseValue + (Sint8)rssiRange)) || (rssiValue < (rssiBaseValue - (Sint8)rssiRange)))
000002  188b              ADDS     r3,r1,r2
000004  4283              CMP      r3,r0
000006  db02              BLT      |L3.14|
000008  1a89              SUBS     r1,r1,r2
00000a  4281              CMP      r1,r0
00000c  dd01              BLE      |L3.18|
                  |L3.14|
;;;602        {
;;;603            // Error rssi value
;;;604            return 0;
00000e  2000              MOVS     r0,#0
;;;605        }
;;;606    
;;;607        return 1;
;;;608    }
000010  4770              BX       lr
                  |L3.18|
000012  2001              MOVS     r0,#1                 ;607
000014  4770              BX       lr
;;;609    
                          ENDP


                          AREA ||i.RT568_DeepSleepTest||, CODE, READONLY, ALIGN=1

                  RT568_DeepSleepTest PROC
;;;344    /* TestCase: Deep Sleep */
;;;345    RT568FT_TestStatus RT568_DeepSleepTest(void)
000000  b510              PUSH     {r4,lr}
;;;346    {
;;;347        BleStackStatus status;
;;;348        extern void RF_IntReset(void);
;;;349        extern void RF_External_Wakeup(void);
;;;350    
;;;351        // initialize RF PHY
;;;352        RF_Init();
000002  f7fffffe          BL       RF_Init
;;;353    
;;;354        // diable sleep mode
;;;355        RF_External_Wakeup();
000006  f7fffffe          BL       RF_External_Wakeup
;;;356    
;;;357        // disable all RT568 interrupts
;;;358        RF_IntReset();
00000a  f7fffffe          BL       RF_IntReset
;;;359    
;;;360        // disable MCU interrupts
;;;361        MCU_GpioIntDisable();
00000e  f7fffffe          BL       MCU_GpioIntDisable
;;;362    
;;;363        // enter deep sleep
;;;364        status = setRF_EnterDeepSleep();
000012  f7fffffe          BL       setRF_EnterDeepSleep
;;;365    
;;;366        if(status != BLESTACK_STATUS_SUCCESS)
000016  2800              CMP      r0,#0
000018  d001              BEQ      |L4.30|
;;;367        {
;;;368            return RT568_TEST_ERROR_DEEPSLEEP;
00001a  2005              MOVS     r0,#5
;;;369        }
;;;370    
;;;371        Tiny_Delay(10);
;;;372        return RT568_TEST_OK;
;;;373    }
00001c  bd10              POP      {r4,pc}
                  |L4.30|
00001e  200a              MOVS     r0,#0xa               ;371
000020  f7fffffe          BL       CLK_SysTickDelay
000024  2000              MOVS     r0,#0                 ;372
000026  bd10              POP      {r4,pc}
;;;374    
                          ENDP


                          AREA ||i.RT568_RssiTest||, CODE, READONLY, ALIGN=2

                  RT568_RssiTest PROC
;;;415    /* TestCase: RSSI */
;;;416    RT568FT_TestStatus RT568_RssiTest(int8_t rssiBase, uint8_t rssiRange, uint32_t waitingTime_ms, RssiTestResult* rssiResult)
000000  b5ff              PUSH     {r0-r7,lr}
;;;417    {
000002  b081              SUB      sp,sp,#4
000004  461d              MOV      r5,r3
000006  4616              MOV      r6,r2
;;;418        Sint8 dutRssiVal = 0;
;;;419        static int count = 0;
;;;420    
;;;421        // disable MCU interrupts
;;;422        MCU_GpioIntDisable();
000008  f7fffffe          BL       MCU_GpioIntDisable
;;;423    
;;;424        // reset value
;;;425        dongleRssi = 0;
00000c  4c35              LDR      r4,|L5.228|
00000e  2700              MOVS     r7,#0
000010  7027              STRB     r7,[r4,#0]
;;;426    
;;;427        // wait for dongle and flush garbage data
;;;428        Tiny_Delay(30000);
000012  4835              LDR      r0,|L5.232|
000014  f7fffffe          BL       CLK_SysTickDelay
;;;429        UART1_SendData((Uint8 *)TEST_COMMAND_DUMMY,strlen((char *)TEST_COMMAND_DUMMY));
000018  2106              MOVS     r1,#6
00001a  a034              ADR      r0,|L5.236|
00001c  f7fffffe          BL       UART1_SendData
;;;430        Tiny_Delay(30000);
000020  4831              LDR      r0,|L5.232|
000022  f7fffffe          BL       CLK_SysTickDelay
;;;431        /*=================================================================
;;;432         *  TX: start TX and wait to get RSSI value from golden dongle
;;;433          =================================================================*/
;;;434        // RT568 start TX and send command to dongle
;;;435        UART1_SendData((Uint8 *)TEST_COMMAND_DUT_TXTEST,strlen((char *)TEST_COMMAND_DUT_TXTEST));
000026  210a              MOVS     r1,#0xa
000028  a032              ADR      r0,|L5.244|
00002a  f7fffffe          BL       UART1_SendData
;;;436        RT568_SetCmd((uint32_t)&Test_LDO_RssiTxSysCurr_Reg);
00002e  4834              LDR      r0,|L5.256|
000030  f7fffffe          BL       RT568_SetCmd
;;;437    
;;;438        Tiny_Delay(500);
000034  20ff              MOVS     r0,#0xff
000036  30f5              ADDS     r0,r0,#0xf5
000038  f7fffffe          BL       CLK_SysTickDelay
;;;439    
;;;440        // waiting to get dongle rssi value via UART
;;;441        count = 0;
;;;442        while(dongleRssi == 0)
;;;443        {
;;;444            count++;
;;;445    
;;;446            if(count > waitingTime_ms)
;;;447            {
;;;448                return RT568_TEST_ERROR_TIMEOUT;
;;;449            }
;;;450            Tiny_Delay(1000);  // waiting
00003c  6067              STR      r7,[r4,#4]  ; count
00003e  277d              MOVS     r7,#0x7d
000040  00ff              LSLS     r7,r7,#3
000042  e00a              B        |L5.90|
                  |L5.68|
000044  6860              LDR      r0,[r4,#4]            ;444  ; count
000046  1c40              ADDS     r0,r0,#1              ;444
000048  6060              STR      r0,[r4,#4]            ;446  ; count
00004a  42b0              CMP      r0,r6                 ;446
00004c  d902              BLS      |L5.84|
00004e  2003              MOVS     r0,#3                 ;448
                  |L5.80|
;;;451        }
;;;452    
;;;453        rssiResult->dongle_rssiValue = dongleRssi;
;;;454    // D_msg("dongle RX Rssi=%d\n", dongleRssi);
;;;455    
;;;456        if(RT568_CheckRssiValue(dongleRssi,rssiBase,rssiRange) == 0)
;;;457        {
;;;458            return RT568_TEST_ERROR_RSSI;
;;;459        }
;;;460    
;;;461    
;;;462        /*=================================================================
;;;463         *  RX: start to get RSSI value
;;;464          =================================================================*/
;;;465        RT568_SetRssiTestRx();
;;;466        UART1_SendData((Uint8 *)TEST_COMMAND_DUT_RXTEST,strlen((char *)TEST_COMMAND_DUT_RXTEST));
;;;467    
;;;468        // check rssi
;;;469        Tiny_Delay(500);
;;;470        dutRssiVal = RT568_GetRssiValue();
;;;471        rssiResult->dut_rssiValue = dutRssiVal;
;;;472        //D_msg("DUT RX RSSI = %d\n",dutRssiVal);
;;;473    
;;;474        if(RT568_CheckRssiValue(dutRssiVal,rssiBase,rssiRange) == 0)
;;;475        {
;;;476            return RT568_TEST_ERROR_RSSI;
;;;477        }
;;;478    
;;;479        return RT568_TEST_OK;
;;;480    }
000050  b005              ADD      sp,sp,#0x14
000052  bdf0              POP      {r4-r7,pc}
                  |L5.84|
000054  4638              MOV      r0,r7                 ;450
000056  f7fffffe          BL       CLK_SysTickDelay
                  |L5.90|
00005a  7820              LDRB     r0,[r4,#0]            ;442  ; dongleRssi
00005c  2800              CMP      r0,#0                 ;442
00005e  d0f1              BEQ      |L5.68|
000060  7028              STRB     r0,[r5,#0]            ;453
000062  2000              MOVS     r0,#0                 ;456
000064  5620              LDRSB    r0,[r4,r0]            ;456  ; dongleRssi
000066  9a02              LDR      r2,[sp,#8]            ;456
000068  9901              LDR      r1,[sp,#4]            ;456
00006a  f7fffffe          BL       RT568_CheckRssiValue
00006e  2800              CMP      r0,#0                 ;456
000070  d035              BEQ      |L5.222|
000072  4824              LDR      r0,|L5.260|
000074  f7fffffe          BL       RT568_SetCmd
000078  4638              MOV      r0,r7                 ;456
00007a  f7fffffe          BL       CLK_SysTickDelay
00007e  2140              MOVS     r1,#0x40              ;456
000080  2079              MOVS     r0,#0x79              ;456
000082  f7fffffe          BL       SPI_1BYT_SetTx
000086  2111              MOVS     r1,#0x11              ;456
000088  2060              MOVS     r0,#0x60              ;456
00008a  f7fffffe          BL       SPI_1BYT_SetTx
00008e  2180              MOVS     r1,#0x80              ;456
000090  2077              MOVS     r0,#0x77              ;456
000092  f7fffffe          BL       SPI_1BYT_SetTx
000096  4638              MOV      r0,r7                 ;456
000098  f7fffffe          BL       CLK_SysTickDelay
00009c  2035              MOVS     r0,#0x35              ;456
00009e  f7fffffe          BL       SPI_1BYT_SetRx
0000a2  21bf              MOVS     r1,#0xbf              ;456
0000a4  4001              ANDS     r1,r1,r0              ;456
0000a6  2035              MOVS     r0,#0x35              ;456
0000a8  f7fffffe          BL       SPI_1BYT_SetTx
0000ac  4638              MOV      r0,r7                 ;456
0000ae  f7fffffe          BL       CLK_SysTickDelay
0000b2  210a              MOVS     r1,#0xa               ;466
0000b4  a014              ADR      r0,|L5.264|
0000b6  f7fffffe          BL       UART1_SendData
0000ba  20ff              MOVS     r0,#0xff              ;469
0000bc  30f5              ADDS     r0,r0,#0xf5           ;469
0000be  f7fffffe          BL       CLK_SysTickDelay
0000c2  206c              MOVS     r0,#0x6c              ;469
0000c4  f7fffffe          BL       SPI_1BYT_SetRx
0000c8  30e8              ADDS     r0,r0,#0xe8           ;469
0000ca  b240              SXTB     r0,r0                 ;469
0000cc  7068              STRB     r0,[r5,#1]            ;471
0000ce  9a02              LDR      r2,[sp,#8]            ;474
0000d0  9901              LDR      r1,[sp,#4]            ;474
0000d2  f7fffffe          BL       RT568_CheckRssiValue
0000d6  2800              CMP      r0,#0                 ;474
0000d8  d001              BEQ      |L5.222|
0000da  2000              MOVS     r0,#0                 ;479
0000dc  e7b8              B        |L5.80|
                  |L5.222|
0000de  2002              MOVS     r0,#2                 ;476
0000e0  e7b6              B        |L5.80|
;;;481    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L5.228|
                          DCD      ||.data||
                  |L5.232|
                          DCD      0x00007530
                  |L5.236|
0000ec  44554d4d          DCB      "DUMMY\n",0
0000f0  590a00  
0000f3  00                DCB      0
                  |L5.244|
0000f4  44555454          DCB      "DUTTXTEST\n",0
0000f8  58544553
0000fc  540a00  
0000ff  00                DCB      0
                  |L5.256|
                          DCD      ||.constdata||+0x200
                  |L5.260|
                          DCD      ||.constdata||+0x300
                  |L5.264|
000108  44555452          DCB      "DUTRXTEST\n",0
00010c  58544553
000110  540a00  
000113  00                DCB      0

                          AREA ||i.RT568_RxTest||, CODE, READONLY, ALIGN=2

                  RT568_RxTest PROC
;;;311    */
;;;312    RT568FT_TestStatus RT568_RxTest(RT568VoltageMode mode)
000000  b510              PUSH     {r4,lr}
;;;313    {
000002  4604              MOV      r4,r0
;;;314        uint8_t regData;
;;;315    
;;;316        // disable MCU interrupts
;;;317        MCU_GpioIntDisable();
000004  f7fffffe          BL       MCU_GpioIntDisable
;;;318    
;;;319        RT568_SetCmd((uint32_t)Test_LDODCDC_RxSysCurr_Reg);
000008  4809              LDR      r0,|L6.48|
00000a  f7fffffe          BL       RT568_SetCmd
;;;320    
;;;321        switch(mode)
00000e  2c00              CMP      r4,#0
000010  d003              BEQ      |L6.26|
000012  2c01              CMP      r4,#1
000014  d003              BEQ      |L6.30|
;;;322        {
;;;323        case LDO_MODE:
;;;324            // disable DCDC
;;;325            regData = (Test_LDODCDC_RxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xEF);      //R40[4]=0(buck off)
;;;326            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;327            break;
;;;328    
;;;329        case DCDC_MODE:
;;;330            // disable LDO
;;;331            regData = (Test_LDODCDC_RxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xBF);       //R40[6]=0(ldo off)
;;;332            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;333            break;
;;;334    
;;;335        default:
;;;336            return RT568_TEST_ERROR_CMD;
000016  2001              MOVS     r0,#1
;;;337        }
;;;338    
;;;339        Tiny_Delay(10);
;;;340        return RT568_TEST_OK;
;;;341    }
000018  bd10              POP      {r4,pc}
                  |L6.26|
00001a  21c0              MOVS     r1,#0xc0              ;325
00001c  e000              B        |L6.32|
                  |L6.30|
00001e  2190              MOVS     r1,#0x90              ;331
                  |L6.32|
000020  2028              MOVS     r0,#0x28              ;326
000022  f7fffffe          BL       SPI_1BYT_SetTx
000026  200a              MOVS     r0,#0xa               ;339
000028  f7fffffe          BL       CLK_SysTickDelay
00002c  2000              MOVS     r0,#0                 ;340
00002e  bd10              POP      {r4,pc}
;;;342    
                          ENDP

                  |L6.48|
                          DCD      ||.constdata||+0x100

                          AREA ||i.RT568_SetCmd||, CODE, READONLY, ALIGN=1

                  RT568_SetCmd PROC
;;;574    
;;;575    static void RT568_SetCmd(uint32_t u32SrcAddr)
000000  4601              MOV      r1,r0
;;;576    {
000002  b510              PUSH     {r4,lr}
;;;577        // start from register REG_START
;;;578        SPI_PDMA_SetTx(REG_START,u32SrcAddr+REG_START,TEST_WRITE_REG_LEN);
000004  22f0              MOVS     r2,#0xf0
000006  3108              ADDS     r1,r1,#8
000008  2008              MOVS     r0,#8
00000a  f7fffffe          BL       SPI_PDMA_SetTx
;;;579        SPI_PDMA_waitFinish();
00000e  f7fffffe          BL       SPI_PDMA_waitFinish
;;;580    }
000012  bd10              POP      {r4,pc}
;;;581    
                          ENDP


                          AREA ||i.RT568_SleepTest||, CODE, READONLY, ALIGN=2

                  RT568_SleepTest PROC
;;;376    /* TestCase: Sleep */
;;;377    RT568FT_TestStatus RT568_SleepTest(void)
000000  b510              PUSH     {r4,lr}
;;;378    {
;;;379        extern void RF_IntReset(void);
;;;380        extern void RF_External_Wakeup(void);
;;;381        extern void RF_Tmr_Periodic_initial(uint32_t period_tick, uint8_t sleep_mode);
;;;382    
;;;383        // initialize RF PHY
;;;384        RF_Init();
000002  f7fffffe          BL       RF_Init
;;;385    
;;;386        // diable sleep mode
;;;387        RF_External_Wakeup();
000006  f7fffffe          BL       RF_External_Wakeup
;;;388    
;;;389        // disable all RT568 interrupts
;;;390        RF_IntReset();
00000a  f7fffffe          BL       RF_IntReset
;;;391    
;;;392        // disable MCU interrupts
;;;393        MCU_GpioIntDisable();
00000e  f7fffffe          BL       MCU_GpioIntDisable
;;;394    
;;;395        // enter sleep mode
;;;396        //RF_Tmr_Periodic_initial(12000,1); // 1.5s
;;;397        RF_Tmr_Periodic_initial(80000,1); // 10s
000012  2101              MOVS     r1,#1
000014  4803              LDR      r0,|L8.36|
000016  f7fffffe          BL       RF_Tmr_Periodic_initial
;;;398    
;;;399        Tiny_Delay(10);
00001a  200a              MOVS     r0,#0xa
00001c  f7fffffe          BL       CLK_SysTickDelay
;;;400        return RT568_TEST_OK;
000020  2000              MOVS     r0,#0
;;;401    }
000022  bd10              POP      {r4,pc}
;;;402    void UART1_SendData(uint8_t response_buff[], uint32_t u32SendBytes)
                          ENDP

                  |L8.36|
                          DCD      0x00013880

                          AREA ||i.RT568_SleepWakeupTest||, CODE, READONLY, ALIGN=2

                  RT568_SleepWakeupTest PROC
;;;523    */
;;;524    static RT568FT_TestStatus RT568_SleepWakeupTest(uint8_t sleep_ms)
000000  b5f8              PUSH     {r3-r7,lr}
;;;525    {
000002  4604              MOV      r4,r0
;;;526        static int sleepCount = 0;
;;;527        extern uint8_t FT_WakeupFlag;
;;;528        extern void RF_IntReset(void);
;;;529        extern void RF_External_Wakeup(void);
;;;530        extern void RF_Tmr_Periodic_initial(uint32_t period_tick, uint8_t sleep_mode);
;;;531    
;;;532        // initialize RF PHY
;;;533        RF_Init();
000004  f7fffffe          BL       RF_Init
;;;534    
;;;535        // diable sleep mode
;;;536        RF_External_Wakeup();
000008  f7fffffe          BL       RF_External_Wakeup
;;;537    
;;;538        // disable all RT568 interrupts
;;;539        RF_IntReset();
00000c  f7fffffe          BL       RF_IntReset
;;;540    
;;;541        // disable MCU interrupts
;;;542        MCU_GpioIntDisable();
000010  f7fffffe          BL       MCU_GpioIntDisable
;;;543    
;;;544        // enter sleep mode
;;;545        FT_WakeupFlag = 0;
000014  4e13              LDR      r6,|L9.100|
000016  2500              MOVS     r5,#0
000018  7035              STRB     r5,[r6,#0]
;;;546        RF_Tmr_Periodic_initial((sleep_ms*8),1); // the unit of sleep time = 125us
00001a  00e0              LSLS     r0,r4,#3
00001c  2101              MOVS     r1,#1
00001e  f7fffffe          BL       RF_Tmr_Periodic_initial
;;;547    
;;;548        MCU_GpioIntEnable();
000022  f7fffffe          BL       MCU_GpioIntEnable
;;;549    
;;;550        // sleep test
;;;551        while(sleepCount < 5)
;;;552        {
;;;553            static uint8_t timeoutCount = 0;
;;;554            timeoutCount++;
;;;555    
;;;556            if(timeoutCount > 100) // 100ms
;;;557            {
;;;558                return RT568_TEST_ERROR_TIMEOUT;
;;;559            }
;;;560    
;;;561            if(FT_WakeupFlag == 1)
;;;562            {
;;;563                FT_WakeupFlag = 0;
;;;564                sleepCount++;
;;;565            }
;;;566            Tiny_Delay(1000);
000026  277d              MOVS     r7,#0x7d
000028  4c0f              LDR      r4,|L9.104|
00002a  00ff              LSLS     r7,r7,#3
00002c  e010              B        |L9.80|
                  |L9.46|
00002e  7860              LDRB     r0,[r4,#1]            ;554  ; timeoutCount
000030  1c40              ADDS     r0,r0,#1              ;554
000032  b2c0              UXTB     r0,r0                 ;554
000034  7060              STRB     r0,[r4,#1]            ;554
000036  2864              CMP      r0,#0x64              ;556
000038  d901              BLS      |L9.62|
00003a  2003              MOVS     r0,#3                 ;558
;;;567        }
;;;568    
;;;569        sleepCount = 0;
;;;570        Tiny_Delay(10);
;;;571        return RT568_TEST_OK;
;;;572    }
00003c  bdf8              POP      {r3-r7,pc}
                  |L9.62|
00003e  7830              LDRB     r0,[r6,#0]            ;561  ; FT_WakeupFlag
000040  2801              CMP      r0,#1                 ;561
000042  d102              BNE      |L9.74|
000044  7035              STRB     r5,[r6,#0]            ;563
000046  1c49              ADDS     r1,r1,#1              ;563
000048  60a1              STR      r1,[r4,#8]            ;564  ; sleepCount
                  |L9.74|
00004a  4638              MOV      r0,r7                 ;566
00004c  f7fffffe          BL       CLK_SysTickDelay
                  |L9.80|
000050  68a1              LDR      r1,[r4,#8]            ;551  ; sleepCount
000052  2905              CMP      r1,#5                 ;551
000054  dbeb              BLT      |L9.46|
000056  200a              MOVS     r0,#0xa               ;570
000058  60a5              STR      r5,[r4,#8]            ;570  ; sleepCount
00005a  f7fffffe          BL       CLK_SysTickDelay
00005e  2000              MOVS     r0,#0                 ;571
000060  bdf8              POP      {r3-r7,pc}
;;;573    
                          ENDP

000062  0000              DCW      0x0000
                  |L9.100|
                          DCD      FT_WakeupFlag
                  |L9.104|
                          DCD      ||.data||

                          AREA ||i.RT568_TxTest||, CODE, READONLY, ALIGN=2

                  RT568_TxTest PROC
;;;259    */
;;;260    RT568FT_TestStatus RT568_TxTest(RT568VoltageMode mode)
000000  b510              PUSH     {r4,lr}
;;;261    {
000002  4604              MOV      r4,r0
;;;262        uint8_t regData;
;;;263    
;;;264    #if (ADDED_SLEEPTEST_IN_TXTEST == 1 )
;;;265        if(RT568_SleepWakeupTest(5) != RT568_TEST_OK) // 5ms
000004  2005              MOVS     r0,#5
000006  f7fffffe          BL       RT568_SleepWakeupTest
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L10.18|
;;;266        {
;;;267            return RT568_TEST_ERROR_SLEEP;
00000e  2004              MOVS     r0,#4
;;;268        }
;;;269    #else
;;;270        // initialize RF PHY
;;;271        RF_Init();
;;;272    
;;;273        // diable sleep mode
;;;274        RF_External_Wakeup();
;;;275    
;;;276        // disable all RT568 interrupts
;;;277        RF_IntReset();
;;;278    
;;;279    #endif
;;;280    
;;;281        // disable MCU interrupts
;;;282        MCU_GpioIntDisable();
;;;283    
;;;284        //R40[4]=1(buck on);R40[6]=1(ldo on)
;;;285        RT568_SetCmd((uint32_t)Test_LDODCDC_TxSysCurr_Reg);
;;;286    
;;;287        switch(mode)
;;;288        {
;;;289        case LDO_MODE:
;;;290            // disable DCDC
;;;291            regData = (Test_LDODCDC_TxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xEF);      //R40[4]=0(buck off)
;;;292            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;293            break;
;;;294    
;;;295        case DCDC_MODE:
;;;296            // disable LDO
;;;297            regData = (Test_LDODCDC_TxSysCurr_Reg[REG_DCDC_LDO_CONTROL] & 0xBF);       //R40[6]=0(ldo off)
;;;298            SPI_1BYT_SetTx(REG_DCDC_LDO_CONTROL, regData);
;;;299            break;
;;;300    
;;;301        default:
;;;302            return RT568_TEST_ERROR_CMD;
;;;303        }
;;;304    
;;;305        Tiny_Delay(10);
;;;306        return RT568_TEST_OK;
;;;307    }
000010  bd10              POP      {r4,pc}
                  |L10.18|
000012  f7fffffe          BL       MCU_GpioIntDisable
000016  480a              LDR      r0,|L10.64|
000018  f7fffffe          BL       RT568_SetCmd
00001c  2c00              CMP      r4,#0                 ;287
00001e  d003              BEQ      |L10.40|
000020  2c01              CMP      r4,#1                 ;287
000022  d003              BEQ      |L10.44|
000024  2001              MOVS     r0,#1                 ;302
000026  bd10              POP      {r4,pc}
                  |L10.40|
000028  21c0              MOVS     r1,#0xc0              ;291
00002a  e000              B        |L10.46|
                  |L10.44|
00002c  2190              MOVS     r1,#0x90              ;297
                  |L10.46|
00002e  2028              MOVS     r0,#0x28              ;292
000030  f7fffffe          BL       SPI_1BYT_SetTx
000034  200a              MOVS     r0,#0xa               ;305
000036  f7fffffe          BL       CLK_SysTickDelay
00003a  2000              MOVS     r0,#0                 ;306
00003c  bd10              POP      {r4,pc}
;;;308    
                          ENDP

00003e  0000              DCW      0x0000
                  |L10.64|
                          DCD      ||.constdata||

                          AREA ||i.UART1_SendData||, CODE, READONLY, ALIGN=2

                  UART1_SendData PROC
;;;401    }
;;;402    void UART1_SendData(uint8_t response_buff[], uint32_t u32SendBytes)
000000  b510              PUSH     {r4,lr}
;;;403    {
;;;404        uint32_t i;
;;;405    
;;;406        for (i = 0; i < u32SendBytes; i++)
000002  2200              MOVS     r2,#0
;;;407        {
;;;408            while ((UART1->FIFOSTS & UART_FIFOSTS_TXFULL_Msk));
000004  4b05              LDR      r3,|L11.28|
000006  e005              B        |L11.20|
                  |L11.8|
000008  699c              LDR      r4,[r3,#0x18]
00000a  0224              LSLS     r4,r4,#8
00000c  d4fc              BMI      |L11.8|
;;;409    
;;;410            UART1->DAT = response_buff[i];
00000e  5c84              LDRB     r4,[r0,r2]
000010  601c              STR      r4,[r3,#0]
000012  1c52              ADDS     r2,r2,#1
                  |L11.20|
000014  428a              CMP      r2,r1                 ;406
000016  d3f7              BCC      |L11.8|
;;;411        }
;;;412    }
000018  bd10              POP      {r4,pc}
;;;413    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0x40071000

                          AREA ||i.dongleMessgae_Handler||, CODE, READONLY, ALIGN=2

                  dongleMessgae_Handler PROC
;;;482    
;;;483    void dongleMessgae_Handler(uint8_t *data, uint8_t dataLen, void *parms)
000000  b510              PUSH     {r4,lr}
;;;484    {
000002  4604              MOV      r4,r0
;;;485        //uint32_t i;
;;;486        if((dataLen == (strlen((char *)TEST_COMMAND_DUT_TXTEST))) &&
000004  290a              CMP      r1,#0xa
000006  d109              BNE      |L12.28|
;;;487                (strncmp((char *)TEST_COMMAND_DUT_TXTEST,(char *)data,strlen((char *)TEST_COMMAND_DUT_TXTEST)-1) == 0))
000008  4601              MOV      r1,r0
00000a  2209              MOVS     r2,#9
00000c  a004              ADR      r0,|L12.32|
00000e  f7fffffe          BL       strncmp
000012  2800              CMP      r0,#0
000014  d102              BNE      |L12.28|
;;;488        {
;;;489            dongleRssi = (Sint8)data[(strlen((char *)TEST_COMMAND_DUT_TXTEST)) - 1];
000016  4905              LDR      r1,|L12.44|
000018  7a60              LDRB     r0,[r4,#9]
00001a  7008              STRB     r0,[r1,#0]
                  |L12.28|
;;;490        }
;;;491    //  else
;;;492    //  {
;;;493    //    D_msg("From UART1:");
;;;494    //    for(i=0; i<dataLen; i++){
;;;495    //      D_msg("0x%02x", *data++);
;;;496    //    }
;;;497    //    D_msg("\n");
;;;498    //  }
;;;499    }
00001c  bd10              POP      {r4,pc}
;;;500    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
000020  44555454          DCB      "DUTTXTEST\n",0
000024  58544553
000028  540a00  
00002b  00                DCB      0
                  |L12.44|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  Test_LDODCDC_TxSysCurr_Reg
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000001          DCB      0x00,0x00,0x00,0x01
000008  1c80de24          DCB      0x1c,0x80,0xde,0x24
00000c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000010  2107f020          DCB      0x21,0x07,0xf0,0x20
000014  3880eeda          DCB      0x38,0x80,0xee,0xda
000018  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00001c  ffffff27          DCB      0xff,0xff,0xff,0x27
000020  a30000d2          DCB      0xa3,0x00,0x00,0xd2
000024  88ec929a          DCB      0x88,0xec,0x92,0x9a
000028  d00a6043          DCB      0xd0,0x0a,0x60,0x43
00002c  01206a00          DCB      0x01,0x20,0x6a,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00c0f000          DCB      0x00,0xc0,0xf0,0x00
000038  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00003c  003cff79          DCB      0x00,0x3c,0xff,0x79
000040  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000044  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000048  a01f55a1          DCB      0xa0,0x1f,0x55,0xa1
00004c  00440052          DCB      0x00,0x44,0x00,0x52
000050  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000054  00068e24          DCB      0x00,0x06,0x8e,0x24
000058  01440050          DCB      0x01,0x44,0x00,0x50
00005c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000060  f8600000          DCB      0xf8,0x60,0x00,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  00000000          DCB      0x00,0x00,0x00,0x00
00006c  00000000          DCB      0x00,0x00,0x00,0x00
000070  555555ff          DCB      0x55,0x55,0x55,0xff
000074  ff4f0000          DCB      0xff,0x4f,0x00,0x00
000078  04802941          DCB      0x04,0x80,0x29,0x41
00007c  76710000          DCB      0x76,0x71,0x00,0x00
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  05000040          DCB      0x05,0x00,0x00,0x40
0000b0  00040240          DCB      0x00,0x04,0x02,0x40
0000b4  00500000          DCB      0x00,0x50,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000080          DCB      0x00,0x00,0x00,0x80
                  Test_LDODCDC_RxSysCurr_Reg
000100  00000000          DCB      0x00,0x00,0x00,0x00
000104  00000000          DCB      0x00,0x00,0x00,0x00
000108  1c80de24          DCB      0x1c,0x80,0xde,0x24
00010c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000110  2107f020          DCB      0x21,0x07,0xf0,0x20
000114  3880eeda          DCB      0x38,0x80,0xee,0xda
000118  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00011c  ffffff27          DCB      0xff,0xff,0xff,0x27
000120  62007086          DCB      0x62,0x00,0x70,0x86
000124  88ec929a          DCB      0x88,0xec,0x92,0x9a
000128  d00a6043          DCB      0xd0,0x0a,0x60,0x43
00012c  01206a01          DCB      0x01,0x20,0x6a,0x01
000130  00000000          DCB      0x00,0x00,0x00,0x00
000134  00c0f800          DCB      0x00,0xc0,0xf8,0x00
000138  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00013c  003cff79          DCB      0x00,0x3c,0xff,0x79
000140  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000144  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000148  a01ff8a1          DCB      0xa0,0x1f,0xf8,0xa1
00014c  00440052          DCB      0x00,0x44,0x00,0x52
000150  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000154  00068e24          DCB      0x00,0x06,0x8e,0x24
000158  01440050          DCB      0x01,0x44,0x00,0x50
00015c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000160  f8600000          DCB      0xf8,0x60,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00000000          DCB      0x00,0x00,0x00,0x00
00016c  00000000          DCB      0x00,0x00,0x00,0x00
000170  55555500          DCB      0x55,0x55,0x55,0x00
000174  00000000          DCB      0x00,0x00,0x00,0x00
000178  00802941          DCB      0x00,0x80,0x29,0x41
00017c  76710000          DCB      0x76,0x71,0x00,0x00
000180  00000000          DCB      0x00,0x00,0x00,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  7fffffff          DCB      0x7f,0xff,0xff,0xff
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  05000040          DCB      0x05,0x00,0x00,0x40
0001b0  00040240          DCB      0x00,0x04,0x02,0x40
0001b4  00500000          DCB      0x00,0x50,0x00,0x00
0001b8  00000000          DCB      0x00,0x00,0x00,0x00
0001bc  00000000          DCB      0x00,0x00,0x00,0x00
0001c0  00000000          DCB      0x00,0x00,0x00,0x00
0001c4  00000000          DCB      0x00,0x00,0x00,0x00
0001c8  00000000          DCB      0x00,0x00,0x00,0x00
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00000000          DCB      0x00,0x00,0x00,0x00
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  00000000          DCB      0x00,0x00,0x00,0x00
0001e0  00000000          DCB      0x00,0x00,0x00,0x00
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  00000000          DCB      0x00,0x00,0x00,0x00
0001ec  00000000          DCB      0x00,0x00,0x00,0x00
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  00000000          DCB      0x00,0x00,0x00,0x00
0001f8  00000000          DCB      0x00,0x00,0x00,0x00
0001fc  00000080          DCB      0x00,0x00,0x00,0x80
                  Test_LDO_RssiTxSysCurr_Reg
000200  00000000          DCB      0x00,0x00,0x00,0x00
000204  00000001          DCB      0x00,0x00,0x00,0x01
000208  1c80de24          DCB      0x1c,0x80,0xde,0x24
00020c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000210  2107f020          DCB      0x21,0x07,0xf0,0x20
000214  3880eeda          DCB      0x38,0x80,0xee,0xda
000218  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00021c  ffffff27          DCB      0xff,0xff,0xff,0x27
000220  620020d2          DCB      0x62,0x00,0x20,0xd2
000224  88ec929a          DCB      0x88,0xec,0x92,0x9a
000228  c00a6043          DCB      0xc0,0x0a,0x60,0x43
00022c  01206a01          DCB      0x01,0x20,0x6a,0x01
000230  00000000          DCB      0x00,0x00,0x00,0x00
000234  00c0f000          DCB      0x00,0xc0,0xf0,0x00
000238  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00023c  0000ff79          DCB      0x00,0x00,0xff,0x79
000240  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000244  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000248  a01f55a1          DCB      0xa0,0x1f,0x55,0xa1
00024c  00440052          DCB      0x00,0x44,0x00,0x52
000250  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000254  00068e24          DCB      0x00,0x06,0x8e,0x24
000258  01440050          DCB      0x01,0x44,0x00,0x50
00025c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000260  f8600000          DCB      0xf8,0x60,0x00,0x00
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  555555ff          DCB      0x55,0x55,0x55,0xff
000274  ff4f0000          DCB      0xff,0x4f,0x00,0x00
000278  04802941          DCB      0x04,0x80,0x29,0x41
00027c  76710000          DCB      0x76,0x71,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000000          DCB      0x00,0x00,0x00,0x00
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000000          DCB      0x00,0x00,0x00,0x00
0002ac  05000040          DCB      0x05,0x00,0x00,0x40
0002b0  00040240          DCB      0x00,0x04,0x02,0x40
0002b4  00500000          DCB      0x00,0x50,0x00,0x00
0002b8  00000000          DCB      0x00,0x00,0x00,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  00000000          DCB      0x00,0x00,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  00000000          DCB      0x00,0x00,0x00,0x00
0002d0  00000000          DCB      0x00,0x00,0x00,0x00
0002d4  00000000          DCB      0x00,0x00,0x00,0x00
0002d8  00000000          DCB      0x00,0x00,0x00,0x00
0002dc  00000000          DCB      0x00,0x00,0x00,0x00
0002e0  00000000          DCB      0x00,0x00,0x00,0x00
0002e4  00000000          DCB      0x00,0x00,0x00,0x00
0002e8  00000000          DCB      0x00,0x00,0x00,0x00
0002ec  00000000          DCB      0x00,0x00,0x00,0x00
0002f0  00000000          DCB      0x00,0x00,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000080          DCB      0x00,0x00,0x00,0x80
                  Test_LDO_RssiRx1SysCurr_Reg
000300  00000000          DCB      0x00,0x00,0x00,0x00
000304  00000001          DCB      0x00,0x00,0x00,0x01
000308  1c80de24          DCB      0x1c,0x80,0xde,0x24
00030c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000310  2107f020          DCB      0x21,0x07,0xf0,0x20
000314  3880eeda          DCB      0x38,0x80,0xee,0xda
000318  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00031c  ffffff27          DCB      0xff,0xff,0xff,0x27
000320  62007086          DCB      0x62,0x00,0x70,0x86
000324  88ec7277          DCB      0x88,0xec,0x72,0x77
000328  c00a6043          DCB      0xc0,0x0a,0x60,0x43
00032c  01206a01          DCB      0x01,0x20,0x6a,0x01
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00c0f800          DCB      0x00,0xc0,0xf8,0x00
000338  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00033c  0000ff79          DCB      0x00,0x00,0xff,0x79
000340  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000344  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000348  a01ff8a1          DCB      0xa0,0x1f,0xf8,0xa1
00034c  00440052          DCB      0x00,0x44,0x00,0x52
000350  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000354  00068e24          DCB      0x00,0x06,0x8e,0x24
000358  01440050          DCB      0x01,0x44,0x00,0x50
00035c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000360  11600000          DCB      0x11,0x60,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  00000000          DCB      0x00,0x00,0x00,0x00
00036c  00000000          DCB      0x00,0x00,0x00,0x00
000370  55555500          DCB      0x55,0x55,0x55,0x00
000374  00000080          DCB      0x00,0x00,0x00,0x80
000378  00402941          DCB      0x00,0x40,0x29,0x41
00037c  76710000          DCB      0x76,0x71,0x00,0x00
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  00000000          DCB      0x00,0x00,0x00,0x00
00039c  7fffffff          DCB      0x7f,0xff,0xff,0xff
0003a0  00000000          DCB      0x00,0x00,0x00,0x00
0003a4  00000000          DCB      0x00,0x00,0x00,0x00
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  05000040          DCB      0x05,0x00,0x00,0x40
0003b0  00040240          DCB      0x00,0x04,0x02,0x40
0003b4  00500000          DCB      0x00,0x50,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  00000000          DCB      0x00,0x00,0x00,0x00
0003e8  00000000          DCB      0x00,0x00,0x00,0x00
0003ec  00000000          DCB      0x00,0x00,0x00,0x00
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
                  Test_LDO_16MCLK_Reg
000400  00000000          DCB      0x00,0x00,0x00,0x00
000404  00000001          DCB      0x00,0x00,0x00,0x01
000408  1c80de24          DCB      0x1c,0x80,0xde,0x24
00040c  e0f54b05          DCB      0xe0,0xf5,0x4b,0x05
000410  2107f020          DCB      0x21,0x07,0xf0,0x20
000414  3880eeda          DCB      0x38,0x80,0xee,0xda
000418  8f3a0080          DCB      0x8f,0x3a,0x00,0x80
00041c  ffffff27          DCB      0xff,0xff,0xff,0x27
000420  6200708a          DCB      0x62,0x00,0x70,0x8a
000424  88ec929a          DCB      0x88,0xec,0x92,0x9a
000428  c00a6043          DCB      0xc0,0x0a,0x60,0x43
00042c  01206a00          DCB      0x01,0x20,0x6a,0x00
000430  00000000          DCB      0x00,0x00,0x00,0x00
000434  0080f000          DCB      0x00,0x80,0xf0,0x00
000438  0006a2aa          DCB      0x00,0x06,0xa2,0xaa
00043c  003cff79          DCB      0x00,0x3c,0xff,0x79
000440  00d2f919          DCB      0x00,0xd2,0xf9,0x19
000444  2d0f1e00          DCB      0x2d,0x0f,0x1e,0x00
000448  a01f55a1          DCB      0xa0,0x1f,0x55,0xa1
00044c  00440052          DCB      0x00,0x44,0x00,0x52
000450  00061e1e          DCB      0x00,0x06,0x1e,0x1e
000454  00068e24          DCB      0x00,0x06,0x8e,0x24
000458  01440050          DCB      0x01,0x44,0x00,0x50
00045c  50ff05ff          DCB      0x50,0xff,0x05,0xff
000460  f8600000          DCB      0xf8,0x60,0x00,0x00
000464  00000000          DCB      0x00,0x00,0x00,0x00
000468  00000000          DCB      0x00,0x00,0x00,0x00
00046c  00000000          DCB      0x00,0x00,0x00,0x00
000470  555555ff          DCB      0x55,0x55,0x55,0xff
000474  ff4f0000          DCB      0xff,0x4f,0x00,0x00
000478  04802941          DCB      0x04,0x80,0x29,0x41
00047c  76710000          DCB      0x76,0x71,0x00,0x00
000480  00000000          DCB      0x00,0x00,0x00,0x00
000484  00000000          DCB      0x00,0x00,0x00,0x00
000488  00000000          DCB      0x00,0x00,0x00,0x00
00048c  00000000          DCB      0x00,0x00,0x00,0x00
000490  00000000          DCB      0x00,0x00,0x00,0x00
000494  00000000          DCB      0x00,0x00,0x00,0x00
000498  00000000          DCB      0x00,0x00,0x00,0x00
00049c  00000000          DCB      0x00,0x00,0x00,0x00
0004a0  00000000          DCB      0x00,0x00,0x00,0x00
0004a4  00000000          DCB      0x00,0x00,0x00,0x00
0004a8  00000000          DCB      0x00,0x00,0x00,0x00
0004ac  05000040          DCB      0x05,0x00,0x00,0x40
0004b0  00040240          DCB      0x00,0x04,0x02,0x40
0004b4  00500000          DCB      0x00,0x50,0x00,0x00
0004b8  00000000          DCB      0x00,0x00,0x00,0x00
0004bc  00000000          DCB      0x00,0x00,0x00,0x00
0004c0  00000000          DCB      0x00,0x00,0x00,0x00
0004c4  00000000          DCB      0x00,0x00,0x00,0x00
0004c8  00000000          DCB      0x00,0x00,0x00,0x00
0004cc  00000000          DCB      0x00,0x00,0x00,0x00
0004d0  00000000          DCB      0x00,0x00,0x00,0x00
0004d4  00000000          DCB      0x00,0x00,0x00,0x00
0004d8  00000000          DCB      0x00,0x00,0x00,0x00
0004dc  00000000          DCB      0x00,0x00,0x00,0x00
0004e0  00000000          DCB      0x00,0x00,0x00,0x00
0004e4  00000000          DCB      0x00,0x00,0x00,0x00
0004e8  00000000          DCB      0x00,0x00,0x00,0x00
0004ec  00000000          DCB      0x00,0x00,0x00,0x00
0004f0  00000000          DCB      0x00,0x00,0x00,0x00
0004f4  00000000          DCB      0x00,0x00,0x00,0x00
0004f8  00000000          DCB      0x00,0x00,0x00,0x00
0004fc  00000080          DCB      0x00,0x00,0x00,0x80

                          AREA ||.data||, DATA, ALIGN=2

                  dongleRssi
000000  00                DCB      0x00
                  timeoutCount
000001  000000            DCB      0x00,0x00,0x00
                  count
                          DCD      0x00000000
                  sleepCount
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\FT_Func\\ft_func.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ft_func_c_83b45dc3____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ft_func_c_83b45dc3____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ft_func_c_83b45dc3____REVSH|
#line 402
|__asm___9_ft_func_c_83b45dc3____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

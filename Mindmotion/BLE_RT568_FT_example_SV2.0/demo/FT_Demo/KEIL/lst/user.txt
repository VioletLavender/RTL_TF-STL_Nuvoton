; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\user.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\user.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\include -I..\..\..\porting -I..\..\..\include\rf_include -I..\..\..\porting\rf_porting -I..\..\FT_Demo -I..\FT_Func -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -I..\..\..\Library\CMSIS\Include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=531 --omf_browse=.\obj\user.crf ..\user.c]
                          THUMB

                          AREA ||i.BLEDemo_InitMessage||, CODE, READONLY, ALIGN=2

                  BLEDemo_InitMessage PROC
;;;54     
;;;55     void BLEDemo_InitMessage(void)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57         D_msg("+====================================================================+\n");
000002  4812              LDR      r0,|L1.76|
000004  f7fffffe          BL       __2printf
;;;58         D_msg("Press the number to start related testing.\n");
000008  a011              ADR      r0,|L1.80|
00000a  f7fffffe          BL       __2printf
;;;59         D_msg("+====================================================================+\n");
00000e  480f              LDR      r0,|L1.76|
000010  f7fffffe          BL       __2printf
;;;60         D_msg("1. TX @2402MHz(LDO) Test\n");
000014  a019              ADR      r0,|L1.124|
000016  f7fffffe          BL       __2printf
;;;61         D_msg("2. TX @2402MHz(DCDC) Test\n");
00001a  a01f              ADR      r0,|L1.152|
00001c  f7fffffe          BL       __2printf
;;;62         D_msg("3. RX(LDO) Test\n");
000020  a024              ADR      r0,|L1.180|
000022  f7fffffe          BL       __2printf
;;;63         D_msg("4. RX(DCDC) Test\n");
000026  a028              ADR      r0,|L1.200|
000028  f7fffffe          BL       __2printf
;;;64         D_msg("5. Sleep Test\n");
00002c  a02b              ADR      r0,|L1.220|
00002e  f7fffffe          BL       __2printf
;;;65         D_msg("6. Deep Sleep Test\n");
000032  a02e              ADR      r0,|L1.236|
000034  f7fffffe          BL       __2printf
;;;66         D_msg("7. RSSI Test\n");
000038  a031              ADR      r0,|L1.256|
00003a  f7fffffe          BL       __2printf
;;;67         D_msg("8. 16MHz CLK Test\n");
00003e  a034              ADR      r0,|L1.272|
000040  f7fffffe          BL       __2printf
;;;68         D_msg("+====================================================================+\n");
000044  4801              LDR      r0,|L1.76|
000046  f7fffffe          BL       __2printf
;;;69     }
00004a  bd10              POP      {r4,pc}
;;;70     
                          ENDP

                  |L1.76|
                          DCD      ||.conststring||
                  |L1.80|
000050  50726573          DCB      "Press the number to start related testing.\n",0
000054  73207468
000058  65206e75
00005c  6d626572
000060  20746f20
000064  73746172
000068  74207265
00006c  6c617465
000070  64207465
000074  7374696e
000078  672e0a00
                  |L1.124|
00007c  312e2054          DCB      "1. TX @2402MHz(LDO) Test\n",0
000080  58204032
000084  3430324d
000088  487a284c
00008c  444f2920
000090  54657374
000094  0a00    
000096  00                DCB      0
000097  00                DCB      0
                  |L1.152|
000098  322e2054          DCB      "2. TX @2402MHz(DCDC) Test\n",0
00009c  58204032
0000a0  3430324d
0000a4  487a2844
0000a8  43444329
0000ac  20546573
0000b0  740a00  
0000b3  00                DCB      0
                  |L1.180|
0000b4  332e2052          DCB      "3. RX(LDO) Test\n",0
0000b8  58284c44
0000bc  4f292054
0000c0  6573740a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L1.200|
0000c8  342e2052          DCB      "4. RX(DCDC) Test\n",0
0000cc  58284443
0000d0  44432920
0000d4  54657374
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L1.220|
0000dc  352e2053          DCB      "5. Sleep Test\n",0
0000e0  6c656570
0000e4  20546573
0000e8  740a00  
0000eb  00                DCB      0
                  |L1.236|
0000ec  362e2044          DCB      "6. Deep Sleep Test\n",0
0000f0  65657020
0000f4  536c6565
0000f8  70205465
0000fc  73740a00
                  |L1.256|
000100  372e2052          DCB      "7. RSSI Test\n",0
000104  53534920
000108  54657374
00010c  0a00    
00010e  00                DCB      0
00010f  00                DCB      0
                  |L1.272|
000110  382e2031          DCB      "8. 16MHz CLK Test\n",0
000114  364d487a
000118  20434c4b
00011c  20546573
000120  740a00  
000123  00                DCB      0

                          AREA ||i.BLEDemo_UartRxDataHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _scanf_int
                  BLEDemo_UartRxDataHandler PROC
;;;229    
;;;230    int BLEDemo_UartRxDataHandler(uint8_t *data, uint8_t dataLen)
000000  b508              PUSH     {r3,lr}
;;;231    {
;;;232    
;;;233        if(data[dataLen] == '\r' || data[dataLen] == '\n')
000002  5c41              LDRB     r1,[r0,r1]
000004  290d              CMP      r1,#0xd
000006  d004              BEQ      |L2.18|
000008  290a              CMP      r1,#0xa
00000a  d002              BEQ      |L2.18|
;;;234        {
;;;235            int testCase = 0;
;;;236    
;;;237            sscanf((char *)data,"%d",&testCase);
;;;238            bleFtTestCase = (BleFT_TestCase)testCase;
;;;239    
;;;240            appSystemRequest |= APPREQUEST_FT_TEST;
;;;241    
;;;242            return 0;
;;;243        }
;;;244    
;;;245        return -1;
00000c  2000              MOVS     r0,#0
00000e  43c0              MVNS     r0,r0
;;;246    }
000010  bd08              POP      {r3,pc}
                  |L2.18|
000012  2100              MOVS     r1,#0                 ;235
000014  9100              STR      r1,[sp,#0]            ;237
000016  466a              MOV      r2,sp                 ;237
000018  a105              ADR      r1,|L2.48|
00001a  f7fffffe          BL       __0sscanf
00001e  4805              LDR      r0,|L2.52|
000020  9900              LDR      r1,[sp,#0]            ;238
000022  70c1              STRB     r1,[r0,#3]            ;238
000024  7801              LDRB     r1,[r0,#0]            ;240  ; appSystemRequest
000026  2202              MOVS     r2,#2                 ;240
000028  4311              ORRS     r1,r1,r2              ;240
00002a  7001              STRB     r1,[r0,#0]            ;240
00002c  2000              MOVS     r0,#0                 ;242
00002e  bd08              POP      {r3,pc}
;;;247    
                          ENDP

                  |L2.48|
000030  256400            DCB      "%d",0
000033  00                DCB      0
                  |L2.52|
                          DCD      ||.data||

                          AREA ||i.BleApp_Init||, CODE, READONLY, ALIGN=1

                  BleApp_Init PROC
;;;126    
;;;127    void BleApp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;128    {
;;;129        BLEDemo_InitMessage();
000002  f7fffffe          BL       BLEDemo_InitMessage
;;;130    }
000006  bd10              POP      {r4,pc}
;;;131    
                          ENDP


                          AREA ||i.BleApp_Main||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  BleApp_Main PROC
;;;132    
;;;133    void BleApp_Main(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135        if((appSystemRequest & APPREQUEST_FT_TEST ) != 0 )
000002  490b              LDR      r1,|L4.48|
000004  7808              LDRB     r0,[r1,#0]  ; appSystemRequest
000006  0782              LSLS     r2,r0,#30
000008  d50c              BPL      |L4.36|
;;;136        {
;;;137            RT568FT_TestStatus status;
;;;138    
;;;139            appSystemRequest &= ~APPREQUEST_FT_TEST;
00000a  22fd              MOVS     r2,#0xfd
00000c  4010              ANDS     r0,r0,r2
00000e  7008              STRB     r0,[r1,#0]
;;;140    
;;;141            status = RT568_FTTestSelection(bleFtTestCase);
000010  78c8              LDRB     r0,[r1,#3]  ; bleFtTestCase
000012  f7fffffe          BL       RT568_FTTestSelection
000016  0001              MOVS     r1,r0
;;;142    
;;;143            if(status == RT568_TEST_OK)
000018  d005              BEQ      |L4.38|
;;;144            {
;;;145                D_msg("Result:PASS\n");
;;;146            }
;;;147            else
;;;148            {
;;;149                D_msg("Result:FAIL Error Code: 0x%02x\n",status);
00001a  a006              ADR      r0,|L4.52|
00001c  f7fffffe          BL       __2printf
                  |L4.32|
;;;150            }
;;;151    
;;;152            // show test cases init message
;;;153            BLEDemo_InitMessage();
000020  f7fffffe          BL       BLEDemo_InitMessage
                  |L4.36|
;;;154        }
;;;155    }
000024  bd10              POP      {r4,pc}
                  |L4.38|
000026  a00b              ADR      r0,|L4.84|
000028  f7fffffe          BL       __2printf
00002c  e7f8              B        |L4.32|
;;;156    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      ||.data||
                  |L4.52|
000034  52657375          DCB      "Result:FAIL Error Code: 0x%02x\n",0
000038  6c743a46
00003c  41494c20
000040  4572726f
000044  7220436f
000048  64653a20
00004c  30782530
000050  32780a00
                  |L4.84|
000054  52657375          DCB      "Result:PASS\n",0
000058  6c743a50
00005c  4153530a
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.CLK_SysTickDelay||, CODE, READONLY, ALIGN=2

                  CLK_SysTickDelay PROC
;;;503      */
;;;504    __STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
000000  4906              LDR      r1,|L5.28|
;;;505    {
;;;506        SysTick->LOAD = us * CyclesPerUs;
000002  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000004  4348              MULS     r0,r1,r0
000006  4906              LDR      r1,|L5.32|
000008  6148              STR      r0,[r1,#0x14]
;;;507        SysTick->VAL  = (0x00);
00000a  2200              MOVS     r2,#0
00000c  618a              STR      r2,[r1,#0x18]
;;;508        SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
00000e  2005              MOVS     r0,#5
000010  6108              STR      r0,[r1,#0x10]
                  |L5.18|
;;;509    
;;;510        /* Waiting for down-count to zero */
;;;511        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
000012  6908              LDR      r0,[r1,#0x10]
000014  03c0              LSLS     r0,r0,#15
000016  d5fc              BPL      |L5.18|
;;;512    
;;;513        /* Disable SysTick counter */
;;;514        SysTick->CTRL = 0;
000018  610a              STR      r2,[r1,#0x10]
;;;515    }
00001a  4770              BX       lr
;;;516    
                          ENDP

                  |L5.28|
                          DCD      CyclesPerUs
                  |L5.32|
                          DCD      0xe000e000

                          AREA ||i.RT568_FTTestSelection||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  RT568_FTTestSelection PROC
;;;157    
;;;158    RT568FT_TestStatus RT568_FTTestSelection(BleFT_TestCase testCase)
000000  b538              PUSH     {r3-r5,lr}
;;;159    {
000002  4604              MOV      r4,r0
;;;160        RT568FT_TestStatus status;
;;;161    
;;;162        /* Reset RT568 to do continuous FT Test in this demo code
;;;163         * If FT test would power-off and power-on before each test case then this command can be removed.
;;;164        */
;;;165        RT568_Reset();
000004  f7fffffe          BL       RT568_Reset
;;;166    
;;;167        // Start test
;;;168        switch(testCase)
000008  0023              MOVS     r3,r4
00000a  f7fffffe          BL       __ARM_common_switch8
00000e  0941              DCB      0x09,0x41
000010  060c141a          DCB      0x06,0x0c,0x14,0x1a
000014  20252a3c          DCB      0x20,0x25,0x2a,0x3c
000018  4100              DCB      0x41,0x00
;;;169        {
;;;170        case TX_2402_LDO_TEST:
;;;171            status = RT568_TxTest(LDO_MODE);
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       RT568_TxTest
000020  4604              MOV      r4,r0
;;;172            D_msg("[RT568_FT TX @2402MHz LDO Test]\n");
000022  a01c              ADR      r0,|L6.148|
;;;173            break;
000024  e004              B        |L6.48|
;;;174    
;;;175        case TX_2402_DCDC_TEST:
;;;176            status = RT568_TxTest(DCDC_MODE);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       RT568_TxTest
00002c  4604              MOV      r4,r0
;;;177            D_msg("[RT568_FT TX @2402MHz DCDC Test]\n");
00002e  a022              ADR      r0,|L6.184|
                  |L6.48|
000030  f7fffffe          BL       __2printf
000034  e025              B        |L6.130|
;;;178            break;
;;;179    
;;;180        case RX_LDO_TEST:
;;;181            status = RT568_RxTest(LDO_MODE);
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       RT568_RxTest
00003c  4604              MOV      r4,r0
;;;182            D_msg("[RT568_FT RX LDO Test]\n");
00003e  a027              ADR      r0,|L6.220|
;;;183            break;
000040  e7f6              B        |L6.48|
;;;184    
;;;185        case RX_DCDC_TEST:
;;;186            status = RT568_RxTest(DCDC_MODE);
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       RT568_RxTest
000048  4604              MOV      r4,r0
;;;187            D_msg("[RT568_FT RX DCDC Test]\n");
00004a  a02a              ADR      r0,|L6.244|
;;;188            break;
00004c  e7f0              B        |L6.48|
;;;189    
;;;190        case SLEEP_TEST:
;;;191            status = RT568_SleepTest();
00004e  f7fffffe          BL       RT568_SleepTest
000052  4604              MOV      r4,r0
;;;192            D_msg("[RT568_FT Sleep Test]\n");
000054  a02e              ADR      r0,|L6.272|
;;;193            break;
000056  e7eb              B        |L6.48|
;;;194    
;;;195        case DEEPSLEEP_TEST:
;;;196            status = RT568_DeepSleepTest();
000058  f7fffffe          BL       RT568_DeepSleepTest
00005c  4604              MOV      r4,r0
;;;197            D_msg("[RT568_FT Deep Sleep Test]\n");
00005e  a032              ADR      r0,|L6.296|
;;;198            break;
000060  e7e6              B        |L6.48|
;;;199    
;;;200        case RSSI_TEST:
;;;201        {
;;;202            RssiTestResult rssiResult;
;;;203            status = RT568_RssiTest(SLT_RSSITEST_BASE_VALUE,SLT_RSSITEST_RANGE,SLT_RSSITEST_WAITINGTIME_MAX_MS, &rssiResult);
000062  201f              MOVS     r0,#0x1f
000064  466b              MOV      r3,sp
000066  22c8              MOVS     r2,#0xc8
000068  2114              MOVS     r1,#0x14
00006a  43c0              MVNS     r0,r0
00006c  f7fffffe          BL       RT568_RssiTest
000070  4604              MOV      r4,r0
;;;204            D_msg("[RT568_FT RSSI Test] DUT RX: %d; Dongle RX: %d\n",rssiResult.dut_rssiValue, rssiResult.dongle_rssiValue);
000072  4668              MOV      r0,sp
000074  2200              MOVS     r2,#0
000076  2101              MOVS     r1,#1
000078  5682              LDRSB    r2,[r0,r2]
00007a  5641              LDRSB    r1,[r0,r1]
00007c  a031              ADR      r0,|L6.324|
00007e  f7fffffe          BL       __2printf
                  |L6.130|
;;;205        }
;;;206        break;
;;;207    
;;;208        case CLK_16M_TEST:
;;;209            status = RT568_16MCLK_Test();
;;;210            D_msg("[RT568_FT 16MHz CLK Test]\n");
;;;211            break;
;;;212    
;;;213        default:
;;;214            return RT568_TEST_ERROR_CMD;
;;;215        }
;;;216    
;;;217        if(status != RT568_TEST_OK)
;;;218        {
;;;219            return status;
000082  4620              MOV      r0,r4
;;;220        }
;;;221    
;;;222        return RT568_TEST_OK;
;;;223    }
000084  bd38              POP      {r3-r5,pc}
000086  f7fffffe          BL       RT568_16MCLK_Test
00008a  4604              MOV      r4,r0                 ;209
00008c  a039              ADR      r0,|L6.372|
00008e  e7cf              B        |L6.48|
000090  2001              MOVS     r0,#1                 ;214
000092  bd38              POP      {r3-r5,pc}
;;;224    
                          ENDP

                  |L6.148|
000094  5b525435          DCB      "[RT568_FT TX @2402MHz LDO Test]\n",0
000098  36385f46
00009c  54205458
0000a0  20403234
0000a4  30324d48
0000a8  7a204c44
0000ac  4f205465
0000b0  73745d0a
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L6.184|
0000b8  5b525435          DCB      "[RT568_FT TX @2402MHz DCDC Test]\n",0
0000bc  36385f46
0000c0  54205458
0000c4  20403234
0000c8  30324d48
0000cc  7a204443
0000d0  44432054
0000d4  6573745d
0000d8  0a00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L6.220|
0000dc  5b525435          DCB      "[RT568_FT RX LDO Test]\n",0
0000e0  36385f46
0000e4  54205258
0000e8  204c444f
0000ec  20546573
0000f0  745d0a00
                  |L6.244|
0000f4  5b525435          DCB      "[RT568_FT RX DCDC Test]\n",0
0000f8  36385f46
0000fc  54205258
000100  20444344
000104  43205465
000108  73745d0a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L6.272|
000110  5b525435          DCB      "[RT568_FT Sleep Test]\n",0
000114  36385f46
000118  5420536c
00011c  65657020
000120  54657374
000124  5d0a00  
000127  00                DCB      0
                  |L6.296|
000128  5b525435          DCB      "[RT568_FT Deep Sleep Test]\n",0
00012c  36385f46
000130  54204465
000134  65702053
000138  6c656570
00013c  20546573
000140  745d0a00
                  |L6.324|
000144  5b525435          DCB      "[RT568_FT RSSI Test] DUT RX: %d; Dongle RX: %d\n",0
000148  36385f46
00014c  54205253
000150  53492054
000154  6573745d
000158  20445554
00015c  2052583a
000160  2025643b
000164  20446f6e
000168  676c6520
00016c  52583a20
000170  25640a00
                  |L6.372|
000174  5b525435          DCB      "[RT568_FT 16MHz CLK Test]\n",0
000178  36385f46
00017c  54203136
000180  4d487a20
000184  434c4b20
000188  54657374
00018c  5d0a00  
00018f  00                DCB      0

                          AREA ||i.RT568_Reset||, CODE, READONLY, ALIGN=2

                  RT568_Reset PROC
;;;71     
;;;72     void RT568_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74         // Disable MCU GPIO interrupt
;;;75         MCU_GpioIntDisable();
000002  f7fffffe          BL       MCU_GpioIntDisable
;;;76     
;;;77         // Disable PDMA and SPI module
;;;78         PDMA_Close(PDMA);
000006  480e              LDR      r0,|L7.64|
000008  f7fffffe          BL       PDMA_Close
;;;79         SPI_Close(SPI0);
00000c  480d              LDR      r0,|L7.68|
00000e  f7fffffe          BL       SPI_Close
;;;80     
;;;81         //Reset pins to GPIO
;;;82         // MCU SPI pin initialization
;;;83     #if ((_BOARD_SELECTION_ == _BOARD_NUVOTON_M031SE_) || (_BOARD_SELECTION_ == _BOARD_NUVOTON_M032SE3AE_) || (_BOARD_SELECTION_ == _BOARD_NUVOTON_M487JIDAE_B3_) || (_BOARD_SELECTION_ == _BOARD_NUVOTON_M031TD2AE_QFN33_))
;;;84         // Setup SPI0 multi-function pins //
;;;85         // PA.3 is SPI0_SS,   PA.2 is SPI0_CLK,
;;;86         // PA.1 is SPI0_MISO, PA.0 is SPI0_MOSI
;;;87         SYS->GPA_MFPL = (SYS->GPA_MFPL & ~(SYS_GPA_MFPL_PA3MFP_Msk |
000012  2001              MOVS     r0,#1
000014  0780              LSLS     r0,r0,#30
000016  6b01              LDR      r1,[r0,#0x30]
000018  0c09              LSRS     r1,r1,#16
00001a  0409              LSLS     r1,r1,#16
00001c  6301              STR      r1,[r0,#0x30]
;;;88                                            SYS_GPA_MFPL_PA2MFP_Msk |
;;;89                                            SYS_GPA_MFPL_PA1MFP_Msk |
;;;90                                            SYS_GPA_MFPL_PA0MFP_Msk)) |
;;;91                         (SYS_GPA_MFPL_PA3MFP_GPIO |
;;;92                          SYS_GPA_MFPL_PA2MFP_GPIO |
;;;93                          SYS_GPA_MFPL_PA1MFP_GPIO |
;;;94                          SYS_GPA_MFPL_PA0MFP_GPIO);
;;;95     #elif (_BOARD_SELECTION_ == _BOARD_NUVOTON_M031_SIP_)    //SIP
;;;96     
;;;97         SYS->GPD_MFPL = (SYS->GPD_MFPL & ~(SYS_GPD_MFPL_PD3MFP_Msk |
;;;98                                            SYS_GPD_MFPL_PD2MFP_Msk |
;;;99                                            SYS_GPD_MFPL_PD1MFP_Msk |
;;;100                                           SYS_GPD_MFPL_PD0MFP_Msk)) |
;;;101                        (SYS_GPD_MFPL_PD3MFP_GPIO   |
;;;102                         SYS_GPD_MFPL_PD2MFP_GPIO  |
;;;103                         SYS_GPD_MFPL_PD1MFP_GPIO |
;;;104                         SYS_GPD_MFPL_PD0MFP_GPIO);
;;;105    
;;;106    #endif  //_BOARD_SELECTION_      
;;;107        CLK_SysTickDelay(10000);
00001e  480a              LDR      r0,|L7.72|
000020  f7fffffe          BL       CLK_SysTickDelay
;;;108    
;;;109        // Initialize Gpio reset pin
;;;110        MCU_GpioResetInit();
000024  f7fffffe          BL       MCU_GpioResetInit
;;;111    
;;;112        // Do Gpio Reset
;;;113        MCU_GpioReset();
000028  f7fffffe          BL       MCU_GpioReset
;;;114        CLK_SysTickDelay(50000);     //HW 32K clk count 15ms, but need to consider 32K deviation & MCU HIRC deviation
00002c  4807              LDR      r0,|L7.76|
00002e  f7fffffe          BL       CLK_SysTickDelay
;;;115    
;;;116        // SPI IO remapping
;;;117        RF_SpiIoMapping();
000032  f7fffffe          BL       RF_SpiIoMapping
;;;118    
;;;119        // Enable MCU GPIO interrupt
;;;120        MCU_GpioIntEnable();
000036  f7fffffe          BL       MCU_GpioIntEnable
;;;121    
;;;122        // initial SPI PDMA
;;;123        SPI_PDMA_Init();
00003a  f7fffffe          BL       SPI_PDMA_Init
;;;124    }
00003e  bd10              POP      {r4,pc}
;;;125    
                          ENDP

                  |L7.64|
                          DCD      0x40008000
                  |L7.68|
                          DCD      0x40061000
                  |L7.72|
                          DCD      0x00002710
                  |L7.76|
                          DCD      0x0000c350

                          AREA ||i.UART02_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART02_IRQHandler PROC
;;;249    
;;;250    void UART02_IRQHandler(void) __irq
000000  b5f8              PUSH     {r3-r7,lr}
;;;251    {
;;;252        static uint8_t uartBuffer[218];
;;;253        static uint8_t index = 0u;
;;;254    
;;;255        uint8_t volatile uartReceiveByte;
;;;256    
;;;257        if (UART_GET_INT_FLAG(UART0,UART_INTSTS_RDAINT_Msk))
000002  4d0e              LDR      r5,|L8.60|
000004  69e8              LDR      r0,[r5,#0x1c]
;;;258        {
;;;259            /* Get all the input characters */
;;;260            while(UART_IS_RX_READY(UART0))
;;;261            {
;;;262                /* Get the character from UART Buffer */
;;;263                uartReceiveByte = UART_READ(UART0);
;;;264                uartBuffer[index] = uartReceiveByte;
000006  4c0e              LDR      r4,|L8.64|
000008  05c0              LSLS     r0,r0,#23             ;257
00000a  d515              BPL      |L8.56|
00000c  4e0d              LDR      r6,|L8.68|
00000e  2700              MOVS     r7,#0
                  |L8.16|
000010  69e8              LDR      r0,[r5,#0x1c]         ;260
000012  07c0              LSLS     r0,r0,#31             ;260
000014  d010              BEQ      |L8.56|
000016  6828              LDR      r0,[r5,#0]            ;263
000018  4669              MOV      r1,sp                 ;263
00001a  7008              STRB     r0,[r1,#0]            ;263
00001c  7808              LDRB     r0,[r1,#0]
00001e  7861              LDRB     r1,[r4,#1]  ; index
000020  5470              STRB     r0,[r6,r1]
;;;265    
;;;266                if(BLEDemo_UartRxDataHandler(uartBuffer,index) == 0)
000022  4808              LDR      r0,|L8.68|
000024  f7fffffe          BL       BLEDemo_UartRxDataHandler
000028  2800              CMP      r0,#0
00002a  d003              BEQ      |L8.52|
;;;267                {
;;;268                    index = 0;
;;;269                }
;;;270                else
;;;271                {
;;;272                    index++;
00002c  7860              LDRB     r0,[r4,#1]  ; index
00002e  1c40              ADDS     r0,r0,#1
000030  7060              STRB     r0,[r4,#1]
000032  e7ed              B        |L8.16|
                  |L8.52|
000034  7067              STRB     r7,[r4,#1]            ;268
000036  e7eb              B        |L8.16|
                  |L8.56|
;;;273                }
;;;274            }
;;;275        }
;;;276    }
000038  bdf8              POP      {r3-r7,pc}
;;;277    
                          ENDP

00003a  0000              DCW      0x0000
                  |L8.60|
                          DCD      0x40070000
                  |L8.64|
                          DCD      ||.data||
                  |L8.68|
                          DCD      ||.bss||

                          AREA ||i.UART13_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART13_IRQHandler PROC
;;;278    
;;;279    void UART13_IRQHandler(void) __irq
000000  b5f8              PUSH     {r3-r7,lr}
;;;280    {
;;;281        static uint8_t uartBuffer[218];
;;;282        static uint8_t index = 0u;
;;;283    
;;;284        uint8_t volatile uartReceiveByte;
;;;285    
;;;286        if (UART_GET_INT_FLAG(UART1,UART_INTSTS_RDAINT_Msk))
000002  4d0f              LDR      r5,|L9.64|
000004  69e8              LDR      r0,[r5,#0x1c]
;;;287        {
;;;288            /* Get all the input characters */
;;;289            while(UART_IS_RX_READY(UART1))
;;;290            {
;;;291                /* Get the character from UART Buffer */
;;;292                uartReceiveByte = UART_READ(UART1);
;;;293                uartBuffer[index] = uartReceiveByte;
000006  4e0f              LDR      r6,|L9.68|
000008  4c0f              LDR      r4,|L9.72|
00000a  05c0              LSLS     r0,r0,#23             ;286
00000c  d516              BPL      |L9.60|
00000e  2700              MOVS     r7,#0                 ;280
                  |L9.16|
000010  69e8              LDR      r0,[r5,#0x1c]         ;289
000012  07c0              LSLS     r0,r0,#31             ;289
000014  d012              BEQ      |L9.60|
000016  6828              LDR      r0,[r5,#0]            ;292
000018  4669              MOV      r1,sp                 ;292
00001a  7008              STRB     r0,[r1,#0]            ;292
00001c  7808              LDRB     r0,[r1,#0]
00001e  78a1              LDRB     r1,[r4,#2]  ; index
;;;294    
;;;295                if(uartBuffer[index] == '\r' || uartBuffer[index] == '\n')
000020  280d              CMP      r0,#0xd
000022  5470              STRB     r0,[r6,r1]            ;293
000024  d004              BEQ      |L9.48|
000026  280a              CMP      r0,#0xa
000028  d002              BEQ      |L9.48|
00002a  1c49              ADDS     r1,r1,#1
;;;296                {
;;;297                    dongleMessgae_Handler(uartBuffer,index,NULL);
;;;298                    index = 0;
;;;299                }
;;;300                else
;;;301                {
;;;302                    index++;
00002c  70a1              STRB     r1,[r4,#2]
00002e  e7ef              B        |L9.16|
                  |L9.48|
000030  2200              MOVS     r2,#0                 ;297
000032  4804              LDR      r0,|L9.68|
000034  f7fffffe          BL       dongleMessgae_Handler
000038  70a7              STRB     r7,[r4,#2]            ;298
00003a  e7e9              B        |L9.16|
                  |L9.60|
;;;303                }
;;;304            }
;;;305        }
;;;306    }
00003c  bdf8              POP      {r3-r7,pc}
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      0x40071000
                  |L9.68|
                          DCD      ||.bss||+0xda
                  |L9.72|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  uartBuffer
                          %        218
                  |symbol_number.37|
                          %        218

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2b3d3d3d          DCB      "+======================================================"
000004  3d3d3d3d
000008  3d3d3d3d
00000c  3d3d3d3d
000010  3d3d3d3d
000014  3d3d3d3d
000018  3d3d3d3d
00001c  3d3d3d3d
000020  3d3d3d3d
000024  3d3d3d3d
000028  3d3d3d3d
00002c  3d3d3d3d
000030  3d3d3d3d
000034  3d3d3d  
000037  3d3d3d3d          DCB      "==============+\n",0
00003b  3d3d3d3d
00003f  3d3d3d3d
000043  3d3d2b0a
000047  00      

                          AREA ||.data||, DATA, ALIGN=0

                  appSystemRequest
000000  01                DCB      0x01
                  index
000001  00                DCB      0x00
                  |symbol_number.39|
000002  00                DCB      0x00
                  bleFtTestCase
000003  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L65.16|
00000e  461d              MOV      r5,r3
                  |L65.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\user.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_user_c_363cd79c____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_user_c_363cd79c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_user_c_363cd79c____REVSH|
#line 402
|__asm___6_user_c_363cd79c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
